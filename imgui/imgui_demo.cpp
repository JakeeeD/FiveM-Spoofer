// dear imgui, v1.83 WIP
// (demo code)

// Help:
// - Read FAQ at http://dearimgui.org/faq
// - Newcomers, read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.
// Read imgui.cpp for more details, documentation and comments.
// Get the latest version at https://github.com/ocornut/imgui

// Message to the person tempted to delete this file when integrating Dear ImGui into their codebase:
// Do NOT remove this file from your project! Think again! It is the most useful reference code that you and other
// coders will want to refer to and call. Have the ImGui::ShowDemoWindow() function wired in an always-available
// debug menu of your game/app! Removing this file from your project is hindering access to documentation for everyone
// in your team, likely leading you to poorer usage of the library.
// Everything in this file will be stripped out by the linker if you don't call ImGui::ShowDemoWindow().
// If you want to link core Dear ImGui in your shipped builds but want a thorough guarantee that the demo will not be
// linked, you can setup your imconfig.h with #define IMGUI_DISABLE_DEMO_WINDOWS and those functions will be empty.
// In another situation, whenever you have Dear ImGui available you probably want this to be available for reference.
// Thank you,
// -Your beloved friend, imgui_demo.cpp (which you won't delete)

// Message to beginner C/C++ programmers about the meaning of the 'static' keyword:
// In this demo code, we frequently use 'static' variables inside functions. A static variable persists across calls,
// so it is essentially like a global variable but declared inside the scope of the function. We do this as a way to
// gather code and data in the same place, to make the demo source code faster to read, faster to write, and smaller
// in size. It also happens to be a convenient way of storing simple UI related information as long as your function
// doesn't need to be reentrant or used in multiple threads. This might be a pattern you will want to use in your code,
// but most of the real data you would be editing is likely going to be stored outside your functions.

// The Demo code in this file is designed to be easy to copy-and-paste into your application!
// Because of this:
// - We never omit the ImGui:: prefix when calling functions, even though most code here is in the same namespace.
// - We try to declare static variables in the local scope, as close as possible to the code using them.
// - We never use any of the helpers/facilities used internally by Dear ImGui, unless available in the public API.
// - We never use maths operators on ImVec2/ImVec4. For our other sources files we use them, and they are provided
//   by imgui_internal.h using the IMGUI_DEFINE_MATH_OPERATORS define. For your own sources file they are optional
//   and require you either enable those, either provide your own via IM_VEC2_CLASS_EXTRA in imconfig.h.
//   Because we can't assume anything about your support of maths operators, we cannot use them in imgui_demo.cpp.

// Navigating this file:
// - In Visual Studio IDE: CTRL+comma ("Edit.NavigateTo") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
// - With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.

/*

Index of this file:

// [SECTION] Forward Declarations, Helpers
// [SECTION] Demo Window / ShowDemoWindow()
// - sub section: ShowDemoWindowWidgets()
// - sub section: ShowDemoWindowLayout()
// - sub section: ShowDemoWindowPopups()
// - sub section: ShowDemoWindowTables()
// - sub section: ShowDemoWindowMisc()
// [SECTION] About Window / ShowAboutWindow()
// [SECTION] Style Editor / ShowStyleEditor()
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
// [SECTION] Example App: Simple overlay / ShowExampleAppSimpleOverlay()
// [SECTION] Example App: Fullscreen window / ShowExampleAppFullscreen()
// [SECTION] Example App: Manipulating window titles / ShowExampleAppWindowTitles()
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
// [SECTION] Example App: Docking, DockSpace / ShowExampleAppDockSpace()
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DISABLE

// System includes
#include <ctype.h>          // toupper
#include <limits.h>         // INT_MIN, INT_MAX
#include <math.h>           // sqrtf, powf, cosf, sinf, floorf, ceilf
#include <stdio.h>          // vsnprintf, sscanf, printf
#include <stdlib.h>         // NULL, malloc, free, atoi
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>         // intptr_t
#else
#include <stdint.h>         // intptr_t
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#pragma warning (disable: 26451)    // [Static Analyzer] Arithmetic overflow : Using operator 'xxx' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator 'xxx' to avoid overflow(io.2).
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#if __has_warning("-Wunknown-warning-option")
#pragma clang diagnostic ignored "-Wunknown-warning-option"         // warning: unknown warning group 'xxx'                     // not all warnings are known by all Clang versions and they tend to be rename-happy.. so ignoring warnings triggers new warnings on some configuration. Great!
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"                // warning: unknown warning group 'xxx'
#pragma clang diagnostic ignored "-Wold-style-cast"                 // warning: use of old-style cast                           // yes, they are more terse.
#pragma clang diagnostic ignored "-Wdeprecated-declarations"        // warning: 'xx' is deprecated: The POSIX name for this..   // for strdup used in demo code (so user can copy & paste the code)
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"       // warning: cast to 'void *' from smaller integer type
#pragma clang diagnostic ignored "-Wformat-security"                // warning: format string is not a string literal
#pragma clang diagnostic ignored "-Wexit-time-destructors"          // warning: declaration requires an exit-time destructor    // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wunused-macros"                  // warning: macro is not used                               // we define snprintf/vsnprintf on Windows so they are available, but not always used.
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning: zero as null pointer constant                   // some standard header variations use #define NULL 0
#pragma clang diagnostic ignored "-Wdouble-promotion"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#pragma clang diagnostic ignored "-Wreserved-id-macro"              // warning: macro name is a reserved identifier
#pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"  // warning: implicit conversion from 'xxx' to 'float' may lose precision
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                  // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"      // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat-security"          // warning: format string is not a string literal (potentially insecure)
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wmisleading-indentation"   // [__GNUC__ >= 6] warning: this 'if' clause does not guard this statement      // GCC 6.0+ only. See #883 on GitHub.
#endif

// Play it nice with Windows users (Update: May 2018, Notepad now supports Unix-style carriage returns!)
#ifdef _WIN32
#define IM_NEWLINE  "\r\n"
#else
#define IM_NEWLINE  "\n"
#endif

// Helpers
#if defined(_MSC_VER) && !defined(snprintf)
#define snprintf    _snprintf
#endif
#if defined(_MSC_VER) && !defined(vsnprintf)
#define vsnprintf   _vsnprintf
#endif

// Format specifiers, printing 64-bit hasn't been decently standardized...
// In a real application you should be using PRId64 and PRIu64 from <inttypes.h> (non-windows) and on Windows define them yourself.
#ifdef _MSC_VER
#define IM_PRId64   "I64d"
#define IM_PRIu64   "I64u"
#else
#define IM_PRId64   "lld"
#define IM_PRIu64   "llu"
#endif

// Helpers macros
// We normally try to not use many helpers in imgui_demo.cpp in order to make code easier to copy and paste,
// but making an exception here as those are largely simplifying code...
// In other imgui sources we can use nicer internal functions from imgui_internal.h (ImMin/ImMax) but not in the demo.
#define IM_MIN(A, B)            (((A) < (B)) ? (A) : (B))
#define IM_MAX(A, B)            (((A) >= (B)) ? (A) : (B))
#define IM_CLAMP(V, MN, MX)     ((V) < (MN) ? (MN) : (V) > (MX) ? (MX) : (V))

// Enforce cdecl calling convention for functions called by the standard library, in case compilation settings changed the default to e.g. __vectorcall
#ifndef IMGUI_CDECL
#ifdef _MSC_VER
#define IMGUI_CDECL __cdecl
#else
#define IMGUI_CDECL
#endif
#endif

//-----------------------------------------------------------------------------
// [SECTION] Forward Declarations, Helpers
//-----------------------------------------------------------------------------

#if !defined(IMGUI_DISABLE_DEMO_WINDOWS)

// Forward Declarations
static void ShowExampleAppDockSpace(bool* p_open);
static void ShowExampleAppDocuments(bool* p_open);
static void ShowExampleAppMainMenuBar();
static void ShowExampleAppConsole(bool* p_open);
static void ShowExampleAppLog(bool* p_open);
static void ShowExampleAppLayout(bool* p_open);
static void ShowExampleAppPropertyEditor(bool* p_open);
static void ShowExampleAppLongText(bool* p_open);
static void ShowExampleAppAutoResize(bool* p_open);
static void ShowExampleAppConstrainedResize(bool* p_open);
static void ShowExampleAppSimpleOverlay(bool* p_open);
static void ShowExampleAppFullscreen(bool* p_open);
static void ShowExampleAppWindowTitles(bool* p_open);
static void ShowExampleAppCustomRendering(bool* p_open);
static void ShowExampleMenuFile();

// Helper to display a little (?) mark which shows a tooltip when hovered.
// In your own code you may want to display an actual icon if you are using a merged icon fonts (see docs/FONTS.md)
static void HelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

static void ShowDockingDisabledMessage()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::Text("ERROR: Docking is not enabled! See Demo > Configuration.");
    ImGui::Text("Set io.ConfigFlags |= ImGuiConfigFlags_DockingEnable in your code, or ");
    ImGui::SameLine(0.0f, 0.0f);
    if (ImGui::SmallButton("click here"))
        io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;
}

// Helper to display basic user controls.
void ImGui::ShowUserGuide()
{
    ImGuiIO& io = ImGui::GetIO();
    ImGui::BulletText("Double-click on title bar to collapse window.");
    ImGui::BulletText(
        "Click and drag on lower corner to resize window\n"
        "(double-click to auto fit window to its contents).");
    ImGui::BulletText("CTRL+Click on a slider or drag box to input value as text.");
    ImGui::BulletText("TAB/SHIFT+TAB to cycle through keyboard editable fields.");
    if (io.FontAllowUserScaling)
        ImGui::BulletText("CTRL+Mouse Wheel to zoom window contents.");
    ImGui::BulletText("While inputing text:\n");
    ImGui::Indent();
    ImGui::BulletText("CTRL+Left/Right to word jump.");
    ImGui::BulletText("CTRL+A or double-click to select all.");
    ImGui::BulletText("CTRL+X/C/V to use clipboard cut/copy/paste.");
    ImGui::BulletText("CTRL+Z,CTRL+Y to undo/redo.");
    ImGui::BulletText("ESCAPE to revert.");
    ImGui::BulletText("You can apply arithmetic operators +,*,/ on numerical values.\nUse +- to subtract.");
    ImGui::Unindent();
    ImGui::BulletText("With keyboard navigation enabled:");
    ImGui::Indent();
    ImGui::BulletText("Arrow keys to navigate.");
    ImGui::BulletText("Space to activate a widget.");
    ImGui::BulletText("Return to input text into a widget.");
    ImGui::BulletText("Escape to deactivate a widget, close popup, exit child window.");
    ImGui::BulletText("Alt to jump to the menu layer of a window.");
    ImGui::BulletText("CTRL+Tab to select a window.");
    ImGui::Unindent();
}

//-----------------------------------------------------------------------------
// [SECTION] Demo Window / ShowDemoWindow()
//-----------------------------------------------------------------------------
// - ShowDemoWindowWidgets()
// - ShowDemoWindowLayout()
// - ShowDemoWindowPopups()
// - ShowDemoWindowTables()
// - ShowDemoWindowColumns()
// - ShowDemoWindowMisc()
//-----------------------------------------------------------------------------

// We split the contents of the big ShowDemoWindow() function into smaller functions
// (because the link time of very large functions grow non-linearly)
static void ShowDemoWindowWidgets();
static void ShowDemoWindowLayout();
static void ShowDemoWindowPopups();
static void ShowDemoWindowTables();
static void ShowDemoWindowColumns();
static void ShowDemoWindowMisc();

// Demonstrate most Dear ImGui features (this is big function!)
// You may execute this function to experiment with the UI and understand what it does.
// You may then search for keywords in the code when you are interested by a specific feature.
void ImGui::ShowDemoWindow(bool* p_open)
{
    // Exceptionally add an extra assert here for people confused about initial Dear ImGui setup
    // Most ImGui functions would normally just crash if the context is missing.
    IM_ASSERT(ImGui::GetCurrentContext() != NULL && "Missing dear imgui context. Refer to examples app!");

    // Examples Apps (accessible from the "Examples" menu)
    static bool show_app_main_menu_bar = false;
    static bool show_app_dockspace = false;
    static bool show_app_documents = false;

    static bool show_app_console = false;
    static bool show_app_log = false;
    static bool show_app_layout = false;
    static bool show_app_property_editor = false;
    static bool show_app_long_text = false;
    static bool show_app_auto_resize = false;
    static bool show_app_constrained_resize = false;
    static bool show_app_simple_overlay = false;
    static bool show_app_fullscreen = false;
    static bool show_app_window_titles = false;
    static bool show_app_custom_rendering = false;

    if (show_app_main_menu_bar)       ShowExampleAppMainMenuBar();
    if (show_app_dockspace)           ShowExampleAppDockSpace(&show_app_dockspace);     // Process the Docking app first, as explicit DockSpace() nodes needs to be submitted early (read comments near the DockSpace function)
    if (show_app_documents)           ShowExampleAppDocuments(&show_app_documents);     // Process the Document app next, as it may also use a DockSpace()

    if (show_app_console)             ShowExampleAppConsole(&show_app_console);
    if (show_app_log)                 ShowExampleAppLog(&show_app_log);
    if (show_app_layout)              ShowExampleAppLayout(&show_app_layout);
    if (show_app_property_editor)     ShowExampleAppPropertyEditor(&show_app_property_editor);
    if (show_app_long_text)           ShowExampleAppLongText(&show_app_long_text);
    if (show_app_auto_resize)         ShowExampleAppAutoResize(&show_app_auto_resize);
    if (show_app_constrained_resize)  ShowExampleAppConstrainedResize(&show_app_constrained_resize);
    if (show_app_simple_overlay)      ShowExampleAppSimpleOverlay(&show_app_simple_overlay);
    if (show_app_fullscreen)          ShowExampleAppFullscreen(&show_app_fullscreen);
    if (show_app_window_titles)       ShowExampleAppWindowTitles(&show_app_window_titles);
    if (show_app_custom_rendering)    ShowExampleAppCustomRendering(&show_app_custom_rendering);

    // Dear ImGui Apps (accessible from the "Tools" menu)
    static bool show_app_metrics = false;
    static bool show_app_style_editor = false;
    static bool show_app_about = false;

    if (show_app_metrics)       { ImGui::ShowMetricsWindow(&show_app_metrics); }
    if (show_app_about)         { ImGui::ShowAboutWindow(&show_app_about); }
    if (show_app_style_editor)
    {
        ImGui::Begin("Dear ImGui Style Editor", &show_app_style_editor);
        ImGui::ShowStyleEditor();
        ImGui::End();
    }

    // Demonstrate the various window flags. Typically you would just use the default!
    static bool no_titlebar = false;
    static bool no_scrollbar = false;
    static bool no_menu = false;
    static bool no_move = false;
    static bool no_resize = false;
    static bool no_collapse = false;
    static bool no_close = false;
    static bool no_nav = false;
    static bool no_background = false;
    static bool no_bring_to_front = false;
    static bool no_docking = false;

    ImGuiWindowFlags window_flags = 0;
    if (no_titlebar)        window_flags |= ImGuiWindowFlags_NoTitleBar;
    if (no_scrollbar)       window_flags |= ImGuiWindowFlags_NoScrollbar;
    if (!no_menu)           window_flags |= ImGuiWindowFlags_MenuBar;
    if (no_move)            window_flags |= ImGuiWindowFlags_NoMove;
    if (no_resize)          window_flags |= ImGuiWindowFlags_NoResize;
    if (no_collapse)        window_flags |= ImGuiWindowFlags_NoCollapse;
    if (no_nav)             window_flags |= ImGuiWindowFlags_NoNav;
    if (no_background)      window_flags |= ImGuiWindowFlags_NoBackground;
    if (no_bring_to_front)  window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus;
    if (no_docking)         window_flags |= ImGuiWindowFlags_NoDocking;
    if (no_close)           p_open = NULL; // Don't pass our bool* to Begin

    // We specify a default position/size in case there's no data in the .ini file.
    // We only do it to make the demo applications a little more welcoming, but typically this isn't required.
    const ImGuiViewport* main_viewport = ImGui::GetMainViewport();
    ImGui::SetNextWindowPos(ImVec2(main_viewport->WorkPos.x + 650, main_viewport->WorkPos.y + 20), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(550, 680), ImGuiCond_FirstUseEver);

    // Main body of the Demo window starts here.
    if (!ImGui::Begin("Dear ImGui Demo", p_open, window_flags))
    {
        // Early out if the window is collapsed, as an optimization.
        ImGui::End();
        return;
    }

    // Most "big" widgets share a common width settings by default. See 'Demo->Layout->Widgets Width' for details.

    // e.g. Use 2/3 of the space for widgets and 1/3 for labels (right align)
    //ImGui::PushItemWidth(-ImGui::GetWindowWidth() * 0.35f);

    // e.g. Leave a fixed amount of width for labels (by passing a negative value), the rest goes to widgets.
    ImGui::PushItemWidth(ImGui::GetFontSize() * -12);

    // Menu Bar
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Menu"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Examples"))
        {
            ImGui::MenuItem("Main menu bar", NULL, &show_app_main_menu_bar);
            ImGui::MenuItem("Console", NULL, &show_app_console);
            ImGui::MenuItem("Log", NULL, &show_app_log);
            ImGui::MenuItem("Simple layout", NULL, &show_app_layout);
            ImGui::MenuItem("Property editor", NULL, &show_app_property_editor);
            ImGui::MenuItem("Long text display", NULL, &show_app_long_text);
            ImGui::MenuItem("Auto-resizing window", NULL, &show_app_auto_resize);
            ImGui::MenuItem("Constrained-resizing window", NULL, &show_app_constrained_resize);
            ImGui::MenuItem("Simple overlay", NULL, &show_app_simple_overlay);
            ImGui::MenuItem("Fullscreen window", NULL, &show_app_fullscreen);
            ImGui::MenuItem("Manipulating window titles", NULL, &show_app_window_titles);
            ImGui::MenuItem("Custom rendering", NULL, &show_app_custom_rendering);
            ImGui::MenuItem("Dockspace", NULL, &show_app_dockspace);
            ImGui::MenuItem("Documents", NULL, &show_app_documents);
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Tools"))
        {
            ImGui::MenuItem("Metrics/Debugger", NULL, &show_app_metrics);
            ImGui::MenuItem("Style Editor", NULL, &show_app_style_editor);
            ImGui::MenuItem("About Dear ImGui", NULL, &show_app_about);
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }

    ImGui::Text("dear imgui says hello. (%s)", IMGUI_VERSION);
    ImGui::Spacing();

    if (ImGui::CollapsingHeader("Help"))
    {
        ImGui::Text("ABOUT THIS DEMO:");
        ImGui::BulletText("Sections below are demonstrating many aspects of the library.");
        ImGui::BulletText("The \"Examples\" menu above leads to more demo contents.");
        ImGui::BulletText("The \"Tools\" menu above gives access to: About Box, Style Editor,\n"
                          "and Metrics/Debugger (general purpose Dear ImGui debugging tool).");
        ImGui::Separator();

        ImGui::Text("PROGRAMMER GUIDE:");
        ImGui::BulletText("See the ShowDemoWindow() code in imgui_demo.cpp. <- you are here!");
        ImGui::BulletText("See comments in imgui.cpp.");
        ImGui::BulletText("See example applications in the examples/ folder.");
        ImGui::BulletText("Read the FAQ at http://www.dearimgui.org/faq/");
        ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableKeyboard' for keyboard controls.");
        ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableGamepad' for gamepad controls.");
        ImGui::Separator();

        ImGui::Text("USER GUIDE:");
        ImGui::ShowUserGuide();
    }

    if (ImGui::CollapsingHeader("Configuration"))
    {
        ImGuiIO& io = ImGui::GetIO();

        if (ImGui::TreeNode("Configuration##2"))
        {
            ImGui::CheckboxFlags("io.ConfigFlags: NavEnableKeyboard",    &io.ConfigFlags, ImGuiConfigFlags_NavEnableKeyboard);
            ImGui::SameLine(); HelpMarker("Enable keyboard controls.");
            ImGui::CheckboxFlags("io.ConfigFlags: NavEnableGamepad",     &io.ConfigFlags, ImGuiConfigFlags_NavEnableGamepad);
            ImGui::SameLine(); HelpMarker("Enable gamepad controls. Require backend to set io.BackendFlags |= ImGuiBackendFlags_HasGamepad.\n\nRead instructions in imgui.cpp for details.");
            ImGui::CheckboxFlags("io.ConfigFlags: NavEnableSetMousePos", &io.ConfigFlags, ImGuiConfigFlags_NavEnableSetMousePos);
            ImGui::SameLine(); HelpMarker("Instruct navigation to move the mouse cursor. See comment for ImGuiConfigFlags_NavEnableSetMousePos.");
            ImGui::CheckboxFlags("io.ConfigFlags: NoMouse",              &io.ConfigFlags, ImGuiConfigFlags_NoMouse);
            if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)
            {
                // The "NoMouse" option can get us stuck with a disabled mouse! Let's provide an alternative way to fix it:
                if (fmodf((float)ImGui::GetTime(), 0.40f) < 0.20f)
                {
                    ImGui::SameLine();
                    ImGui::Text("<<PRESS SPACE TO DISABLE>>");
                }
                if (ImGui::IsKeyPressed(ImGui::GetKeyIndex(ImGuiKey_Space)))
                    io.ConfigFlags &= ~ImGuiConfigFlags_NoMouse;
            }
            ImGui::CheckboxFlags("io.ConfigFlags: NoMouseCursorChange", &io.ConfigFlags, ImGuiConfigFlags_NoMouseCursorChange);
            ImGui::SameLine(); HelpMarker("Instruct backend to not alter mouse cursor shape and visibility.");

            ImGui::CheckboxFlags("io.ConfigFlags: DockingEnable", &io.ConfigFlags, ImGuiConfigFlags_DockingEnable);
            ImGui::SameLine(); HelpMarker("Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking.\n\nDrag from window menu button (upper-left button) to undock an entire node (all windows).");
            if (io.ConfigFlags & ImGuiConfigFlags_DockingEnable)
            {
                ImGui::Indent();
                ImGui::Checkbox("io.ConfigDockingNoSplit", &io.ConfigDockingNoSplit);
                ImGui::SameLine(); HelpMarker("Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.");
                ImGui::Checkbox("io.ConfigDockingAlwaysTabBar", &io.ConfigDockingAlwaysTabBar);
                ImGui::SameLine(); HelpMarker("Create a docking node and tab-bar on single floating windows.");
                ImGui::Checkbox("io.ConfigDockingTransparentPayload", &io.ConfigDockingTransparentPayload);
                ImGui::SameLine(); HelpMarker("Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.");
                ImGui::Unindent();
            }

            ImGui::CheckboxFlags("io.ConfigFlags: ViewportsEnable", &io.ConfigFlags, ImGuiConfigFlags_ViewportsEnable);
            ImGui::SameLine(); HelpMarker("[beta] Enable beta multi-viewports support. See ImGuiPlatformIO for details.");
            if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)
            {
                ImGui::Indent();
                ImGui::Checkbox("io.ConfigViewportsNoAutoMerge", &io.ConfigViewportsNoAutoMerge);
                ImGui::SameLine(); HelpMarker("Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it.");
                ImGui::Checkbox("io.ConfigViewportsNoTaskBarIcon", &io.ConfigViewportsNoTaskBarIcon);
                ImGui::SameLine(); HelpMarker("Toggling this at runtime is normally unsupported (most platform backends won't refresh the task bar icon state right away).");
                ImGui::Checkbox("io.ConfigViewportsNoDecoration", &io.ConfigViewportsNoDecoration);
                ImGui::SameLine(); HelpMarker("Toggling this at runtime is normally unsupported (most platform backends won't refresh the decoration right away).");
                ImGui::Checkbox("io.ConfigViewportsNoDefaultParent", &io.ConfigViewportsNoDefaultParent);
                ImGui::SameLine(); HelpMarker("Toggling this at runtime is normally unsupported (most platform backends won't refresh the parenting right away).");
                ImGui::Unindent();
            }

            ImGui::Checkbox("io.ConfigInputTextCursorBlink", &io.ConfigInputTextCursorBlink);
            ImGui::SameLine(); HelpMarker("Enable blinking cursor (optional as some users consider it to be distracting)");
            ImGui::Checkbox("io.ConfigDragClickToInputText", &io.ConfigDragClickToInputText);
            ImGui::SameLine(); HelpMarker("Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving).");
            ImGui::Checkbox("io.ConfigWindowsResizeFromEdges", &io.ConfigWindowsResizeFromEdges);
            ImGui::SameLine(); HelpMarker("Enable resizing of windows from their edges and from the lower-left corner.\nThis requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback.");
            ImGui::Checkbox("io.ConfigWindowsMoveFromTitleBarOnly", &io.ConfigWindowsMoveFromTitleBarOnly);
            ImGui::Checkbox("io.MouseDrawCursor", &io.MouseDrawCursor);
            ImGui::SameLine(); HelpMarker("Instruct Dear ImGui to render a mouse cursor itself. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\n\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).");
            ImGui::Text("Also see Style->Rendering for rendering options.");
            ImGui::TreePop();
            ImGui::Separator();
        }

        if (ImGui::TreeNode("Backend Flags"))
        {
            HelpMarker(
                "Those flags are set by the backends (imgui_impl_xxx files) to specify their capabilities.\n"
                "Here we expose then as read-only fields to avoid breaking interactions with your backend.");

            // Make a local copy to avoid modifying actual backend flags.
            ImGuiBackendFlags backend_flags = io.BackendFlags;
            ImGui::CheckboxFlags("io.BackendFlags: HasGamepad",             &backend_flags, ImGuiBackendFlags_HasGamepad);
            ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors",        &backend_flags, ImGuiBackendFlags_HasMouseCursors);
            ImGui::CheckboxFlags("io.BackendFlags: HasSetMousePos",         &backend_flags, ImGuiBackendFlags_HasSetMousePos);
            ImGui::CheckboxFlags("io.BackendFlags: PlatformHasViewports",   &backend_flags, ImGuiBackendFlags_PlatformHasViewports);
            ImGui::CheckboxFlags("io.BackendFlags: HasMouseHoveredViewport",&backend_flags, ImGuiBackendFlags_HasMouseHoveredViewport);
            ImGui::CheckboxFlags("io.BackendFlags: RendererHasVtxOffset",   &backend_flags, ImGuiBackendFlags_RendererHasVtxOffset);
            ImGui::CheckboxFlags("io.BackendFlags: RendererHasViewports",   &backend_flags, ImGuiBackendFlags_RendererHasViewports);
            ImGui::TreePop();
            ImGui::Separator();
        }

        if (ImGui::TreeNode("Style"))
        {
            HelpMarker("The same contents can be accessed in 'Tools->Style Editor' or by calling the ShowStyleEditor() function.");
            ImGui::ShowStyleEditor();
            ImGui::TreePop();
            ImGui::Separator();
        }

        if (ImGui::TreeNode("Capture/Logging"))
        {
            HelpMarker(
                "The logging API redirects all text output so you can easily capture the content of "
                "a window or a block. Tree nodes can be automatically expanded.\n"
                "Try opening any of the contents below in this window and then click one of the \"Log To\" button.");
            ImGui::LogButtons();

            HelpMarker("You can also call ImGui::LogText() to output directly to the log without a visual output.");
            if (ImGui::Button("Copy \"Hello, world!\" to clipboard"))
            {
                ImGui::LogToClipboard();
                ImGui::LogText("Hello, world!");
                ImGui::LogFinish();
            }
            ImGui::TreePop();
        }
    }

    if (ImGui::CollapsingHeader("Window options"))
    {
        if (ImGui::BeginTable("split", 3))
        {
            ImGui::TableNextColumn(); ImGui::Checkbox("No titlebar", &no_titlebar);
            ImGui::TableNextColumn(); ImGui::Checkbox("No scrollbar", &no_scrollbar);
            ImGui::TableNextColumn(); ImGui::Checkbox("No menu", &no_menu);
            ImGui::TableNextColumn(); ImGui::Checkbox("No move", &no_move);
            ImGui::TableNextColumn(); ImGui::Checkbox("No resize", &no_resize);
            ImGui::TableNextColumn(); ImGui::Checkbox("No collapse", &no_collapse);
            ImGui::TableNextColumn(); ImGui::Checkbox("No close", &no_close);
            ImGui::TableNextColumn(); ImGui::Checkbox("No nav", &no_nav);
            ImGui::TableNextColumn(); ImGui::Checkbox("No background", &no_background);
            ImGui::TableNextColumn(); ImGui::Checkbox("No bring to front", &no_bring_to_front);
            ImGui::TableNextColumn(); ImGui::Checkbox("No docking", &no_docking);
            ImGui::EndTable();
        }
    }

    // All demo contents
    ShowDemoWindowWidgets();
    ShowDemoWindowLayout();
    ShowDemoWindowPopups();
    ShowDemoWindowTables();
    ShowDemoWindowMisc();

    // End of ShowDemoWindow()
    ImGui::PopItemWidth();
    ImGui::End();
}

static void ShowDemoWindowWidgets()
{
    if (!ImGui::CollapsingHeader("Widgets"))
        return;

    if (ImGui::TreeNode("Basic"))
    {
        static int clicked = 0;
        if (ImGui::Button("Button"))
            clicked++;
        if (clicked & 1)
        {
            ImGui::SameLine();
            ImGui::Text("Thanks for clicking me!");
        }

        static bool check = true;
        ImGui::Checkbox("checkbox", &check);

        static int e = 0;
        ImGui::RadioButton("radio a", &e, 0); ImGui::SameLine();
        ImGui::RadioButton("radio b", &e, 1); ImGui::SameLine();
        ImGui::RadioButton("radio c", &e, 2);

        // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
        for (int i = 0; i < 7; i++)
        {
            if (i > 0)
                ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.6f));
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.7f));
            ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.8f, 0.8f));
            ImGui::Button("Click");
            ImGui::PopStyleColor(3);
            ImGui::PopID();
        }

        // Use AlignTextToFramePadding() to align text baseline to the baseline of framed widgets elements
        // (otherwise a Text+SameLine+Button sequence will have the text a little too high by default!)
        // See 'Demo->Layout->Text Baseline Alignment' for details.
        ImGui::AlignTextToFramePadding();
        ImGui::Text("Hold to repeat:");
        ImGui::SameLine();

        // Arrow buttons with Repeater
        static int counter = 0;
        float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
        ImGui::PushButtonRepeat(true);
        if (ImGui::ArrowButton("##left", ImGuiDir_Left)) { counter--; }
        ImGui::SameLine(0.0f, spacing);
        if (ImGui::ArrowButton("##right", ImGuiDir_Right)) { counter++; }
        ImGui::PopButtonRepeat();
        ImGui::SameLine();
        ImGui::Text("%d", counter);

        ImGui::Text("Hover over me");
        if (ImGui::IsItemHovered())
            ImGui::SetTooltip("I am a tooltip");

        ImGui::SameLine();
        ImGui::Text("- or me");
        if (ImGui::IsItemHovered())
        {
            ImGui::BeginTooltip();
            ImGui::Text("I am a fancy tooltip");
            static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
            ImGui::PlotLines("Curve", arr, IM_ARRAYSIZE(arr));
            ImGui::EndTooltip();
        }

        ImGui::Separator();

        ImGui::LabelText("label", "Value");

        {
            // Using the _simplified_ one-liner Combo() api here
            // See "Combo" section for examples of how to use the more flexible BeginCombo()/EndCombo() api.
            const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIIIIII", "JJJJ", "KKKKKKK" };
            static int item_current = 0;
            ImGui::Combo("combo", &item_current, items, IM_ARRAYSIZE(items));
            ImGui::SameLine(); HelpMarker(
                "Using the simplified one-liner Combo API here.\nRefer to the \"Combo\" section below for an explanation of how to use the more flexible and general BeginCombo/EndCombo API.");
        }

        {
            // To wire InputText() with std::string or any other custom string type,
            // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
            static char str0[128] = "Hello, world!";
            ImGui::InputText("input text", str0, IM_ARRAYSIZE(str0));
            ImGui::SameLine(); HelpMarker(
                "USER:\n"
                "Hold SHIFT or use mouse to select text.\n"
                "CTRL+Left/Right to word jump.\n"
                "CTRL+A or double-click to select all.\n"
                "CTRL+X,CTRL+C,CTRL+V clipboard.\n"
                "CTRL+Z,CTRL+Y undo/redo.\n"
                "ESCAPE to revert.\n\n"
                "PROGRAMMER:\n"
                "You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() "
                "to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example (this is not demonstrated "
                "in imgui_demo.cpp).");

            static char str1[128] = "";
            ImGui::InputTextWithHint("input text (w/ hint)", "enter text here", str1, IM_ARRAYSIZE(str1));

            static int i0 = 123;
            ImGui::InputInt("input int", &i0);
            ImGui::SameLine(); HelpMarker(
                "You can apply arithmetic operators +,*,/ on numerical values.\n"
                "  e.g. [ 100 ], input \'*2\', result becomes [ 200 ]\n"
                "Use +- to subtract.");

            static float f0 = 0.001f;
            ImGui::InputFloat("input float", &f0, 0.01f, 1.0f, "%.3f");

            static double d0 = 999999.00000001;
            ImGui::InputDouble("input double", &d0, 0.01f, 1.0f, "%.8f");

            static float f1 = 1.e10f;
            ImGui::InputFloat("input scientific", &f1, 0.0f, 0.0f, "%e");
            ImGui::SameLine(); HelpMarker(
                "You can input value using the scientific notation,\n"
                "  e.g. \"1e+8\" becomes \"100000000\".");

            static float vec4a[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
            ImGui::InputFloat3("input float3", vec4a);
        }

        {
            static int i1 = 50, i2 = 42;
            ImGui::DragInt("drag int", &i1, 1);
            ImGui::SameLine(); HelpMarker(
                "Click and drag to edit value.\n"
                "Hold SHIFT/ALT for faster/slower edit.\n"
                "Double-click or CTRL+click to input value.");

            ImGui::DragInt("drag int 0..100", &i2, 1, 0, 100, "%d%%", ImGuiSliderFlags_AlwaysClamp);

            static float f1 = 1.00f, f2 = 0.0067f;
            ImGui::DragFloat("drag float", &f1, 0.005f);
            ImGui::DragFloat("drag small float", &f2, 0.0001f, 0.0f, 0.0f, "%.06f ns");
        }

        {
            static int i1 = 0;
            ImGui::SliderInt("slider int", &i1, -1, 3);
            ImGui::SameLine(); HelpMarker("CTRL+click to input value.");

            static float f1 = 0.123f, f2 = 0.0f;
            ImGui::SliderFloat("slider float", &f1, 0.0f, 1.0f, "ratio = %.3f");
            ImGui::SliderFloat("slider float (log)", &f2, -10.0f, 10.0f, "%.4f", ImGuiSliderFlags_Logarithmic);

            static float angle = 0.0f;
            ImGui::SliderAngle("slider angle", &angle);

            // Using the format string to display a name instead of an integer.
            // Here we completely omit '%d' from the format string, so it'll only display a name.
            // This technique can also be used with DragInt().
            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUNT };
            static int elem = Element_Fire;
            const char* elems_names[Element_COUNT] = { "Fire", "Earth", "Air", "Water" };
            const char* elem_name = (elem >= 0 && elem < Element_COUNT) ? elems_names[elem] : "Unknown";
            ImGui::SliderInt("slider enum", &elem, 0, Element_COUNT - 1, elem_name);
            ImGui::SameLine(); HelpMarker("Using the format string parameter to display a name instead of the underlying integer.");
        }

        {
            static float col1[3] = { 1.0f, 0.0f, 0.2f };
            static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::ColorEdit3("color 1", col1);
            ImGui::SameLine(); HelpMarker(
                "Click on the color square to open a color picker.\n"
                "Click and hold to use drag and drop.\n"
                "Right-click on the color square to show options.\n"
                "CTRL+click on individual component to input value.\n");

            ImGui::ColorEdit4("color 2", col2);
        }

        {
            // Using the _simplified_ one-liner ListBox() api here
            // See "List boxes" section for examples of how to use the more flexible BeginListBox()/EndListBox() api.
            const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pineapple", "Strawberry", "Watermelon" };
            static int item_current = 1;
            ImGui::ListBox("listbox", &item_current, items, IM_ARRAYSIZE(items), 4);
            ImGui::SameLine(); HelpMarker(
                "Using the simplified one-liner ListBox API here.\nRefer to the \"List boxes\" section below for an explanation of how to use the more flexible and general BeginListBox/EndListBox API.");
        }

        ImGui::TreePop();
    }

    // Testing ImGuiOnceUponAFrame helper.
    //static ImGuiOnceUponAFrame once;
    //for (int i = 0; i < 5; i++)
    //    if (once)
    //        ImGui::Text("This will be displayed only once.");

    if (ImGui::TreeNode("Trees"))
    {
        if (ImGui::TreeNode("Basic trees"))
        {
            for (int i = 0; i < 5; i++)
            {
                // Use SetNextItemOpen() so set the default state of a node to be open. We could
                // also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!
                if (i == 0)
                    ImGui::SetNextItemOpen(true, ImGuiCond_Once);

                if (ImGui::TreeNode((void*)(intptr_t)i, "Child %d", i))
                {
                    ImGui::Text("blah blah");
                    ImGui::SameLine();
                    if (ImGui::SmallButton("button")) {}
                    ImGui::TreePop();
                }
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Advanced, with Selectable nodes"))
        {
            HelpMarker(
                "This is a more typical looking tree with selectable nodes.\n"
                "Click to select, CTRL+Click to toggle, click on arrows or double-click to open.");
            static ImGuiTreeNodeFlags base_flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_SpanAvailWidth;
            static bool align_label_with_current_x_position = false;
            static bool test_drag_and_drop = false;
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnArrow",       &base_flags, ImGuiTreeNodeFlags_OpenOnArrow);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnDoubleClick", &base_flags, ImGuiTreeNodeFlags_OpenOnDoubleClick);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAvailWidth",    &base_flags, ImGuiTreeNodeFlags_SpanAvailWidth); ImGui::SameLine(); HelpMarker("Extend hit area to all available width instead of allowing more items to be laid out after the node.");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanFullWidth",     &base_flags, ImGuiTreeNodeFlags_SpanFullWidth);
            ImGui::Checkbox("Align label with current X position", &align_label_with_current_x_position);
            ImGui::Checkbox("Test tree node as drag source", &test_drag_and_drop);
            ImGui::Text("Hello!");
            if (align_label_with_current_x_position)
                ImGui::Unindent(ImGui::GetTreeNodeToLabelSpacing());

            // 'selection_mask' is dumb representation of what may be user-side selection state.
            //  You may retain selection state inside or outside your objects in whatever format you see fit.
            // 'node_clicked' is temporary storage of what node we have clicked to process selection at the end
            /// of the loop. May be a pointer to your own node type, etc.
            static int selection_mask = (1 << 2);
            int node_clicked = -1;
            for (int i = 0; i < 6; i++)
            {
                // Disable the default "open on single-click behavior" + set Selected flag according to our selection.
                ImGuiTreeNodeFlags node_flags = base_flags;
                const bool is_selected = (selection_mask & (1 << i)) != 0;
                if (is_selected)
                    node_flags |= ImGuiTreeNodeFlags_Selected;
                if (i < 3)
                {
                    // Items 0..2 are Tree Node
                    bool node_open = ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Node %d", i);
                    if (ImGui::IsItemClicked())
                        node_clicked = i;
                    if (test_drag_and_drop && ImGui::BeginDragDropSource())
                    {
                        ImGui::SetDragDropPayload("_TREENODE", NULL, 0);
                        ImGui::Text("This is a drag and drop source");
                        ImGui::EndDragDropSource();
                    }
                    if (node_open)
                    {
                        ImGui::BulletText("Blah blah\nBlah Blah");
                        ImGui::TreePop();
                    }
                }
                else
                {
                    // Items 3..5 are Tree Leaves
                    // The only reason we use TreeNode at all is to allow selection of the leaf. Otherwise we can
                    // use BulletText() or advance the cursor by GetTreeNodeToLabelSpacing() and call Text().
                    node_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen; // ImGuiTreeNodeFlags_Bullet
                    ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Leaf %d", i);
                    if (ImGui::IsItemClicked())
                        node_clicked = i;
                    if (test_drag_and_drop && ImGui::BeginDragDropSource())
                    {
                        ImGui::SetDragDropPayload("_TREENODE", NULL, 0);
                        ImGui::Text("This is a drag and drop source");
                        ImGui::EndDragDropSource();
                    }
                }
            }
            if (node_clicked != -1)
            {
                // Update selection state
                // (process outside of tree loop to avoid visual inconsistencies during the clicking frame)
                if (ImGui::GetIO().KeyCtrl)
                    selection_mask ^= (1 << node_clicked);          // CTRL+click to toggle
                else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, may want to preserve selection when clicking on item that is part of the selection
                    selection_mask = (1 << node_clicked);           // Click to single-select
            }
            if (align_label_with_current_x_position)
                ImGui::Indent(ImGui::GetTreeNodeToLabelSpacing());
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Collapsing Headers"))
    {
        static bool closable_group = true;
        ImGui::Checkbox("Show 2nd header", &closable_group);
        if (ImGui::CollapsingHeader("Header", ImGuiTreeNodeFlags_None))
        {
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
            for (int i = 0; i < 5; i++)
                ImGui::Text("Some content %d", i);
        }
        if (ImGui::CollapsingHeader("Header with a close button", &closable_group))
        {
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
            for (int i = 0; i < 5; i++)
                ImGui::Text("More content %d", i);
        }
        /*
        if (ImGui::CollapsingHeader("Header with a bullet", ImGuiTreeNodeFlags_Bullet))
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
        */
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Bullets"))
    {
        ImGui::BulletText("Bullet point 1");
        ImGui::BulletText("Bullet point 2\nOn multiple lines");
        if (ImGui::TreeNode("Tree node"))
        {
            ImGui::BulletText("Another bullet point");
            ImGui::TreePop();
        }
        ImGui::Bullet(); ImGui::Text("Bullet point 3 (two calls)");
        ImGui::Bullet(); ImGui::SmallButton("Button");
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Text"))
    {
        if (ImGui::TreeNode("Colorful Text"))
        {
            // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
            ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "Pink");
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Yellow");
            ImGui::TextDisabled("Disabled");
            ImGui::SameLine(); HelpMarker("The TextDisabled color is stored in ImGuiStyle.");
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Word Wrapping"))
        {
            // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
            ImGui::TextWrapped(
                "This text should automatically wrap on the edge of the window. The current implementation "
                "for text wrapping follows simple rules suitable for English and possibly other languages.");
            ImGui::Spacing();

            static float wrap_width = 200.0f;
            ImGui::SliderFloat("Wrap width", &wrap_width, -20, 600, "%.0f");

            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            for (int n = 0; n < 2; n++)
            {
                ImGui::Text("Test paragraph %d:", n);
                ImVec2 pos = ImGui::GetCursorScreenPos();
                ImVec2 marker_min = ImVec2(pos.x + wrap_width, pos.y);
                ImVec2 marker_max = ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight());
                ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);
                if (n == 0)
                    ImGui::Text("The lazy dog is a good dog. This paragraph should fit within %.0f pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.", wrap_width);
                else
                    ImGui::Text("aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh");

                // Draw actual text bounding box, following by marker of our expected limit (should not overlap!)
                draw_list->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255, 255, 0, 255));
                draw_list->AddRectFilled(marker_min, marker_max, IM_COL32(255, 0, 255, 255));
                ImGui::PopTextWrapPos();
            }

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("UTF-8 Text"))
        {
            // UTF-8 test with Japanese characters
            // (Needs a suitable font? Try "Google Noto" or "Arial Unicode". See docs/FONTS.md for details.)
            // - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
            // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. in Visual Studio, you
            //   can save your source files as 'UTF-8 without signature').
            // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8
            //   CHARACTERS IN THIS SOURCE FILE. Instead we are encoding a few strings with hexadecimal constants.
            //   Don't do this in your application! Please use u8"text in any language" in your application!
            // Note that characters values are preserved even by InputText() if the font cannot be displayed,
            // so you can safely copy & paste garbled characters into another application.
            ImGui::TextWrapped(
                "CJK text will only appears if the font was loaded with the appropriate CJK character ranges. "
                "Call io.Fonts->AddFontFromFileTTF() manually to load extra character ranges. "
                "Read docs/FONTS.md for details.");
            ImGui::Text("Hiragana: \xe3\x81\x8b\xe3\x81\x8d\xe3\x81\x8f\xe3\x81\x91\xe3\x81\x93 (kakikukeko)"); // Normally we would use u8"blah blah" with the proper characters directly in the string.
            ImGui::Text("Kanjis: \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (nihongo)");
            static char buf[32] = "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e";
            //static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
            ImGui::InputText("UTF-8 input", buf, IM_ARRAYSIZE(buf));
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Images"))
    {
        ImGuiIO& io = ImGui::GetIO();
        ImGui::TextWrapped(
            "Below we are displaying the font texture (which is the only texture we have access to in this demo). "
            "Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. "
            "Hover the texture for a zoomed view!");

        // Below we are displaying the font texture because it is the only texture we have access to inside the demo!
        // Remember that ImTextureID is just storage for whatever you want it to be. It is essentially a value that
        // will be passed to the rendering backend via the ImDrawCmd structure.
        // If you use one of the default imgui_impl_XXXX.cpp rendering backend, they all have comments at the top
        // of their respective source file to specify what they expect to be stored in ImTextureID, for example:
        // - The imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer
        // - The imgui_impl_opengl3.cpp renderer expect a GLuint OpenGL texture identifier, etc.
        // More:
        // - If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers
        //   to ImGui::Image(), and gather width/height through your own functions, etc.
        // - You can use ShowMetricsWindow() to inspect the draw data that are being passed to your renderer,
        //   it will help you debug issues if you are confused about it.
        // - Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
        // - Read https://github.com/ocornut/imgui/blob/master/docs/FAQ.md
        // - Read https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
        ImTextureID my_tex_id = io.Fonts->TexID;
        float my_tex_w = (float)io.Fonts->TexWidth;
        float my_tex_h = (float)io.Fonts->TexHeight;
        {
            ImGui::Text("%.0fx%.0f", my_tex_w, my_tex_h);
            ImVec2 pos = ImGui::GetCursorScreenPos();
            ImVec2 uv_min = ImVec2(0.0f, 0.0f);                 // Top-left
            ImVec2 uv_max = ImVec2(1.0f, 1.0f);                 // Lower-right
            ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);   // No tint
            ImVec4 border_col = ImVec4(1.0f, 1.0f, 1.0f, 0.5f); // 50% opaque white
            ImGui::Image(my_tex_id, ImVec2(my_tex_w, my_tex_h), uv_min, uv_max, tint_col, border_col);
            if (ImGui::IsItemHovered())
            {
                ImGui::BeginTooltip();
                float region_sz = 32.0f;
                float region_x = io.MousePos.x - pos.x - region_sz * 0.5f;
                float region_y = io.MousePos.y - pos.y - region_sz * 0.5f;
                float zoom = 4.0f;
                if (region_x < 0.0f) { region_x = 0.0f; }
                else if (region_x > my_tex_w - region_sz) { region_x = my_tex_w - region_sz; }
                if (region_y < 0.0f) { region_y = 0.0f; }
                else if (region_y > my_tex_h - region_sz) { region_y = my_tex_h - region_sz; }
                ImGui::Text("Min: (%.2f, %.2f)", region_x, region_y);
                ImGui::Text("Max: (%.2f, %.2f)", region_x + region_sz, region_y + region_sz);
                ImVec2 uv0 = ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);
                ImVec2 uv1 = ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);
                ImGui::Image(my_tex_id, ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, tint_col, border_col);
                ImGui::EndTooltip();
            }
        }
        ImGui::TextWrapped("And now some textured buttons..");
        static int pressed_count = 0;
        for (int i = 0; i < 8; i++)
        {
            ImGui::PushID(i);
            int frame_padding = -1 + i;                             // -1 == uses default padding (style.FramePadding)
            ImVec2 size = ImVec2(32.0f, 32.0f);                     // Size of the image we want to make visible
            ImVec2 uv0 = ImVec2(0.0f, 0.0f);                        // UV coordinates for lower-left
            ImVec2 uv1 = ImVec2(32.0f / my_tex_w, 32.0f / my_tex_h);// UV coordinates for (32,32) in our texture
            ImVec4 bg_col = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);         // Black background
            ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);       // No tint
            if (ImGui::ImageButton(my_tex_id, size, uv0, uv1, frame_padding, bg_col, tint_col))
                pressed_count += 1;
            ImGui::PopID();
            ImGui::SameLine();
        }
        ImGui::NewLine();
        ImGui::Text("Pressed %d times.", pressed_count);
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Combo"))
    {
        // Expose flags as checkbox for the demo
        static ImGuiComboFlags flags = 0;
        ImGui::CheckboxFlags("ImGuiComboFlags_PopupAlignLeft", &flags, ImGuiComboFlags_PopupAlignLeft);
        ImGui::SameLine(); HelpMarker("Only makes a difference if the popup is larger than the combo");
        if (ImGui::CheckboxFlags("ImGuiComboFlags_NoArrowButton", &flags, ImGuiComboFlags_NoArrowButton))
            flags &= ~ImGuiComboFlags_NoPreview;     // Clear the other flag, as we cannot combine both
        if (ImGui::CheckboxFlags("ImGuiComboFlags_NoPreview", &flags, ImGuiComboFlags_NoPreview))
            flags &= ~ImGuiComboFlags_NoArrowButton; // Clear the other flag, as we cannot combine both

        // Using the generic BeginCombo() API, you have full control over how to display the combo contents.
        // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
        // stored in the object itself, etc.)
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
        static int item_current_idx = 0; // Here we store our selection data as an index.
        const char* combo_label = items[item_current_idx];  // Label to preview before opening the combo (technically it could be anything)
        if (ImGui::BeginCombo("combo 1", combo_label, flags))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_current_idx == n);
                if (ImGui::Selectable(items[n], is_selected))
                    item_current_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }

        // Simplified one-liner Combo() API, using values packed in a single constant string
        static int item_current_2 = 0;
        ImGui::Combo("combo 2 (one-liner)", &item_current_2, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

        // Simplified one-liner Combo() using an array of const char*
        static int item_current_3 = -1; // If the selection isn't within 0..count, Combo won't display a preview
        ImGui::Combo("combo 3 (array)", &item_current_3, items, IM_ARRAYSIZE(items));

        // Simplified one-liner Combo() using an accessor function
        struct Funcs { static bool ItemGetter(void* data, int n, const char** out_str) { *out_str = ((const char**)data)[n]; return true; } };
        static int item_current_4 = 0;
        ImGui::Combo("combo 4 (function)", &item_current_4, &Funcs::ItemGetter, items, IM_ARRAYSIZE(items));

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("List boxes"))
    {
        // Using the generic BeginListBox() API, you have full control over how to display the combo contents.
        // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
        // stored in the object itself, etc.)
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
        static int item_current_idx = 0; // Here we store our selection data as an index.
        if (ImGui::BeginListBox("listbox 1"))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_current_idx == n);
                if (ImGui::Selectable(items[n], is_selected))
                    item_current_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndListBox();
        }

        // Custom size: use all width, 5 items tall
        ImGui::Text("Full-width:");
        if (ImGui::BeginListBox("##listbox 2", ImVec2(-FLT_MIN, 5 * ImGui::GetTextLineHeightWithSpacing())))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_current_idx == n);
                if (ImGui::Selectable(items[n], is_selected))
                    item_current_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndListBox();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Selectables"))
    {
        // Selectable() has 2 overloads:
        // - The one taking "bool selected" as a read-only selection information.
        //   When Selectable() has been clicked it returns true and you can alter selection state accordingly.
        // - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
        // The earlier is more flexible, as in real application your selection may be stored in many different ways
        // and not necessarily inside a bool value (e.g. in flags within objects, as an external list, etc).
        if (ImGui::TreeNode("Basic"))
        {
            static bool selection[5] = { false, true, false, false, false };
            ImGui::Selectable("1. I am selectable", &selection[0]);
            ImGui::Selectable("2. I am selectable", &selection[1]);
            ImGui::Text("3. I am not selectable");
            ImGui::Selectable("4. I am selectable", &selection[3]);
            if (ImGui::Selectable("5. I am double clickable", selection[4], ImGuiSelectableFlags_AllowDoubleClick))
                if (ImGui::IsMouseDoubleClicked(0))
                    selection[4] = !selection[4];
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Selection State: Single Selection"))
        {
            static int selected = -1;
            for (int n = 0; n < 5; n++)
            {
                char buf[32];
                sprintf(buf, "Object %d", n);
                if (ImGui::Selectable(buf, selected == n))
                    selected = n;
            }
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Selection State: Multiple Selection"))
        {
            HelpMarker("Hold CTRL and click to select multiple items.");
            static bool selection[5] = { false, false, false, false, false };
            for (int n = 0; n < 5; n++)
            {
                char buf[32];
                sprintf(buf, "Object %d", n);
                if (ImGui::Selectable(buf, selection[n]))
                {
                    if (!ImGui::GetIO().KeyCtrl)    // Clear selection when CTRL is not held
                        memset(selection, 0, sizeof(selection));
                    selection[n] ^= 1;
                }
            }
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Rendering more text into the same line"))
        {
            // Using the Selectable() override that takes "bool* p_selected" parameter,
            // this function toggle your bool value automatically.
            static bool selected[3] = { false, false, false };
            ImGui::Selectable("main.c",    &selected[0]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");
            ImGui::Selectable("Hello.cpp", &selected[1]); ImGui::SameLine(300); ImGui::Text("12,345 bytes");
            ImGui::Selectable("Hello.h",   &selected[2]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("In columns"))
        {
            static bool selected[10] = {};

            if (ImGui::BeginTable("split1", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
            {
                for (int i = 0; i < 10; i++)
                {
                    char label[32];
                    sprintf(label, "Item %d", i);
                    ImGui::TableNextColumn();
                    ImGui::Selectable(label, &selected[i]); // FIXME-TABLE: Selection overlap
                }
                ImGui::EndTable();
            }
            ImGui::Separator();
            if (ImGui::BeginTable("split2", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
            {
                for (int i = 0; i < 10; i++)
                {
                    char label[32];
                    sprintf(label, "Item %d", i);
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    ImGui::Selectable(label, &selected[i], ImGuiSelectableFlags_SpanAllColumns);
                    ImGui::TableNextColumn();
                    ImGui::Text("Some other contents");
                    ImGui::TableNextColumn();
                    ImGui::Text("123456");
                }
                ImGui::EndTable();
            }
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Grid"))
        {
            static char selected[4][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };

            // Add in a bit of silly fun...
            const float time = (float)ImGui::GetTime();
            const bool winning_state = memchr(selected, 0, sizeof(selected)) == NULL; // If all cells are selected...
            if (winning_state)
                ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, ImVec2(0.5f + 0.5f * cosf(time * 2.0f), 0.5f + 0.5f * sinf(time * 3.0f)));

            for (int y = 0; y < 4; y++)
                for (int x = 0; x < 4; x++)
                {
                    if (x > 0)
                        ImGui::SameLine();
                    ImGui::PushID(y * 4 + x);
                    if (ImGui::Selectable("Sailor", selected[y][x] != 0, 0, ImVec2(50, 50)))
                    {
                        // Toggle clicked cell + toggle neighbors
                        selected[y][x] ^= 1;
                        if (x > 0) { selected[y][x - 1] ^= 1; }
                        if (x < 3) { selected[y][x + 1] ^= 1; }
                        if (y > 0) { selected[y - 1][x] ^= 1; }
                        if (y < 3) { selected[y + 1][x] ^= 1; }
                    }
                    ImGui::PopID();
                }

            if (winning_state)
                ImGui::PopStyleVar();
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Alignment"))
        {
            HelpMarker(
                "By default, Selectables uses style.SelectableTextAlign but it can be overridden on a per-item "
                "basis using PushStyleVar(). You'll probably want to always keep your default situation to "
                "left-align otherwise it becomes difficult to layout multiple items on a same line");
            static bool selected[3 * 3] = { true, false, true, false, true, false, true, false, true };
            for (int y = 0; y < 3; y++)
            {
                for (int x = 0; x < 3; x++)
                {
                    ImVec2 alignment = ImVec2((float)x / 2.0f, (float)y / 2.0f);
                    char name[32];
                    sprintf(name, "(%.1f,%.1f)", alignment.x, alignment.y);
                    if (x > 0) ImGui::SameLine();
                    ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, alignment);
                    ImGui::Selectable(name, &selected[3 * y + x], ImGuiSelectableFlags_None, ImVec2(80, 80));
                    ImGui::PopStyleVar();
                }
            }
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }

    // To wire InputText() with std::string or any other custom string type,
    // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
    if (ImGui::TreeNode("Text Input"))
    {
        if (ImGui::TreeNode("Multi-line Text Input"))
        {
            // Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize
            // and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.
            static char text[1024 * 16] =
                "/*\n"
                " The Pentium F00F bug, shorthand for F0 0F C7 C8,\n"
                " the hexadecimal encoding of one offending instruction,\n"
                " more formally, the invalid operand with locked CMPXCHG8B\n"
                " instruction bug, is a design flaw in the majority of\n"
                " Intel Pentium, Pentium MMX, and Pentium OverDrive\n"
                " processors (all in the P5 microarchitecture).\n"
                "*/\n\n"
                "label:\n"
                "\tlock cmpxchg8b eax\n";

            static ImGuiInputTextFlags flags = ImGuiInputTextFlags_AllowTabInput;
            HelpMarker("You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example. (This is not demonstrated in imgui_demo.cpp because we don't want to include <string> in here)");
            ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", &flags, ImGuiInputTextFlags_ReadOnly);
            ImGui::CheckboxFlags("ImGuiInputTextFlags_AllowTabInput", &flags, ImGuiInputTextFlags_AllowTabInput);
            ImGui::CheckboxFlags("ImGuiInputTextFlags_CtrlEnterForNewLine", &flags, ImGuiInputTextFlags_CtrlEnterForNewLine);
            ImGui::InputTextMultiline("##source", text, IM_ARRAYSIZE(text), ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16), flags);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Filtered Text Input"))
        {
            struct TextFilters
            {
                // Return 0 (pass) if the character is 'i' or 'm' or 'g' or 'u' or 'i'
                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar))
                        return 0;
                    return 1;
                }
            };

            static char buf1[64] = ""; ImGui::InputText("default",     buf1, 64);
            static char buf2[64] = ""; ImGui::InputText("decimal",     buf2, 64, ImGuiInputTextFlags_CharsDecimal);
            static char buf3[64] = ""; ImGui::InputText("hexadecimal", buf3, 64, ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase);
            static char buf4[64] = ""; ImGui::InputText("uppercase",   buf4, 64, ImGuiInputTextFlags_CharsUppercase);
            static char buf5[64] = ""; ImGui::InputText("no blank",    buf5, 64, ImGuiInputTextFlags_CharsNoBlank);
            static char buf6[64] = ""; ImGui::InputText("\"imgui\" letters", buf6, 64, ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterImGuiLetters);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Password Input"))
        {
            static char password[64] = "password123";
            ImGui::InputText("password", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);
            ImGui::SameLine(); HelpMarker("Display all characters as '*'.\nDisable clipboard cut and copy.\nDisable logging.\n");
            ImGui::InputTextWithHint("password (w/ hint)", "<password>", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);
            ImGui::InputText("password (clear)", password, IM_ARRAYSIZE(password));
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Completion, History, Edit Callbacks"))
        {
            struct Funcs
            {
                static int MyCallback(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventFlag == ImGuiInputTextFlags_CallbackCompletion)
                    {
                        data->InsertChars(data->CursorPos, "..");
                    }
                    else if (data->EventFlag == ImGuiInputTextFlags_CallbackHistory)
                    {
                        if (data->EventKey == ImGuiKey_UpArrow)
                        {
                            data->DeleteChars(0, data->BufTextLen);
                            data->InsertChars(0, "Pressed Up!");
                            data->SelectAll();
                        }
                        else if (data->EventKey == ImGuiKey_DownArrow)
                        {
                            data->DeleteChars(0, data->BufTextLen);
                            data->InsertChars(0, "Pressed Down!");
                            data->SelectAll();
                        }
                    }
                    else if (data->EventFlag == ImGuiInputTextFlags_CallbackEdit)
                    {
                        // Toggle casing of first character
                        char c = data->Buf[0];
                        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) data->Buf[0] ^= 32;
                        data->BufDirty = true;

                        // Increment a counter
                        int* p_int = (int*)data->UserData;
                        *p_int = *p_int + 1;
                    }
                    return 0;
                }
            };
            static char buf1[64];
            ImGui::InputText("Completion", buf1, 64, ImGuiInputTextFlags_CallbackCompletion, Funcs::MyCallback);
            ImGui::SameLine(); HelpMarker("Here we append \"..\" each time Tab is pressed. See 'Examples>Console' for a more meaningful demonstration of using this callback.");

            static char buf2[64];
            ImGui::InputText("History", buf2, 64, ImGuiInputTextFlags_CallbackHistory, Funcs::MyCallback);
            ImGui::SameLine(); HelpMarker("Here we replace and select text each time Up/Down are pressed. See 'Examples>Console' for a more meaningful demonstration of using this callback.");

            static char buf3[64];
            static int edit_count = 0;
            ImGui::InputText("Edit", buf3, 64, ImGuiInputTextFlags_CallbackEdit, Funcs::MyCallback, (void*)&edit_count);
            ImGui::SameLine(); HelpMarker("Here we toggle the casing of the first character on every edits + count edits.");
            ImGui::SameLine(); ImGui::Text("(%d)", edit_count);

            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Resize Callback"))
        {
            // To wire InputText() with std::string or any other custom string type,
            // you can use the ImGuiInputTextFlags_CallbackResize flag + create a custom ImGui::InputText() wrapper
            // using your preferred type. See misc/cpp/imgui_stdlib.h for an implementation of this using std::string.
            HelpMarker(
                "Using ImGuiInputTextFlags_CallbackResize to wire your custom string type to InputText().\n\n"
                "See misc/cpp/imgui_stdlib.h for an implementation of this for std::string.");
            struct Funcs
            {
                static int MyResizeCallback(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)
                    {
                        ImVector<char>* my_str = (ImVector<char>*)data->UserData;
                        IM_ASSERT(my_str->begin() == data->Buf);
                        my_str->resize(data->BufSize); // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1
                        data->Buf = my_str->begin();
                    }
                    return 0;
                }

                // Note: Because ImGui:: is a namespace you would typically add your own function into the namespace.
                // For example, you code may declare a function 'ImGui::InputText(const char* label, MyString* my_str)'
                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0)
                {
                    IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
                    return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);
                }
            };

            // For this demo we are using ImVector as a string container.
            // Note that because we need to store a terminating zero character, our size/capacity are 1 more
            // than usually reported by a typical string class.
            static ImVector<char> my_str;
            if (my_str.empty())
                my_str.push_back(0);
            Funcs::MyInputTextMultiline("##MyStr", &my_str, ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16));
            ImGui::Text("Data: %p\nSize: %d\nCapacity: %d", (void*)my_str.begin(), my_str.size(), my_str.capacity());
            ImGui::TreePop();
        }

        ImGui::TreePop();
    }

    // Tabs
    if (ImGui::TreeNode("Tabs"))
    {
        if (ImGui::TreeNode("Basic"))
        {
            ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_None;
            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                if (ImGui::BeginTabItem("Avocado"))
                {
                    ImGui::Text("This is the Avocado tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Broccoli"))
                {
                    ImGui::Text("This is the Broccoli tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Cucumber"))
                {
                    ImGui::Text("This is the Cucumber tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Advanced & Close Button"))
        {
            // Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).
            static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_Reorderable;
            ImGui::CheckboxFlags("ImGuiTabBarFlags_Reorderable", &tab_bar_flags, ImGuiTabBarFlags_Reorderable);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_AutoSelectNewTabs", &tab_bar_flags, ImGuiTabBarFlags_AutoSelectNewTabs);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", &tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_NoCloseWithMiddleMouseButton", &tab_bar_flags, ImGuiTabBarFlags_NoCloseWithMiddleMouseButton);
            if ((tab_bar_flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)
                tab_bar_flags |= ImGuiTabBarFlags_FittingPolicyDefault_;
            if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyResizeDown", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyResizeDown))
                tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyResizeDown);
            if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyScroll))
                tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);

            // Tab Bar
            const char* names[4] = { "Artichoke", "Beetroot", "Celery", "Daikon" };
            static bool opened[4] = { true, true, true, true }; // Persistent user state
            for (int n = 0; n < IM_ARRAYSIZE(opened); n++)
            {
                if (n > 0) { ImGui::SameLine(); }
                ImGui::Checkbox(names[n], &opened[n]);
            }

            // Passing a bool* to BeginTabItem() is similar to passing one to Begin():
            // the underlying bool will be set to false when the tab is closed.
            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                for (int n = 0; n < IM_ARRAYSIZE(opened); n++)
                    if (opened[n] && ImGui::BeginTabItem(names[n], &opened[n], ImGuiTabItemFlags_None))
                    {
                        ImGui::Text("This is the %s tab!", names[n]);
                        if (n & 1)
                            ImGui::Text("I am an odd tab.");
                        ImGui::EndTabItem();
                    }
                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("TabItemButton & Leading/Trailing flags"))
        {
            static ImVector<int> active_tabs;
            static int next_tab_id = 0;
            if (next_tab_id == 0) // Initialize with some default tabs
                for (int i = 0; i < 3; i++)
                    active_tabs.push_back(next_tab_id++);

            // TabItemButton() and Leading/Trailing flags are distinct features which we will demo together.
            // (It is possible to submit regular tabs with Leading/Trailing flags, or TabItemButton tabs without Leading/Trailing flags...
            // but they tend to make more sense together)
            static bool show_leading_button = true;
            static bool show_trailing_button = true;
            ImGui::Checkbox("Show Leading TabItemButton()", &show_leading_button);
            ImGui::Checkbox("Show Trailing TabItemButton()", &show_trailing_button);

            // Expose some other flags which are useful to showcase how they interact with Leading/Trailing tabs
            static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_AutoSelectNewTabs | ImGuiTabBarFlags_Reorderable | ImGuiTabBarFlags_FittingPolicyResizeDown;
            ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", &tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);
            if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyResizeDown", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyResizeDown))
                tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyResizeDown);
            if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", &tab_bar_flags, ImGuiTabBarFlags_FittingPolicyScroll))
                tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);

            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                // Demo a Leading TabItemButton(): click the "?" button to open a menu
                if (show_leading_button)
                    if (ImGui::TabItemButton("?", ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_NoTooltip))
                        ImGui::OpenPopup("MyHelpMenu");
                if (ImGui::BeginPopup("MyHelpMenu"))
                {
                    ImGui::Selectable("Hello!");
                    ImGui::EndPopup();
                }

                // Demo Trailing Tabs: click the "+" button to add a new tab (in your app you may want to use a font icon instead of the "+")
                // Note that we submit it before the regular tabs, but because of the ImGuiTabItemFlags_Trailing flag it will always appear at the end.
                if (show_trailing_button)
                    if (ImGui::TabItemButton("+", ImGuiTabItemFlags_Trailing | ImGuiTabItemFlags_NoTooltip))
                        active_tabs.push_back(next_tab_id++); // Add new tab

                // Submit our regular tabs
                for (int n = 0; n < active_tabs.Size; )
                {
                    bool open = true;
                    char name[16];
                    snprintf(name, IM_ARRAYSIZE(name), "%04d", active_tabs[n]);
                    if (ImGui::BeginTabItem(name, &open, ImGuiTabItemFlags_None))
                    {
                        ImGui::Text("This is the %s tab!", name);
                        ImGui::EndTabItem();
                    }

                    if (!open)
                        active_tabs.erase(active_tabs.Data + n);
                    else
                        n++;
                }

                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }

    // Plot/Graph widgets are not very good.
    // Consider writing your own, or using a third-party one, see:
    // - ImPlot https://github.com/epezent/implot
    // - others https://github.com/ocornut/imgui/wiki/Useful-Widgets
    if (ImGui::TreeNode("Plots Widgets"))
    {
        static bool animate = true;
        ImGui::Checkbox("Animate", &animate);

        static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
        ImGui::PlotLines("Frame Times", arr, IM_ARRAYSIZE(arr));

        // Fill an array of contiguous float values to plot
        // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float
        // and the sizeof() of your structure in the "stride" parameter.
        static float values[90] = {};
        static int values_offset = 0;
        static double refresh_time = 0.0;
        if (!animate || refresh_time == 0.0)
            refresh_time = ImGui::GetTime();
        while (refresh_time < ImGui::GetTime()) // Create data at fixed 60 Hz rate for the demo
        {
            static float phase = 0.0f;
            values[values_offset] = cosf(phase);
            values_offset = (values_offset + 1) % IM_ARRAYSIZE(values);
            phase += 0.10f * values_offset;
            refresh_time += 1.0f / 60.0f;
        }

        // Plots can display overlay texts
        // (in this example, we will display an average value)
        {
            float average = 0.0f;
            for (int n = 0; n < IM_ARRAYSIZE(values); n++)
                average += values[n];
            average /= (float)IM_ARRAYSIZE(values);
            char overlay[32];
            sprintf(overlay, "avg %f", average);
            ImGui::PlotLines("Lines", values, IM_ARRAYSIZE(values), values_offset, overlay, -1.0f, 1.0f, ImVec2(0, 80.0f));
        }
        ImGui::PlotHistogram("Histogram", arr, IM_ARRAYSIZE(arr), 0, NULL, 0.0f, 1.0f, ImVec2(0, 80.0f));

        // Use functions to generate output
        // FIXME: This is rather awkward because current plot API only pass in indices.
        // We probably want an API passing floats and user provide sample rate/count.
        struct Funcs
        {
            static float Sin(void*, int i) { return sinf(i * 0.1f); }
            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }
        };
        static int func_type = 0, display_count = 70;
        ImGui::Separator();
        ImGui::SetNextItemWidth(100);
        ImGui::Combo("func", &func_type, "Sin\0Saw\0");
        ImGui::SameLine();
        ImGui::SliderInt("Sample count", &display_count, 1, 400);
        float (*func)(void*, int) = (func_type == 0) ? Funcs::Sin : Funcs::Saw;
        ImGui::PlotLines("Lines", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));
        ImGui::PlotHistogram("Histogram", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));
        ImGui::Separator();

        // Animate a simple progress bar
        static float progress = 0.0f, progress_dir = 1.0f;
        if (animate)
        {
            progress += progress_dir * 0.4f * ImGui::GetIO().DeltaTime;
            if (progress >= +1.1f) { progress = +1.1f; progress_dir *= -1.0f; }
            if (progress <= -0.1f) { progress = -0.1f; progress_dir *= -1.0f; }
        }

        // Typically we would use ImVec2(-1.0f,0.0f) or ImVec2(-FLT_MIN,0.0f) to use all available width,
        // or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
        ImGui::ProgressBar(progress, ImVec2(0.0f, 0.0f));
        ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
        ImGui::Text("Progress Bar");

        float progress_saturated = IM_CLAMP(progress, 0.0f, 1.0f);
        char buf[32];
        sprintf(buf, "%d/%d", (int)(progress_saturated * 1753), 1753);
        ImGui::ProgressBar(progress, ImVec2(0.f, 0.f), buf);
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Color/Picker Widgets"))
    {
        static ImVec4 color = ImVec4(114.0f / 255.0f, 144.0f / 255.0f, 154.0f / 255.0f, 200.0f / 255.0f);

        static bool alpha_preview = true;
        static bool alpha_half_preview = false;
        static bool drag_and_drop = true;
        static bool options_menu = true;
        static bool hdr = false;
        ImGui::Checkbox("With Alpha Preview", &alpha_preview);
        ImGui::Checkbox("With Half Alpha Preview", &alpha_half_preview);
        ImGui::Checkbox("With Drag and Drop", &drag_and_drop);
        ImGui::Checkbox("With Options Menu", &options_menu); ImGui::SameLine(); HelpMarker("Right-click on the individual color widget to show options.");
        ImGui::Checkbox("With HDR", &hdr); ImGui::SameLine(); HelpMarker("Currently all this does is to lift the 0..1 limits on dragging widgets.");
        ImGuiColorEditFlags misc_flags = (hdr ? ImGuiColorEditFlags_HDR : 0) | (drag_and_drop ? 0 : ImGuiColorEditFlags_NoDragDrop) | (alpha_half_preview ? ImGuiColorEditFlags_AlphaPreviewHalf : (alpha_preview ? ImGuiColorEditFlags_AlphaPreview : 0)) | (options_menu ? 0 : ImGuiColorEditFlags_NoOptions);

        ImGui::Text("Color widget:");
        ImGui::SameLine(); HelpMarker(
            "Click on the color square to open a color picker.\n"
            "CTRL+click on individual component to input value.\n");
        ImGui::ColorEdit3("MyColor##1", (float*)&color, misc_flags);

        ImGui::Text("Color widget HSV with Alpha:");
        ImGui::ColorEdit4("MyColor##2", (float*)&color, ImGuiColorEditFlags_DisplayHSV | misc_flags);

        ImGui::Text("Color widget with Float Display:");
        ImGui::ColorEdit4("MyColor##2f", (float*)&color, ImGuiColorEditFlags_Float | misc_flags);

        ImGui::Text("Color button with Picker:");
        ImGui::SameLine(); HelpMarker(
            "With the ImGuiColorEditFlags_NoInputs flag you can hide all the slider/text inputs.\n"
            "With the ImGuiColorEditFlags_NoLabel flag you can pass a non-empty label which will only "
            "be used for the tooltip and picker popup.");
        ImGui::ColorEdit4("MyColor##3", (float*)&color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel | misc_flags);

        ImGui::Text("Color button with Custom Picker Popup:");

        // Generate a default palette. The palette will persist and can be edited.
        static bool saved_palette_init = true;
        static ImVec4 saved_palette[32] = {};
        if (saved_palette_init)
        {
            for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
            {
                ImGui::ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f,
                    saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);
                saved_palette[n].w = 1.0f; // Alpha
            }
            saved_palette_init = false;
        }

        static ImVec4 backup_color;
        bool open_popup = ImGui::ColorButton("MyColor##3b", color, misc_flags);
        ImGui::SameLine(0, ImGui::GetStyle().ItemInnerSpacing.x);
        open_popup |= ImGui::Button("Palette");
        if (open_popup)
        {
            ImGui::OpenPopup("mypicker");
            backup_color = color;
        }
        if (ImGui::BeginPopup("mypicker"))
        {
            ImGui::Text("MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!");
            ImGui::Separator();
            ImGui::ColorPicker4("##picker", (float*)&color, misc_flags | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoSmallPreview);
            ImGui::SameLine();

            ImGui::BeginGroup(); // Lock X position
            ImGui::Text("Current");
            ImGui::ColorButton("##current", color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40));
            ImGui::Text("Previous");
            if (ImGui::ColorButton("##previous", backup_color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40)))
                color = backup_color;
            ImGui::Separator();
            ImGui::Text("Palette");
            for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
            {
                ImGui::PushID(n);
                if ((n % 8) != 0)
                    ImGui::SameLine(0.0f, ImGui::GetStyle().ItemSpacing.y);

                ImGuiColorEditFlags palette_button_flags = ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_NoTooltip;
                if (ImGui::ColorButton("##palette", saved_palette[n], palette_button_flags, ImVec2(20, 20)))
                    color = ImVec4(saved_palette[n].x, saved_palette[n].y, saved_palette[n].z, color.w); // Preserve alpha!

                // Allow user to drop colors into each palette entry. Note that ColorButton() is already a
                // drag source by default, unless specifying the ImGuiColorEditFlags_NoDragDrop flag.
                if (ImGui::BeginDragDropTarget())
                {
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
                        memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
                        memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);
                    ImGui::EndDragDropTarget();
                }

                ImGui::PopID();
            }
            ImGui::EndGroup();
            ImGui::EndPopup();
        }

        ImGui::Text("Color button only:");
        static bool no_border = false;
        ImGui::Checkbox("ImGuiColorEditFlags_NoBorder", &no_border);
        ImGui::ColorButton("MyColor##3c", *(ImVec4*)&color, misc_flags | (no_border ? ImGuiColorEditFlags_NoBorder : 0), ImVec2(80, 80));

        ImGui::Text("Color picker:");
        static bool alpha = true;
        static bool alpha_bar = true;
        static bool side_preview = true;
        static bool ref_color = false;
        static ImVec4 ref_color_v(1.0f, 0.0f, 1.0f, 0.5f);
        static int display_mode = 0;
        static int picker_mode = 0;
        ImGui::Checkbox("With Alpha", &alpha);
        ImGui::Checkbox("With Alpha Bar", &alpha_bar);
        ImGui::Checkbox("With Side Preview", &side_preview);
        if (side_preview)
        {
            ImGui::SameLine();
            ImGui::Checkbox("With Ref Color", &ref_color);
            if (ref_color)
            {
                ImGui::SameLine();
                ImGui::ColorEdit4("##RefColor", &ref_color_v.x, ImGuiColorEditFlags_NoInputs | misc_flags);
            }
        }
        ImGui::Combo("Display Mode", &display_mode, "Auto/Current\0None\0RGB Only\0HSV Only\0Hex Only\0");
        ImGui::SameLine(); HelpMarker(
            "ColorEdit defaults to displaying RGB inputs if you don't specify a display mode, "
            "but the user can change it with a right-click.\n\nColorPicker defaults to displaying RGB+HSV+Hex "
            "if you don't specify a display mode.\n\nYou can change the defaults using SetColorEditOptions().");
        ImGui::Combo("Picker Mode", &picker_mode, "Auto/Current\0Hue bar + SV rect\0Hue wheel + SV triangle\0");
        ImGui::SameLine(); HelpMarker("User can right-click the picker to change mode.");
        ImGuiColorEditFlags flags = misc_flags;
        if (!alpha)            flags |= ImGuiColorEditFlags_NoAlpha;        // This is by default if you call ColorPicker3() instead of ColorPicker4()
        if (alpha_bar)         flags |= ImGuiColorEditFlags_AlphaBar;
        if (!side_preview)     flags |= ImGuiColorEditFlags_NoSidePreview;
        if (picker_mode == 1)  flags |= ImGuiColorEditFlags_PickerHueBar;
        if (picker_mode == 2)  flags |= ImGuiColorEditFlags_PickerHueWheel;
        if (display_mode == 1) flags |= ImGuiColorEditFlags_NoInputs;       // Disable all RGB/HSV/Hex displays
        if (display_mode == 2) flags |= ImGuiColorEditFlags_DisplayRGB;     // Override display mode
        if (display_mode == 3) flags |= ImGuiColorEditFlags_DisplayHSV;
        if (display_mode == 4) flags |= ImGuiColorEditFlags_DisplayHex;
        ImGui::ColorPicker4("MyColor##4", (float*)&color, flags, ref_color ? &ref_color_v.x : NULL);

        ImGui::Text("Set defaults in code:");
        ImGui::SameLine(); HelpMarker(
            "SetColorEditOptions() is designed to allow you to set boot-time default.\n"
            "We don't have Push/Pop functions because you can force options on a per-widget basis if needed,"
            "and the user can change non-forced ones with the options menu.\nWe don't have a getter to avoid"
            "encouraging you to persistently save values that aren't forward-compatible.");
        if (ImGui::Button("Default: Uint8 + HSV + Hue Bar"))
            ImGui::SetColorEditOptions(ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_PickerHueBar);
        if (ImGui::Button("Default: Float + HDR + Hue Wheel"))
            ImGui::SetColorEditOptions(ImGuiColorEditFlags_Float | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_PickerHueWheel);

        // HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)
        static ImVec4 color_hsv(0.23f, 1.0f, 1.0f, 1.0f); // Stored as HSV!
        ImGui::Spacing();
        ImGui::Text("HSV encoded colors");
        ImGui::SameLine(); HelpMarker(
            "By default, colors are given to ColorEdit and ColorPicker in RGB, but ImGuiColorEditFlags_InputHSV"
            "allows you to store colors as HSV and pass them to ColorEdit and ColorPicker as HSV. This comes with the"
            "added benefit that you can manipulate hue values with the picker even when saturation or value are zero.");
        ImGui::Text("Color widget with InputHSV:");
        ImGui::ColorEdit4("HSV shown as RGB##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);
        ImGui::ColorEdit4("HSV shown as HSV##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);
        ImGui::DragFloat4("Raw HSV values", (float*)&color_hsv, 0.01f, 0.0f, 1.0f);

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Drag/Slider Flags"))
    {
        // Demonstrate using advanced flags for DragXXX and SliderXXX functions. Note that the flags are the same!
        static ImGuiSliderFlags flags = ImGuiSliderFlags_None;
        ImGui::CheckboxFlags("ImGuiSliderFlags_AlwaysClamp", &flags, ImGuiSliderFlags_AlwaysClamp);
        ImGui::SameLine(); HelpMarker("Always clamp value to min/max bounds (if any) when input manually with CTRL+Click.");
        ImGui::CheckboxFlags("ImGuiSliderFlags_Logarithmic", &flags, ImGuiSliderFlags_Logarithmic);
        ImGui::SameLine(); HelpMarker("Enable logarithmic editing (more precision for small values).");
        ImGui::CheckboxFlags("ImGuiSliderFlags_NoRoundToFormat", &flags, ImGuiSliderFlags_NoRoundToFormat);
        ImGui::SameLine(); HelpMarker("Disable rounding underlying value to match precision of the format string (e.g. %.3f values are rounded to those 3 digits).");
        ImGui::CheckboxFlags("ImGuiSliderFlags_NoInput", &flags, ImGuiSliderFlags_NoInput);
        ImGui::SameLine(); HelpMarker("Disable CTRL+Click or Enter key allowing to input text directly into the widget.");

        // Drags
        static float drag_f = 0.5f;
        static int drag_i = 50;
        ImGui::Text("Underlying float value: %f", drag_f);
        ImGui::DragFloat("DragFloat (0 -> 1)", &drag_f, 0.005f, 0.0f, 1.0f, "%.3f", flags);
        ImGui::DragFloat("DragFloat (0 -> +inf)", &drag_f, 0.005f, 0.0f, FLT_MAX, "%.3f", flags);
        ImGui::DragFloat("DragFloat (-inf -> 1)", &drag_f, 0.005f, -FLT_MAX, 1.0f, "%.3f", flags);
        ImGui::DragFloat("DragFloat (-inf -> +inf)", &drag_f, 0.005f, -FLT_MAX, +FLT_MAX, "%.3f", flags);
        ImGui::DragInt("DragInt (0 -> 100)", &drag_i, 0.5f, 0, 100, "%d", flags);

        // Sliders
        static float slider_f = 0.5f;
        static int slider_i = 50;
        ImGui::Text("Underlying float value: %f", slider_f);
        ImGui::SliderFloat("SliderFloat (0 -> 1)", &slider_f, 0.0f, 1.0f, "%.3f", flags);
        ImGui::SliderInt("SliderInt (0 -> 100)", &slider_i, 0, 100, "%d", flags);

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Range Widgets"))
    {
        static float begin = 10, end = 90;
        static int begin_i = 100, end_i = 1000;
        ImGui::DragFloatRange2("range float", &begin, &end, 0.25f, 0.0f, 100.0f, "Min: %.1f %%", "Max: %.1f %%", ImGuiSliderFlags_AlwaysClamp);
        ImGui::DragIntRange2("range int", &begin_i, &end_i, 5, 0, 1000, "Min: %d units", "Max: %d units");
        ImGui::DragIntRange2("range int (no bounds)", &begin_i, &end_i, 5, 0, 0, "Min: %d units", "Max: %d units");
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Data Types"))
    {
        // DragScalar/InputScalar/SliderScalar functions allow various data types
        // - signed/unsigned
        // - 8/16/32/64-bits
        // - integer/float/double
        // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum
        // to pass the type, and passing all arguments by pointer.
        // This is the reason the test code below creates local variables to hold "zero" "one" etc. for each types.
        // In practice, if you frequently use a given type that is not covered by the normal API entry points,
        // you can wrap it yourself inside a 1 line function which can take typed argument as value instead of void*,
        // and then pass their address to the generic function. For example:
        //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld")
        //   {
        //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);
        //   }

        // Setup limits (as helper variables so we can take their address, as explained above)
        // Note: SliderScalar() functions have a maximum usable range of half the natural type maximum, hence the /2.
        #ifndef LLONG_MIN
        ImS64 LLONG_MIN = -9223372036854775807LL - 1;
        ImS64 LLONG_MAX = 9223372036854775807LL;
        ImU64 ULLONG_MAX = (2ULL * 9223372036854775807LL + 1);
        #endif
        const char    s8_zero  = 0,   s8_one  = 1,   s8_fifty  = 50, s8_min  = -128,        s8_max = 127;
        const ImU8    u8_zero  = 0,   u8_one  = 1,   u8_fifty  = 50, u8_min  = 0,           u8_max = 255;
        const short   s16_zero = 0,   s16_one = 1,   s16_fifty = 50, s16_min = -32768,      s16_max = 32767;
        const ImU16   u16_zero = 0,   u16_one = 1,   u16_fifty = 50, u16_min = 0,           u16_max = 65535;
        const ImS32   s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN/2,   s32_max = INT_MAX/2,    s32_hi_a = INT_MAX/2 - 100,    s32_hi_b = INT_MAX/2;
        const ImU32   u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,           u32_max = UINT_MAX/2,   u32_hi_a = UINT_MAX/2 - 100,   u32_hi_b = UINT_MAX/2;
        const ImS64   s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN/2, s64_max = LLONG_MAX/2,  s64_hi_a = LLONG_MAX/2 - 100,  s64_hi_b = LLONG_MAX/2;
        const ImU64   u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,           u64_max = ULLONG_MAX/2, u64_hi_a = ULLONG_MAX/2 - 100, u64_hi_b = ULLONG_MAX/2;
        const float   f32_zero = 0.f, f32_one = 1.f, f32_lo_a = -10000000000.0f, f32_hi_a = +10000000000.0f;
        const double  f64_zero = 0.,  f64_one = 1.,  f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;

        // State
        static char   s8_v  = 127;
        static ImU8   u8_v  = 255;
        static short  s16_v = 32767;
        static ImU16  u16_v = 65535;
        static ImS32  s32_v = -1;
        static ImU32  u32_v = (ImU32)-1;
        static ImS64  s64_v = -1;
        static ImU64  u64_v = (ImU64)-1;
        static float  f32_v = 0.123f;
        static double f64_v = 90000.01234567890123456789;

        const float drag_speed = 0.2f;
        static bool drag_clamp = false;
        ImGui::Text("Drags:");
        ImGui::Checkbox("Clamp integers to 0..50", &drag_clamp);
        ImGui::SameLine(); HelpMarker(
            "As with every widgets in dear imgui, we never modify values unless there is a user interaction.\n"
            "You can override the clamping limits by using CTRL+Click to input a value.");
        ImGui::DragScalar("drag s8",        ImGuiDataType_S8,     &s8_v,  drag_speed, drag_clamp ? &s8_zero  : NULL, drag_clamp ? &s8_fifty  : NULL);
        ImGui::DragScalar("drag u8",        ImGuiDataType_U8,     &u8_v,  drag_speed, drag_clamp ? &u8_zero  : NULL, drag_clamp ? &u8_fifty  : NULL, "%u ms");
        ImGui::DragScalar("drag s16",       ImGuiDataType_S16,    &s16_v, drag_speed, drag_clamp ? &s16_zero : NULL, drag_clamp ? &s16_fifty : NULL);
        ImGui::DragScalar("drag u16",       ImGuiDataType_U16,    &u16_v, drag_speed, drag_clamp ? &u16_zero : NULL, drag_clamp ? &u16_fifty : NULL, "%u ms");
        ImGui::DragScalar("drag s32",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL);
        ImGui::DragScalar("drag u32",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp ? &u32_zero : NULL, drag_clamp ? &u32_fifty : NULL, "%u ms");
        ImGui::DragScalar("drag s64",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp ? &s64_zero : NULL, drag_clamp ? &s64_fifty : NULL);
        ImGui::DragScalar("drag u64",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp ? &u64_zero : NULL, drag_clamp ? &u64_fifty : NULL);
        ImGui::DragScalar("drag float",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f");
        ImGui::DragScalar("drag float log", ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", ImGuiSliderFlags_Logarithmic);
        ImGui::DragScalar("drag double",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, NULL,     "%.10f grams");
        ImGui::DragScalar("drag double log",ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, "0 < %.10f < 1", ImGuiSliderFlags_Logarithmic);

        ImGui::Text("Sliders");
        ImGui::SliderScalar("slider s8 full",       ImGuiDataType_S8,     &s8_v,  &s8_min,   &s8_max,   "%d");
        ImGui::SliderScalar("slider u8 full",       ImGuiDataType_U8,     &u8_v,  &u8_min,   &u8_max,   "%u");
        ImGui::SliderScalar("slider s16 full",      ImGuiDataType_S16,    &s16_v, &s16_min,  &s16_max,  "%d");
        ImGui::SliderScalar("slider u16 full",      ImGuiDataType_U16,    &u16_v, &u16_min,  &u16_max,  "%u");
        ImGui::SliderScalar("slider s32 low",       ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,"%d");
        ImGui::SliderScalar("slider s32 high",      ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, "%d");
        ImGui::SliderScalar("slider s32 full",      ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  "%d");
        ImGui::SliderScalar("slider u32 low",       ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,"%u");
        ImGui::SliderScalar("slider u32 high",      ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, "%u");
        ImGui::SliderScalar("slider u32 full",      ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  "%u");
        ImGui::SliderScalar("slider s64 low",       ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,"%" IM_PRId64);
        ImGui::SliderScalar("slider s64 high",      ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, "%" IM_PRId64);
        ImGui::SliderScalar("slider s64 full",      ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  "%" IM_PRId64);
        ImGui::SliderScalar("slider u64 low",       ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,"%" IM_PRIu64 " ms");
        ImGui::SliderScalar("slider u64 high",      ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, "%" IM_PRIu64 " ms");
        ImGui::SliderScalar("slider u64 full",      ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  "%" IM_PRIu64 " ms");
        ImGui::SliderScalar("slider float low",     ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);
        ImGui::SliderScalar("slider float low log", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  "%.10f", ImGuiSliderFlags_Logarithmic);
        ImGui::SliderScalar("slider float high",    ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, "%e");
        ImGui::SliderScalar("slider double low",    ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f grams");
        ImGui::SliderScalar("slider double low log",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f", ImGuiSliderFlags_Logarithmic);
        ImGui::SliderScalar("slider double high",   ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, "%e grams");

        ImGui::Text("Sliders (reverse)");
        ImGui::SliderScalar("slider s8 reverse",    ImGuiDataType_S8,   &s8_v,  &s8_max,    &s8_min,   "%d");
        ImGui::SliderScalar("slider u8 reverse",    ImGuiDataType_U8,   &u8_v,  &u8_max,    &u8_min,   "%u");
        ImGui::SliderScalar("slider s32 reverse",   ImGuiDataType_S32,  &s32_v, &s32_fifty, &s32_zero, "%d");
        ImGui::SliderScalar("slider u32 reverse",   ImGuiDataType_U32,  &u32_v, &u32_fifty, &u32_zero, "%u");
        ImGui::SliderScalar("slider s64 reverse",   ImGuiDataType_S64,  &s64_v, &s64_fifty, &s64_zero, "%" IM_PRId64);
        ImGui::SliderScalar("slider u64 reverse",   ImGuiDataType_U64,  &u64_v, &u64_fifty, &u64_zero, "%" IM_PRIu64 " ms");

        static bool inputs_step = true;
        ImGui::Text("Inputs");
        ImGui::Checkbox("Show step buttons", &inputs_step);
        ImGui::InputScalar("input s8",      ImGuiDataType_S8,     &s8_v,  inputs_step ? &s8_one  : NULL, NULL, "%d");
        ImGui::InputScalar("input u8",      ImGuiDataType_U8,     &u8_v,  inputs_step ? &u8_one  : NULL, NULL, "%u");
        ImGui::InputScalar("input s16",     ImGuiDataType_S16,    &s16_v, inputs_step ? &s16_one : NULL, NULL, "%d");
        ImGui::InputScalar("input u16",     ImGuiDataType_U16,    &u16_v, inputs_step ? &u16_one : NULL, NULL, "%u");
        ImGui::InputScalar("input s32",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%d");
        ImGui::InputScalar("input s32 hex", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);
        ImGui::InputScalar("input u32",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%u");
        ImGui::InputScalar("input u32 hex", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);
        ImGui::InputScalar("input s64",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL);
        ImGui::InputScalar("input u64",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL);
        ImGui::InputScalar("input float",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL);
        ImGui::InputScalar("input double",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL);

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Multi-component Widgets"))
    {
        static float vec4f[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
        static int vec4i[4] = { 1, 5, 100, 255 };

        ImGui::InputFloat2("input float2", vec4f);
        ImGui::DragFloat2("drag float2", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat2("slider float2", vec4f, 0.0f, 1.0f);
        ImGui::InputInt2("input int2", vec4i);
        ImGui::DragInt2("drag int2", vec4i, 1, 0, 255);
        ImGui::SliderInt2("slider int2", vec4i, 0, 255);
        ImGui::Spacing();

        ImGui::InputFloat3("input float3", vec4f);
        ImGui::DragFloat3("drag float3", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat3("slider float3", vec4f, 0.0f, 1.0f);
        ImGui::InputInt3("input int3", vec4i);
        ImGui::DragInt3("drag int3", vec4i, 1, 0, 255);
        ImGui::SliderInt3("slider int3", vec4i, 0, 255);
        ImGui::Spacing();

        ImGui::InputFloat4("input float4", vec4f);
        ImGui::DragFloat4("drag float4", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat4("slider float4", vec4f, 0.0f, 1.0f);
        ImGui::InputInt4("input int4", vec4i);
        ImGui::DragInt4("drag int4", vec4i, 1, 0, 255);
        ImGui::SliderInt4("slider int4", vec4i, 0, 255);

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Vertical Sliders"))
    {
        const float spacing = 4;
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

        static int int_value = 0;
        ImGui::VSliderInt("##int", ImVec2(18, 160), &int_value, 0, 5);
        ImGui::SameLine();

        static float values[7] = { 0.0f, 0.60f, 0.35f, 0.9f, 0.70f, 0.20f, 0.0f };
        ImGui::PushID("set1");
        for (int i = 0; i < 7; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleColor(ImGuiCol_FrameBg, (ImVec4)ImColor::HSV(i / 7.0f, 0.5f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_FrameBgActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, (ImVec4)ImColor::HSV(i / 7.0f, 0.9f, 0.9f));
            ImGui::VSliderFloat("##v", ImVec2(18, 160), &values[i], 0.0f, 1.0f, "");
            if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                ImGui::SetTooltip("%.3f", values[i]);
            ImGui::PopStyleColor(4);
            ImGui::PopID();
        }
        ImGui::PopID();

        ImGui::SameLine();
        ImGui::PushID("set2");
        static float values2[4] = { 0.20f, 0.80f, 0.40f, 0.25f };
        const int rows = 3;
        const ImVec2 small_slider_size(18, (float)(int)((160.0f - (rows - 1) * spacing) / rows));
        for (int nx = 0; nx < 4; nx++)
        {
            if (nx > 0) ImGui::SameLine();
            ImGui::BeginGroup();
            for (int ny = 0; ny < rows; ny++)
            {
                ImGui::PushID(nx * rows + ny);
                ImGui::VSliderFloat("##v", small_slider_size, &values2[nx], 0.0f, 1.0f, "");
                if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                    ImGui::SetTooltip("%.3f", values2[nx]);
                ImGui::PopID();
            }
            ImGui::EndGroup();
        }
        ImGui::PopID();

        ImGui::SameLine();
        ImGui::PushID("set3");
        for (int i = 0; i < 4; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleVar(ImGuiStyleVar_GrabMinSize, 40);
            ImGui::VSliderFloat("##v", ImVec2(40, 160), &values[i], 0.0f, 1.0f, "%.2f\nsec");
            ImGui::PopStyleVar();
            ImGui::PopID();
        }
        ImGui::PopID();
        ImGui::PopStyleVar();
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Drag and Drop"))
    {
        if (ImGui::TreeNode("Drag and drop in standard widgets"))
        {
            // ColorEdit widgets automatically act as drag source and drag target.
            // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F
            // to allow your own widgets to use colors in their drag and drop interaction.
            // Also see 'Demo->Widgets->Color/Picker Widgets->Palette' demo.
            HelpMarker("You can drag from the color squares.");
            static float col1[3] = { 1.0f, 0.0f, 0.2f };
            static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::ColorEdit3("color 1", col1);
            ImGui::ColorEdit4("color 2", col2);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Drag and drop to copy/swap items"))
        {
            enum Mode
            {
                Mode_Copy,
                Mode_Move,
                Mode_Swap
            };
            static int mode = 0;
            if (ImGui::RadioButton("Copy", mode == Mode_Copy)) { mode = Mode_Copy; } ImGui::SameLine();
            if (ImGui::RadioButton("Move", mode == Mode_Move)) { mode = Mode_Move; } ImGui::SameLine();
            if (ImGui::RadioButton("Swap", mode == Mode_Swap)) { mode = Mode_Swap; }
            static const char* names[9] =
            {
                "Bobby", "Beatrice", "Betty",
                "Brianna", "Barry", "Bernard",
                "Bibi", "Blaine", "Bryn"
            };
            for (int n = 0; n < IM_ARRAYSIZE(names); n++)
            {
                ImGui::PushID(n);
                if ((n % 3) != 0)
                    ImGui::SameLine();
                ImGui::Button(names[n], ImVec2(60, 60));

                // Our buttons are both drag sources and drag targets here!
                if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                {
                    // Set payload to carry the index of our item (could be anything)
                    ImGui::SetDragDropPayload("DND_DEMO_CELL", &n, sizeof(int));

                    // Display preview (could be anything, e.g. when dragging an image we could decide to display
                    // the filename and a small preview of the image, etc.)
                    if (mode == Mode_Copy) { ImGui::Text("Copy %s", names[n]); }
                    if (mode == Mode_Move) { ImGui::Text("Move %s", names[n]); }
                    if (mode == Mode_Swap) { ImGui::Text("Swap %s", names[n]); }
                    ImGui::EndDragDropSource();
                }
                if (ImGui::BeginDragDropTarget())
                {
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_DEMO_CELL"))
                    {
                        IM_ASSERT(payload->DataSize == sizeof(int));
                        int payload_n = *(const int*)payload->Data;
                        if (mode == Mode_Copy)
                        {
                            names[n] = names[payload_n];
                        }
                        if (mode == Mode_Move)
                        {
                            names[n] = names[payload_n];
                            names[payload_n] = "";
                        }
                        if (mode == Mode_Swap)
                        {
                            const char* tmp = names[n];
                            names[n] = names[payload_n];
                            names[payload_n] = tmp;
                        }
                    }
                    ImGui::EndDragDropTarget();
                }
                ImGui::PopID();
            }
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Drag to reorder items (simple)"))
        {
            // Simple reordering
            HelpMarker(
                "We don't use the drag and drop api at all here! "
                "Instead we query when the item is held but not hovered, and order items accordingly.");
            static const char* item_names[] = { "Item One", "Item Two", "Item Three", "Item Four", "Item Five" };
            for (int n = 0; n < IM_ARRAYSIZE(item_names); n++)
            {
                const char* item = item_names[n];
                ImGui::Selectable(item);

                if (ImGui::IsItemActive() && !ImGui::IsItemHovered())
                {
                    int n_next = n + (ImGui::GetMouseDragDelta(0).y < 0.f ? -1 : 1);
                    if (n_next >= 0 && n_next < IM_ARRAYSIZE(item_names))
                    {
                        item_names[n] = item_names[n_next];
                        item_names[n_next] = item;
                        ImGui::ResetMouseDragDelta();
                    }
                }
            }
            ImGui::TreePop();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Querying Status (Edited/Active/Focused/Hovered etc.)"))
    {
        // Select an item type
        const char* item_names[] =
        {
            "Text", "Button", "Button (w/ repeat)", "Checkbox", "SliderFloat", "InputText", "InputFloat",
            "InputFloat3", "ColorEdit4", "MenuItem", "TreeNode", "TreeNode (w/ double-click)", "Combo", "ListBox"
        };
        static int item_type = 1;
        ImGui::Combo("Item Type", &item_type, item_names, IM_ARRAYSIZE(item_names), IM_ARRAYSIZE(item_names));
        ImGui::SameLine();
        HelpMarker("Testing how various types of items are interacting with the IsItemXXX functions. Note that the bool return value of most ImGui function is generally equivalent to calling ImGui::IsItemHovered().");

        // Submit selected item item so we can query their status in the code following it.
        bool ret = false;
        static bool b = false;
        static float col4f[4] = { 1.0f, 0.5, 0.0f, 1.0f };
        static char str[16] = {};
        if (item_type == 0) { ImGui::Text("ITEM: Text"); }                                              // Testing text items with no identifier/interaction
        if (item_type == 1) { ret = ImGui::Button("ITEM: Button"); }                                    // Testing button
        if (item_type == 2) { ImGui::PushButtonRepeat(true); ret = ImGui::Button("ITEM: Button"); ImGui::PopButtonRepeat(); } // Testing button (with repeater)
        if (item_type == 3) { ret = ImGui::Checkbox("ITEM: Checkbox", &b); }                            // Testing checkbox
        if (item_type == 4) { ret = ImGui::SliderFloat("ITEM: SliderFloat", &col4f[0], 0.0f, 1.0f); }   // Testing basic item
        if (item_type == 5) { ret = ImGui::InputText("ITEM: InputText", &str[0], IM_ARRAYSIZE(str)); }  // Testing input text (which handles tabbing)
        if (item_type == 6) { ret = ImGui::InputFloat("ITEM: InputFloat", col4f, 1.0f); }               // Testing +/- buttons on scalar input
        if (item_type == 7) { ret = ImGui::InputFloat3("ITEM: InputFloat3", col4f); }                   // Testing multi-component items (IsItemXXX flags are reported merged)
        if (item_type == 8) { ret = ImGui::ColorEdit4("ITEM: ColorEdit4", col4f); }                     // Testing multi-component items (IsItemXXX flags are reported merged)
        if (item_type == 9) { ret = ImGui::MenuItem("ITEM: MenuItem"); }                                // Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)
        if (item_type == 10){ ret = ImGui::TreeNode("ITEM: TreeNode"); if (ret) ImGui::TreePop(); }     // Testing tree node
        if (item_type == 11){ ret = ImGui::TreeNodeEx("ITEM: TreeNode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_NoTreePushOnOpen); } // Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.
        if (item_type == 12){ const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::Combo("ITEM: Combo", &current, items, IM_ARRAYSIZE(items)); }
        if (item_type == 13){ const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::ListBox("ITEM: ListBox", &current, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }

        // Display the values of IsItemHovered() and other common item state functions.
        // Note that the ImGuiHoveredFlags_XXX flags can be combined.
        // Because BulletText is an item itself and that would affect the output of IsItemXXX functions,
        // we query every state in a single call to avoid storing them and to simplify the code.
        ImGui::BulletText(
            "Return value = %d\n"
            "IsItemFocused() = %d\n"
            "IsItemHovered() = %d\n"
            "IsItemHovered(_AllowWhenBlockedByPopup) = %d\n"
            "IsItemHovered(_AllowWhenBlockedByActiveItem) = %d\n"
            "IsItemHovered(_AllowWhenOverlapped) = %d\n"
            "IsItemHovered(_RectOnly) = %d\n"
            "IsItemActive() = %d\n"
            "IsItemEdited() = %d\n"
            "IsItemActivated() = %d\n"
            "IsItemDeactivated() = %d\n"
            "IsItemDeactivatedAfterEdit() = %d\n"
            "IsItemVisible() = %d\n"
            "IsItemClicked() = %d\n"
            "IsItemToggledOpen() = %d\n"
            "GetItemRectMin() = (%.1f, %.1f)\n"
            "GetItemRectMax() = (%.1f, %.1f)\n"
            "GetItemRectSize() = (%.1f, %.1f)",
            ret,
            ImGui::IsItemFocused(),
            ImGui::IsItemHovered(),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlapped),
            ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly),
            ImGui::IsItemActive(),
            ImGui::IsItemEdited(),
            ImGui::IsItemActivated(),
            ImGui::IsItemDeactivated(),
            ImGui::IsItemDeactivatedAfterEdit(),
            ImGui::IsItemVisible(),
            ImGui::IsItemClicked(),
            ImGui::IsItemToggledOpen(),
            ImGui::GetItemRectMin().x, ImGui::GetItemRectMin().y,
            ImGui::GetItemRectMax().x, ImGui::GetItemRectMax().y,
            ImGui::GetItemRectSize().x, ImGui::GetItemRectSize().y
        );

        static bool embed_all_inside_a_child_window = false;
        ImGui::Checkbox("Embed everything inside a child window (for additional testing)", &embed_all_inside_a_child_window);
        if (embed_all_inside_a_child_window)
            ImGui::BeginChild("outer_child", ImVec2(0, ImGui::GetFontSize() * 20.0f), true);

        // Testing IsWindowFocused() function with its various flags.
        // Note that the ImGuiFocusedFlags_XXX flags can be combined.
        ImGui::BulletText(
            "IsWindowFocused() = %d\n"
            "IsWindowFocused(_ChildWindows) = %d\n"
            "IsWindowFocused(_ChildWindows|_RootWindow) = %d\n"
            "IsWindowFocused(_RootWindow) = %d\n"
            "IsWindowFocused(_AnyWindow) = %d\n",
            ImGui::IsWindowFocused(),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_AnyWindow));

        // Testing IsWindowHovered() function with its various flags.
        // Note that the ImGuiHoveredFlags_XXX flags can be combined.
        ImGui::BulletText(
            "IsWindowHovered() = %d\n"
            "IsWindowHovered(_AllowWhenBlockedByPopup) = %d\n"
            "IsWindowHovered(_AllowWhenBlockedByActiveItem) = %d\n"
            "IsWindowHovered(_ChildWindows) = %d\n"
            "IsWindowHovered(_ChildWindows|_RootWindow) = %d\n"
            "IsWindowHovered(_ChildWindows|_AllowWhenBlockedByPopup) = %d\n"
            "IsWindowHovered(_RootWindow) = %d\n"
            "IsWindowHovered(_AnyWindow) = %d\n",
            ImGui::IsWindowHovered(),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow));

        ImGui::BeginChild("child", ImVec2(0, 50), true);
        ImGui::Text("This is another child window for testing the _ChildWindows flag.");
        ImGui::EndChild();
        if (embed_all_inside_a_child_window)
            ImGui::EndChild();

        static char unused_str[] = "This widget is only here to be able to tab-out of the widgets above.";
        ImGui::InputText("unused", unused_str, IM_ARRAYSIZE(unused_str), ImGuiInputTextFlags_ReadOnly);

        // Calling IsItemHovered() after begin returns the hovered status of the title bar.
        // This is useful in particular if you want to create a context menu associated to the title bar of a window.
        // This will also work when docked into a Tab (the Tab replace the Title Bar and guarantee the same properties).
        static bool test_window = false;
        ImGui::Checkbox("Hovered/Active tests after Begin() for title bar testing", &test_window);
        if (test_window)
        {
            // FIXME-DOCK: This window cannot be docked within the ImGui Demo window, this will cause a feedback loop and get them stuck.
            // Could we fix this through an ImGuiWindowClass feature? Or an API call to tag our parent as "don't skip items"?
            ImGui::Begin("Title bar Hovered/Active tests", &test_window);
            if (ImGui::BeginPopupContextItem()) // <-- This is using IsItemHovered()
            {
                if (ImGui::MenuItem("Close")) { test_window = false; }
                ImGui::EndPopup();
            }
            ImGui::Text(
                "IsItemHovered() after begin = %d (== is title bar hovered)\n"
                "IsItemActive() after begin = %d (== is window being clicked/moved)\n",
                ImGui::IsItemHovered(), ImGui::IsItemActive());
            ImGui::End();
        }

        ImGui::TreePop();
    }
}

static void ShowDemoWindowLayout()
{
    if (!ImGui::CollapsingHeader("Layout & Scrolling"))
        return;

    if (ImGui::TreeNode("Child windows"))
    {
        HelpMarker("Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window.");
        static bool disable_mouse_wheel = false;
        static bool disable_menu = false;
        ImGui::Checkbox("Disable Mouse Wheel", &disable_mouse_wheel);
        ImGui::Checkbox("Disable Menu", &disable_menu);

        // Child 1: no border, enable horizontal scrollbar
        {
            ImGuiWindowFlags window_flags = ImGuiWindowFlags_HorizontalScrollbar;
            if (disable_mouse_wheel)
                window_flags |= ImGuiWindowFlags_NoScrollWithMouse;
            ImGui::BeginChild("ChildL", ImVec2(ImGui::GetWindowContentRegionWidth() * 0.5f, 260), false, window_flags);
            for (int i = 0; i < 100; i++)
                ImGui::Text("%04d: scrollable region", i);
            ImGui::EndChild();
        }

        ImGui::SameLine();

        // Child 2: rounded border
        {
            ImGuiWindowFlags window_flags = ImGuiWindowFlags_None;
            if (disable_mouse_wheel)
                window_flags |= ImGuiWindowFlags_NoScrollWithMouse;
            if (!disable_menu)
                window_flags |= ImGuiWindowFlags_MenuBar;
            ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 5.0f);
            ImGui::BeginChild("ChildR", ImVec2(0, 260), true, window_flags);
            if (!disable_menu && ImGui::BeginMenuBar())
            {
                if (ImGui::BeginMenu("Menu"))
                {
                    ShowExampleMenuFile();
                    ImGui::EndMenu();
                }
                ImGui::EndMenuBar();
            }
            if (ImGui::BeginTable("split", 2, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
            {
                for (int i = 0; i < 100; i++)
                {
                    char buf[32];
                    sprintf(buf, "%03d", i);
                    ImGui::TableNextColumn();
                    ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                }
                ImGui::EndTable();
            }
            ImGui::EndChild();
            ImGui::PopStyleVar();
        }

        ImGui::Separator();

        // Demonstrate a few extra things
        // - Changing ImGuiCol_ChildBg (which is transparent black in default styles)
        // - Using SetCursorPos() to position child window (the child window is an item from the POV of parent window)
        //   You can also call SetNextWindowPos() to position the child window. The parent window will effectively
        //   layout from this position.
        // - Using ImGui::GetItemRectMin/Max() to query the "item" state (because the child window is an item from
        //   the POV of the parent window). See 'Demo->Querying Status (Active/Focused/Hovered etc.)' for details.
        {
            static int offset_x = 0;
            ImGui::SetNextItemWidth(100);
            ImGui::DragInt("Offset X", &offset_x, 1.0f, -1000, 1000);

            ImGui::SetCursorPosX(ImGui::GetCursorPosX() + (float)offset_x);
            ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(255, 0, 0, 100));
            ImGui::BeginChild("Red", ImVec2(200, 100), true, ImGuiWindowFlags_None);
            for (int n = 0; n < 50; n++)
                ImGui::Text("Some test %d", n);
            ImGui::EndChild();
            bool child_is_hovered = ImGui::IsItemHovered();
            ImVec2 child_rect_min = ImGui::GetItemRectMin();
            ImVec2 child_rect_max = ImGui::GetItemRectMax();
            ImGui::PopStyleColor();
            ImGui::Text("Hovered: %d", child_is_hovered);
            ImGui::Text("Rect of child window is: (%.0f,%.0f) (%.0f,%.0f)", child_rect_min.x, child_rect_min.y, child_rect_max.x, child_rect_max.y);
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Widgets Width"))
    {
        // Use SetNextItemWidth() to set the width of a single upcoming item.
        // Use PushItemWidth()/PopItemWidth() to set the width of a group of items.
        // In real code use you'll probably want to choose width values that are proportional to your font size
        // e.g. Using '20.0f * GetFontSize()' as width instead of '200.0f', etc.

        static float f = 0.0f;
        static bool show_indented_items = true;
        ImGui::Checkbox("Show indented items", &show_indented_items);

        ImGui::Text("SetNextItemWidth/PushItemWidth(100)");
        ImGui::SameLine(); HelpMarker("Fixed width.");
        ImGui::PushItemWidth(100);
        ImGui::DragFloat("float##1b", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##1b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(-100)");
        ImGui::SameLine(); HelpMarker("Align to right edge minus 100");
        ImGui::PushItemWidth(-100);
        ImGui::DragFloat("float##2a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##2b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(GetContentRegionAvail().x * 0.5f)");
        ImGui::SameLine(); HelpMarker("Half of available width.\n(~ right-cursor_pos)\n(works within a column set)");
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x * 0.5f);
        ImGui::DragFloat("float##3a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##3b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(-GetContentRegionAvail().x * 0.5f)");
        ImGui::SameLine(); HelpMarker("Align to right edge minus half");
        ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);
        ImGui::DragFloat("float##4a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##4b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        // Demonstrate using PushItemWidth to surround three items.
        // Calling SetNextItemWidth() before each of them would have the same effect.
        ImGui::Text("SetNextItemWidth/PushItemWidth(-FLT_MIN)");
        ImGui::SameLine(); HelpMarker("Align to right edge");
        ImGui::PushItemWidth(-FLT_MIN);
        ImGui::DragFloat("##float5a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##5b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Basic Horizontal Layout"))
    {
        ImGui::TextWrapped("(Use ImGui::SameLine() to keep adding items to the right of the preceding item)");

        // Text
        ImGui::Text("Two items: Hello"); ImGui::SameLine();
        ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

        // Adjust spacing
        ImGui::Text("More spacing: Hello"); ImGui::SameLine(0, 20);
        ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

        // Button
        ImGui::AlignTextToFramePadding();
        ImGui::Text("Normal buttons"); ImGui::SameLine();
        ImGui::Button("Banana"); ImGui::SameLine();
        ImGui::Button("Apple"); ImGui::SameLine();
        ImGui::Button("Corniflower");

        // Button
        ImGui::Text("Small buttons"); ImGui::SameLine();
        ImGui::SmallButton("Like this one"); ImGui::SameLine();
        ImGui::Text("can fit within a text block.");

        // Aligned to arbitrary position. Easy/cheap column.
        ImGui::Text("Aligned");
        ImGui::SameLine(150); ImGui::Text("x=150");
        ImGui::SameLine(300); ImGui::Text("x=300");
        ImGui::Text("Aligned");
        ImGui::SameLine(150); ImGui::SmallButton("x=150");
        ImGui::SameLine(300); ImGui::SmallButton("x=300");

        // Checkbox
        static bool c1 = false, c2 = false, c3 = false, c4 = false;
        ImGui::Checkbox("My", &c1); ImGui::SameLine();
        ImGui::Checkbox("Tailor", &c2); ImGui::SameLine();
        ImGui::Checkbox("Is", &c3); ImGui::SameLine();
        ImGui::Checkbox("Rich", &c4);

        // Various
        static float f0 = 1.0f, f1 = 2.0f, f2 = 3.0f;
        ImGui::PushItemWidth(80);
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD" };
        static int item = -1;
        ImGui::Combo("Combo", &item, items, IM_ARRAYSIZE(items)); ImGui::SameLine();
        ImGui::SliderFloat("X", &f0, 0.0f, 5.0f); ImGui::SameLine();
        ImGui::SliderFloat("Y", &f1, 0.0f, 5.0f); ImGui::SameLine();
        ImGui::SliderFloat("Z", &f2, 0.0f, 5.0f);
        ImGui::PopItemWidth();

        ImGui::PushItemWidth(80);
        ImGui::Text("Lists:");
        static int selection[4] = { 0, 1, 2, 3 };
        for (int i = 0; i < 4; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::ListBox("", &selection[i], items, IM_ARRAYSIZE(items));
            ImGui::PopID();
            //if (ImGui::IsItemHovered()) ImGui::SetTooltip("ListBox %d hovered", i);
        }
        ImGui::PopItemWidth();

        // Dummy
        ImVec2 button_sz(40, 40);
        ImGui::Button("A", button_sz); ImGui::SameLine();
        ImGui::Dummy(button_sz); ImGui::SameLine();
        ImGui::Button("B", button_sz);

        // Manually wrapping
        // (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
        ImGui::Text("Manually wrapping:");
        ImGuiStyle& style = ImGui::GetStyle();
        int buttons_count = 20;
        float window_visible_x2 = ImGui::GetWindowPos().x + ImGui::GetWindowContentRegionMax().x;
        for (int n = 0; n < buttons_count; n++)
        {
            ImGui::PushID(n);
            ImGui::Button("Box", button_sz);
            float last_button_x2 = ImGui::GetItemRectMax().x;
            float next_button_x2 = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line
            if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)
                ImGui::SameLine();
            ImGui::PopID();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Groups"))
    {
        HelpMarker(
            "BeginGroup() basically locks the horizontal position for new line. "
            "EndGroup() bundles the whole group so that you can use \"item\" functions such as "
            "IsItemHovered()/IsItemActive() or SameLine() etc. on the whole group.");
        ImGui::BeginGroup();
        {
            ImGui::BeginGroup();
            ImGui::Button("AAA");
            ImGui::SameLine();
            ImGui::Button("BBB");
            ImGui::SameLine();
            ImGui::BeginGroup();
            ImGui::Button("CCC");
            ImGui::Button("DDD");
            ImGui::EndGroup();
            ImGui::SameLine();
            ImGui::Button("EEE");
            ImGui::EndGroup();
            if (ImGui::IsItemHovered())
                ImGui::SetTooltip("First group hovered");
        }
        // Capture the group size and create widgets using the same size
        ImVec2 size = ImGui::GetItemRectSize();
        const float values[5] = { 0.5f, 0.20f, 0.80f, 0.60f, 0.25f };
        ImGui::PlotHistogram("##values", values, IM_ARRAYSIZE(values), 0, NULL, 0.0f, 1.0f, size);

        ImGui::Button("ACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));
        ImGui::SameLine();
        ImGui::Button("REACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));
        ImGui::EndGroup();
        ImGui::SameLine();

        ImGui::Button("LEVERAGE\nBUZZWORD", size);
        ImGui::SameLine();

        if (ImGui::BeginListBox("List", size))
        {
            ImGui::Selectable("Selected", true);
            ImGui::Selectable("Not Selected", false);
            ImGui::EndListBox();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Text Baseline Alignment"))
    {
        {
            ImGui::BulletText("Text baseline:");
            ImGui::SameLine(); HelpMarker(
                "This is testing the vertical alignment that gets applied on text to keep it aligned with widgets. "
                "Lines only composed of text or \"small\" widgets use less vertical space than lines with framed widgets.");
            ImGui::Indent();

            ImGui::Text("KO Blahblah"); ImGui::SameLine();
            ImGui::Button("Some framed item"); ImGui::SameLine();
            HelpMarker("Baseline of button will look misaligned with text..");

            // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
            // (because we don't know what's coming after the Text() statement, we need to move the text baseline
            // down by FramePadding.y ahead of time)
            ImGui::AlignTextToFramePadding();
            ImGui::Text("OK Blahblah"); ImGui::SameLine();
            ImGui::Button("Some framed item"); ImGui::SameLine();
            HelpMarker("We call AlignTextToFramePadding() to vertically align the text baseline by +FramePadding.y");

            // SmallButton() uses the same vertical padding as Text
            ImGui::Button("TEST##1"); ImGui::SameLine();
            ImGui::Text("TEST"); ImGui::SameLine();
            ImGui::SmallButton("TEST##2");

            // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
            ImGui::AlignTextToFramePadding();
            ImGui::Text("Text aligned to framed item"); ImGui::SameLine();
            ImGui::Button("Item##1"); ImGui::SameLine();
            ImGui::Text("Item"); ImGui::SameLine();
            ImGui::SmallButton("Item##2"); ImGui::SameLine();
            ImGui::Button("Item##3");

            ImGui::Unindent();
        }

        ImGui::Spacing();

        {
            ImGui::BulletText("Multi-line text:");
            ImGui::Indent();
            ImGui::Text("One\nTwo\nThree"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("One\nTwo\nThree");

            ImGui::Button("HOP##1"); ImGui::SameLine();
            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Button("HOP##2"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");
            ImGui::Unindent();
        }

        ImGui::Spacing();

        {
            ImGui::BulletText("Misc items:");
            ImGui::Indent();

            // SmallButton() sets FramePadding to zero. Text baseline is aligned to match baseline of previous Button.
            ImGui::Button("80x80", ImVec2(80, 80));
            ImGui::SameLine();
            ImGui::Button("50x50", ImVec2(50, 50));
            ImGui::SameLine();
            ImGui::Button("Button()");
            ImGui::SameLine();
            ImGui::SmallButton("SmallButton()");

            // Tree
            const float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
            ImGui::Button("Button##1");
            ImGui::SameLine(0.0f, spacing);
            if (ImGui::TreeNode("Node##1"))
            {
                // Placeholder tree data
                for (int i = 0; i < 6; i++)
                    ImGui::BulletText("Item %d..", i);
                ImGui::TreePop();
            }

            // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget.
            // Otherwise you can use SmallButton() (smaller fit).
            ImGui::AlignTextToFramePadding();

            // Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add
            // other contents below the node.
            bool node_open = ImGui::TreeNode("Node##2");
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##2");
            if (node_open)
            {
                // Placeholder tree data
                for (int i = 0; i < 6; i++)
                    ImGui::BulletText("Item %d..", i);
                ImGui::TreePop();
            }

            // Bullet
            ImGui::Button("Button##3");
            ImGui::SameLine(0.0f, spacing);
            ImGui::BulletText("Bullet text");

            ImGui::AlignTextToFramePadding();
            ImGui::BulletText("Node");
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##4");
            ImGui::Unindent();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Scrolling"))
    {
        // Vertical scroll functions
        HelpMarker("Use SetScrollHereY() or SetScrollFromPosY() to scroll to a given vertical position.");

        static int track_item = 50;
        static bool enable_track = true;
        static bool enable_extra_decorations = false;
        static float scroll_to_off_px = 0.0f;
        static float scroll_to_pos_px = 200.0f;

        ImGui::Checkbox("Decoration", &enable_extra_decorations);

        ImGui::Checkbox("Track", &enable_track);
        ImGui::PushItemWidth(100);
        ImGui::SameLine(140); enable_track |= ImGui::DragInt("##item", &track_item, 0.25f, 0, 99, "Item = %d");

        bool scroll_to_off = ImGui::Button("Scroll Offset");
        ImGui::SameLine(140); scroll_to_off |= ImGui::DragFloat("##off", &scroll_to_off_px, 1.00f, 0, FLT_MAX, "+%.0f px");

        bool scroll_to_pos = ImGui::Button("Scroll To Pos");
        ImGui::SameLine(140); scroll_to_pos |= ImGui::DragFloat("##pos", &scroll_to_pos_px, 1.00f, -10, FLT_MAX, "X/Y = %.0f px");
        ImGui::PopItemWidth();

        if (scroll_to_off || scroll_to_pos)
            enable_track = false;

        ImGuiStyle& style = ImGui::GetStyle();
        float child_w = (ImGui::GetContentRegionAvail().x - 4 * style.ItemSpacing.x) / 5;
        if (child_w < 1.0f)
            child_w = 1.0f;
        ImGui::PushID("##VerticalScrolling");
        for (int i = 0; i < 5; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::BeginGroup();
            const char* names[] = { "Top", "25%", "Center", "75%", "Bottom" };
            ImGui::TextUnformatted(names[i]);

            const ImGuiWindowFlags child_flags = enable_extra_decorations ? ImGuiWindowFlags_MenuBar : 0;
            const ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);
            const bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(child_w, 200.0f), true, child_flags);
            if (ImGui::BeginMenuBar())
            {
                ImGui::TextUnformatted("abc");
                ImGui::EndMenuBar();
            }
            if (scroll_to_off)
                ImGui::SetScrollY(scroll_to_off_px);
            if (scroll_to_pos)
                ImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + scroll_to_pos_px, i * 0.25f);
            if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items
            {
                for (int item = 0; item < 100; item++)
                {
                    if (enable_track && item == track_item)
                    {
                        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);
                        ImGui::SetScrollHereY(i * 0.25f); // 0.0f:top, 0.5f:center, 1.0f:bottom
                    }
                    else
                    {
                        ImGui::Text("Item %d", item);
                    }
                }
            }
            float scroll_y = ImGui::GetScrollY();
            float scroll_max_y = ImGui::GetScrollMaxY();
            ImGui::EndChild();
            ImGui::Text("%.0f/%.0f", scroll_y, scroll_max_y);
            ImGui::EndGroup();
        }
        ImGui::PopID();

        // Horizontal scroll functions
        ImGui::Spacing();
        HelpMarker(
            "Use SetScrollHereX() or SetScrollFromPosX() to scroll to a given horizontal position.\n\n"
            "Because the clipping rectangle of most window hides half worth of WindowPadding on the "
            "left/right, using SetScrollFromPosX(+1) will usually result in clipped text whereas the "
            "equivalent SetScrollFromPosY(+1) wouldn't.");
        ImGui::PushID("##HorizontalScrolling");
        for (int i = 0; i < 5; i++)
        {
            float child_height = ImGui::GetTextLineHeight() + style.ScrollbarSize + style.WindowPadding.y * 2.0f;
            ImGuiWindowFlags child_flags = ImGuiWindowFlags_HorizontalScrollbar | (enable_extra_decorations ? ImGuiWindowFlags_AlwaysVerticalScrollbar : 0);
            ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);
            bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(-100, child_height), true, child_flags);
            if (scroll_to_off)
                ImGui::SetScrollX(scroll_to_off_px);
            if (scroll_to_pos)
                ImGui::SetScrollFromPosX(ImGui::GetCursorStartPos().x + scroll_to_pos_px, i * 0.25f);
            if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items
            {
                for (int item = 0; item < 100; item++)
                {
                    if (item > 0)
                        ImGui::SameLine();
                    if (enable_track && item == track_item)
                    {
                        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);
                        ImGui::SetScrollHereX(i * 0.25f); // 0.0f:left, 0.5f:center, 1.0f:right
                    }
                    else
                    {
                        ImGui::Text("Item %d", item);
                    }
                }
            }
            float scroll_x = ImGui::GetScrollX();
            float scroll_max_x = ImGui::GetScrollMaxX();
            ImGui::EndChild();
            ImGui::SameLine();
            const char* names[] = { "Left", "25%", "Center", "75%", "Right" };
            ImGui::Text("%s\n%.0f/%.0f", names[i], scroll_x, scroll_max_x);
            ImGui::Spacing();
        }
        ImGui::PopID();

        // Miscellaneous Horizontal Scrolling Demo
        HelpMarker(
            "Horizontal scrolling for a window is enabled via the ImGuiWindowFlags_HorizontalScrollbar flag.\n\n"
            "You may want to also explicitly specify content width by using SetNextWindowContentWidth() before Begin().");
        static int lines = 7;
        ImGui::SliderInt("Lines", &lines, 1, 15);
        ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3.0f);
        ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2.0f, 1.0f));
        ImVec2 scrolling_child_size = ImVec2(0, ImGui::GetFrameHeightWithSpacing() * 7 + 30);
        ImGui::BeginChild("scrolling", scrolling_child_size, true, ImGuiWindowFlags_HorizontalScrollbar);
        for (int line = 0; line < lines; line++)
        {
            // Display random stuff. For the sake of this trivial demo we are using basic Button() + SameLine()
            // If you want to create your own time line for a real application you may be better off manipulating
            // the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets
            // yourself. You may also want to use the lower-level ImDrawList API.
            int num_buttons = 10 + ((line & 1) ? line * 9 : line * 3);
            for (int n = 0; n < num_buttons; n++)
            {
                if (n > 0) ImGui::SameLine();
                ImGui::PushID(n + line * 1000);
                char num_buf[16];
                sprintf(num_buf, "%d", n);
                const char* label = (!(n % 15)) ? "FizzBuzz" : (!(n % 3)) ? "Fizz" : (!(n % 5)) ? "Buzz" : num_buf;
                float hue = n * 0.05f;
                ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(hue, 0.6f, 0.6f));
                ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(hue, 0.7f, 0.7f));
                ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(hue, 0.8f, 0.8f));
                ImGui::Button(label, ImVec2(40.0f + sinf((float)(line + n)) * 20.0f, 0.0f));
                ImGui::PopStyleColor(3);
                ImGui::PopID();
            }
        }
        float scroll_x = ImGui::GetScrollX();
        float scroll_max_x = ImGui::GetScrollMaxX();
        ImGui::EndChild();
        ImGui::PopStyleVar(2);
        float scroll_x_delta = 0.0f;
        ImGui::SmallButton("<<");
        if (ImGui::IsItemActive())
            scroll_x_delta = -ImGui::GetIO().DeltaTime * 1000.0f;
        ImGui::SameLine();
        ImGui::Text("Scroll from code"); ImGui::SameLine();
        ImGui::SmallButton(">>");
        if (ImGui::IsItemActive())
            scroll_x_delta = +ImGui::GetIO().DeltaTime * 1000.0f;
        ImGui::SameLine();
        ImGui::Text("%.0f/%.0f", scroll_x, scroll_max_x);
        if (scroll_x_delta != 0.0f)
        {
            // Demonstrate a trick: you can use Begin to set yourself in the context of another window
            // (here we are already out of your child window)
            ImGui::BeginChild("scrolling");
            ImGui::SetScrollX(ImGui::GetScrollX() + scroll_x_delta);
            ImGui::EndChild();
        }
        ImGui::Spacing();

        static bool show_horizontal_contents_size_demo_window = false;
        ImGui::Checkbox("Show Horizontal contents size demo window", &show_horizontal_contents_size_demo_window);

        if (show_horizontal_contents_size_demo_window)
        {
            static bool show_h_scrollbar = true;
            static bool show_button = true;
            static bool show_tree_nodes = true;
            static bool show_text_wrapped = false;
            static bool show_columns = true;
            static bool show_tab_bar = true;
            static bool show_child = false;
            static bool explicit_content_size = false;
            static float contents_size_x = 300.0f;
            if (explicit_content_size)
                ImGui::SetNextWindowContentSize(ImVec2(contents_size_x, 0.0f));
            ImGui::Begin("Horizontal contents size demo window", &show_horizontal_contents_size_demo_window, show_h_scrollbar ? ImGuiWindowFlags_HorizontalScrollbar : 0);
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(2, 0));
            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 0));
            HelpMarker("Test of different widgets react and impact the work rectangle growing when horizontal scrolling is enabled.\n\nUse 'Metrics->Tools->Show windows rectangles' to visualize rectangles.");
            ImGui::Checkbox("H-scrollbar", &show_h_scrollbar);
            ImGui::Checkbox("Button", &show_button);            // Will grow contents size (unless explicitly overwritten)
            ImGui::Checkbox("Tree nodes", &show_tree_nodes);    // Will grow contents size and display highlight over full width
            ImGui::Checkbox("Text wrapped", &show_text_wrapped);// Will grow and use contents size
            ImGui::Checkbox("Columns", &show_columns);          // Will use contents size
            ImGui::Checkbox("Tab bar", &show_tab_bar);          // Will use contents size
            ImGui::Checkbox("Child", &show_child);              // Will grow and use contents size
            ImGui::Checkbox("Explicit content size", &explicit_content_size);
            ImGui::Text("Scroll %.1f/%.1f %.1f/%.1f", ImGui::GetScrollX(), ImGui::GetScrollMaxX(), ImGui::GetScrollY(), ImGui::GetScrollMaxY());
            if (explicit_content_size)
            {
                ImGui::SameLine();
                ImGui::SetNextItemWidth(100);
                ImGui::DragFloat("##csx", &contents_size_x);
                ImVec2 p = ImGui::GetCursorScreenPos();
                ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + 10, p.y + 10), IM_COL32_WHITE);
                ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(p.x + contents_size_x - 10, p.y), ImVec2(p.x + contents_size_x, p.y + 10), IM_COL32_WHITE);
                ImGui::Dummy(ImVec2(0, 10));
            }
            ImGui::PopStyleVar(2);
            ImGui::Separator();
            if (show_button)
            {
                ImGui::Button("this is a 300-wide button", ImVec2(300, 0));
            }
            if (show_tree_nodes)
            {
                bool open = true;
                if (ImGui::TreeNode("this is a tree node"))
                {
                    if (ImGui::TreeNode("another one of those tree node..."))
                    {
                        ImGui::Text("Some tree contents");
                        ImGui::TreePop();
                    }
                    ImGui::TreePop();
                }
                ImGui::CollapsingHeader("CollapsingHeader", &open);
            }
            if (show_text_wrapped)
            {
                ImGui::TextWrapped("This text should automatically wrap on the edge of the work rectangle.");
            }
            if (show_columns)
            {
                ImGui::Text("Tables:");
                if (ImGui::BeginTable("table", 4, ImGuiTableFlags_Borders))
                {
                    for (int n = 0; n < 4; n++)
                    {
                        ImGui::TableNextColumn();
                        ImGui::Text("Width %.2f", ImGui::GetContentRegionAvail().x);
                    }
                    ImGui::EndTable();
                }
                ImGui::Text("Columns:");
                ImGui::Columns(4);
                for (int n = 0; n < 4; n++)
                {
                    ImGui::Text("Width %.2f", ImGui::GetColumnWidth());
                    ImGui::NextColumn();
                }
                ImGui::Columns(1);
            }
            if (show_tab_bar && ImGui::BeginTabBar("Hello"))
            {
                if (ImGui::BeginTabItem("OneOneOne")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("TwoTwoTwo")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("ThreeThreeThree")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("FourFourFour")) { ImGui::EndTabItem(); }
                ImGui::EndTabBar();
            }
            if (show_child)
            {
                ImGui::BeginChild("child", ImVec2(0, 0), true);
                ImGui::EndChild();
            }
            ImGui::End();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Clipping"))
    {
        static ImVec2 size(100.0f, 100.0f);
        static ImVec2 offset(30.0f, 30.0f);
        ImGui::DragFloat2("size", (float*)&size, 0.5f, 1.0f, 200.0f, "%.0f");
        ImGui::TextWrapped("(Click and drag to scroll)");

        for (int n = 0; n < 3; n++)
        {
            if (n > 0)
                ImGui::SameLine();
            ImGui::PushID(n);
            ImGui::BeginGroup(); // Lock X position

            ImGui::InvisibleButton("##empty", size);
            if (ImGui::IsItemActive() && ImGui::IsMouseDragging(ImGuiMouseButton_Left))
            {
                offset.x += ImGui::GetIO().MouseDelta.x;
                offset.y += ImGui::GetIO().MouseDelta.y;
            }
            const ImVec2 p0 = ImGui::GetItemRectMin();
            const ImVec2 p1 = ImGui::GetItemRectMax();
            const char* text_str = "Line 1 hello\nLine 2 clip me!";
            const ImVec2 text_pos = ImVec2(p0.x + offset.x, p0.y + offset.y);
            ImDrawList* draw_list = ImGui::GetWindowDrawList();

            switch (n)
            {
            case 0:
                HelpMarker(
                    "Using ImGui::PushClipRect():\n"
                    "Will alter ImGui hit-testing logic + ImDrawList rendering.\n"
                    "(use this if you want your clipping rectangle to affect interactions)");
                ImGui::PushClipRect(p0, p1, true);
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);
                ImGui::PopClipRect();
                break;
            case 1:
                HelpMarker(
                    "Using ImDrawList::PushClipRect():\n"
                    "Will alter ImDrawList rendering only.\n"
                    "(use this as a shortcut if you are only using ImDrawList calls)");
                draw_list->PushClipRect(p0, p1, true);
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);
                draw_list->PopClipRect();
                break;
            case 2:
                HelpMarker(
                    "Using ImDrawList::AddText() with a fine ClipRect:\n"
                    "Will alter only this specific ImDrawList::AddText() rendering.\n"
                    "(this is often used internally to avoid altering the clipping rectangle and minimize draw calls)");
                ImVec4 clip_rect(p0.x, p0.y, p1.x, p1.y); // AddText() takes a ImVec4* here so let's convert.
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(ImGui::GetFont(), ImGui::GetFontSize(), text_pos, IM_COL32_WHITE, text_str, NULL, 0.0f, &clip_rect);
                break;
            }
            ImGui::EndGroup();
            ImGui::PopID();
        }

        ImGui::TreePop();
    }
}

static void ShowDemoWindowPopups()
{
    if (!ImGui::CollapsingHeader("Popups & Modal windows"))
        return;

    // The properties of popups windows are:
    // - They block normal mouse hovering detection outside them. (*)
    // - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
    // - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as
    //   we are used to with regular Begin() calls. User can manipulate the visibility state by calling OpenPopup().
    // (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even
    //     when normally blocked by a popup.
    // Those three properties are connected. The library needs to hold their visibility state BECAUSE it can close
    // popups at any time.

    // Typical use for regular windows:
    //   bool my_tool_is_active = false; if (ImGui::Button("Open")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin("My Tool", &my_tool_is_active) { [...] } End();
    // Typical use for popups:
    //   if (ImGui::Button("Open")) ImGui::OpenPopup("MyPopup"); if (ImGui::BeginPopup("MyPopup") { [...] EndPopup(); }

    // With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.
    // This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.

    if (ImGui::TreeNode("Popups"))
    {
        ImGui::TextWrapped(
            "When a popup is active, it inhibits interacting with windows that are behind the popup. "
            "Clicking outside the popup closes it.");

        static int selected_fish = -1;
        const char* names[] = { "Bream", "Haddock", "Mackerel", "Pollock", "Tilefish" };
        static bool toggles[] = { true, false, false, false, false };

        // Simple selection popup (if you want to show the current selection inside the Button itself,
        // you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
        if (ImGui::Button("Select.."))
            ImGui::OpenPopup("my_select_popup");
        ImGui::SameLine();
        ImGui::TextUnformatted(selected_fish == -1 ? "<None>" : names[selected_fish]);
        if (ImGui::BeginPopup("my_select_popup"))
        {
            ImGui::Text("Aquarium");
            ImGui::Separator();
            for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                if (ImGui::Selectable(names[i]))
                    selected_fish = i;
            ImGui::EndPopup();
        }

        // Showing a menu with toggles
        if (ImGui::Button("Toggle.."))
            ImGui::OpenPopup("my_toggle_popup");
        if (ImGui::BeginPopup("my_toggle_popup"))
        {
            for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                ImGui::MenuItem(names[i], "", &toggles[i]);
            if (ImGui::BeginMenu("Sub-menu"))
            {
                ImGui::MenuItem("Click me");
                ImGui::EndMenu();
            }

            ImGui::Separator();
            ImGui::Text("Tooltip here");
            if (ImGui::IsItemHovered())
                ImGui::SetTooltip("I am a tooltip over a popup");

            if (ImGui::Button("Stacked Popup"))
                ImGui::OpenPopup("another popup");
            if (ImGui::BeginPopup("another popup"))
            {
                for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                    ImGui::MenuItem(names[i], "", &toggles[i]);
                if (ImGui::BeginMenu("Sub-menu"))
                {
                    ImGui::MenuItem("Click me");
                    if (ImGui::Button("Stacked Popup"))
                        ImGui::OpenPopup("another popup");
                    if (ImGui::BeginPopup("another popup"))
                    {
                        ImGui::Text("I am the last one here.");
                        ImGui::EndPopup();
                    }
                    ImGui::EndMenu();
                }
                ImGui::EndPopup();
            }
            ImGui::EndPopup();
        }

        // Call the more complete ShowExampleMenuFile which we use in various places of this demo
        if (ImGui::Button("File Menu.."))
            ImGui::OpenPopup("my_file_popup");
        if (ImGui::BeginPopup("my_file_popup"))
        {
            ShowExampleMenuFile();
            ImGui::EndPopup();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Context menus"))
    {
        HelpMarker("\"Context\" functions are simple helpers to associate a Popup to a given Item or Window identifier.");

        // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
        //     if (id == 0)
        //         id = GetItemID(); // Use last item id
        //     if (IsItemHovered() && IsMouseReleased(ImGuiMouseButton_Right))
        //         OpenPopup(id);
        //     return BeginPopup(id);
        // For advanced advanced uses you may want to replicate and customize this code.
        // See more details in BeginPopupContextItem().

        // Example 1
        // When used after an item that has an ID (e.g. Button), we can skip providing an ID to BeginPopupContextItem(),
        // and BeginPopupContextItem() will use the last item ID as the popup ID.
        {
            const char* names[5] = { "Label1", "Label2", "Label3", "Label4", "Label5" };
            for (int n = 0; n < 5; n++)
            {
                ImGui::Selectable(names[n]);
                if (ImGui::BeginPopupContextItem()) // <-- use last item id as popup id
                {
                    ImGui::Text("This a popup for \"%s\"!", names[n]);
                    if (ImGui::Button("Close"))
                        ImGui::CloseCurrentPopup();
                    ImGui::EndPopup();
                }
                if (ImGui::IsItemHovered())
                    ImGui::SetTooltip("Right-click to open popup");
            }
        }

        // Example 2
        // Popup on a Text() element which doesn't have an identifier: we need to provide an identifier to BeginPopupContextItem().
        // Using an explicit identifier is also convenient if you want to activate the popups from different locations.
        {
            HelpMarker("Text() elements don't have stable identifiers so we need to provide one.");
            static float value = 0.5f;
            ImGui::Text("Value = %.3f <-- (1) right-click this value", value);
            if (ImGui::BeginPopupContextItem("my popup"))
            {
                if (ImGui::Selectable("Set to zero")) value = 0.0f;
                if (ImGui::Selectable("Set to PI")) value = 3.1415f;
                ImGui::SetNextItemWidth(-FLT_MIN);
                ImGui::DragFloat("##Value", &value, 0.1f, 0.0f, 0.0f);
                ImGui::EndPopup();
            }

            // We can also use OpenPopupOnItemClick() to toggle the visibility of a given popup.
            // Here we make it that right-clicking this other text element opens the same popup as above.
            // The popup itself will be submitted by the code above.
            ImGui::Text("(2) Or right-click this text");
            ImGui::OpenPopupOnItemClick("my popup", ImGuiPopupFlags_MouseButtonRight);

            // Back to square one: manually open the same popup.
            if (ImGui::Button("(3) Or click this button"))
                ImGui::OpenPopup("my popup");
        }

        // Example 3
        // When using BeginPopupContextItem() with an implicit identifier (NULL == use last item ID),
        // we need to make sure your item identifier is stable.
        // In this example we showcase altering the item label while preserving its identifier, using the ### operator (see FAQ).
        {
            HelpMarker("Showcase using a popup ID linked to item ID, with the item having a changing label + stable ID using the ### operator.");
            static char name[32] = "Label1";
            char buf[64];
            sprintf(buf, "Button: %s###Button", name); // ### operator override ID ignoring the preceding label
            ImGui::Button(buf);
            if (ImGui::BeginPopupContextItem())
            {
                ImGui::Text("Edit name:");
                ImGui::InputText("##edit", name, IM_ARRAYSIZE(name));
                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }
            ImGui::SameLine(); ImGui::Text("(<-- right-click here)");
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Modals"))
    {
        ImGui::TextWrapped("Modal windows are like popups but the user cannot close them by clicking outside.");

        if (ImGui::Button("Delete.."))
            ImGui::OpenPopup("Delete?");

        // Always center this window when appearing
        ImVec2 center = ImGui::GetMainViewport()->GetCenter();
        ImGui::SetNextWindowPos(center, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));

        if (ImGui::BeginPopupModal("Delete?", NULL, ImGuiWindowFlags_AlwaysAutoResize))
        {
            ImGui::Text("All those beautiful files will be deleted.\nThis operation cannot be undone!\n\n");
            ImGui::Separator();

            //static int unused_i = 0;
            //ImGui::Combo("Combo", &unused_i, "Delete\0Delete harder\0");

            static bool dont_ask_me_next_time = false;
            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
            ImGui::Checkbox("Don't ask me next time", &dont_ask_me_next_time);
            ImGui::PopStyleVar();

            if (ImGui::Button("OK", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }
            ImGui::SetItemDefaultFocus();
            ImGui::SameLine();
            if (ImGui::Button("Cancel", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }
            ImGui::EndPopup();
        }

        if (ImGui::Button("Stacked modals.."))
            ImGui::OpenPopup("Stacked 1");
        if (ImGui::BeginPopupModal("Stacked 1", NULL, ImGuiWindowFlags_MenuBar))
        {
            if (ImGui::BeginMenuBar())
            {
                if (ImGui::BeginMenu("File"))
                {
                    if (ImGui::MenuItem("Some menu item")) {}
                    ImGui::EndMenu();
                }
                ImGui::EndMenuBar();
            }
            ImGui::Text("Hello from Stacked The First\nUsing style.Colors[ImGuiCol_ModalWindowDimBg] behind it.");

            // Testing behavior of widgets stacking their own regular popups over the modal.
            static int item = 1;
            static float color[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::Combo("Combo", &item, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");
            ImGui::ColorEdit4("color", color);

            if (ImGui::Button("Add another modal.."))
                ImGui::OpenPopup("Stacked 2");

            // Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which
            // will close the popup. Note that the visibility state of popups is owned by imgui, so the input value
            // of the bool actually doesn't matter here.
            bool unused_open = true;
            if (ImGui::BeginPopupModal("Stacked 2", &unused_open))
            {
                ImGui::Text("Hello from Stacked The Second!");
                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }

            if (ImGui::Button("Close"))
                ImGui::CloseCurrentPopup();
            ImGui::EndPopup();
        }

        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Menus inside a regular window"))
    {
        ImGui::TextWrapped("Below we are testing adding menu items to a regular window. It's rather unusual but should work!");
        ImGui::Separator();

        // Note: As a quirk in this very specific example, we want to differentiate the parent of this menu from the
        // parent of the various popup menus above. To do so we are encloding the items in a PushID()/PopID() block
        // to make them two different menusets. If we don't, opening any popup above and hovering our menu here would
        // open it. This is because once a menu is active, we allow to switch to a sibling menu by just hovering on it,
        // which is the desired behavior for regular menus.
        ImGui::PushID("foo");
        ImGui::MenuItem("Menu item", "CTRL+M");
        if (ImGui::BeginMenu("Menu inside a regular window"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        ImGui::PopID();
        ImGui::Separator();
        ImGui::TreePop();
    }
}

// Dummy data structure that we use for the Table demo.
// (pre-C++11 doesn't allow us to instantiate ImVector<MyItem> template if this structure if defined inside the demo function)
namespace
{
// We are passing our own identifier to TableSetupColumn() to facilitate identifying columns in the sorting code.
// This identifier will be passed down into ImGuiTableSortSpec::ColumnUserID.
// But it is possible to omit the user id parameter of TableSetupColumn() and just use the column index instead! (ImGuiTableSortSpec::ColumnIndex)
// If you don't use sorting, you will generally never care about giving column an ID!
enum MyItemColumnID
{
    MyItemColumnID_ID,
    MyItemColumnID_Name,
    MyItemColumnID_Action,
    MyItemColumnID_Quantity,
    MyItemColumnID_Description
};

struct MyItem
{
    int         ID;
    const char* Name;
    int         Quantity;

    // We have a problem which is affecting _only this demo_ and should not affect your code:
    // As we don't rely on std:: or other third-party library to compile dear imgui, we only have reliable access to qsort(),
    // however qsort doesn't allow passing user data to comparing function.
    // As a workaround, we are storing the sort specs in a static/global for the comparing function to access.
    // In your own use case you would probably pass the sort specs to your sorting/comparing functions directly and not use a global.
    // We could technically call ImGui::TableGetSortSpecs() in CompareWithSortSpecs(), but considering that this function is called
    // very often by the sorting algorithm it would be a little wasteful.
    static const ImGuiTableSortSpecs* s_current_sort_specs;

    // Compare function to be used by qsort()
    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)
    {
        const MyItem* a = (const MyItem*)lhs;
        const MyItem* b = (const MyItem*)rhs;
        for (int n = 0; n < s_current_sort_specs->SpecsCount; n++)
        {
            // Here we identify columns using the ColumnUserID value that we ourselves passed to TableSetupColumn()
            // We could also choose to identify columns based on their index (sort_spec->ColumnIndex), which is simpler!
            const ImGuiTableColumnSortSpecs* sort_spec = &s_current_sort_specs->Specs[n];
            int delta = 0;
            switch (sort_spec->ColumnUserID)
            {
            case MyItemColumnID_ID:             delta = (a->ID - b->ID);                break;
            case MyItemColumnID_Name:           delta = (strcmp(a->Name, b->Name));     break;
            case MyItemColumnID_Quantity:       delta = (a->Quantity - b->Quantity);    break;
            case MyItemColumnID_Description:    delta = (strcmp(a->Name, b->Name));     break;
            default: IM_ASSERT(0); break;
            }
            if (delta > 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? +1 : -1;
            if (delta < 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? -1 : +1;
        }

        // qsort() is instable so always return a way to differenciate items.
        // Your own compare function may want to avoid fallback on implicit sort specs e.g. a Name compare if it wasn't already part of the sort specs.
        return (a->ID - b->ID);
    }
};
const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;
}

// Make the UI compact because there are so many fields
static void PushStyleCompact()
{
    ImGuiStyle& style = ImGui::GetStyle();
    ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(style.FramePadding.x, (float)(int)(style.FramePadding.y * 0.60f)));
    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x, (float)(int)(style.ItemSpacing.y * 0.60f)));
}

static void PopStyleCompact()
{
    ImGui::PopStyleVar(2);
}

// Show a combo box with a choice of sizing policies
static void EditTableSizingFlags(ImGuiTableFlags* p_flags)
{
    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };
    static const EnumDesc policies[] =
    {
        { ImGuiTableFlags_None,               "Default",                            "Use default sizing policy:\n- ImGuiTableFlags_SizingFixedFit if ScrollX is on or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n- ImGuiTableFlags_SizingStretchSame otherwise." },
        { ImGuiTableFlags_SizingFixedFit,     "ImGuiTableFlags_SizingFixedFit",     "Columns default to _WidthFixed (if resizable) or _WidthAuto (if not resizable), matching contents width." },
        { ImGuiTableFlags_SizingFixedSame,    "ImGuiTableFlags_SizingFixedSame",    "Columns are all the same width, matching the maximum contents width.\nImplicitly disable ImGuiTableFlags_Resizable and enable ImGuiTableFlags_NoKeepColumnsVisible." },
        { ImGuiTableFlags_SizingStretchProp,  "ImGuiTableFlags_SizingStretchProp",  "Columns default to _WidthStretch with weights proportional to their widths." },
        { ImGuiTableFlags_SizingStretchSame,  "ImGuiTableFlags_SizingStretchSame",  "Columns default to _WidthStretch with same weights." }
    };
    int idx;
    for (idx = 0; idx < IM_ARRAYSIZE(policies); idx++)
        if (policies[idx].Value == (*p_flags & ImGuiTableFlags_SizingMask_))
            break;
    const char* preview_text = (idx < IM_ARRAYSIZE(policies)) ? policies[idx].Name + (idx > 0 ? strlen("ImGuiTableFlags") : 0) : "";
    if (ImGui::BeginCombo("Sizing Policy", preview_text))
    {
        for (int n = 0; n < IM_ARRAYSIZE(policies); n++)
            if (ImGui::Selectable(policies[n].Name, idx == n))
                *p_flags = (*p_flags & ~ImGuiTableFlags_SizingMask_) | policies[n].Value;
        ImGui::EndCombo();
    }
    ImGui::SameLine();
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 50.0f);
        for (int m = 0; m < IM_ARRAYSIZE(policies); m++)
        {
            ImGui::Separator();
            ImGui::Text("%s:", policies[m].Name);
            ImGui::Separator();
            ImGui::SetCursorPosX(ImGui::GetCursorPosX() + ImGui::GetStyle().IndentSpacing * 0.5f);
            ImGui::TextUnformatted(policies[m].Tooltip);
        }
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)
{
    ImGui::CheckboxFlags("_DefaultHide", p_flags, ImGuiTableColumnFlags_DefaultHide);
    ImGui::CheckboxFlags("_DefaultSort", p_flags, ImGuiTableColumnFlags_DefaultSort);
    if (ImGui::CheckboxFlags("_WidthStretch", p_flags, ImGuiTableColumnFlags_WidthStretch))
        *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthStretch);
    if (ImGui::CheckboxFlags("_WidthFixed", p_flags, ImGuiTableColumnFlags_WidthFixed))
        *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthFixed);
    ImGui::CheckboxFlags("_NoResize", p_flags, ImGuiTableColumnFlags_NoResize);
    ImGui::CheckboxFlags("_NoReorder", p_flags, ImGuiTableColumnFlags_NoReorder);
    ImGui::CheckboxFlags("_NoHide", p_flags, ImGuiTableColumnFlags_NoHide);
    ImGui::CheckboxFlags("_NoClip", p_flags, ImGuiTableColumnFlags_NoClip);
    ImGui::CheckboxFlags("_NoSort", p_flags, ImGuiTableColumnFlags_NoSort);
    ImGui::CheckboxFlags("_NoSortAscending", p_flags, ImGuiTableColumnFlags_NoSortAscending);
    ImGui::CheckboxFlags("_NoSortDescending", p_flags, ImGuiTableColumnFlags_NoSortDescending);
    ImGui::CheckboxFlags("_NoHeaderWidth", p_flags, ImGuiTableColumnFlags_NoHeaderWidth);
    ImGui::CheckboxFlags("_PreferSortAscending", p_flags, ImGuiTableColumnFlags_PreferSortAscending);
    ImGui::CheckboxFlags("_PreferSortDescending", p_flags, ImGuiTableColumnFlags_PreferSortDescending);
    ImGui::CheckboxFlags("_IndentEnable", p_flags, ImGuiTableColumnFlags_IndentEnable); ImGui::SameLine(); HelpMarker("Default for column 0");
    ImGui::CheckboxFlags("_IndentDisable", p_flags, ImGuiTableColumnFlags_IndentDisable); ImGui::SameLine(); HelpMarker("Default for column >0");
}

static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)
{
    ImGui::CheckboxFlags("_IsEnabled", &flags, ImGuiTableColumnFlags_IsEnabled);
    ImGui::CheckboxFlags("_IsVisible", &flags, ImGuiTableColumnFlags_IsVisible);
    ImGui::CheckboxFlags("_IsSorted", &flags, ImGuiTableColumnFlags_IsSorted);
    ImGui::CheckboxFlags("_IsHovered", &flags, ImGuiTableColumnFlags_IsHovered);
}

static void ShowDemoWindowTables()
{
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
    if (!ImGui::CollapsingHeader("Tables & Columns"))
        return;

    // Using those as a base value to create width/height that are factor of the size of our font
    const float TEXT_BASE_WIDTH = ImGui::CalcTextSize("A").x;
    const float TEXT_BASE_HEIGHT = ImGui::GetTextLineHeightWithSpacing();

    ImGui::PushID("Tables");

    int open_action = -1;
    if (ImGui::Button("Open all"))
        open_action = 1;
    ImGui::SameLine();
    if (ImGui::Button("Close all"))
        open_action = 0;
    ImGui::SameLine();

    // Options
    static bool disable_indent = false;
    ImGui::Checkbox("Disable tree indentation", &disable_indent);
    ImGui::SameLine();
    HelpMarker("Disable the indenting of tree nodes so demo tables can use the full window width.");
    ImGui::Separator();
    if (disable_indent)
        ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, 0.0f);

    // About Styling of tables
    // Most settings are configured on a per-table basis via the flags passed to BeginTable() and TableSetupColumns APIs.
    // There are however a few settings that a shared and part of the ImGuiStyle structure:
    //   style.CellPadding                          // Padding within each cell
    //   style.Colors[ImGuiCol_TableHeaderBg]       // Table header background
    //   style.Colors[ImGuiCol_TableBorderStrong]   // Table outer and header borders
    //   style.Colors[ImGuiCol_TableBorderLight]    // Table inner borders
    //   style.Colors[ImGuiCol_TableRowBg]          // Table row background when ImGuiTableFlags_RowBg is enabled (even rows)
    //   style.Colors[ImGuiCol_TableRowBgAlt]       // Table row background when ImGuiTableFlags_RowBg is enabled (odds rows)

    // Demos
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Basic"))
    {
        // Here we will showcase three different ways to output a table.
        // They are very simple variations of a same thing!

        // [Method 1] Using TableNextRow() to create a new row, and TableSetColumnIndex() to select the column.
        // In many situations, this is the most flexible and easy to use pattern.
        HelpMarker("Using TableNextRow() + calling TableSetColumnIndex() _before_ each cell, in a loop.");
        if (ImGui::BeginTable("table1", 3))
        {
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Row %d Column %d", row, column);
                }
            }
            ImGui::EndTable();
        }

        // [Method 2] Using TableNextColumn() called multiple times, instead of using a for loop + TableSetColumnIndex().
        // This is generally more convenient when you have code manually submitting the contents of each columns.
        HelpMarker("Using TableNextRow() + calling TableNextColumn() _before_ each cell, manually.");
        if (ImGui::BeginTable("table2", 3))
        {
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                ImGui::TableNextColumn();
                ImGui::Text("Row %d", row);
                ImGui::TableNextColumn();
                ImGui::Text("Some contents");
                ImGui::TableNextColumn();
                ImGui::Text("123.456");
            }
            ImGui::EndTable();
        }

        // [Method 3] We call TableNextColumn() _before_ each cell. We never call TableNextRow(),
        // as TableNextColumn() will automatically wrap around and create new roes as needed.
        // This is generally more convenient when your cells all contains the same type of data.
        HelpMarker(
            "Only using TableNextColumn(), which tends to be convenient for tables where every cells contains the same type of contents.\n"
            "This is also more similar to the old NextColumn() function of the Columns API, and provided to facilitate the Columns->Tables API transition.");
        if (ImGui::BeginTable("table3", 3))
        {
            for (int item = 0; item < 14; item++)
            {
                ImGui::TableNextColumn();
                ImGui::Text("Item %d", item);
            }
            ImGui::EndTable();
        }

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Borders, background"))
    {
        // Expose a few Borders related flags interactively
        enum ContentsType { CT_Text, CT_FillButton };
        static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
        static bool display_headers = false;
        static int contents_type = CT_Text;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);
        ImGui::SameLine(); HelpMarker("ImGuiTableFlags_Borders\n = ImGuiTableFlags_BordersInnerV\n | ImGuiTableFlags_BordersOuterV\n | ImGuiTableFlags_BordersInnerV\n | ImGuiTableFlags_BordersOuterH");
        ImGui::Indent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);
        ImGui::Unindent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);
        ImGui::Unindent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags, ImGuiTableFlags_BordersOuter);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags, ImGuiTableFlags_BordersInner);
        ImGui::Unindent();

        ImGui::AlignTextToFramePadding(); ImGui::Text("Cell contents:");
        ImGui::SameLine(); ImGui::RadioButton("Text", &contents_type, CT_Text);
        ImGui::SameLine(); ImGui::RadioButton("FillButton", &contents_type, CT_FillButton);
        ImGui::Checkbox("Display headers", &display_headers);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appears in Headers");
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            // Display headers so we can inspect their interaction with borders.
            // (Headers are not the main purpose of this section of the demo, so we are not elaborating on them too much. See other sections for details)
            if (display_headers)
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
            }

            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    char buf[32];
                    sprintf(buf, "Hello %d,%d", column, row);
                    if (contents_type == CT_Text)
                        ImGui::TextUnformatted(buf);
                    else if (contents_type)
                        ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Resizable, stretch"))
    {
        // By default, if we don't enable ScrollX the sizing policy for each columns is "Stretch"
        // Each columns maintain a sizing weight, and they will occupy all available width.
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
        ImGui::SameLine(); HelpMarker("Using the _Resizable flag automatically enables the _BordersInnerV flag as well, this is why the resize borders are still showing when unchecking this.");
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Resizable, fixed"))
    {
        // Here we use ImGuiTableFlags_SizingFixedFit (even though _ScrollX is not set)
        // So columns will adopt the "Fixed" policy and will maintain a fixed width regardless of the whole available width (unless table is small)
        // If there is not enough available width to fit all columns, they will however be resized down.
        // FIXME-TABLE: Providing a stretch-on-init would make sense especially for tables which don't have saved settings
        HelpMarker(
            "Using _Resizable + _SizingFixedFit flags.\n"
            "Fixed-width columns generally makes more sense if you want to use horizontal scrolling.\n\n"
            "Double-click a column border to auto-fit the column to its contents.");
        PushStyleCompact();
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Resizable, mixed"))
    {
        HelpMarker(
            "Using TableSetupColumn() to alter resizing policy on a per-column basis.\n\n"
            "When combining Fixed and Stretch columns, generally you only want one, maybe two trailing columns to use _WidthStretch.");
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;

        if (ImGui::BeginTable("table1", 3, flags))
        {
            ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableHeadersRow();
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %d,%d", (column == 2) ? "Stretch" : "Fixed", column, row);
                }
            }
            ImGui::EndTable();
        }
        if (ImGui::BeginTable("table2", 6, flags))
        {
            ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_DefaultHide);
            ImGui::TableSetupColumn("DDD", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableSetupColumn("EEE", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableSetupColumn("FFF", ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_DefaultHide);
            ImGui::TableHeadersRow();
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 6; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %d,%d", (column >= 3) ? "Stretch" : "Fixed", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Reorderable, hideable, with headers"))
    {
        HelpMarker(
            "Click and drag column headers to reorder columns.\n\n"
            "Right-click on a header to open a context menu.");
        static ImGuiTableFlags flags = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);
        ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers)");
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            // Submit columns name with TableSetupColumn() and call TableHeadersRow() to create a row with a header in each column.
            // (Later we will show how TableSetupColumn() has other uses, optional flags, sizing weight etc.)
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        // Use outer_size.x == 0.0f instead of default to make the table as tight as possible (only valid when no scrolling and no stretch column)
        if (ImGui::BeginTable("table2", 3, flags | ImGuiTableFlags_SizingFixedFit, ImVec2(0.0f, 0.0f)))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Fixed %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Padding"))
    {
        // First example: showcase use of padding flags and effect of BorderOuterV/BorderInnerV on X padding.
        // We don't expose BorderOuterH/BorderInnerH here because they have no effect on X padding.
        HelpMarker(
            "We often want outer padding activated when any using features which makes the edges of a column visible:\n"
            "e.g.:\n"
            "- BorderOuterV\n"
            "- any form of row selection\n"
            "Because of this, activating BorderOuterV sets the default to PadOuterX. Using PadOuterX or NoPadOuterX you can override the default.\n\n"
            "Actual padding values are using style.CellPadding.\n\n"
            "In this demo we don't show horizontal borders to emphasis how they don't affect default horizontal padding.");

        static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags1, ImGuiTableFlags_PadOuterX);
        ImGui::SameLine(); HelpMarker("Enable outer-most padding (default if ImGuiTableFlags_BordersOuterV is set)");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags1, ImGuiTableFlags_NoPadOuterX);
        ImGui::SameLine(); HelpMarker("Disable outer-most padding (default if ImGuiTableFlags_BordersOuterV is not set)");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags1, ImGuiTableFlags_NoPadInnerX);
        ImGui::SameLine(); HelpMarker("Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off)");
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags1, ImGuiTableFlags_BordersOuterV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags1, ImGuiTableFlags_BordersInnerV);
        static bool show_headers = false;
        ImGui::Checkbox("show_headers", &show_headers);
        PopStyleCompact();

        if (ImGui::BeginTable("table_padding", 3, flags1))
        {
            if (show_headers)
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
            }

            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                    {
                        ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);
                    }
                    else
                    {
                        char buf[32];
                        sprintf(buf, "Hello %d,%d", column, row);
                        ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                    }
                    //if (ImGui::TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered)
                    //    ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, IM_COL32(0, 100, 0, 255));
                }
            }
            ImGui::EndTable();
        }

        // Second example: set style.CellPadding to (0.0) or a custom value.
        // FIXME-TABLE: Vertical border effectively not displayed the same way as horizontal one...
        HelpMarker("Setting style.CellPadding to (0,0) or a custom value.");
        static ImGuiTableFlags flags2 = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
        static ImVec2 cell_padding(0.0f, 0.0f);
        static bool show_widget_frame_bg = true;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags2, ImGuiTableFlags_Borders);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags2, ImGuiTableFlags_BordersH);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags2, ImGuiTableFlags_BordersV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags2, ImGuiTableFlags_BordersInner);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags2, ImGuiTableFlags_BordersOuter);
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags2, ImGuiTableFlags_RowBg);
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags2, ImGuiTableFlags_Resizable);
        ImGui::Checkbox("show_widget_frame_bg", &show_widget_frame_bg);
        ImGui::SliderFloat2("CellPadding", &cell_padding.x, 0.0f, 10.0f, "%.0f");
        PopStyleCompact();

        ImGui::PushStyleVar(ImGuiStyleVar_CellPadding, cell_padding);
        if (ImGui::BeginTable("table_padding_2", 3, flags2))
        {
            static char text_bufs[3 * 5][16]; // Mini text storage for 3x5 cells
            static bool init = true;
            if (!show_widget_frame_bg)
                ImGui::PushStyleColor(ImGuiCol_FrameBg, 0);
            for (int cell = 0; cell < 3 * 5; cell++)
            {
                ImGui::TableNextColumn();
                if (init)
                    strcpy(text_bufs[cell], "edit me");
                ImGui::SetNextItemWidth(-FLT_MIN);
                ImGui::PushID(cell);
                ImGui::InputText("##cell", text_bufs[cell], IM_ARRAYSIZE(text_bufs[cell]));
                ImGui::PopID();
            }
            if (!show_widget_frame_bg)
                ImGui::PopStyleColor();
            init = false;
            ImGui::EndTable();
        }
        ImGui::PopStyleVar();

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Sizing policies"))
    {
        static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags1, ImGuiTableFlags_NoHostExtendX);
        PopStyleCompact();

        static ImGuiTableFlags sizing_policy_flags[4] = { ImGuiTableFlags_SizingFixedFit, ImGuiTableFlags_SizingFixedSame, ImGuiTableFlags_SizingStretchProp, ImGuiTableFlags_SizingStretchSame };
        for (int table_n = 0; table_n < 4; table_n++)
        {
            ImGui::PushID(table_n);
            ImGui::SetNextItemWidth(TEXT_BASE_WIDTH * 30);
            EditTableSizingFlags(&sizing_policy_flags[table_n]);

            // To make it easier to understand the different sizing policy,
            // For each policy: we display one table where the columns have equal contents width, and one where the columns have different contents width.
            if (ImGui::BeginTable("table1", 3, sizing_policy_flags[table_n] | flags1))
            {
                for (int row = 0; row < 3; row++)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                }
                ImGui::EndTable();
            }
            if (ImGui::BeginTable("table2", 3, sizing_policy_flags[table_n] | flags1))
            {
                for (int row = 0; row < 3; row++)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn(); ImGui::Text("AAAA");
                    ImGui::TableNextColumn(); ImGui::Text("BBBBBBBB");
                    ImGui::TableNextColumn(); ImGui::Text("CCCCCCCCCCCC");
                }
                ImGui::EndTable();
            }
            ImGui::PopID();
        }

        ImGui::Spacing();
        ImGui::TextUnformatted("Advanced");
        ImGui::SameLine();
        HelpMarker("This section allows you to interact and see the effect of various sizing policies depending on whether Scroll is enabled and the contents of your columns.");

        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, CT_InputText };
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg | ImGuiTableFlags_Resizable;
        static int contents_type = CT_ShowWidth;
        static int column_count = 3;

        PushStyleCompact();
        ImGui::PushID("Advanced");
        ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);
        EditTableSizingFlags(&flags);
        ImGui::Combo("Contents", &contents_type, "Show width\0Short Text\0Long Text\0Button\0Fill Button\0InputText\0");
        if (contents_type == CT_FillButton)
        {
            ImGui::SameLine();
            HelpMarker("Be mindful that using right-alignment (e.g. size.x = -FLT_MIN) creates a feedback loop where contents width can feed into auto-column width can feed into contents width.");
        }
        ImGui::DragInt("Columns", &column_count, 0.1f, 1, 64, "%d", ImGuiSliderFlags_AlwaysClamp);
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);
        ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);
        ImGui::PopItemWidth();
        ImGui::PopID();
        PopStyleCompact();

        if (ImGui::BeginTable("table2", column_count, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 7)))
        {
            for (int cell = 0; cell < 10 * column_count; cell++)
            {
                ImGui::TableNextColumn();
                int column = ImGui::TableGetColumnIndex();
                int row = ImGui::TableGetRowIndex();

                ImGui::PushID(cell);
                char label[32];
                static char text_buf[32] = "";
                sprintf(label, "Hello %d,%d", column, row);
                switch (contents_type)
                {
                case CT_ShortText:  ImGui::TextUnformatted(label); break;
                case CT_LongText:   ImGui::Text("Some %s text %d,%d\nOver two lines..", column == 0 ? "long" : "longeeer", column, row); break;
                case CT_ShowWidth:  ImGui::Text("W: %.1f", ImGui::GetContentRegionAvail().x); break;
                case CT_Button:     ImGui::Button(label); break;
                case CT_FillButton: ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f)); break;
                case CT_InputText:  ImGui::SetNextItemWidth(-FLT_MIN); ImGui::InputText("##", text_buf, IM_ARRAYSIZE(text_buf)); break;
                }
                ImGui::PopID();
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Vertical scrolling, with clipping"))
    {
        HelpMarker("Here we activate ScrollY, which will create a child window container to allow hosting scrollable contents.\n\nWe also demonstrate using ImGuiListClipper to virtualize the submission of many items.");
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        PopStyleCompact();

        // When using ScrollX or ScrollY we need to specify a size for our table container!
        // Otherwise by default the table will fit all available space, like a BeginChild() call.
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);
        if (ImGui::BeginTable("table_scrolly", 3, flags, outer_size))
        {
            ImGui::TableSetupScrollFreeze(0, 1); // Make top row always visible
            ImGui::TableSetupColumn("One", ImGuiTableColumnFlags_None);
            ImGui::TableSetupColumn("Two", ImGuiTableColumnFlags_None);
            ImGui::TableSetupColumn("Three", ImGuiTableColumnFlags_None);
            ImGui::TableHeadersRow();

            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(1000);
            while (clipper.Step())
            {
                for (int row = clipper.DisplayStart; row < clipper.DisplayEnd; row++)
                {
                    ImGui::TableNextRow();
                    for (int column = 0; column < 3; column++)
                    {
                        ImGui::TableSetColumnIndex(column);
                        ImGui::Text("Hello %d,%d", column, row);
                    }
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Horizontal scrolling"))
    {
        HelpMarker(
            "When ScrollX is enabled, the default sizing policy becomes ImGuiTableFlags_SizingFixedFit, "
            "as automatically stretching columns doesn't make much sense with horizontal scrolling.\n\n"
            "Also note that as of the current version, you will almost always want to enable ScrollY along with ScrollX,"
            "because the container window won't automatically extend vertically to fix contents (this may be improved in future versions).");
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;
        static int freeze_cols = 1;
        static int freeze_rows = 1;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
        ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
        ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
        ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
        PopStyleCompact();

        // When using ScrollX or ScrollY we need to specify a size for our table container!
        // Otherwise by default the table will fit all available space, like a BeginChild() call.
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);
        if (ImGui::BeginTable("table_scrollx", 7, flags, outer_size))
        {
            ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);
            ImGui::TableSetupColumn("Line #", ImGuiTableColumnFlags_NoHide); // Make the first column not hideable to match our use of TableSetupScrollFreeze()
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableSetupColumn("Four");
            ImGui::TableSetupColumn("Five");
            ImGui::TableSetupColumn("Six");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 20; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 7; column++)
                {
                    // Both TableNextColumn() and TableSetColumnIndex() return true when a column is visible or performing width measurement.
                    // Because here we know that:
                    // - A) all our columns are contributing the same to row height
                    // - B) column 0 is always visible,
                    // We only always submit this one column and can skip others.
                    // More advanced per-column clipping behaviors may benefit from polling the status flags via TableGetColumnFlags().
                    if (!ImGui::TableSetColumnIndex(column) && column > 0)
                        continue;
                    if (column == 0)
                        ImGui::Text("Line %d", row);
                    else
                        ImGui::Text("Hello world %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        ImGui::Spacing();
        ImGui::TextUnformatted("Stretch + ScrollX");
        ImGui::SameLine();
        HelpMarker(
            "Showcase using Stretch columns + ScrollX together: "
            "this is rather unusual and only makes sense when specifying an 'inner_width' for the table!\n"
            "Without an explicit value, inner_width is == outer_size.x and therefore using Stretch columns + ScrollX together doesn't make sense.");
        static ImGuiTableFlags flags2 = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
        static float inner_width = 1000.0f;
        PushStyleCompact();
        ImGui::PushID("flags3");
        ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags2, ImGuiTableFlags_ScrollX);
        ImGui::DragFloat("inner_width", &inner_width, 1.0f, 0.0f, FLT_MAX, "%.1f");
        ImGui::PopItemWidth();
        ImGui::PopID();
        PopStyleCompact();
        if (ImGui::BeginTable("table2", 7, flags2, outer_size, inner_width))
        {
            for (int cell = 0; cell < 20 * 7; cell++)
            {
                ImGui::TableNextColumn();
                ImGui::Text("Hello world %d,%d", ImGui::TableGetColumnIndex(), ImGui::TableGetRowIndex());
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Columns flags"))
    {
        // Create a first table just to show all the options/flags we want to make visible in our example!
        const int column_count = 3;
        const char* column_names[column_count] = { "One", "Two", "Three" };
        static ImGuiTableColumnFlags column_flags[column_count] = { ImGuiTableColumnFlags_DefaultSort, ImGuiTableColumnFlags_None, ImGuiTableColumnFlags_DefaultHide };
        static ImGuiTableColumnFlags column_flags_out[column_count] = { 0, 0, 0 }; // Output from TableGetColumnFlags()

        if (ImGui::BeginTable("table_columns_flags_checkboxes", column_count, ImGuiTableFlags_None))
        {
            PushStyleCompact();
            for (int column = 0; column < column_count; column++)
            {
                ImGui::TableNextColumn();
                ImGui::PushID(column);
                ImGui::AlignTextToFramePadding(); // FIXME-TABLE: Workaround for wrong text baseline propagation
                ImGui::Text("'%s'", column_names[column]);
                ImGui::Spacing();
                ImGui::Text("Input flags:");
                EditTableColumnsFlags(&column_flags[column]);
                ImGui::Spacing();
                ImGui::Text("Output flags:");
                ShowTableColumnsStatusFlags(column_flags_out[column]);
                ImGui::PopID();
            }
            PopStyleCompact();
            ImGui::EndTable();
        }

        // Create the real table we care about for the example!
        // We use a scrolling table to be able to showcase the difference between the _IsEnabled and _IsVisible flags above, otherwise in
        // a non-scrolling table columns are always visible (unless using ImGuiTableFlags_NoKeepColumnsVisible + resizing the parent window down)
        const ImGuiTableFlags flags
            = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV
            | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable;
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 9);
        if (ImGui::BeginTable("table_columns_flags", column_count, flags, outer_size))
        {
            for (int column = 0; column < column_count; column++)
                ImGui::TableSetupColumn(column_names[column], column_flags[column]);
            ImGui::TableHeadersRow();
            for (int column = 0; column < column_count; column++)
                column_flags_out[column] = ImGui::TableGetColumnFlags(column);
            float indent_step = (float)((int)TEXT_BASE_WIDTH / 2);
            for (int row = 0; row < 8; row++)
            {
                ImGui::Indent(indent_step); // Add some indentation to demonstrate usage of per-column IndentEnable/IndentDisable flags.
                ImGui::TableNextRow();
                for (int column = 0; column < column_count; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %s", (column == 0) ? "Indented" : "Hello", ImGui::TableGetColumnName(column));
                }
            }
            ImGui::Unindent(indent_step * 8.0f);

            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Columns widths"))
    {
        HelpMarker("Using TableSetupColumn() to setup default width.");

        static ImGuiTableFlags flags1 = ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBodyUntilResize;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags1, ImGuiTableFlags_NoBordersInBodyUntilResize);
        PopStyleCompact();
        if (ImGui::BeginTable("table1", 3, flags1))
        {
            // We could also set ImGuiTableFlags_SizingFixedFit on the table and all columns will default to ImGuiTableColumnFlags_WidthFixed.
            ImGui::TableSetupColumn("one", ImGuiTableColumnFlags_WidthFixed, 100.0f); // Default to 100.0f
            ImGui::TableSetupColumn("two", ImGuiTableColumnFlags_WidthFixed, 200.0f); // Default to 200.0f
            ImGui::TableSetupColumn("three", ImGuiTableColumnFlags_WidthFixed);       // Default to auto
            ImGui::TableHeadersRow();
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                        ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);
                    else
                        ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        HelpMarker("Using TableSetupColumn() to setup explicit width.\n\nUnless _NoKeepColumnsVisible is set, fixed columns with set width may still be shrunk down if there's not enough space in the host.");

        static ImGuiTableFlags flags2 = ImGuiTableFlags_None;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags2, ImGuiTableFlags_NoKeepColumnsVisible);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags2, ImGuiTableFlags_BordersInnerV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags2, ImGuiTableFlags_BordersOuterV);
        PopStyleCompact();
        if (ImGui::BeginTable("table2", 4, flags2))
        {
            // We could also set ImGuiTableFlags_SizingFixedFit on the table and all columns will default to ImGuiTableColumnFlags_WidthFixed.
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, 100.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 30.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 4; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                        ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);
                    else
                        ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Nested tables"))
    {
        HelpMarker("This demonstrate embedding a table into another table cell.");

        if (ImGui::BeginTable("table_nested1", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
        {
            ImGui::TableSetupColumn("A0");
            ImGui::TableSetupColumn("A1");
            ImGui::TableHeadersRow();

            ImGui::TableNextColumn();
            ImGui::Text("A0 Row 0");
            {
                float rows_height = TEXT_BASE_HEIGHT * 2;
                if (ImGui::BeginTable("table_nested2", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
                {
                    ImGui::TableSetupColumn("B0");
                    ImGui::TableSetupColumn("B1");
                    ImGui::TableHeadersRow();

                    ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);
                    ImGui::TableNextColumn();
                    ImGui::Text("B0 Row 0");
                    ImGui::TableNextColumn();
                    ImGui::Text("B1 Row 0");
                    ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);
                    ImGui::TableNextColumn();
                    ImGui::Text("B0 Row 1");
                    ImGui::TableNextColumn();
                    ImGui::Text("B1 Row 1");

                    ImGui::EndTable();
                }
            }
            ImGui::TableNextColumn(); ImGui::Text("A1 Row 0");
            ImGui::TableNextColumn(); ImGui::Text("A0 Row 1");
            ImGui::TableNextColumn(); ImGui::Text("A1 Row 1");
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Row height"))
    {
        HelpMarker("You can pass a 'min_row_height' to TableNextRow().\n\nRows are padded with 'style.CellPadding.y' on top and bottom, so effectively the minimum row height will always be >= 'style.CellPadding.y * 2.0f'.\n\nWe cannot honor a _maximum_ row height as that would requires a unique clipping rectangle per row.");
        if (ImGui::BeginTable("table_row_height", 1, ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersInnerV))
        {
            for (int row = 0; row < 10; row++)
            {
                float min_row_height = (float)(int)(TEXT_BASE_HEIGHT * 0.30f * row);
                ImGui::TableNextRow(ImGuiTableRowFlags_None, min_row_height);
                ImGui::TableNextColumn();
                ImGui::Text("min_row_height = %.2f", min_row_height);
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Outer size"))
    {
        // Showcasing use of ImGuiTableFlags_NoHostExtendX and ImGuiTableFlags_NoHostExtendY
        // Important to that note how the two flags have slightly different behaviors!
        ImGui::Text("Using NoHostExtendX and NoHostExtendY:");
        PushStyleCompact();
        static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_ContextMenuInBody | ImGuiTableFlags_RowBg | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoHostExtendX;
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
        ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);
        ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");
        PopStyleCompact();

        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 5.5f);
        if (ImGui::BeginTable("table1", 3, flags, outer_size))
        {
            for (int row = 0; row < 10; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::SameLine();
        ImGui::Text("Hello!");

        ImGui::Spacing();

        ImGui::Text("Using explicit size:");
        if (ImGui::BeginTable("table2", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::SameLine();
        if (ImGui::BeginTable("table3", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))
        {
            for (int row = 0; row < 3; row++)
            {
                ImGui::TableNextRow(0, TEXT_BASE_HEIGHT * 1.5f);
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Background color"))
    {
        static ImGuiTableFlags flags = ImGuiTableFlags_RowBg;
        static int row_bg_type = 1;
        static int row_bg_target = 1;
        static int cell_bg_type = 1;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
        ImGui::SameLine(); HelpMarker("ImGuiTableFlags_RowBg automatically sets RowBg0 to alternative colors pulled from the Style.");
        ImGui::Combo("row bg type", (int*)&row_bg_type, "None\0Red\0Gradient\0");
        ImGui::Combo("row bg target", (int*)&row_bg_target, "RowBg0\0RowBg1\0"); ImGui::SameLine(); HelpMarker("Target RowBg0 to override the alternating odd/even colors,\nTarget RowBg1 to blend with them.");
        ImGui::Combo("cell bg type", (int*)&cell_bg_type, "None\0Blue\0"); ImGui::SameLine(); HelpMarker("We are colorizing cells to B1->C2 here.");
        IM_ASSERT(row_bg_type >= 0 && row_bg_type <= 2);
        IM_ASSERT(row_bg_target >= 0 && row_bg_target <= 1);
        IM_ASSERT(cell_bg_type >= 0 && cell_bg_type <= 1);
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 5, flags))
        {
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();

                // Demonstrate setting a row background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBgX, ...)'
                // We use a transparent color so we can see the one behind in case our target is RowBg1 and RowBg0 was already targeted by the ImGuiTableFlags_RowBg flag.
                if (row_bg_type != 0)
                {
                    ImU32 row_bg_color = ImGui::GetColorU32(row_bg_type == 1 ? ImVec4(0.7f, 0.3f, 0.3f, 0.65f) : ImVec4(0.2f + row * 0.1f, 0.2f, 0.2f, 0.65f)); // Flat or Gradient?
                    ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0 + row_bg_target, row_bg_color);
                }

                // Fill cells
                for (int column = 0; column < 5; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%c%c", 'A' + row, '0' + column);

                    // Change background of Cells B1->C2
                    // Demonstrate setting a cell background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, ...)'
                    // (the CellBg color will be blended over the RowBg and ColumnBg colors)
                    // We can also pass a column number as a third parameter to TableSetBgColor() and do this outside the column loop.
                    if (row >= 1 && row <= 2 && column >= 1 && column <= 2 && cell_bg_type == 1)
                    {
                        ImU32 cell_bg_color = ImGui::GetColorU32(ImVec4(0.3f, 0.3f, 0.7f, 0.65f));
                        ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, cell_bg_color);
                    }
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Tree view"))
    {
        static ImGuiTableFlags flags = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_Resizable | ImGuiTableFlags_RowBg | ImGuiTableFlags_NoBordersInBody;

        if (ImGui::BeginTable("3ways", 3, flags))
        {
            // The first column will use the default _WidthStretch when ScrollX is Off and _WidthFixed when ScrollX is On
            ImGui::TableSetupColumn("Name", ImGuiTableColumnFlags_NoHide);
            ImGui::TableSetupColumn("Size", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 12.0f);
            ImGui::TableSetupColumn("Type", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 18.0f);
            ImGui::TableHeadersRow();

            // Simple storage to output a dummy file-system.
            struct MyTreeNode
            {
                const char*     Name;
                const char*     Type;
                int             Size;
                int             ChildIdx;
                int             ChildCount;
                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    const bool is_folder = (node->ChildCount > 0);
                    if (is_folder)
                    {
                        bool open = ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_SpanFullWidth);
                        ImGui::TableNextColumn();
                        ImGui::TextDisabled("--");
                        ImGui::TableNextColumn();
                        ImGui::TextUnformatted(node->Type);
                        if (open)
                        {
                            for (int child_n = 0; child_n < node->ChildCount; child_n++)
                                DisplayNode(&all_nodes[node->ChildIdx + child_n], all_nodes);
                            ImGui::TreePop();
                        }
                    }
                    else
                    {
                        ImGui::TreeNodeEx(node->Name, ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_Bullet | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_SpanFullWidth);
                        ImGui::TableNextColumn();
                        ImGui::Text("%d", node->Size);
                        ImGui::TableNextColumn();
                        ImGui::TextUnformatted(node->Type);
                    }
                }
            };
            static const MyTreeNode nodes[] =
            {
                { "Root",                         "Folder",       -1,       1, 3    }, // 0
                { "Music",                        "Folder",       -1,       4, 2    }, // 1
                { "Textures",                     "Folder",       -1,       6, 3    }, // 2
                { "desktop.ini",                  "System file",  1024,    -1,-1    }, // 3
                { "File1_a.wav",                  "Audio file",   123000,  -1,-1    }, // 4
                { "File1_b.wav",                  "Audio file",   456000,  -1,-1    }, // 5
                { "Image001.png",                 "Image file",   203128,  -1,-1    }, // 6
                { "Copy of Image001.png",         "Image file",   203256,  -1,-1    }, // 7
                { "Copy of Image001 (Final2).png","Image file",   203512,  -1,-1    }, // 8
            };

            MyTreeNode::DisplayNode(&nodes[0], nodes);

            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Item width"))
    {
        HelpMarker(
            "Showcase using PushItemWidth() and how it is preserved on a per-column basis.\n\n"
            "Note that on auto-resizing non-resizable fixed columns, querying the content width for e.g. right-alignment doesn't make sense.");
        if (ImGui::BeginTable("table_item_width", 3, ImGuiTableFlags_Borders))
        {
            ImGui::TableSetupColumn("small");
            ImGui::TableSetupColumn("half");
            ImGui::TableSetupColumn("right-align");
            ImGui::TableHeadersRow();

            for (int row = 0; row < 3; row++)
            {
                ImGui::TableNextRow();
                if (row == 0)
                {
                    // Setup ItemWidth once (instead of setting up every time, which is also possible but less efficient)
                    ImGui::TableSetColumnIndex(0);
                    ImGui::PushItemWidth(TEXT_BASE_WIDTH * 3.0f); // Small
                    ImGui::TableSetColumnIndex(1);
                    ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);
                    ImGui::TableSetColumnIndex(2);
                    ImGui::PushItemWidth(-FLT_MIN); // Right-aligned
                }

                // Draw our contents
                static float dummy_f = 0.0f;
                ImGui::PushID(row);
                ImGui::TableSetColumnIndex(0);
                ImGui::SliderFloat("float0", &dummy_f, 0.0f, 1.0f);
                ImGui::TableSetColumnIndex(1);
                ImGui::SliderFloat("float1", &dummy_f, 0.0f, 1.0f);
                ImGui::TableSetColumnIndex(2);
                ImGui::SliderFloat("float2", &dummy_f, 0.0f, 1.0f);
                ImGui::PopID();
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // Demonstrate using TableHeader() calls instead of TableHeadersRow()
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Custom headers"))
    {
        const int COLUMNS_COUNT = 3;
        if (ImGui::BeginTable("table_custom_headers", COLUMNS_COUNT, ImGuiTableFlags_Borders | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
        {
            ImGui::TableSetupColumn("Apricot");
            ImGui::TableSetupColumn("Banana");
            ImGui::TableSetupColumn("Cherry");

            // Dummy entire-column selection storage
            // FIXME: It would be nice to actually demonstrate full-featured selection using those checkbox.
            static bool column_selected[3] = {};

            // Instead of calling TableHeadersRow() we'll submit custom headers ourselves
            ImGui::TableNextRow(ImGuiTableRowFlags_Headers);
            for (int column = 0; column < COLUMNS_COUNT; column++)
            {
                ImGui::TableSetColumnIndex(column);
                const char* column_name = ImGui::TableGetColumnName(column); // Retrieve name passed to TableSetupColumn()
                ImGui::PushID(column);
                ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
                ImGui::Checkbox("##checkall", &column_selected[column]);
                ImGui::PopStyleVar();
                ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
                ImGui::TableHeader(column_name);
                ImGui::PopID();
            }

            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    char buf[32];
                    sprintf(buf, "Cell %d,%d", column, row);
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Selectable(buf, column_selected[column]);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // Demonstrate creating custom context menus inside columns, while playing it nice with context menus provided by TableHeadersRow()/TableHeader()
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Context menus"))
    {
        HelpMarker("By default, right-clicking over a TableHeadersRow()/TableHeader() line will open the default context-menu.\nUsing ImGuiTableFlags_ContextMenuInBody we also allow right-clicking over columns body.");
        static ImGuiTableFlags flags1 = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_ContextMenuInBody;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags1, ImGuiTableFlags_ContextMenuInBody);
        PopStyleCompact();

        // Context Menus: first example
        // [1.1] Right-click on the TableHeadersRow() line to open the default table context menu.
        // [1.2] Right-click in columns also open the default table context menu (if ImGuiTableFlags_ContextMenuInBody is set)
        const int COLUMNS_COUNT = 3;
        if (ImGui::BeginTable("table_context_menu", COLUMNS_COUNT, flags1))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");

            // [1.1]] Right-click on the TableHeadersRow() line to open the default table context menu.
            ImGui::TableHeadersRow();

            // Submit dummy contents
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < COLUMNS_COUNT; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        // Context Menus: second example
        // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
        // [2.2] Right-click on the ".." to open a custom popup
        // [2.3] Right-click in columns to open another custom popup
        HelpMarker("Demonstrate mixing table context menu (over header), item context button (over button) and custom per-colum context menu (over column body).");
        ImGuiTableFlags flags2 = ImGuiTableFlags_Resizable | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders;
        if (ImGui::BeginTable("table_context_menu_2", COLUMNS_COUNT, flags2))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");

            // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
            ImGui::TableHeadersRow();
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < COLUMNS_COUNT; column++)
                {
                    // Submit dummy contents
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Cell %d,%d", column, row);
                    ImGui::SameLine();

                    // [2.2] Right-click on the ".." to open a custom popup
                    ImGui::PushID(row * COLUMNS_COUNT + column);
                    ImGui::SmallButton("..");
                    if (ImGui::BeginPopupContextItem())
                    {
                        ImGui::Text("This is the popup for Button(\"..\") in Cell %d,%d", column, row);
                        if (ImGui::Button("Close"))
                            ImGui::CloseCurrentPopup();
                        ImGui::EndPopup();
                    }
                    ImGui::PopID();
                }
            }

            // [2.3] Right-click anywhere in columns to open another custom popup
            // (instead of testing for !IsAnyItemHovered() we could also call OpenPopup() with ImGuiPopupFlags_NoOpenOverExistingPopup
            // to manage popup priority as the popups triggers, here "are we hovering a column" are overlapping)
            int hovered_column = -1;
            for (int column = 0; column < COLUMNS_COUNT + 1; column++)
            {
                ImGui::PushID(column);
                if (ImGui::TableGetColumnFlags(column) & ImGuiTableColumnFlags_IsHovered)
                    hovered_column = column;
                if (hovered_column == column && !ImGui::IsAnyItemHovered() && ImGui::IsMouseReleased(1))
                    ImGui::OpenPopup("MyPopup");
                if (ImGui::BeginPopup("MyPopup"))
                {
                    if (column == COLUMNS_COUNT)
                        ImGui::Text("This is a custom popup for unused space after the last column.");
                    else
                        ImGui::Text("This is a custom popup for Column %d", column);
                    if (ImGui::Button("Close"))
                        ImGui::CloseCurrentPopup();
                    ImGui::EndPopup();
                }
                ImGui::PopID();
            }

            ImGui::EndTable();
            ImGui::Text("Hovered column: %d", hovered_column);
        }
        ImGui::TreePop();
    }

    // Demonstrate creating multiple tables with the same ID
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Synced instances"))
    {
        HelpMarker("Multiple tables with the same identifier will share their settings, width, visibility, order etc.");
        for (int n = 0; n < 3; n++)
        {
            char buf[32];
            sprintf(buf, "Synced Table %d", n);
            bool open = ImGui::CollapsingHeader(buf, ImGuiTreeNodeFlags_DefaultOpen);
            if (open && ImGui::BeginTable("Table", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoSavedSettings))
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
                for (int cell = 0; cell < 9; cell++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("this cell %d", cell);
                }
                ImGui::EndTable();
            }
        }
        ImGui::TreePop();
    }

    // Demonstrate using Sorting facilities
    // This is a simplified version of the "Advanced" example, where we mostly focus on the code necessary to handle sorting.
    // Note that the "Advanced" example also showcase manually triggering a sort (e.g. if item quantities have been modified)
    static const char* template_items_names[] =
    {
        "Banana", "Apple", "Cherry", "Watermelon", "Grapefruit", "Strawberry", "Mango",
        "Kiwi", "Orange", "Pineapple", "Blueberry", "Plum", "Coconut", "Pear", "Apricot"
    };
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Sorting"))
    {
        // Create item list
        static ImVector<MyItem> items;
        if (items.Size == 0)
        {
            items.resize(50, MyItem());
            for (int n = 0; n < items.Size; n++)
            {
                const int template_n = n % IM_ARRAYSIZE(template_items_names);
                MyItem& item = items[n];
                item.ID = n;
                item.Name = template_items_names[template_n];
                item.Quantity = (n * n - n) % 20; // Assign default quantities
            }
        }

        // Options
        static ImGuiTableFlags flags =
            ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_NoBordersInBody
            | ImGuiTableFlags_ScrollY;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);
        ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");
        ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);
        ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");
        PopStyleCompact();

        if (ImGui::BeginTable("table_sorting", 4, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 15), 0.0f))
        {
            // Declare columns
            // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
            // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
            // Demonstrate using a mixture of flags among available sort-related flags:
            // - ImGuiTableColumnFlags_DefaultSort
            // - ImGuiTableColumnFlags_NoSort / ImGuiTableColumnFlags_NoSortAscending / ImGuiTableColumnFlags_NoSortDescending
            // - ImGuiTableColumnFlags_PreferSortAscending / ImGuiTableColumnFlags_PreferSortDescending
            ImGui::TableSetupColumn("ID",       ImGuiTableColumnFlags_DefaultSort          | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_ID);
            ImGui::TableSetupColumn("Name",                                                  ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Name);
            ImGui::TableSetupColumn("Action",   ImGuiTableColumnFlags_NoSort               | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Action);
            ImGui::TableSetupColumn("Quantity", ImGuiTableColumnFlags_PreferSortDescending | ImGuiTableColumnFlags_WidthStretch, 0.0f, MyItemColumnID_Quantity);
            ImGui::TableSetupScrollFreeze(0, 1); // Make row always visible
            ImGui::TableHeadersRow();

            // Sort our data if sort specs have been changed!
            if (ImGuiTableSortSpecs* sorts_specs = ImGui::TableGetSortSpecs())
                if (sorts_specs->SpecsDirty)
                {
                    MyItem::s_current_sort_specs = sorts_specs; // Store in variable accessible by the sort function.
                    if (items.Size > 1)
                        qsort(&items[0], (size_t)items.Size, sizeof(items[0]), MyItem::CompareWithSortSpecs);
                    MyItem::s_current_sort_specs = NULL;
                    sorts_specs->SpecsDirty = false;
                }

            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(items.Size);
            while (clipper.Step())
                for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)
                {
                    // Display a data item
                    MyItem* item = &items[row_n];
                    ImGui::PushID(item->ID);
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    ImGui::Text("%04d", item->ID);
                    ImGui::TableNextColumn();
                    ImGui::TextUnformatted(item->Name);
                    ImGui::TableNextColumn();
                    ImGui::SmallButton("None");
                    ImGui::TableNextColumn();
                    ImGui::Text("%d", item->Quantity);
                    ImGui::PopID();
                }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // In this example we'll expose most table flags and settings.
    // For specific flags and settings refer to the corresponding section for more detailed explanation.
    // This section is mostly useful to experiment with combining certain flags or settings with each others.
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // [DEBUG]
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    if (ImGui::TreeNode("Advanced"))
    {
        static ImGuiTableFlags flags =
            ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable
            | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBody
            | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
            | ImGuiTableFlags_SizingFixedFit;

        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT_SelectableSpanRow };
        static int contents_type = CT_SelectableSpanRow;
        const char* contents_type_names[] = { "Text", "Button", "SmallButton", "FillButton", "Selectable", "Selectable (span row)" };
        static int freeze_cols = 1;
        static int freeze_rows = 1;
        static int items_count = IM_ARRAYSIZE(template_items_names) * 2;
        static ImVec2 outer_size_value = ImVec2(0.0f, TEXT_BASE_HEIGHT * 12);
        static float row_min_height = 0.0f; // Auto
        static float inner_width_with_scroll = 0.0f; // Auto-extend
        static bool outer_size_enabled = true;
        static bool show_headers = true;
        static bool show_wrapped_text = false;
        //static ImGuiTextFilter filter;
        //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // FIXME-TABLE: Enabling this results in initial clipped first pass on table which tend to affects column sizing
        if (ImGui::TreeNode("Options"))
        {
            // Make the UI compact because there are so many fields
            PushStyleCompact();
            ImGui::PushItemWidth(TEXT_BASE_WIDTH * 28.0f);

            if (ImGui::TreeNodeEx("Features:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Sortable", &flags, ImGuiTableFlags_Sortable);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoSavedSettings", &flags, ImGuiTableFlags_NoSavedSettings);
                ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags, ImGuiTableFlags_ContextMenuInBody);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Decorations:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appears in Headers");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers)");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Sizing:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                EditTableSizingFlags(&flags);
                ImGui::SameLine(); HelpMarker("In the Advanced demo we override the policy of each column so those table-wide settings have less effect that typical.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
                ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);
                ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags, ImGuiTableFlags_NoKeepColumnsVisible);
                ImGui::SameLine(); HelpMarker("Only available if ScrollX is disabled.");
                ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);
                ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);
                ImGui::SameLine(); HelpMarker("Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with ScrollFreeze options.");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Padding:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags, ImGuiTableFlags_PadOuterX);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags, ImGuiTableFlags_NoPadOuterX);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags, ImGuiTableFlags_NoPadInnerX);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Scrolling:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
                ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
                ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
                ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Sorting:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);
                ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");
                ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);
                ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Other:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::Checkbox("show_headers", &show_headers);
                ImGui::Checkbox("show_wrapped_text", &show_wrapped_text);

                ImGui::DragFloat2("##OuterSize", &outer_size_value.x);
                ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
                ImGui::Checkbox("outer_size", &outer_size_enabled);
                ImGui::SameLine();
                HelpMarker("If scrolling is disabled (ScrollX and ScrollY not set):\n"
                    "- The table is output directly in the parent window.\n"
                    "- OuterSize.x < 0.0f will right-align the table.\n"
                    "- OuterSize.x = 0.0f will narrow fit the table unless there are any Stretch column.\n"
                    "- OuterSize.y then becomes the minimum size for the table, which will extend vertically if there are more rows (unless NoHostExtendY is set).");

                // From a user point of view we will tend to use 'inner_width' differently depending on whether our table is embedding scrolling.
                // To facilitate toying with this demo we will actually pass 0.0f to the BeginTable() when ScrollX is disabled.
                ImGui::DragFloat("inner_width (when ScrollX active)", &inner_width_with_scroll, 1.0f, 0.0f, FLT_MAX);

                ImGui::DragFloat("row_min_height", &row_min_height, 1.0f, 0.0f, FLT_MAX);
                ImGui::SameLine(); HelpMarker("Specify height of the Selectable item.");

                ImGui::DragInt("items_count", &items_count, 0.1f, 0, 9999);
                ImGui::Combo("items_type (first column)", &contents_type, contents_type_names, IM_ARRAYSIZE(contents_type_names));
                //filter.Draw("filter");
                ImGui::TreePop();
            }

            ImGui::PopItemWidth();
            PopStyleCompact();
            ImGui::Spacing();
            ImGui::TreePop();
        }

        // Update item list if we changed the number of items
        static ImVector<MyItem> items;
        static ImVector<int> selection;
        static bool items_need_sort = false;
        if (items.Size != items_count)
        {
            items.resize(items_count, MyItem());
            for (int n = 0; n < items_count; n++)
            {
                const int template_n = n % IM_ARRAYSIZE(template_items_names);
                MyItem& item = items[n];
                item.ID = n;
                item.Name = template_items_names[template_n];
                item.Quantity = (template_n == 3) ? 10 : (template_n == 4) ? 20 : 0; // Assign default quantities
            }
        }

        const ImDrawList* parent_draw_list = ImGui::GetWindowDrawList();
        const int parent_draw_list_draw_cmd_count = parent_draw_list->CmdBuffer.Size;
        ImVec2 table_scroll_cur, table_scroll_max; // For debug display
        const ImDrawList* table_draw_list = NULL;  // "

        // Submit table
        const float inner_width_to_use = (flags & ImGuiTableFlags_ScrollX) ? inner_width_with_scroll : 0.0f;
        if (ImGui::BeginTable("table_advanced", 6, flags, outer_size_enabled ? outer_size_value : ImVec2(0, 0), inner_width_to_use))
        {
            // Declare columns
            // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
            // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
            ImGui::TableSetupColumn("ID",           ImGuiTableColumnFlags_DefaultSort | ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_NoHide, 0.0f, MyItemColumnID_ID);
            ImGui::TableSetupColumn("Name",         ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Name);
            ImGui::TableSetupColumn("Action",       ImGuiTableColumnFlags_NoSort | ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Action);
            ImGui::TableSetupColumn("Quantity",     ImGuiTableColumnFlags_PreferSortDescending, 0.0f, MyItemColumnID_Quantity);
            ImGui::TableSetupColumn("Description",  (flags & ImGuiTableFlags_NoHostExtendX) ? 0 : ImGuiTableColumnFlags_WidthStretch, 0.0f, MyItemColumnID_Description);
            ImGui::TableSetupColumn("Hidden",       ImGuiTableColumnFlags_DefaultHide | ImGuiTableColumnFlags_NoSort);
            ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);

            // Sort our data if sort specs have been changed!
            ImGuiTableSortSpecs* sorts_specs = ImGui::TableGetSortSpecs();
            if (sorts_specs && sorts_specs->SpecsDirty)
                items_need_sort = true;
            if (sorts_specs && items_need_sort && items.Size > 1)
            {
                MyItem::s_current_sort_specs = sorts_specs; // Store in variable accessible by the sort function.
                qsort(&items[0], (size_t)items.Size, sizeof(items[0]), MyItem::CompareWithSortSpecs);
                MyItem::s_current_sort_specs = NULL;
                sorts_specs->SpecsDirty = false;
            }
            items_need_sort = false;

            // Take note of whether we are currently sorting based on the Quantity field,
            // we will use this to trigger sorting when we know the data of this column has been modified.
            const bool sorts_specs_using_quantity = (ImGui::TableGetColumnFlags(3) & ImGuiTableColumnFlags_IsSorted) != 0;

            // Show headers
            if (show_headers)
                ImGui::TableHeadersRow();

            // Show data
            // FIXME-TABLE FIXME-NAV: How we can get decent up/down even though we have the buttons here?
            ImGui::PushButtonRepeat(true);
#if 1
            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(items.Size);
            while (clipper.Step())
            {
                for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)
#else
            // Without clipper
            {
                for (int row_n = 0; row_n < items.Size; row_n++)
#endif
                {
                    MyItem* item = &items[row_n];
                    //if (!filter.PassFilter(item->Name))
                    //    continue;

                    const bool item_is_selected = selection.contains(item->ID);
                    ImGui::PushID(item->ID);
                    ImGui::TableNextRow(ImGuiTableRowFlags_None, row_min_height);

                    // For the demo purpose we can select among different type of items submitted in the first column
                    ImGui::TableSetColumnIndex(0);
                    char label[32];
                    sprintf(label, "%04d", item->ID);
                    if (contents_type == CT_Text)
                        ImGui::TextUnformatted(label);
                    else if (contents_type == CT_Button)
                        ImGui::Button(label);
                    else if (contents_type == CT_SmallButton)
                        ImGui::SmallButton(label);
                    else if (contents_type == CT_FillButton)
                        ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f));
                    else if (contents_type == CT_Selectable || contents_type == CT_SelectableSpanRow)
                    {
                        ImGuiSelectableFlags selectable_flags = (contents_type == CT_SelectableSpanRow) ? ImGuiSelectableFlags_SpanAllColumns | ImGuiSelectableFlags_AllowItemOverlap : ImGuiSelectableFlags_None;
                        if (ImGui::Selectable(label, item_is_selected, selectable_flags, ImVec2(0, row_min_height)))
                        {
                            if (ImGui::GetIO().KeyCtrl)
                            {
                                if (item_is_selected)
                                    selection.find_erase_unsorted(item->ID);
                                else
                                    selection.push_back(item->ID);
                            }
                            else
                            {
                                selection.clear();
                                selection.push_back(item->ID);
                            }
                        }
                    }

                    if (ImGui::TableSetColumnIndex(1))
                        ImGui::TextUnformatted(item->Name);

                    // Here we demonstrate marking our data set as needing to be sorted again if we modified a quantity,
                    // and we are currently sorting on the column showing the Quantity.
                    // To avoid triggering a sort while holding the button, we only trigger it when the button has been released.
                    // You will probably need a more advanced system in your code if you want to automatically sort when a specific entry changes.
                    if (ImGui::TableSetColumnIndex(2))
                    {
                        if (ImGui::SmallButton("Chop")) { item->Quantity += 1; }
                        if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }
                        ImGui::SameLine();
                        if (ImGui::SmallButton("Eat")) { item->Quantity -= 1; }
                        if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }
                    }

                    if (ImGui::TableSetColumnIndex(3))
                        ImGui::Text("%d", item->Quantity);

                    ImGui::TableSetColumnIndex(4);
                    if (show_wrapped_text)
                        ImGui::TextWrapped("Lorem ipsum dolor sit amet");
                    else
                        ImGui::Text("Lorem ipsum dolor sit amet");

                    if (ImGui::TableSetColumnIndex(5))
                        ImGui::Text("1234");

                    ImGui::PopID();
                }
            }
            ImGui::PopButtonRepeat();

            // Store some info to display debug details below
            table_scroll_cur = ImVec2(ImGui::GetScrollX(), ImGui::GetScrollY());
            table_scroll_max = ImVec2(ImGui::GetScrollMaxX(), ImGui::GetScrollMaxY());
            table_draw_list = ImGui::GetWindowDrawList();
            ImGui::EndTable();
        }
        static bool show_debug_details = false;
        ImGui::Checkbox("Debug details", &show_debug_details);
        if (show_debug_details && table_draw_list)
        {
            ImGui::SameLine(0.0f, 0.0f);
            const int table_draw_list_draw_cmd_count = table_draw_list->CmdBuffer.Size;
            if (table_draw_list == parent_draw_list)
                ImGui::Text(": DrawCmd: +%d (in same window)",
                    table_draw_list_draw_cmd_count - parent_draw_list_draw_cmd_count);
            else
                ImGui::Text(": DrawCmd: +%d (in child window), Scroll: (%.f/%.f) (%.f/%.f)",
                    table_draw_list_draw_cmd_count - 1, table_scroll_cur.x, table_scroll_max.x, table_scroll_cur.y, table_scroll_max.y);
        }
        ImGui::TreePop();
    }

    ImGui::PopID();

    ShowDemoWindowColumns();

    if (disable_indent)
        ImGui::PopStyleVar();
}

// Demonstrate old/legacy Columns API!
// [2020: Columns are under-featured and not maintained. Prefer using the more flexible and powerful BeginTable() API!]
static void ShowDemoWindowColumns()
{
    bool open = ImGui::TreeNode("Legacy Columns API");
    ImGui::SameLine();
    HelpMarker("Columns() is an old API! Prefer using the more flexible and powerful BeginTable() API!");
    if (!open)
        return;

    // Basic columns
    if (ImGui::TreeNode("Basic"))
    {
        ImGui::Text("Without border:");
        ImGui::Columns(3, "mycolumns3", false);  // 3-ways, no border
        ImGui::Separator();
        for (int n = 0; n < 14; n++)
        {
            char label[32];
            sprintf(label, "Item %d", n);
            if (ImGui::Selectable(label)) {}
            //if (ImGui::Button(label, ImVec2(-FLT_MIN,0.0f))) {}
            ImGui::NextColumn();
        }
        ImGui::Columns(1);
        ImGui::Separator();

        ImGui::Text("With border:");
        ImGui::Columns(4, "mycolumns"); // 4-ways, with border
        ImGui::Separator();
        ImGui::Text("ID"); ImGui::NextColumn();
        ImGui::Text("Name"); ImGui::NextColumn();
        ImGui::Text("Path"); ImGui::NextColumn();
        ImGui::Text("Hovered"); ImGui::NextColumn();
        ImGui::Separator();
        const char* names[3] = { "One", "Two", "Three" };
        const char* paths[3] = { "/path/one", "/path/two", "/path/three" };
        static int selected = -1;
        for (int i = 0; i < 3; i++)
        {
            char label[32];
            sprintf(label, "%04d", i);
            if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SpanAllColumns))
                selected = i;
            bool hovered = ImGui::IsItemHovered();
            ImGui::NextColumn();
            ImGui::Text(names[i]); ImGui::NextColumn();
            ImGui::Text(paths[i]); ImGui::NextColumn();
            ImGui::Text("%d", hovered); ImGui::NextColumn();
        }
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Borders"))
    {
        // NB: Future columns API should allow automatic horizontal borders.
        static bool h_borders = true;
        static bool v_borders = true;
        static int columns_count = 4;
        const int lines_count = 3;
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
        ImGui::DragInt("##columns_count", &columns_count, 0.1f, 2, 10, "%d columns");
        if (columns_count < 2)
            columns_count = 2;
        ImGui::SameLine();
        ImGui::Checkbox("horizontal", &h_borders);
        ImGui::SameLine();
        ImGui::Checkbox("vertical", &v_borders);
        ImGui::Columns(columns_count, NULL, v_borders);
        for (int i = 0; i < columns_count * lines_count; i++)
        {
            if (h_borders && ImGui::GetColumnIndex() == 0)
                ImGui::Separator();
            ImGui::Text("%c%c%c", 'a' + i, 'a' + i, 'a' + i);
            ImGui::Text("Width %.2f", ImGui::GetColumnWidth());
            ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);
            ImGui::Text("Offset %.2f", ImGui::GetColumnOffset());
            ImGui::Text("Long text that is likely to clip");
            ImGui::Button("Button", ImVec2(-FLT_MIN, 0.0f));
            ImGui::NextColumn();
        }
        ImGui::Columns(1);
        if (h_borders)
            ImGui::Separator();
        ImGui::TreePop();
    }

    // Create multiple items in a same cell before switching to next column
    if (ImGui::TreeNode("Mixed items"))
    {
        ImGui::Columns(3, "mixed");
        ImGui::Separator();

        ImGui::Text("Hello");
        ImGui::Button("Banana");
        ImGui::NextColumn();

        ImGui::Text("ImGui");
        ImGui::Button("Apple");
        static float foo = 1.0f;
        ImGui::InputFloat("red", &foo, 0.05f, 0, "%.3f");
        ImGui::Text("An extra line here.");
        ImGui::NextColumn();

        ImGui::Text("Sailor");
        ImGui::Button("Corniflower");
        static float bar = 1.0f;
        ImGui::InputFloat("blue", &bar, 0.05f, 0, "%.3f");
        ImGui::NextColumn();

        if (ImGui::CollapsingHeader("Category A")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        if (ImGui::CollapsingHeader("Category B")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        if (ImGui::CollapsingHeader("Category C")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    // Word wrapping
    if (ImGui::TreeNode("Word-wrapping"))
    {
        ImGui::Columns(2, "word-wrapping");
        ImGui::Separator();
        ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
        ImGui::TextWrapped("Hello Left");
        ImGui::NextColumn();
        ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
        ImGui::TextWrapped("Hello Right");
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Horizontal Scrolling"))
    {
        ImGui::SetNextWindowContentSize(ImVec2(1500.0f, 0.0f));
        ImVec2 child_size = ImVec2(0, ImGui::GetFontSize() * 20.0f);
        ImGui::BeginChild("##ScrollingRegion", child_size, false, ImGuiWindowFlags_HorizontalScrollbar);
        ImGui::Columns(10);

        // Also demonstrate using clipper for large vertical lists
        int ITEMS_COUNT = 2000;
        ImGuiListClipper clipper;
        clipper.Begin(ITEMS_COUNT);
        while (clipper.Step())
        {
            for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                for (int j = 0; j < 10; j++)
                {
                    ImGui::Text("Line %d Column %d...", i, j);
                    ImGui::NextColumn();
                }
        }
        ImGui::Columns(1);
        ImGui::EndChild();
        ImGui::TreePop();
    }

    if (ImGui::TreeNode("Tree"))
    {
        ImGui::Columns(2, "tree", true);
        for (int x = 0; x < 3; x++)
        {
            bool open1 = ImGui::TreeNode((void*)(intptr_t)x, "Node%d", x);
            ImGui::NextColumn();
            ImGui::Text("Node contents");
            ImGui::NextColumn();
            if (open1)
            {
                for (int y = 0; y < 3; y++)
                {
                    bool open2 = ImGui::TreeNode((void*)(intptr_t)y, "Node%d.%d", x, y);
                    ImGui::NextColumn();
                    ImGui::Text("Node contents");
                    if (open2)
                    {
                        ImGui::Text("Even more contents");
                        if (ImGui::TreeNode("Tree in column"))
                        {
                            ImGui::Text("The quick brown fox jumps over the lazy dog");
                            ImGui::TreePop();
                        }
                    }
                    ImGui::NextColumn();
                    if (open2)
                        ImGui::TreePop();
                }
                ImGui::TreePop();
            }
        }
        ImGui::Columns(1);
        ImGui::TreePop();
    }

    ImGui::TreePop();
}

static void ShowDemoWindowMisc()
{
    if (ImGui::CollapsingHeader("Filtering"))
    {
        // Helper class to easy setup a text filter.
        // You may want to implement a more feature-full filtering scheme in your own application.
        static ImGuiTextFilter filter;
        ImGui::Text("Filter usage:\n"
                    "  \"\"         display all lines\n"
                    "  \"xxx\"      display lines containing \"xxx\"\n"
                    "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n"
                    "  \"-xxx\"     hide lines containing \"xxx\"");
        filter.Draw();
        const char* lines[] = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" };
        for (int i = 0; i < IM_ARRAYSIZE(lines); i++)
            if (filter.PassFilter(lines[i]))
                ImGui::BulletText("%s", lines[i]);
    }

    if (ImGui::CollapsingHeader("Inputs, Navigation & Focus"))
    {
        ImGuiIO& io = ImGui::GetIO();

        // Display ImGuiIO output flags
        ImGui::Text("WantCaptureMouse: %d", io.WantCaptureMouse);
        ImGui::Text("WantCaptureKeyboard: %d", io.WantCaptureKeyboard);
        ImGui::Text("WantTextInput: %d", io.WantTextInput);
        ImGui::Text("WantSetMousePos: %d", io.WantSetMousePos);
        ImGui::Text("NavActive: %d, NavVisible: %d", io.NavActive, io.NavVisible);

        // Display Mouse state
        if (ImGui::TreeNode("Mouse State"))
        {
            if (ImGui::IsMousePosValid())
                ImGui::Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);
            else
                ImGui::Text("Mouse pos: <INVALID>");
            ImGui::Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);
            ImGui::Text("Mouse down:");     for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDown(i))         { ImGui::SameLine(); ImGui::Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); }
            ImGui::Text("Mouse clicked:");  for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseClicked(i))      { ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse dblclick:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDoubleClicked(i)){ ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse released:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseReleased(i))     { ImGui::SameLine(); ImGui::Text("b%d", i); }
            ImGui::Text("Mouse wheel: %.1f", io.MouseWheel);
            ImGui::Text("Pen Pressure: %.1f", io.PenPressure); // Note: currently unused
            ImGui::TreePop();
        }

        // Display Keyboard/Mouse state
        if (ImGui::TreeNode("Keyboard & Navigation State"))
        {
            ImGui::Text("Keys down:");          for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyDown(i))        { ImGui::SameLine(); ImGui::Text("%d (0x%X) (%.02f secs)", i, i, io.KeysDownDuration[i]); }
            ImGui::Text("Keys pressed:");       for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyPressed(i))     { ImGui::SameLine(); ImGui::Text("%d (0x%X)", i, i); }
            ImGui::Text("Keys release:");       for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyReleased(i))    { ImGui::SameLine(); ImGui::Text("%d (0x%X)", i, i); }
            ImGui::Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");
            ImGui::Text("Chars queue:");        for (int i = 0; i < io.InputQueueCharacters.Size; i++) { ImWchar c = io.InputQueueCharacters[i]; ImGui::SameLine();  ImGui::Text("\'%c\' (0x%04X)", (c > ' ' && c <= 255) ? (char)c : '?', c); } // FIXME: We should convert 'c' to UTF-8 here but the functions are not public.

            ImGui::Text("NavInputs down:");     for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputs[i] > 0.0f)              { ImGui::SameLine(); ImGui::Text("[%d] %.2f (%.02f secs)", i, io.NavInputs[i], io.NavInputsDownDuration[i]); }
            ImGui::Text("NavInputs pressed:");  for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] == 0.0f) { ImGui::SameLine(); ImGui::Text("[%d]", i); }

            ImGui::Button("Hovering me sets the\nkeyboard capture flag");
            if (ImGui::IsItemHovered())
                ImGui::CaptureKeyboardFromApp(true);
            ImGui::SameLine();
            ImGui::Button("Holding me clears the\nthe keyboard capture flag");
            if (ImGui::IsItemActive())
                ImGui::CaptureKeyboardFromApp(false);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Tabbing"))
        {
            ImGui::Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");
            static char buf[32] = "hello";
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("3", buf, IM_ARRAYSIZE(buf));
            ImGui::PushAllowKeyboardFocus(false);
            ImGui::InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));
            ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
            ImGui::PopAllowKeyboardFocus();
            ImGui::InputText("5", buf, IM_ARRAYSIZE(buf));
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Focus from code"))
        {
            bool focus_1 = ImGui::Button("Focus on 1"); ImGui::SameLine();
            bool focus_2 = ImGui::Button("Focus on 2"); ImGui::SameLine();
            bool focus_3 = ImGui::Button("Focus on 3");
            int has_focus = 0;
            static char buf[128] = "click on a button to set focus";

            if (focus_1) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 1;

            if (focus_2) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 2;

            ImGui::PushAllowKeyboardFocus(false);
            if (focus_3) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 3;
            ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
            ImGui::PopAllowKeyboardFocus();

            if (has_focus)
                ImGui::Text("Item with focus: %d", has_focus);
            else
                ImGui::Text("Item with focus: <none>");

            // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
            static float f3[3] = { 0.0f, 0.0f, 0.0f };
            int focus_ahead = -1;
            if (ImGui::Button("Focus on X")) { focus_ahead = 0; } ImGui::SameLine();
            if (ImGui::Button("Focus on Y")) { focus_ahead = 1; } ImGui::SameLine();
            if (ImGui::Button("Focus on Z")) { focus_ahead = 2; }
            if (focus_ahead != -1) ImGui::SetKeyboardFocusHere(focus_ahead);
            ImGui::SliderFloat3("Float3", &f3[0], 0.0f, 1.0f);

            ImGui::TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Dragging"))
        {
            ImGui::TextWrapped("You can use ImGui::GetMouseDragDelta(0) to query for the dragged amount on any widget.");
            for (int button = 0; button < 3; button++)
            {
                ImGui::Text("IsMouseDragging(%d):", button);
                ImGui::Text("  w/ default threshold: %d,", ImGui::IsMouseDragging(button));
                ImGui::Text("  w/ zero threshold: %d,", ImGui::IsMouseDragging(button, 0.0f));
                ImGui::Text("  w/ large threshold: %d,", ImGui::IsMouseDragging(button, 20.0f));
            }

            ImGui::Button("Drag Me");
            if (ImGui::IsItemActive())
                ImGui::GetForegroundDrawList()->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui::GetColorU32(ImGuiCol_Button), 4.0f); // Draw a line between the button and the mouse cursor

            // Drag operations gets "unlocked" when the mouse has moved past a certain threshold
            // (the default threshold is stored in io.MouseDragThreshold). You can request a lower or higher
            // threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta().
            ImVec2 value_raw = ImGui::GetMouseDragDelta(0, 0.0f);
            ImVec2 value_with_lock_threshold = ImGui::GetMouseDragDelta(0);
            ImVec2 mouse_delta = io.MouseDelta;
            ImGui::Text("GetMouseDragDelta(0):");
            ImGui::Text("  w/ default threshold: (%.1f, %.1f)", value_with_lock_threshold.x, value_with_lock_threshold.y);
            ImGui::Text("  w/ zero threshold: (%.1f, %.1f)", value_raw.x, value_raw.y);
            ImGui::Text("io.MouseDelta: (%.1f, %.1f)", mouse_delta.x, mouse_delta.y);
            ImGui::TreePop();
        }

        if (ImGui::TreeNode("Mouse cursors"))
        {
            const char* mouse_cursors_names[] = { "Arrow", "TextInput", "ResizeAll", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand", "NotAllowed" };
            IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);

            ImGuiMouseCursor current = ImGui::GetMouseCursor();
            ImGui::Text("Current mouse cursor = %d: %s", current, mouse_cursors_names[current]);
            ImGui::Text("Hover to see mouse cursors:");
            ImGui::SameLine(); HelpMarker(
                "Your application can render a different mouse cursor based on what ImGui::GetMouseCursor() returns. "
                "If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, "
                "otherwise your backend needs to handle it.");
            for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)
            {
                char label[32];
                sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);
                ImGui::Bullet(); ImGui::Selectable(label, false);
                if (ImGui::IsItemHovered())
                    ImGui::SetMouseCursor(i);
            }
            ImGui::TreePop();
        }
    }
}

//-----------------------------------------------------------------------------
// [SECTION] About Window / ShowAboutWindow()
// Access from Dear ImGui Demo -> Tools -> About
//-----------------------------------------------------------------------------

void ImGui::ShowAboutWindow(bool* p_open)
{
    if (!ImGui::Begin("About Dear ImGui", p_open, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::End();
        return;
    }
    ImGui::Text("Dear ImGui %s", ImGui::GetVersion());
    ImGui::Separator();
    ImGui::Text("By Omar Cornut and all Dear ImGui contributors.");
    ImGui::Text("Dear ImGui is licensed under the MIT License, see LICENSE for more information.");

    static bool show_config_info = false;
    ImGui::Checkbox("Config/Build Information", &show_config_info);
    if (show_config_info)
    {
        ImGuiIO& io = ImGui::GetIO();
        ImGuiStyle& style = ImGui::GetStyle();

        bool copy_to_clipboard = ImGui::Button("Copy to clipboard");
        ImVec2 child_size = ImVec2(0, ImGui::GetTextLineHeightWithSpacing() * 18);
        ImGui::BeginChildFrame(ImGui::GetID("cfg_infos"), child_size, ImGuiWindowFlags_NoMove);
        if (copy_to_clipboard)
        {
            ImGui::LogToClipboard();
            ImGui::LogText("```\n"); // Back quotes will make text appears without formatting when pasting on GitHub
        }

        ImGui::Text("Dear ImGui %s (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);
        ImGui::Separator();
        ImGui::Text("sizeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert): %d", (int)sizeof(size_t), (int)sizeof(ImDrawIdx), (int)sizeof(ImDrawVert));
        ImGui::Text("define: __cplusplus=%d", (int)__cplusplus);
#ifdef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_OBSOLETE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_FILE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_FILE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_ALLOCATORS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_ALLOCATORS");
#endif
#ifdef IMGUI_USE_BGRA_PACKED_COLOR
        ImGui::Text("define: IMGUI_USE_BGRA_PACKED_COLOR");
#endif
#ifdef _WIN32
        ImGui::Text("define: _WIN32");
#endif
#ifdef _WIN64
        ImGui::Text("define: _WIN64");
#endif
#ifdef __linux__
        ImGui::Text("define: __linux__");
#endif
#ifdef __APPLE__
        ImGui::Text("define: __APPLE__");
#endif
#ifdef _MSC_VER
        ImGui::Text("define: _MSC_VER=%d", _MSC_VER);
#endif
#ifdef _MSVC_LANG
        ImGui::Text("define: _MSVC_LANG=%d", (int)_MSVC_LANG);
#endif
#ifdef __MINGW32__
        ImGui::Text("define: __MINGW32__");
#endif
#ifdef __MINGW64__
        ImGui::Text("define: __MINGW64__");
#endif
#ifdef __GNUC__
        ImGui::Text("define: __GNUC__=%d", (int)__GNUC__);
#endif
#ifdef __clang_version__
        ImGui::Text("define: __clang_version__=%s", __clang_version__);
#endif
#ifdef IMGUI_HAS_VIEWPORT
        ImGui::Text("define: IMGUI_HAS_VIEWPORT");
#endif
#ifdef IMGUI_HAS_DOCK
        ImGui::Text("define: IMGUI_HAS_DOCK");
#endif
        ImGui::Separator();
        ImGui::Text("io.BackendPlatformName: %s", io.BackendPlatformName ? io.BackendPlatformName : "NULL");
        ImGui::Text("io.BackendRendererName: %s", io.BackendRendererName ? io.BackendRendererName : "NULL");
        ImGui::Text("io.ConfigFlags: 0x%08X", io.ConfigFlags);
        if (io.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)        ImGui::Text(" NavEnableKeyboard");
        if (io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad)         ImGui::Text(" NavEnableGamepad");
        if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos)     ImGui::Text(" NavEnableSetMousePos");
        if (io.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard)     ImGui::Text(" NavNoCaptureKeyboard");
        if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)                  ImGui::Text(" NoMouse");
        if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)      ImGui::Text(" NoMouseCursorChange");
        if (io.ConfigFlags & ImGuiConfigFlags_DockingEnable)            ImGui::Text(" DockingEnable");
        if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)          ImGui::Text(" ViewportsEnable");
        if (io.ConfigFlags & ImGuiConfigFlags_DpiEnableScaleViewports)  ImGui::Text(" DpiEnableScaleViewports");
        if (io.ConfigFlags & ImGuiConfigFlags_DpiEnableScaleFonts)      ImGui::Text(" DpiEnableScaleFonts");
        if (io.MouseDrawCursor)                                         ImGui::Text("io.MouseDrawCursor");
        if (io.ConfigViewportsNoAutoMerge)                              ImGui::Text("io.ConfigViewportsNoAutoMerge");
        if (io.ConfigViewportsNoTaskBarIcon)                            ImGui::Text("io.ConfigViewportsNoTaskBarIcon");
        if (io.ConfigViewportsNoDecoration)                             ImGui::Text("io.ConfigViewportsNoDecoration");
        if (io.ConfigViewportsNoDefaultParent)                          ImGui::Text("io.ConfigViewportsNoDefaultParent");
        if (io.ConfigDockingNoSplit)                                    ImGui::Text("io.ConfigDockingNoSplit");
        if (io.ConfigDockingAlwaysTabBar)                               ImGui::Text("io.ConfigDockingAlwaysTabBar");
        if (io.ConfigDockingTransparentPayload)                         ImGui::Text("io.ConfigDockingTransparentPayload");
        if (io.ConfigMacOSXBehaviors)                                   ImGui::Text("io.ConfigMacOSXBehaviors");
        if (io.ConfigInputTextCursorBlink)                              ImGui::Text("io.ConfigInputTextCursorBlink");
        if (io.ConfigWindowsResizeFromEdges)                            ImGui::Text("io.ConfigWindowsResizeFromEdges");
        if (io.ConfigWindowsMoveFromTitleBarOnly)                       ImGui::Text("io.ConfigWindowsMoveFromTitleBarOnly");
        if (io.ConfigMemoryCompactTimer >= 0.0f)                        ImGui::Text("io.ConfigMemoryCompactTimer = %.1f", io.ConfigMemoryCompactTimer);
        ImGui::Text("io.BackendFlags: 0x%08X", io.BackendFlags);
        if (io.BackendFlags & ImGuiBackendFlags_HasGamepad)             ImGui::Text(" HasGamepad");
        if (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)        ImGui::Text(" HasMouseCursors");
        if (io.BackendFlags & ImGuiBackendFlags_HasSetMousePos)         ImGui::Text(" HasSetMousePos");
        if (io.BackendFlags & ImGuiBackendFlags_PlatformHasViewports)   ImGui::Text(" PlatformHasViewports");
        if (io.BackendFlags & ImGuiBackendFlags_HasMouseHoveredViewport)ImGui::Text(" HasMouseHoveredViewport");
        if (io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)   ImGui::Text(" RendererHasVtxOffset");
        if (io.BackendFlags & ImGuiBackendFlags_RendererHasViewports)   ImGui::Text(" RendererHasViewports");
        ImGui::Separator();
        ImGui::Text("io.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d", io.Fonts->Fonts.Size, io.Fonts->Flags, io.Fonts->TexWidth, io.Fonts->TexHeight);
        ImGui::Text("io.DisplaySize: %.2f,%.2f", io.DisplaySize.x, io.DisplaySize.y);
        ImGui::Text("io.DisplayFramebufferScale: %.2f,%.2f", io.DisplayFramebufferScale.x, io.DisplayFramebufferScale.y);
        ImGui::Separator();
        ImGui::Text("style.WindowPadding: %.2f,%.2f", style.WindowPadding.x, style.WindowPadding.y);
        ImGui::Text("style.WindowBorderSize: %.2f", style.WindowBorderSize);
        ImGui::Text("style.FramePadding: %.2f,%.2f", style.FramePadding.x, style.FramePadding.y);
        ImGui::Text("style.FrameRounding: %.2f", style.FrameRounding);
        ImGui::Text("style.FrameBorderSize: %.2f", style.FrameBorderSize);
        ImGui::Text("style.ItemSpacing: %.2f,%.2f", style.ItemSpacing.x, style.ItemSpacing.y);
        ImGui::Text("style.ItemInnerSpacing: %.2f,%.2f", style.ItemInnerSpacing.x, style.ItemInnerSpacing.y);

        if (copy_to_clipboard)
        {
            ImGui::LogText("\n```\n");
            ImGui::LogFinish();
        }
        ImGui::EndChildFrame();
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Style Editor / ShowStyleEditor()
//-----------------------------------------------------------------------------
// - ShowStyleSelector()
// - ShowFontSelector()
// - ShowStyleEditor()
//-----------------------------------------------------------------------------

// Demo helper function to select among default colors. See ShowStyleEditor() for more advanced options.
// Here we use the simplified Combo() api that packs items into a single literal string.
// Useful for quick combo boxes where the choices are known locally.
bool ImGui::ShowStyleSelector(const char* label)
{
    static int style_idx = -1;
    if (ImGui::Combo(label, &style_idx, "Dark\0Light\0Classic\0"))
    {
        switch (style_idx)
        {
        case 0: ImGui::StyleColorsDark(); break;
        case 1: ImGui::StyleColorsLight(); break;
        case 2: ImGui::StyleColorsClassic(); break;
        }
        return true;
    }
    return false;
}

// Demo helper function to select among loaded fonts.
// Here we use the regular BeginCombo()/EndCombo() api which is more the more flexible one.
void ImGui::ShowFontSelector(const char* label)
{
    ImGuiIO& io = ImGui::GetIO();
    ImFont* font_current = ImGui::GetFont();
    if (ImGui::BeginCombo(label, font_current->GetDebugName()))
    {
        for (int n = 0; n < io.Fonts->Fonts.Size; n++)
        {
            ImFont* font = io.Fonts->Fonts[n];
            ImGui::PushID((void*)font);
            if (ImGui::Selectable(font->GetDebugName(), font == font_current))
                io.FontDefault = font;
            ImGui::PopID();
        }
        ImGui::EndCombo();
    }
    ImGui::SameLine();
    HelpMarker(
        "- Load additional fonts with io.Fonts->AddFontFromFileTTF().\n"
        "- The font atlas is built when calling io.Fonts->GetTexDataAsXXXX() or io.Fonts->Build().\n"
        "- Read FAQ and docs/FONTS.md for more details.\n"
        "- If you need to add/remove fonts at runtime (e.g. for DPI change), do it before calling NewFrame().");
}

// [Internal] Display details for a single font, called by ShowStyleEditor().
static void NodeFont(ImFont* font)
{
    ImGuiIO& io = ImGui::GetIO();
    ImGuiStyle& style = ImGui::GetStyle();
    bool font_details_opened = ImGui::TreeNode(font, "Font: \"%s\"\n%.2f px, %d glyphs, %d file(s)",
        font->ConfigData ? font->ConfigData[0].Name : "", font->FontSize, font->Glyphs.Size, font->ConfigDataCount);
    ImGui::SameLine(); if (ImGui::SmallButton("Set as default")) { io.FontDefault = font; }
    if (!font_details_opened)
        return;

    ImGui::PushFont(font);
    ImGui::Text("The quick brown fox jumps over the lazy dog");
    ImGui::PopFont();
    ImGui::DragFloat("Font scale", &font->Scale, 0.005f, 0.3f, 2.0f, "%.1f");   // Scale only this font
    ImGui::SameLine(); HelpMarker(
        "Note than the default embedded font is NOT meant to be scaled.\n\n"
        "Font are currently rendered into bitmaps at a given size at the time of building the atlas. "
        "You may oversample them to get some flexibility with scaling. "
        "You can also render at multiple sizes and select which one to use at runtime.\n\n"
        "(Glimmer of hope: the atlas system will be rewritten in the future to make scaling more flexible.)");
    ImGui::Text("Ascent: %f, Descent: %f, Height: %f", font->Ascent, font->Descent, font->Ascent - font->Descent);
    ImGui::Text("Fallback character: '%c' (U+%04X)", font->FallbackChar, font->FallbackChar);
    ImGui::Text("Ellipsis character: '%c' (U+%04X)", font->EllipsisChar, font->EllipsisChar);
    const int surface_sqrt = (int)sqrtf((float)font->MetricsTotalSurface);
    ImGui::Text("Texture Area: about %d px ~%dx%d px", font->MetricsTotalSurface, surface_sqrt, surface_sqrt);
    for (int config_i = 0; config_i < font->ConfigDataCount; config_i++)
        if (font->ConfigData)
            if (const ImFontConfig* cfg = &font->ConfigData[config_i])
                ImGui::BulletText("Input %d: \'%s\', Oversample: (%d,%d), PixelSnapH: %d, Offset: (%.1f,%.1f)",
                    config_i, cfg->Name, cfg->OversampleH, cfg->OversampleV, cfg->PixelSnapH, cfg->GlyphOffset.x, cfg->GlyphOffset.y);
    if (ImGui::TreeNode("Glyphs", "Glyphs (%d)", font->Glyphs.Size))
    {
        // Display all glyphs of the fonts in separate pages of 256 characters
        const ImU32 glyph_col = ImGui::GetColorU32(ImGuiCol_Text);
        for (unsigned int base = 0; base <= IM_UNICODE_CODEPOINT_MAX; base += 256)
        {
            // Skip ahead if a large bunch of glyphs are not present in the font (test in chunks of 4k)
            // This is only a small optimization to reduce the number of iterations when IM_UNICODE_MAX_CODEPOINT
            // is large // (if ImWchar==ImWchar32 we will do at least about 272 queries here)
            if (!(base & 4095) && font->IsGlyphRangeUnused(base, base + 4095))
            {
                base += 4096 - 256;
                continue;
            }

            int count = 0;
            for (unsigned int n = 0; n < 256; n++)
                if (font->FindGlyphNoFallback((ImWchar)(base + n)))
                    count++;
            if (count <= 0)
                continue;
            if (!ImGui::TreeNode((void*)(intptr_t)base, "U+%04X..U+%04X (%d %s)", base, base + 255, count, count > 1 ? "glyphs" : "glyph"))
                continue;
            float cell_size = font->FontSize * 1;
            float cell_spacing = style.ItemSpacing.y;
            ImVec2 base_pos = ImGui::GetCursorScreenPos();
            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            for (unsigned int n = 0; n < 256; n++)
            {
                // We use ImFont::RenderChar as a shortcut because we don't have UTF-8 conversion functions
                // available here and thus cannot easily generate a zero-terminated UTF-8 encoded string.
                ImVec2 cell_p1(base_pos.x + (n % 16) * (cell_size + cell_spacing), base_pos.y + (n / 16) * (cell_size + cell_spacing));
                ImVec2 cell_p2(cell_p1.x + cell_size, cell_p1.y + cell_size);
                const ImFontGlyph* glyph = font->FindGlyphNoFallback((ImWchar)(base + n));
                draw_list->AddRect(cell_p1, cell_p2, glyph ? IM_COL32(255, 255, 255, 100) : IM_COL32(255, 255, 255, 50));
                if (glyph)
                    font->RenderChar(draw_list, cell_size, cell_p1, glyph_col, (ImWchar)(base + n));
                if (glyph && ImGui::IsMouseHoveringRect(cell_p1, cell_p2))
                {
                    ImGui::BeginTooltip();
                    ImGui::Text("Codepoint: U+%04X", base + n);
                    ImGui::Separator();
                    ImGui::Text("Visible: %d", glyph->Visible);
                    ImGui::Text("AdvanceX: %.1f", glyph->AdvanceX);
                    ImGui::Text("Pos: (%.2f,%.2f)->(%.2f,%.2f)", glyph->X0, glyph->Y0, glyph->X1, glyph->Y1);
                    ImGui::Text("UV: (%.3f,%.3f)->(%.3f,%.3f)", glyph->U0, glyph->V0, glyph->U1, glyph->V1);
                    ImGui::EndTooltip();
                }
            }
            ImGui::Dummy(ImVec2((cell_size + cell_spacing) * 16, (cell_size + cell_spacing) * 16));
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
    ImGui::TreePop();
}

void ImGui::ShowStyleEditor(ImGuiStyle* ref)
{
    // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to
    // (without a reference style pointer, we will use one compared locally as a reference)
    ImGuiStyle& style = ImGui::GetStyle();
    static ImGuiStyle ref_saved_style;

    // Default to using internal storage as reference
    static bool init = true;
    if (init && ref == NULL)
        ref_saved_style = style;
    init = false;
    if (ref == NULL)
        ref = &ref_saved_style;

    ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.50f);

    if (ImGui::ShowStyleSelector("Colors##Selector"))
        ref_saved_style = style;
    ImGui::ShowFontSelector("Fonts##Selector");

    // Simplified Settings (expose floating-pointer border sizes as boolean representing 0.0f or 1.0f)
    if (ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))
        style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding
    { bool border = (style.WindowBorderSize > 0.0f); if (ImGui::Checkbox("WindowBorder", &border)) { style.WindowBorderSize = border ? 1.0f : 0.0f; } }
    ImGui::SameLine();
    { bool border = (style.FrameBorderSize > 0.0f);  if (ImGui::Checkbox("FrameBorder",  &border)) { style.FrameBorderSize  = border ? 1.0f : 0.0f; } }
    ImGui::SameLine();
    { bool border = (style.PopupBorderSize > 0.0f);  if (ImGui::Checkbox("PopupBorder",  &border)) { style.PopupBorderSize  = border ? 1.0f : 0.0f; } }

    // Save/Revert button
    if (ImGui::Button("Save Ref"))
        *ref = ref_saved_style = style;
    ImGui::SameLine();
    if (ImGui::Button("Revert Ref"))
        style = *ref;
    ImGui::SameLine();
    HelpMarker(
        "Save/Revert in local non-persistent storage. Default Colors definition are not affected. "
        "Use \"Export\" below to save them somewhere.");

    ImGui::Separator();

    if (ImGui::BeginTabBar("##tabs", ImGuiTabBarFlags_None))
    {
        if (ImGui::BeginTabItem("Sizes"))
        {
            ImGui::Text("Main");
            ImGui::SliderFloat2("WindowPadding", (float*)&style.WindowPadding, 0.0f, 20.0f, "%.0f");
            ImGui::SliderFloat2("FramePadding", (float*)&style.FramePadding, 0.0f, 20.0f, "%.0f");
            ImGui::SliderFloat2("CellPadding", (float*)&style.CellPadding, 0.0f, 20.0f, "%.0f");
            ImGui::SliderFloat2("ItemSpacing", (float*)&style.ItemSpacing, 0.0f, 20.0f, "%.0f");
            ImGui::SliderFloat2("ItemInnerSpacing", (float*)&style.ItemInnerSpacing, 0.0f, 20.0f, "%.0f");
            ImGui::SliderFloat2("TouchExtraPadding", (float*)&style.TouchExtraPadding, 0.0f, 10.0f, "%.0f");
            ImGui::SliderFloat("IndentSpacing", &style.IndentSpacing, 0.0f, 30.0f, "%.0f");
            ImGui::SliderFloat("ScrollbarSize", &style.ScrollbarSize, 1.0f, 20.0f, "%.0f");
            ImGui::SliderFloat("GrabMinSize", &style.GrabMinSize, 1.0f, 20.0f, "%.0f");
            ImGui::Text("Borders");
            ImGui::SliderFloat("WindowBorderSize", &style.WindowBorderSize, 0.0f, 1.0f, "%.0f");
            ImGui::SliderFloat("ChildBorderSize", &style.ChildBorderSize, 0.0f, 1.0f, "%.0f");
            ImGui::SliderFloat("PopupBorderSize", &style.PopupBorderSize, 0.0f, 1.0f, "%.0f");
            ImGui::SliderFloat("FrameBorderSize", &style.FrameBorderSize, 0.0f, 1.0f, "%.0f");
            ImGui::SliderFloat("TabBorderSize", &style.TabBorderSize, 0.0f, 1.0f, "%.0f");
            ImGui::Text("Rounding");
            ImGui::SliderFloat("WindowRounding", &style.WindowRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("ChildRounding", &style.ChildRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("PopupRounding", &style.PopupRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("ScrollbarRounding", &style.ScrollbarRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("GrabRounding", &style.GrabRounding, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("LogSliderDeadzone", &style.LogSliderDeadzone, 0.0f, 12.0f, "%.0f");
            ImGui::SliderFloat("TabRounding", &style.TabRounding, 0.0f, 12.0f, "%.0f");
            ImGui::Text("Alignment");
            ImGui::SliderFloat2("WindowTitleAlign", (float*)&style.WindowTitleAlign, 0.0f, 1.0f, "%.2f");
            int window_menu_button_position = style.WindowMenuButtonPosition + 1;
            if (ImGui::Combo("WindowMenuButtonPosition", (int*)&window_menu_button_position, "None\0Left\0Right\0"))
                style.WindowMenuButtonPosition = window_menu_button_position - 1;
            ImGui::Combo("ColorButtonPosition", (int*)&style.ColorButtonPosition, "Left\0Right\0");
            ImGui::SliderFloat2("ButtonTextAlign", (float*)&style.ButtonTextAlign, 0.0f, 1.0f, "%.2f");
            ImGui::SameLine(); HelpMarker("Alignment applies when a button is larger than its text content.");
            ImGui::SliderFloat2("SelectableTextAlign", (float*)&style.SelectableTextAlign, 0.0f, 1.0f, "%.2f");
            ImGui::SameLine(); HelpMarker("Alignment applies when a selectable is larger than its text content.");
            ImGui::Text("Safe Area Padding");
            ImGui::SameLine(); HelpMarker("Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).");
            ImGui::SliderFloat2("DisplaySafeAreaPadding", (float*)&style.DisplaySafeAreaPadding, 0.0f, 30.0f, "%.0f");
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Colors"))
        {
            static int output_dest = 0;
            static bool output_only_modified = true;
            if (ImGui::Button("Export"))
            {
                if (output_dest == 0)
                    ImGui::LogToClipboard();
                else
                    ImGui::LogToTTY();
                ImGui::LogText("ImVec4* colors = ImGui::GetStyle().Colors;" IM_NEWLINE);
                for (int i = 0; i < ImGuiCol_COUNT; i++)
                {
                    const ImVec4& col = style.Colors[i];
                    const char* name = ImGui::GetStyleColorName(i);
                    if (!output_only_modified || memcmp(&col, &ref->Colors[i], sizeof(ImVec4)) != 0)
                        ImGui::LogText("colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);" IM_NEWLINE,
                            name, 23 - (int)strlen(name), "", col.x, col.y, col.z, col.w);
                }
                ImGui::LogFinish();
            }
            ImGui::SameLine(); ImGui::SetNextItemWidth(120); ImGui::Combo("##output_type", &output_dest, "To Clipboard\0To TTY\0");
            ImGui::SameLine(); ImGui::Checkbox("Only Modified Colors", &output_only_modified);

            static ImGuiTextFilter filter;
            filter.Draw("Filter colors", ImGui::GetFontSize() * 16);

            static ImGuiColorEditFlags alpha_flags = 0;
            if (ImGui::RadioButton("Opaque", alpha_flags == ImGuiColorEditFlags_None))             { alpha_flags = ImGuiColorEditFlags_None; } ImGui::SameLine();
            if (ImGui::RadioButton("Alpha",  alpha_flags == ImGuiColorEditFlags_AlphaPreview))     { alpha_flags = ImGuiColorEditFlags_AlphaPreview; } ImGui::SameLine();
            if (ImGui::RadioButton("Both",   alpha_flags == ImGuiColorEditFlags_AlphaPreviewHalf)) { alpha_flags = ImGuiColorEditFlags_AlphaPreviewHalf; } ImGui::SameLine();
            HelpMarker(
                "In the color list:\n"
                "Left-click on color square to open color picker,\n"
                "Right-click to open edit options menu.");

            ImGui::BeginChild("##colors", ImVec2(0, 0), true, ImGuiWindowFlags_AlwaysVerticalScrollbar | ImGuiWindowFlags_AlwaysHorizontalScrollbar | ImGuiWindowFlags_NavFlattened);
            ImGui::PushItemWidth(-160);
            for (int i = 0; i < ImGuiCol_COUNT; i++)
            {
                const char* name = ImGui::GetStyleColorName(i);
                if (!filter.PassFilter(name))
                    continue;
                ImGui::PushID(i);
                ImGui::ColorEdit4("##color", (float*)&style.Colors[i], ImGuiColorEditFlags_AlphaBar | alpha_flags);
                if (memcmp(&style.Colors[i], &ref->Colors[i], sizeof(ImVec4)) != 0)
                {
                    // Tips: in a real user application, you may want to merge and use an icon font into the main font,
                    // so instead of "Save"/"Revert" you'd use icons!
                    // Read the FAQ and docs/FONTS.md about using icon fonts. It's really easy and super convenient!
                    ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Save")) { ref->Colors[i] = style.Colors[i]; }
                    ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Revert")) { style.Colors[i] = ref->Colors[i]; }
                }
                ImGui::SameLine(0.0f, style.ItemInnerSpacing.x);
                ImGui::TextUnformatted(name);
                ImGui::PopID();
            }
            ImGui::PopItemWidth();
            ImGui::EndChild();

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Fonts"))
        {
            ImGuiIO& io = ImGui::GetIO();
            ImFontAtlas* atlas = io.Fonts;
            HelpMarker("Read FAQ and docs/FONTS.md for details on font loading.");
            ImGui::PushItemWidth(120);
            for (int i = 0; i < atlas->Fonts.Size; i++)
            {
                ImFont* font = atlas->Fonts[i];
                ImGui::PushID(font);
                NodeFont(font);
                ImGui::PopID();
            }
            if (ImGui::TreeNode("Atlas texture", "Atlas texture (%dx%d pixels)", atlas->TexWidth, atlas->TexHeight))
            {
                ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
                ImVec4 border_col = ImVec4(1.0f, 1.0f, 1.0f, 0.5f);
                ImGui::Image(atlas->TexID, ImVec2((float)atlas->TexWidth, (float)atlas->TexHeight), ImVec2(0, 0), ImVec2(1, 1), tint_col, border_col);
                ImGui::TreePop();
            }

            // Post-baking font scaling. Note that this is NOT the nice way of scaling fonts, read below.
            // (we enforce hard clamping manually as by default DragFloat/SliderFloat allows CTRL+Click text to get out of bounds).
            const float MIN_SCALE = 0.3f;
            const float MAX_SCALE = 2.0f;
            HelpMarker(
                "Those are old settings provided for convenience.\n"
                "However, the _correct_ way of scaling your UI is currently to reload your font at the designed size, "
                "rebuild the font atlas, and call style.ScaleAllSizes() on a reference ImGuiStyle structure.\n"
                "Using those settings here will give you poor quality results.");
            static float window_scale = 1.0f;
            if (ImGui::DragFloat("window scale", &window_scale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp)) // Scale only this window
                ImGui::SetWindowFontScale(window_scale);
            ImGui::DragFloat("global scale", &io.FontGlobalScale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp); // Scale everything
            ImGui::PopItemWidth();

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Rendering"))
        {
            ImGui::Checkbox("Anti-aliased lines", &style.AntiAliasedLines);
            ImGui::SameLine();
            HelpMarker("When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.");

            ImGui::Checkbox("Anti-aliased lines use texture", &style.AntiAliasedLinesUseTex);
            ImGui::SameLine();
            HelpMarker("Faster lines using texture data. Require backend to render with bilinear filtering (not point/nearest filtering).");

            ImGui::Checkbox("Anti-aliased fill", &style.AntiAliasedFill);
            ImGui::PushItemWidth(100);
            ImGui::DragFloat("Curve Tessellation Tolerance", &style.CurveTessellationTol, 0.02f, 0.10f, 10.0f, "%.2f");
            if (style.CurveTessellationTol < 0.10f) style.CurveTessellationTol = 0.10f;

            // When editing the "Circle Segment Max Error" value, draw a preview of its effect on auto-tessellated circles.
            ImGui::DragFloat("Circle Tessellation Max Error", &style.CircleTessellationMaxError , 0.005f, 0.10f, 5.0f, "%.2f", ImGuiSliderFlags_AlwaysClamp);
            if (ImGui::IsItemActive())
            {
                ImGui::SetNextWindowPos(ImGui::GetCursorScreenPos());
                ImGui::BeginTooltip();
                ImGui::TextUnformatted("(R = radius, N = number of segments)");
                ImGui::Spacing();
                ImDrawList* draw_list = ImGui::GetWindowDrawList();
                const float min_widget_width = ImGui::CalcTextSize("N: MMM\nR: MMM").x;
                for (int n = 0; n < 8; n++)
                {
                    const float RAD_MIN = 5.0f;
                    const float RAD_MAX = 70.0f;
                    const float rad = RAD_MIN + (RAD_MAX - RAD_MIN) * (float)n / (8.0f - 1.0f);

                    ImGui::BeginGroup();

                    ImGui::Text("R: %.f\nN: %d", rad, draw_list->_CalcCircleAutoSegmentCount(rad));

                    const float canvas_width = IM_MAX(min_widget_width, rad * 2.0f);
                    const float offset_x     = floorf(canvas_width * 0.5f);
                    const float offset_y     = floorf(RAD_MAX);

                    const ImVec2 p1 = ImGui::GetCursorScreenPos();
                    draw_list->AddCircle(ImVec2(p1.x + offset_x, p1.y + offset_y), rad, ImGui::GetColorU32(ImGuiCol_Text));
                    ImGui::Dummy(ImVec2(canvas_width, RAD_MAX * 2));

                    /*
                    const ImVec2 p2 = ImGui::GetCursorScreenPos();
                    draw_list->AddCircleFilled(ImVec2(p2.x + offset_x, p2.y + offset_y), rad, ImGui::GetColorU32(ImGuiCol_Text));
                    ImGui::Dummy(ImVec2(canvas_width, RAD_MAX * 2));
                    */

                    ImGui::EndGroup();
                    ImGui::SameLine();
                }
                ImGui::EndTooltip();
            }
            ImGui::SameLine();
            HelpMarker("When drawing circle primitives with \"num_segments == 0\" tesselation will be calculated automatically.");

            ImGui::DragFloat("Global Alpha", &style.Alpha, 0.005f, 0.20f, 1.0f, "%.2f"); // Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.
            ImGui::PopItemWidth();

            ImGui::EndTabItem();
        }

        ImGui::EndTabBar();
    }

    ImGui::PopItemWidth();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
//-----------------------------------------------------------------------------
// - ShowExampleAppMainMenuBar()
// - ShowExampleMenuFile()
//-----------------------------------------------------------------------------

// Demonstrate creating a "main" fullscreen menu bar and populating it.
// Note the difference between BeginMainMenuBar() and BeginMenuBar():
// - BeginMenuBar() = menu-bar inside current window (which needs the ImGuiWindowFlags_MenuBar flag!)
// - BeginMainMenuBar() = helper to create menu-bar-sized window at the top of the main viewport + call BeginMenuBar() into it.
static void ShowExampleAppMainMenuBar()
{
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Edit"))
        {
            if (ImGui::MenuItem("Undo", "CTRL+Z")) {}
            if (ImGui::MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item
            ImGui::Separator();
            if (ImGui::MenuItem("Cut", "CTRL+X")) {}
            if (ImGui::MenuItem("Copy", "CTRL+C")) {}
            if (ImGui::MenuItem("Paste", "CTRL+V")) {}
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }
}

// Note that shortcuts are currently provided for display only
// (future version will add explicit flags to BeginMenu() to request processing shortcuts)
static void ShowExampleMenuFile()
{
    ImGui::MenuItem("(demo menu)", NULL, false, false);
    if (ImGui::MenuItem("New")) {}
    if (ImGui::MenuItem("Open", "Ctrl+O")) {}
    if (ImGui::BeginMenu("Open Recent"))
    {
        ImGui::MenuItem("fish_hat.c");
        ImGui::MenuItem("fish_hat.inl");
        ImGui::MenuItem("fish_hat.h");
        if (ImGui::BeginMenu("More.."))
        {
            ImGui::MenuItem("Hello");
            ImGui::MenuItem("Sailor");
            if (ImGui::BeginMenu("Recurse.."))
            {
                ShowExampleMenuFile();
                ImGui::EndMenu();
            }
            ImGui::EndMenu();
        }
        ImGui::EndMenu();
    }
    if (ImGui::MenuItem("Save", "Ctrl+S")) {}
    if (ImGui::MenuItem("Save As..")) {}

    ImGui::Separator();
    if (ImGui::BeginMenu("Options"))
    {
        static bool enabled = true;
        ImGui::MenuItem("Enabled", "", &enabled);
        ImGui::BeginChild("child", ImVec2(0, 60), true);
        for (int i = 0; i < 10; i++)
            ImGui::Text("Scrolling Text %d", i);
        ImGui::EndChild();
        static float f = 0.5f;
        static int n = 0;
        ImGui::SliderFloat("Value", &f, 0.0f, 1.0f);
        ImGui::InputFloat("Input", &f, 0.1f);
        ImGui::Combo("Combo", &n, "Yes\0No\0Maybe\0\0");
        ImGui::EndMenu();
    }

    if (ImGui::BeginMenu("Colors"))
    {
        float sz = ImGui::GetTextLineHeight();
        for (int i = 0; i < ImGuiCol_COUNT; i++)
        {
            const char* name = ImGui::GetStyleColorName((ImGuiCol)i);
            ImVec2 p = ImGui::GetCursorScreenPos();
            ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + sz, p.y + sz), ImGui::GetColorU32((ImGuiCol)i));
            ImGui::Dummy(ImVec2(sz, sz));
            ImGui::SameLine();
            ImGui::MenuItem(name);
        }
        ImGui::EndMenu();
    }

    // Here we demonstrate appending again to the "Options" menu (which we already created above)
    // Of course in this demo it is a little bit silly that this function calls BeginMenu("Options") twice.
    // In a real code-base using it would make senses to use this feature from very different code locations.
    if (ImGui::BeginMenu("Options")) // <-- Append!
    {
        static bool b = true;
        ImGui::Checkbox("SomeOption", &b);
        ImGui::EndMenu();
    }

    if (ImGui::BeginMenu("Disabled", false)) // Disabled
    {
        IM_ASSERT(0);
    }
    if (ImGui::MenuItem("Checked", NULL, true)) {}
    if (ImGui::MenuItem("Quit", "Alt+F4")) {}
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
//-----------------------------------------------------------------------------

// Demonstrate creating a simple console window, with scrolling, filtering, completion and history.
// For the console example, we are using a more C++ like approach of declaring a class to hold both data and functions.
struct ExampleAppConsole
{
    char                  InputBuf[256];
    ImVector<char*>       Items;
    ImVector<const char*> Commands;
    ImVector<char*>       History;
    int                   HistoryPos;    // -1: new line, 0..History.Size-1 browsing history.
    ImGuiTextFilter       Filter;
    bool                  AutoScroll;
    bool                  ScrollToBottom;

    ExampleAppConsole()
    {
        ClearLog();
        memset(InputBuf, 0, sizeof(InputBuf));
        HistoryPos = -1;

        // "CLASSIFY" is here to provide the test case where "C"+[tab] completes to "CL" and display multiple matches.
        Commands.push_back("HELP");
        Commands.push_back("HISTORY");
        Commands.push_back("CLEAR");
        Commands.push_back("CLASSIFY");
        AutoScroll = true;
        ScrollToBottom = false;
        AddLog("Welcome to Dear ImGui!");
    }
    ~ExampleAppConsole()
    {
        ClearLog();
        for (int i = 0; i < History.Size; i++)
            free(History[i]);
    }

    // Portable helpers
    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; } return d; }
    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; n--; } return d; }
    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = strlen(s) + 1; void* buf = malloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)s, len); }
    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s); while (str_end > s && str_end[-1] == ' ') str_end--; *str_end = 0; }

    void    ClearLog()
    {
        for (int i = 0; i < Items.Size; i++)
            free(Items[i]);
        Items.clear();
    }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        // FIXME-OPT
        char buf[1024];
        va_list args;
        va_start(args, fmt);
        vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);
        buf[IM_ARRAYSIZE(buf)-1] = 0;
        va_end(args);
        Items.push_back(Strdup(buf));
    }

    void    Draw(const char* title, bool* p_open)
    {
        ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }

        // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar.
        // So e.g. IsItemHovered() will return true when hovering the title bar.
        // Here we create a context menu only available from the title bar.
        if (ImGui::BeginPopupContextItem())
        {
            if (ImGui::MenuItem("Close Console"))
                *p_open = false;
            ImGui::EndPopup();
        }

        ImGui::TextWrapped(
            "This example implements a console with basic coloring, completion (TAB key) and history (Up/Down keys). A more elaborate "
            "implementation may want to store entries along with extra data such as timestamp, emitter, etc.");
        ImGui::TextWrapped("Enter 'HELP' for help.");

        // TODO: display items starting from the bottom

        if (ImGui::SmallButton("Add Debug Text"))  { AddLog("%d some text", Items.Size); AddLog("some more text"); AddLog("display very important message here!"); }
        ImGui::SameLine();
        if (ImGui::SmallButton("Add Debug Error")) { AddLog("[error] something went wrong"); }
        ImGui::SameLine();
        if (ImGui::SmallButton("Clear"))           { ClearLog(); }
        ImGui::SameLine();
        bool copy_to_clipboard = ImGui::SmallButton("Copy");
        //static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }

        ImGui::Separator();

        // Options menu
        if (ImGui::BeginPopup("Options"))
        {
            ImGui::Checkbox("Auto-scroll", &AutoScroll);
            ImGui::EndPopup();
        }

        // Options, Filter
        if (ImGui::Button("Options"))
            ImGui::OpenPopup("Options");
        ImGui::SameLine();
        Filter.Draw("Filter (\"incl,-excl\") (\"error\")", 180);
        ImGui::Separator();

        // Reserve enough left-over height for 1 separator + 1 input text
        const float footer_height_to_reserve = ImGui::GetStyle().ItemSpacing.y + ImGui::GetFrameHeightWithSpacing();
        ImGui::BeginChild("ScrollingRegion", ImVec2(0, -footer_height_to_reserve), false, ImGuiWindowFlags_HorizontalScrollbar);
        if (ImGui::BeginPopupContextWindow())
        {
            if (ImGui::Selectable("Clear")) ClearLog();
            ImGui::EndPopup();
        }

        // Display every line as a separate entry so we can change their color or add custom widgets.
        // If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
        // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping
        // to only process visible items. The clipper will automatically measure the height of your first item and then
        // "seek" to display only items in the visible area.
        // To use the clipper we can replace your standard loop:
        //      for (int i = 0; i < Items.Size; i++)
        //   With:
        //      ImGuiListClipper clipper;
        //      clipper.Begin(Items.Size);
        //      while (clipper.Step())
        //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        // - That your items are evenly spaced (same height)
        // - That you have cheap random access to your elements (you can access them given their index,
        //   without processing all the ones before)
        // You cannot this code as-is if a filter is active because it breaks the 'cheap random-access' property.
        // We would need random-access on the post-filtered list.
        // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices
        // or offsets of items that passed the filtering test, recomputing this array when user changes the filter,
        // and appending newly elements as they are inserted. This is left as a task to the user until we can manage
        // to improve this example code!
        // If your items are of variable height:
        // - Split them into same height items would be simpler and facilitate random-seeking into your list.
        // - Consider using manual call to IsRectVisible() and skipping extraneous decoration from your items.
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 1)); // Tighten spacing
        if (copy_to_clipboard)
            ImGui::LogToClipboard();
        for (int i = 0; i < Items.Size; i++)
        {
            const char* item = Items[i];
            if (!Filter.PassFilter(item))
                continue;

            // Normally you would store more information in your item than just a string.
            // (e.g. make Items[] an array of structure, store color/type etc.)
            ImVec4 color;
            bool has_color = false;
            if (strstr(item, "[error]"))          { color = ImVec4(1.0f, 0.4f, 0.4f, 1.0f); has_color = true; }
            else if (strncmp(item, "# ", 2) == 0) { color = ImVec4(1.0f, 0.8f, 0.6f, 1.0f); has_color = true; }
            if (has_color)
                ImGui::PushStyleColor(ImGuiCol_Text, color);
            ImGui::TextUnformatted(item);
            if (has_color)
                ImGui::PopStyleColor();
        }
        if (copy_to_clipboard)
            ImGui::LogFinish();

        if (ScrollToBottom || (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY()))
            ImGui::SetScrollHereY(1.0f);
        ScrollToBottom = false;

        ImGui::PopStyleVar();
        ImGui::EndChild();
        ImGui::Separator();

        // Command-line
        bool reclaim_focus = false;
        ImGuiInputTextFlags input_text_flags = ImGuiInputTextFlags_EnterReturnsTrue | ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory;
        if (ImGui::InputText("Input", InputBuf, IM_ARRAYSIZE(InputBuf), input_text_flags, &TextEditCallbackStub, (void*)this))
        {
            char* s = InputBuf;
            Strtrim(s);
            if (s[0])
                ExecCommand(s);
            strcpy(s, "");
            reclaim_focus = true;
        }

        // Auto-focus on window apparition
        ImGui::SetItemDefaultFocus();
        if (reclaim_focus)
            ImGui::SetKeyboardFocusHere(-1); // Auto focus previous widget

        ImGui::End();
    }

    void    ExecCommand(const char* command_line)
    {
        AddLog("# %s\n", command_line);

        // Insert into history. First find match and delete it so it can be pushed to the back.
        // This isn't trying to be smart or optimal.
        HistoryPos = -1;
        for (int i = History.Size - 1; i >= 0; i--)
            if (Stricmp(History[i], command_line) == 0)
            {
                free(History[i]);
                History.erase(History.begin() + i);
                break;
            }
        History.push_back(Strdup(command_line));

        // Process command
        if (Stricmp(command_line, "CLEAR") == 0)
        {
            ClearLog();
        }
        else if (Stricmp(command_line, "HELP") == 0)
        {
            AddLog("Commands:");
            for (int i = 0; i < Commands.Size; i++)
                AddLog("- %s", Commands[i]);
        }
        else if (Stricmp(command_line, "HISTORY") == 0)
        {
            int first = History.Size - 10;
            for (int i = first > 0 ? first : 0; i < History.Size; i++)
                AddLog("%3d: %s\n", i, History[i]);
        }
        else
        {
            AddLog("Unknown command: '%s'\n", command_line);
        }

        // On command input, we scroll to bottom even if AutoScroll==false
        ScrollToBottom = true;
    }

    // In C++11 you'd be better off using lambdas for this sort of forwarding callbacks
    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)
    {
        ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;
        return console->TextEditCallback(data);
    }

    int     TextEditCallback(ImGuiInputTextCallbackData* data)
    {
        //AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
        switch (data->EventFlag)
        {
        case ImGuiInputTextFlags_CallbackCompletion:
            {
                // Example of TEXT COMPLETION

                // Locate beginning of current word
                const char* word_end = data->Buf + data->CursorPos;
                const char* word_start = word_end;
                while (word_start > data->Buf)
                {
                    const char c = word_start[-1];
                    if (c == ' ' || c == '\t' || c == ',' || c == ';')
                        break;
                    word_start--;
                }

                // Build a list of candidates
                ImVector<const char*> candidates;
                for (int i = 0; i < Commands.Size; i++)
                    if (Strnicmp(Commands[i], word_start, (int)(word_end - word_start)) == 0)
                        candidates.push_back(Commands[i]);

                if (candidates.Size == 0)
                {
                    // No match
                    AddLog("No match for \"%.*s\"!\n", (int)(word_end - word_start), word_start);
                }
                else if (candidates.Size == 1)
                {
                    // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing.
                    data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));
                    data->InsertChars(data->CursorPos, candidates[0]);
                    data->InsertChars(data->CursorPos, " ");
                }
                else
                {
                    // Multiple matches. Complete as much as we can..
                    // So inputing "C"+Tab will complete to "CL" then display "CLEAR" and "CLASSIFY" as matches.
                    int match_len = (int)(word_end - word_start);
                    for (;;)
                    {
                        int c = 0;
                        bool all_candidates_matches = true;
                        for (int i = 0; i < candidates.Size && all_candidates_matches; i++)
                            if (i == 0)
                                c = toupper(candidates[i][match_len]);
                            else if (c == 0 || c != toupper(candidates[i][match_len]))
                                all_candidates_matches = false;
                        if (!all_candidates_matches)
                            break;
                        match_len++;
                    }

                    if (match_len > 0)
                    {
                        data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));
                        data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);
                    }

                    // List matches
                    AddLog("Possible matches:\n");
                    for (int i = 0; i < candidates.Size; i++)
                        AddLog("- %s\n", candidates[i]);
                }

                break;
            }
        case ImGuiInputTextFlags_CallbackHistory:
            {
                // Example of HISTORY
                const int prev_history_pos = HistoryPos;
                if (data->EventKey == ImGuiKey_UpArrow)
                {
                    if (HistoryPos == -1)
                        HistoryPos = History.Size - 1;
                    else if (HistoryPos > 0)
                        HistoryPos--;
                }
                else if (data->EventKey == ImGuiKey_DownArrow)
                {
                    if (HistoryPos != -1)
                        if (++HistoryPos >= History.Size)
                            HistoryPos = -1;
                }

                // A better implementation would preserve the data on the current input line along with cursor position.
                if (prev_history_pos != HistoryPos)
                {
                    const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : "";
                    data->DeleteChars(0, data->BufTextLen);
                    data->InsertChars(0, history_str);
                }
            }
        }
        return 0;
    }
};

static void ShowExampleAppConsole(bool* p_open)
{
    static ExampleAppConsole console;
    console.Draw("Example: Console", p_open);
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
//-----------------------------------------------------------------------------

// Usage:
//  static ExampleAppLog my_log;
//  my_log.AddLog("Hello %d world\n", 123);
//  my_log.Draw("title");
struct ExampleAppLog
{
    ImGuiTextBuffer     Buf;
    ImGuiTextFilter     Filter;
    ImVector<int>       LineOffsets; // Index to lines offset. We maintain this with AddLog() calls.
    bool                AutoScroll;  // Keep scrolling if already at the bottom.

    ExampleAppLog()
    {
        AutoScroll = true;
        Clear();
    }

    void    Clear()
    {
        Buf.clear();
        LineOffsets.clear();
        LineOffsets.push_back(0);
    }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        int old_size = Buf.size();
        va_list args;
        va_start(args, fmt);
        Buf.appendfv(fmt, args);
        va_end(args);
        for (int new_size = Buf.size(); old_size < new_size; old_size++)
            if (Buf[old_size] == '\n')
                LineOffsets.push_back(old_size + 1);
    }

    void    Draw(const char* title, bool* p_open = NULL)
    {
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }

        // Options menu
        if (ImGui::BeginPopup("Options"))
        {
            ImGui::Checkbox("Auto-scroll", &AutoScroll);
            ImGui::EndPopup();
        }

        // Main window
        if (ImGui::Button("Options"))
            ImGui::OpenPopup("Options");
        ImGui::SameLine();
        bool clear = ImGui::Button("Clear");
        ImGui::SameLine();
        bool copy = ImGui::Button("Copy");
        ImGui::SameLine();
        Filter.Draw("Filter", -100.0f);

        ImGui::Separator();
        ImGui::BeginChild("scrolling", ImVec2(0, 0), false, ImGuiWindowFlags_HorizontalScrollbar);

        if (clear)
            Clear();
        if (copy)
            ImGui::LogToClipboard();

        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
        const char* buf = Buf.begin();
        const char* buf_end = Buf.end();
        if (Filter.IsActive())
        {
            // In this example we don't use the clipper when Filter is enabled.
            // This is because we don't have a random access on the result on our filter.
            // A real application processing logs with ten of thousands of entries may want to store the result of
            // search/filter.. especially if the filtering function is not trivial (e.g. reg-exp).
            for (int line_no = 0; line_no < LineOffsets.Size; line_no++)
            {
                const char* line_start = buf + LineOffsets[line_no];
                const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;
                if (Filter.PassFilter(line_start, line_end))
                    ImGui::TextUnformatted(line_start, line_end);
            }
        }
        else
        {
            // The simplest and easy way to display the entire buffer:
            //   ImGui::TextUnformatted(buf_begin, buf_end);
            // And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward
            // to skip non-visible lines. Here we instead demonstrate using the clipper to only process lines that are
            // within the visible area.
            // If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them
            // on your side is recommended. Using ImGuiListClipper requires
            // - A) random access into your data
            // - B) items all being the  same height,
            // both of which we can handle since we an array pointing to the beginning of each line of text.
            // When using the filter (in the block of code above) we don't have random access into the data to display
            // anymore, which is why we don't use the clipper. Storing or skimming through the search result would make
            // it possible (and would be recommended if you want to search through tens of thousands of entries).
            ImGuiListClipper clipper;
            clipper.Begin(LineOffsets.Size);
            while (clipper.Step())
            {
                for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)
                {
                    const char* line_start = buf + LineOffsets[line_no];
                    const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;
                    ImGui::TextUnformatted(line_start, line_end);
                }
            }
            clipper.End();
        }
        ImGui::PopStyleVar();

        if (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY())
            ImGui::SetScrollHereY(1.0f);

        ImGui::EndChild();
        ImGui::End();
    }
};

// Demonstrate creating a simple log window with basic filtering.
static void ShowExampleAppLog(bool* p_open)
{
    static ExampleAppLog log;

    // For the demo: add a debug button _BEFORE_ the normal log window contents
    // We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.
    // Most of the contents of the window will be added by the log.Draw() call.
    ImGui::SetNextWindowSize(ImVec2(500, 400), ImGuiCond_FirstUseEver);
    ImGui::Begin("Example: Log", p_open);
    if (ImGui::SmallButton("[Debug] Add 5 entries"))
    {
        static int counter = 0;
        const char* categories[3] = { "info", "warn", "error" };
        const char* words[] = { "Bumfuzzled", "Cattywampus", "Snickersnee", "Abibliophobia", "Absquatulate", "Nincompoop", "Pauciloquent" };
        for (int n = 0; n < 5; n++)
        {
            const char* category = categories[counter % IM_ARRAYSIZE(categories)];
            const char* word = words[counter % IM_ARRAYSIZE(words)];
            log.AddLog("[%05d] [%s] Hello, current time is %.1f, here's a word: '%s'\n",
                ImGui::GetFrameCount(), category, ImGui::GetTime(), word);
            counter++;
        }
    }
    ImGui::End();

    // Actually call in the regular Log helper (which will Begin() into the same window as we just did)
    log.Draw("Example: Log", p_open);
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
//-----------------------------------------------------------------------------

// Demonstrate create a window with multiple child windows.
static void ShowExampleAppLayout(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(500, 440), ImGuiCond_FirstUseEver);
    if (ImGui::Begin("Example: Simple layout", p_open, ImGuiWindowFlags_MenuBar))
    {
        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("File"))
            {
                if (ImGui::MenuItem("Close")) *p_open = false;
                ImGui::EndMenu();
            }
            ImGui::EndMenuBar();
        }

        // Left
        static int selected = 0;
        {
            ImGui::BeginChild("left pane", ImVec2(150, 0), true);
            for (int i = 0; i < 100; i++)
            {
                char label[128];
                sprintf(label, "MyObject %d", i);
                if (ImGui::Selectable(label, selected == i))
                    selected = i;
            }
            ImGui::EndChild();
        }
        ImGui::SameLine();

        // Right
        {
            ImGui::BeginGroup();
            ImGui::BeginChild("item view", ImVec2(0, -ImGui::GetFrameHeightWithSpacing())); // Leave room for 1 line below us
            ImGui::Text("MyObject: %d", selected);
            ImGui::Separator();
            if (ImGui::BeginTabBar("##Tabs", ImGuiTabBarFlags_None))
            {
                if (ImGui::BeginTabItem("Description"))
                {
                    ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Details"))
                {
                    ImGui::Text("ID: 0123456789");
                    ImGui::EndTabItem();
                }
                ImGui::EndTabBar();
            }
            ImGui::EndChild();
            if (ImGui::Button("Revert")) {}
            ImGui::SameLine();
            if (ImGui::Button("Save")) {}
            ImGui::EndGroup();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
//-----------------------------------------------------------------------------

static void ShowPlaceholderObject(const char* prefix, int uid)
{
    // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.
    ImGui::PushID(uid);

    // Text and Tree nodes are less high than framed widgets, using AlignTextToFramePadding() we add vertical spacing to make the tree lines equal high.
    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::AlignTextToFramePadding();
    bool node_open = ImGui::TreeNode("Object", "%s_%u", prefix, uid);
    ImGui::TableSetColumnIndex(1);
    ImGui::Text("my sailor is rich");

    if (node_open)
    {
        static float placeholder_members[8] = { 0.0f, 0.0f, 1.0f, 3.1416f, 100.0f, 999.0f };
        for (int i = 0; i < 8; i++)
        {
            ImGui::PushID(i); // Use field index as identifier.
            if (i < 2)
            {
                ShowPlaceholderObject("Child", 424242);
            }
            else
            {
                // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
                ImGui::TableNextRow();
                ImGui::TableSetColumnIndex(0);
                ImGui::AlignTextToFramePadding();
                ImGuiTreeNodeFlags flags = ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet;
                ImGui::TreeNodeEx("Field", flags, "Field_%d", i);

                ImGui::TableSetColumnIndex(1);
                ImGui::SetNextItemWidth(-FLT_MIN);
                if (i >= 5)
                    ImGui::InputFloat("##value", &placeholder_members[i], 1.0f);
                else
                    ImGui::DragFloat("##value", &placeholder_members[i], 0.01f);
                ImGui::NextColumn();
            }
            ImGui::PopID();
        }
        ImGui::TreePop();
    }
    ImGui::PopID();
}

// Demonstrate create a simple property editor.
static void ShowExampleAppPropertyEditor(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(430, 450), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Property editor", p_open))
    {
        ImGui::End();
        return;
    }

    HelpMarker(
        "This example shows how you may implement a property editor using two columns.\n"
        "All objects/fields data are dummies here.\n"
        "Remember that in many simple cases, you can use ImGui::SameLine(xxx) to position\n"
        "your cursor horizontally instead of using the Columns() API.");

    ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 2));
    if (ImGui::BeginTable("split", 2, ImGuiTableFlags_BordersOuter | ImGuiTableFlags_Resizable))
    {
        // Iterate placeholder objects (all the same data)
        for (int obj_i = 0; obj_i < 4; obj_i++)
        {
            ShowPlaceholderObject("Object", obj_i);
            //ImGui::Separator();
        }
        ImGui::EndTable();
    }
    ImGui::PopStyleVar();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
//-----------------------------------------------------------------------------

// Demonstrate/test rendering huge amount of text, and the incidence of clipping.
static void ShowExampleAppLongText(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Long text display", p_open))
    {
        ImGui::End();
        return;
    }

    static int test_type = 0;
    static ImGuiTextBuffer log;
    static int lines = 0;
    ImGui::Text("Printing unusually long amount of text.");
    ImGui::Combo("Test type", &test_type,
        "Single call to TextUnformatted()\0"
        "Multiple calls to Text(), clipped\0"
        "Multiple calls to Text(), not clipped (slow)\0");
    ImGui::Text("Buffer contents: %d lines, %d bytes", lines, log.size());
    if (ImGui::Button("Clear")) { log.clear(); lines = 0; }
    ImGui::SameLine();
    if (ImGui::Button("Add 1000 lines"))
    {
        for (int i = 0; i < 1000; i++)
            log.appendf("%i The quick brown fox jumps over the lazy dog\n", lines + i);
        lines += 1000;
    }
    ImGui::BeginChild("Log");
    switch (test_type)
    {
    case 0:
        // Single call to TextUnformatted() with a big buffer
        ImGui::TextUnformatted(log.begin(), log.end());
        break;
    case 1:
        {
            // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
            ImGuiListClipper clipper;
            clipper.Begin(lines);
            while (clipper.Step())
                for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                    ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
            ImGui::PopStyleVar();
            break;
        }
    case 2:
        // Multiple calls to Text(), not clipped (slow)
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
        for (int i = 0; i < lines; i++)
            ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
        ImGui::PopStyleVar();
        break;
    }
    ImGui::EndChild();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
//-----------------------------------------------------------------------------

// Demonstrate creating a window which gets auto-resized according to its content.
static void ShowExampleAppAutoResize(bool* p_open)
{
    if (!ImGui::Begin("Example: Auto-resizing window", p_open, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::End();
        return;
    }

    static int lines = 10;
    ImGui::TextUnformatted(
        "Window will resize every-frame to the size of its content.\n"
        "Note that you probably don't want to query the window size to\n"
        "output your content because that would create a feedback loop.");
    ImGui::SliderInt("Number of lines", &lines, 1, 20);
    for (int i = 0; i < lines; i++)
        ImGui::Text("%*sThis is line %d", i * 4, "", i); // Pad with space to extend size horizontally
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
//-----------------------------------------------------------------------------

// Demonstrate creating a window with custom resize constraints.
static void ShowExampleAppConstrainedResize(bool* p_open)
{
    struct CustomConstraints
    {
        // Helper functions to demonstrate programmatic constraints
        static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize.x = data->DesiredSize.y = IM_MAX(data->DesiredSize.x, data->DesiredSize.y); }
        static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)data->UserData; data->DesiredSize = ImVec2((int)(data->DesiredSize.x / step + 0.5f) * step, (int)(data->DesiredSize.y / step + 0.5f) * step); }
    };

    const char* test_desc[] =
    {
        "Resize vertical only",
        "Resize horizontal only",
        "Width > 100, Height > 100",
        "Width 400-500",
        "Height 400-500",
        "Custom: Always Square",
        "Custom: Fixed Steps (100)",
    };

    static bool auto_resize = false;
    static int type = 0;
    static int display_lines = 10;
    if (type == 0) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 0),    ImVec2(-1, FLT_MAX));      // Vertical only
    if (type == 1) ImGui::SetNextWindowSizeConstraints(ImVec2(0, -1),    ImVec2(FLT_MAX, -1));      // Horizontal only
    if (type == 2) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(FLT_MAX, FLT_MAX)); // Width > 100, Height > 100
    if (type == 3) ImGui::SetNextWindowSizeConstraints(ImVec2(400, -1),  ImVec2(500, -1));          // Width 400-500
    if (type == 4) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 400),  ImVec2(-1, 500));          // Height 400-500
    if (type == 5) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Square);                     // Always Square
    if (type == 6) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Step, (void*)(intptr_t)100); // Fixed Step

    ImGuiWindowFlags flags = auto_resize ? ImGuiWindowFlags_AlwaysAutoResize : 0;
    if (ImGui::Begin("Example: Constrained Resize", p_open, flags))
    {
        if (ImGui::IsWindowDocked())
            ImGui::Text("Warning: Sizing Constraints won't work if the window is docked!");
        if (ImGui::Button("200x200")) { ImGui::SetWindowSize(ImVec2(200, 200)); } ImGui::SameLine();
        if (ImGui::Button("500x500")) { ImGui::SetWindowSize(ImVec2(500, 500)); } ImGui::SameLine();
        if (ImGui::Button("800x200")) { ImGui::SetWindowSize(ImVec2(800, 200)); }
        ImGui::SetNextItemWidth(200);
        ImGui::Combo("Constraint", &type, test_desc, IM_ARRAYSIZE(test_desc));
        ImGui::SetNextItemWidth(200);
        ImGui::DragInt("Lines", &display_lines, 0.2f, 1, 100);
        ImGui::Checkbox("Auto-resize", &auto_resize);
        for (int i = 0; i < display_lines; i++)
            ImGui::Text("%*sHello, sailor! Making this line long enough for the example.", i * 4, "");
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple overlay / ShowExampleAppSimpleOverlay()
//-----------------------------------------------------------------------------

// Demonstrate creating a simple static window with no decoration
// + a context-menu to choose which corner of the screen to use.
static void ShowExampleAppSimpleOverlay(bool* p_open)
{
    static int corner = 0;
    ImGuiIO& io = ImGui::GetIO();
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoDocking | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav;
    if (corner != -1)
    {
        const float PAD = 10.0f;
        const ImGuiViewport* viewport = ImGui::GetMainViewport();
        ImVec2 work_pos = viewport->WorkPos; // Use work area to avoid menu-bar/task-bar, if any!
        ImVec2 work_size = viewport->WorkSize;
        ImVec2 window_pos, window_pos_pivot;
        window_pos.x = (corner & 1) ? (work_pos.x + work_size.x - PAD) : (work_pos.x + PAD);
        window_pos.y = (corner & 2) ? (work_pos.y + work_size.y - PAD) : (work_pos.y + PAD);
        window_pos_pivot.x = (corner & 1) ? 1.0f : 0.0f;
        window_pos_pivot.y = (corner & 2) ? 1.0f : 0.0f;
        ImGui::SetNextWindowPos(window_pos, ImGuiCond_Always, window_pos_pivot);
        ImGui::SetNextWindowViewport(viewport->ID);
        window_flags |= ImGuiWindowFlags_NoMove;
    }
    ImGui::SetNextWindowBgAlpha(0.35f); // Transparent background
    if (ImGui::Begin("Example: Simple overlay", p_open, window_flags))
    {
        ImGui::Text("Simple overlay\n" "in the corner of the screen.\n" "(right-click to change position)");
        ImGui::Separator();
        if (ImGui::IsMousePosValid())
            ImGui::Text("Mouse Position: (%.1f,%.1f)", io.MousePos.x, io.MousePos.y);
        else
            ImGui::Text("Mouse Position: <invalid>");
        if (ImGui::BeginPopupContextWindow())
        {
            if (ImGui::MenuItem("Custom",       NULL, corner == -1)) corner = -1;
            if (ImGui::MenuItem("Top-left",     NULL, corner == 0)) corner = 0;
            if (ImGui::MenuItem("Top-right",    NULL, corner == 1)) corner = 1;
            if (ImGui::MenuItem("Bottom-left",  NULL, corner == 2)) corner = 2;
            if (ImGui::MenuItem("Bottom-right", NULL, corner == 3)) corner = 3;
            if (p_open && ImGui::MenuItem("Close")) *p_open = false;
            ImGui::EndPopup();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Fullscreen window / ShowExampleAppFullscreen()
//-----------------------------------------------------------------------------

// Demonstrate creating a window covering the entire screen/viewport
static void ShowExampleAppFullscreen(bool* p_open)
{
    static bool use_work_area = true;
    static ImGuiWindowFlags flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings;

    // We demonstrate using the full viewport area or the work area (without menu-bars, task-bars etc.)
    // Based on your use case you may want one of the other.
    const ImGuiViewport* viewport = ImGui::GetMainViewport();
    ImGui::SetNextWindowPos(use_work_area ? viewport->WorkPos : viewport->Pos);
    ImGui::SetNextWindowSize(use_work_area ? viewport->WorkSize : viewport->Size);

    if (ImGui::Begin("Example: Fullscreen window", p_open, flags))
    {
        ImGui::Checkbox("Use work area instead of main area", &use_work_area);
        ImGui::SameLine();
        HelpMarker("Main Area = entire viewport,\nWork Area = entire viewport minus sections used by the main menu bars, task bars etc.\n\nEnable the main-menu bar in Examples menu to see the difference.");

        ImGui::CheckboxFlags("ImGuiWindowFlags_NoBackground", &flags, ImGuiWindowFlags_NoBackground);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoDecoration", &flags, ImGuiWindowFlags_NoDecoration);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoTitleBar", &flags, ImGuiWindowFlags_NoTitleBar);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoCollapse", &flags, ImGuiWindowFlags_NoCollapse);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoScrollbar", &flags, ImGuiWindowFlags_NoScrollbar);
        ImGui::Unindent();

        if (p_open && ImGui::Button("Close this window"))
            *p_open = false;
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()
//-----------------------------------------------------------------------------

// Demonstrate using "##" and "###" in identifiers to manipulate ID generation.
// This apply to all regular items as well.
// Read FAQ section "How can I have multiple widgets with the same label?" for details.
static void ShowExampleAppWindowTitles(bool*)
{
    const ImGuiViewport* viewport = ImGui::GetMainViewport();
    const ImVec2 base_pos = viewport->Pos;

    // By default, Windows are uniquely identified by their title.
    // You can use the "##" and "###" markers to manipulate the display/ID.

    // Using "##" to display same title but have unique identifier.
    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 100), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##1");
    ImGui::Text("This is window 1.\nMy title is the same as window 2, but my identifier is unique.");
    ImGui::End();

    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 200), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##2");
    ImGui::Text("This is window 2.\nMy title is the same as window 1, but my identifier is unique.");
    ImGui::End();

    // Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
    char buf[128];
    sprintf(buf, "Animated title %c %d###AnimatedTitle", "|/-\\"[(int)(ImGui::GetTime() / 0.25f) & 3], ImGui::GetFrameCount());
    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 300), ImGuiCond_FirstUseEver);
    ImGui::Begin(buf);
    ImGui::Text("This window has a changing title.");
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
//-----------------------------------------------------------------------------

// Demonstrate using the low-level ImDrawList to draw custom shapes.
static void ShowExampleAppCustomRendering(bool* p_open)
{
    if (!ImGui::Begin("Example: Custom rendering", p_open))
    {
        ImGui::End();
        return;
    }

    // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of
    // overloaded operators, etc. Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your
    // types and ImVec2/ImVec4. Dear ImGui defines overloaded operators but they are internal to imgui.cpp and not
    // exposed outside (to avoid messing with your types) In this example we are not using the maths operators!

    if (ImGui::BeginTabBar("##TabBar"))
    {
        if (ImGui::BeginTabItem("Primitives"))
        {
            ImGui::PushItemWidth(-ImGui::GetFontSize() * 15);
            ImDrawList* draw_list = ImGui::GetWindowDrawList();

            // Draw gradients
            // (note that those are currently exacerbating our sRGB/Linear issues)
            // Calling ImGui::GetColorU32() multiplies the given colors by the current Style Alpha, but you may pass the IM_COL32() directly as well..
            ImGui::Text("Gradients");
            ImVec2 gradient_size = ImVec2(ImGui::CalcItemWidth(), ImGui::GetFrameHeight());
            {
                ImVec2 p0 = ImGui::GetCursorScreenPos();
                ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);
                ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 0, 0, 255));
                ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 255, 255, 255));
                draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);
                ImGui::InvisibleButton("##gradient1", gradient_size);
            }
            {
                ImVec2 p0 = ImGui::GetCursorScreenPos();
                ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);
                ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 255, 0, 255));
                ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 0, 0, 255));
                draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);
                ImGui::InvisibleButton("##gradient2", gradient_size);
            }

            // Draw a bunch of primitives
            ImGui::Text("All primitives");
            static float sz = 36.0f;
            static float thickness = 3.0f;
            static int ngon_sides = 6;
            static bool circle_segments_override = false;
            static int circle_segments_override_v = 12;
            static bool curve_segments_override = false;
            static int curve_segments_override_v = 8;
            static ImVec4 colf = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);
            ImGui::DragFloat("Size", &sz, 0.2f, 2.0f, 100.0f, "%.0f");
            ImGui::DragFloat("Thickness", &thickness, 0.05f, 1.0f, 8.0f, "%.02f");
            ImGui::SliderInt("N-gon sides", &ngon_sides, 3, 12);
            ImGui::Checkbox("##circlesegmentoverride", &circle_segments_override);
            ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
            circle_segments_override |= ImGui::SliderInt("Circle segments override", &circle_segments_override_v, 3, 40);
            ImGui::Checkbox("##curvessegmentoverride", &curve_segments_override);
            ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
            curve_segments_override |= ImGui::SliderInt("Curves segments override", &curve_segments_override_v, 3, 40);
            ImGui::ColorEdit4("Color", &colf.x);

            const ImVec2 p = ImGui::GetCursorScreenPos();
            const ImU32 col = ImColor(colf);
            const float spacing = 10.0f;
            const ImDrawFlags corners_tl_br = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersBottomRight;
            const float rounding = sz / 5.0f;
            const int circle_segments = circle_segments_override ? circle_segments_override_v : 0;
            const int curve_segments = curve_segments_override ? curve_segments_override_v : 0;
            float x = p.x + 4.0f;
            float y = p.y + 4.0f;
            for (int n = 0; n < 2; n++)
            {
                // First line uses a thickness of 1.0f, second line uses the configurable thickness
                float th = (n == 0) ? 1.0f : thickness;
                draw_list->AddNgon(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, ngon_sides, th);                 x += sz + spacing;  // N-gon
                draw_list->AddCircle(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, circle_segments, th);          x += sz + spacing;  // Circle
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 0.0f, ImDrawFlags_None, th);          x += sz + spacing;  // Square
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, ImDrawFlags_None, th);      x += sz + spacing;  // Square with all rounded corners
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, corners_tl_br, th);         x += sz + spacing;  // Square with two rounded corners
                draw_list->AddTriangle(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col, th);x += sz + spacing;  // Triangle
                //draw_list->AddTriangle(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col, th);x+= sz*0.4f + spacing; // Thin triangle
                draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y), col, th);                                       x += sz + spacing;  // Horizontal line (note: drawing a filled rectangle will be faster!)
                draw_list->AddLine(ImVec2(x, y), ImVec2(x, y + sz), col, th);                                       x += spacing;       // Vertical line (note: drawing a filled rectangle will be faster!)
                draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y + sz), col, th);                                  x += sz + spacing;  // Diagonal line

                // Quadratic Bezier Curve (3 control points)
                ImVec2 cp3[3] = { ImVec2(x, y + sz * 0.6f), ImVec2(x + sz * 0.5f, y - sz * 0.4f), ImVec2(x + sz, y + sz) };
                draw_list->AddBezierQuadratic(cp3[0], cp3[1], cp3[2], col, th, curve_segments); x += sz + spacing;

                // Cubic Bezier Curve (4 control points)
                ImVec2 cp4[4] = { ImVec2(x, y), ImVec2(x + sz * 1.3f, y + sz * 0.3f), ImVec2(x + sz - sz * 1.3f, y + sz - sz * 0.3f), ImVec2(x + sz, y + sz) };
                draw_list->AddBezierCubic(cp4[0], cp4[1], cp4[2], cp4[3], col, th, curve_segments);

                x = p.x + 4;
                y += sz + spacing;
            }
            draw_list->AddNgonFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz*0.5f, col, ngon_sides);               x += sz + spacing;  // N-gon
            draw_list->AddCircleFilled(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, circle_segments);            x += sz + spacing;  // Circle
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col);                                    x += sz + spacing;  // Square
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f);                             x += sz + spacing;  // Square with all rounded corners
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_tl_br);              x += sz + spacing;  // Square with two rounded corners
            draw_list->AddTriangleFilled(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col);  x += sz + spacing;  // Triangle
            //draw_list->AddTriangleFilled(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col); x += sz*0.4f + spacing; // Thin triangle
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + thickness), col);                             x += sz + spacing;  // Horizontal line (faster than AddLine, but only handle integer thickness)
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + thickness, y + sz), col);                             x += spacing * 2.0f;// Vertical line (faster than AddLine, but only handle integer thickness)
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + 1, y + 1), col);                                      x += sz;            // Pixel (faster than AddLine)
            draw_list->AddRectFilledMultiColor(ImVec2(x, y), ImVec2(x + sz, y + sz), IM_COL32(0, 0, 0, 255), IM_COL32(255, 0, 0, 255), IM_COL32(255, 255, 0, 255), IM_COL32(0, 255, 0, 255));

            ImGui::Dummy(ImVec2((sz + spacing) * 10.2f, (sz + spacing) * 3.0f));
            ImGui::PopItemWidth();
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Canvas"))
        {
            static ImVector<ImVec2> points;
            static ImVec2 scrolling(0.0f, 0.0f);
            static bool opt_enable_grid = true;
            static bool opt_enable_context_menu = true;
            static bool adding_line = false;

            ImGui::Checkbox("Enable grid", &opt_enable_grid);
            ImGui::Checkbox("Enable context menu", &opt_enable_context_menu);
            ImGui::Text("Mouse Left: drag to add lines,\nMouse Right: drag to scroll, click for context menu.");

            // Typically you would use a BeginChild()/EndChild() pair to benefit from a clipping region + own scrolling.
            // Here we demonstrate that this can be replaced by simple offsetting + custom drawing + PushClipRect/PopClipRect() calls.
            // To use a child window instead we could use, e.g:
            //      ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0));      // Disable padding
            //      ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(50, 50, 50, 255));  // Set a background color
            //      ImGui::BeginChild("canvas", ImVec2(0.0f, 0.0f), true, ImGuiWindowFlags_NoMove);
            //      ImGui::PopStyleColor();
            //      ImGui::PopStyleVar();
            //      [...]
            //      ImGui::EndChild();

            // Using InvisibleButton() as a convenience 1) it will advance the layout cursor and 2) allows us to use IsItemHovered()/IsItemActive()
            ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();      // ImDrawList API uses screen coordinates!
            ImVec2 canvas_sz = ImGui::GetContentRegionAvail();   // Resize canvas to what's available
            if (canvas_sz.x < 50.0f) canvas_sz.x = 50.0f;
            if (canvas_sz.y < 50.0f) canvas_sz.y = 50.0f;
            ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);

            // Draw border and background color
            ImGuiIO& io = ImGui::GetIO();
            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            draw_list->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(50, 50, 50, 255));
            draw_list->AddRect(canvas_p0, canvas_p1, IM_COL32(255, 255, 255, 255));

            // This will catch our interactions
            ImGui::InvisibleButton("canvas", canvas_sz, ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight);
            const bool is_hovered = ImGui::IsItemHovered(); // Hovered
            const bool is_active = ImGui::IsItemActive();   // Held
            const ImVec2 origin(canvas_p0.x + scrolling.x, canvas_p0.y + scrolling.y); // Lock scrolled origin
            const ImVec2 mouse_pos_in_canvas(io.MousePos.x - origin.x, io.MousePos.y - origin.y);

            // Add first and second point
            if (is_hovered && !adding_line && ImGui::IsMouseClicked(ImGuiMouseButton_Left))
            {
                points.push_back(mouse_pos_in_canvas);
                points.push_back(mouse_pos_in_canvas);
                adding_line = true;
            }
            if (adding_line)
            {
                points.back() = mouse_pos_in_canvas;
                if (!ImGui::IsMouseDown(ImGuiMouseButton_Left))
                    adding_line = false;
            }

            // Pan (we use a zero mouse threshold when there's no context menu)
            // You may decide to make that threshold dynamic based on whether the mouse is hovering something etc.
            const float mouse_threshold_for_pan = opt_enable_context_menu ? -1.0f : 0.0f;
            if (is_active && ImGui::IsMouseDragging(ImGuiMouseButton_Right, mouse_threshold_for_pan))
            {
                scrolling.x += io.MouseDelta.x;
                scrolling.y += io.MouseDelta.y;
            }

            // Context menu (under default mouse threshold)
            ImVec2 drag_delta = ImGui::GetMouseDragDelta(ImGuiMouseButton_Right);
            if (opt_enable_context_menu && ImGui::IsMouseReleased(ImGuiMouseButton_Right) && drag_delta.x == 0.0f && drag_delta.y == 0.0f)
                ImGui::OpenPopupOnItemClick("context");
            if (ImGui::BeginPopup("context"))
            {
                if (adding_line)
                    points.resize(points.size() - 2);
                adding_line = false;
                if (ImGui::MenuItem("Remove one", NULL, false, points.Size > 0)) { points.resize(points.size() - 2); }
                if (ImGui::MenuItem("Remove all", NULL, false, points.Size > 0)) { points.clear(); }
                ImGui::EndPopup();
            }

            // Draw grid + all lines in the canvas
            draw_list->PushClipRect(canvas_p0, canvas_p1, true);
            if (opt_enable_grid)
            {
                const float GRID_STEP = 64.0f;
                for (float x = fmodf(scrolling.x, GRID_STEP); x < canvas_sz.x; x += GRID_STEP)
                    draw_list->AddLine(ImVec2(canvas_p0.x + x, canvas_p0.y), ImVec2(canvas_p0.x + x, canvas_p1.y), IM_COL32(200, 200, 200, 40));
                for (float y = fmodf(scrolling.y, GRID_STEP); y < canvas_sz.y; y += GRID_STEP)
                    draw_list->AddLine(ImVec2(canvas_p0.x, canvas_p0.y + y), ImVec2(canvas_p1.x, canvas_p0.y + y), IM_COL32(200, 200, 200, 40));
            }
            for (int n = 0; n < points.Size; n += 2)
                draw_list->AddLine(ImVec2(origin.x + points[n].x, origin.y + points[n].y), ImVec2(origin.x + points[n + 1].x, origin.y + points[n + 1].y), IM_COL32(255, 255, 0, 255), 2.0f);
            draw_list->PopClipRect();

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("BG/FG draw lists"))
        {
            static bool draw_bg = true;
            static bool draw_fg = true;
            ImGui::Checkbox("Draw in Background draw list", &draw_bg);
            ImGui::SameLine(); HelpMarker("The Background draw list will be rendered below every Dear ImGui windows.");
            ImGui::Checkbox("Draw in Foreground draw list", &draw_fg);
            ImGui::SameLine(); HelpMarker("The Foreground draw list will be rendered over every Dear ImGui windows.");
            ImVec2 window_pos = ImGui::GetWindowPos();
            ImVec2 window_size = ImGui::GetWindowSize();
            ImVec2 window_center = ImVec2(window_pos.x + window_size.x * 0.5f, window_pos.y + window_size.y * 0.5f);
            if (draw_bg)
                ImGui::GetBackgroundDrawList()->AddCircle(window_center, window_size.x * 0.6f, IM_COL32(255, 0, 0, 200), 0, 10 + 4);
            if (draw_fg)
                ImGui::GetForegroundDrawList()->AddCircle(window_center, window_size.y * 0.6f, IM_COL32(0, 255, 0, 200), 0, 10);
            ImGui::EndTabItem();
        }

        ImGui::EndTabBar();
    }

    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Docking, DockSpace / ShowExampleAppDockSpace()
//-----------------------------------------------------------------------------

// Demonstrate using DockSpace() to create an explicit docking node within an existing window.
// Note that you dock windows into each others _without_ a dockspace, by just clicking on
// a window title bar or tab and moving it.
// DockSpace() and DockSpaceOverViewport() are only useful to construct a central docking
// location for your application.
void ShowExampleAppDockSpace(bool* p_open)
{
    // In 99% case you should be able to just call DockSpaceOverViewport() and ignore all the code below!
    // In this specific demo, we are not using DockSpaceOverViewport() because:
    // - we allow the host window to be floating/moveable instead of filling the viewport (when opt_fullscreen == false)
    // - we allow the host window to have padding (when opt_padding == true)
    // - we have a local menu bar in the host window (vs. you could use BeginMainMenuBar() + DockSpaceOverViewport() in your code!)
    // TL;DR; this demo is more complicated than what you would normally use.
    // If we removed all the options we are showcasing, this demo would become:
    //     void ShowExampleAppDockSpace()
    //     {
    //         ImGui::DockSpaceOverViewport(ImGui::GetMainViewport());
    //     }

    static bool opt_fullscreen = true;
    static bool opt_padding = false;
    static ImGuiDockNodeFlags dockspace_flags = ImGuiDockNodeFlags_None;

    // We are using the ImGuiWindowFlags_NoDocking flag to make the parent window not dockable into,
    // because it would be confusing to have two docking targets within each others.
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking;
    if (opt_fullscreen)
    {
        const ImGuiViewport* viewport = ImGui::GetMainViewport();
        ImGui::SetNextWindowPos(viewport->WorkPos);
        ImGui::SetNextWindowSize(viewport->WorkSize);
        ImGui::SetNextWindowViewport(viewport->ID);
        ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
        ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
        window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
        window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;
    }
    else
    {
        dockspace_flags &= ~ImGuiDockNodeFlags_PassthruCentralNode;
    }

    // When using ImGuiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background
    // and handle the pass-thru hole, so we ask Begin() to not render a background.
    if (dockspace_flags & ImGuiDockNodeFlags_PassthruCentralNode)
        window_flags |= ImGuiWindowFlags_NoBackground;

    // Important: note that we proceed even if Begin() returns false (aka window is collapsed).
    // This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,
    // all active windows docked into it will lose their parent and become undocked.
    // We cannot preserve the docking relationship between an active window and an inactive docking, otherwise
    // any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.
    if (!opt_padding)
        ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
    ImGui::Begin("DockSpace Demo", p_open, window_flags);
    if (!opt_padding)
        ImGui::PopStyleVar();

    if (opt_fullscreen)
        ImGui::PopStyleVar(2);

    // DockSpace
    ImGuiIO& io = ImGui::GetIO();
    if (io.ConfigFlags & ImGuiConfigFlags_DockingEnable)
    {
        ImGuiID dockspace_id = ImGui::GetID("MyDockSpace");
        ImGui::DockSpace(dockspace_id, ImVec2(0.0f, 0.0f), dockspace_flags);
    }
    else
    {
        ShowDockingDisabledMessage();
    }

    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Options"))
        {
            // Disabling fullscreen would allow the window to be moved to the front of other windows,
            // which we can't undo at the moment without finer window depth/z control.
            ImGui::MenuItem("Fullscreen", NULL, &opt_fullscreen);
            ImGui::MenuItem("Padding", NULL, &opt_padding);
            ImGui::Separator();

            if (ImGui::MenuItem("Flag: NoSplit",                "", (dockspace_flags & ImGuiDockNodeFlags_NoSplit) != 0))                 { dockspace_flags ^= ImGuiDockNodeFlags_NoSplit; }
            if (ImGui::MenuItem("Flag: NoResize",               "", (dockspace_flags & ImGuiDockNodeFlags_NoResize) != 0))                { dockspace_flags ^= ImGuiDockNodeFlags_NoResize; }
            if (ImGui::MenuItem("Flag: NoDockingInCentralNode", "", (dockspace_flags & ImGuiDockNodeFlags_NoDockingInCentralNode) != 0))  { dockspace_flags ^= ImGuiDockNodeFlags_NoDockingInCentralNode; }
            if (ImGui::MenuItem("Flag: AutoHideTabBar",         "", (dockspace_flags & ImGuiDockNodeFlags_AutoHideTabBar) != 0))          { dockspace_flags ^= ImGuiDockNodeFlags_AutoHideTabBar; }
            if (ImGui::MenuItem("Flag: PassthruCentralNode",    "", (dockspace_flags & ImGuiDockNodeFlags_PassthruCentralNode) != 0, opt_fullscreen)) { dockspace_flags ^= ImGuiDockNodeFlags_PassthruCentralNode; }
            ImGui::Separator();

            if (ImGui::MenuItem("Close", NULL, false, p_open != NULL))
                *p_open = false;
            ImGui::EndMenu();
        }
        HelpMarker(
            "When docking is enabled, you can ALWAYS dock MOST window into another! Try it now!" "\n"
            "- Drag from window title bar or their tab to dock/undock." "\n"
            "- Drag from window menu button (upper-left button) to undock an entire node (all windows)." "\n"
            "- Hold SHIFT to disable docking." "\n"
            "This demo app has nothing to do with it!" "\n\n"
            "This demo app only demonstrate the use of ImGui::DockSpace() which allows you to manually create a docking node _within_ another window. This is useful so you can decorate your main application window (e.g. with a menu bar)." "\n\n"
            "ImGui::DockSpace() comes with one hard constraint: it needs to be submitted _before_ any window which may be docked into it. Therefore, if you use a dock spot as the central point of your application, you'll probably want it to be part of the very first window you are submitting to imgui every frame." "\n\n"
            "(NB: because of this constraint, the implicit \"Debug\" window can not be docked into an explicit DockSpace() node, because that window is submitted as part of the NewFrame() call. An easy workaround is that you can create your own implicit \"Debug##2\" window after calling DockSpace() and leave it in the window stack for anyone to use.)"
        );

        ImGui::EndMenuBar();
    }

    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()
//-----------------------------------------------------------------------------

// Simplified structure to mimic a Document model
struct MyDocument
{
    const char* Name;       // Document title
    bool        Open;       // Set when open (we keep an array of all available documents to simplify demo code!)
    bool        OpenPrev;   // Copy of Open from last update.
    bool        Dirty;      // Set when the document has been modified
    bool        WantClose;  // Set when the document
    ImVec4      Color;      // An arbitrary variable associated to the document

    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f, 1.0f))
    {
        Name = name;
        Open = OpenPrev = open;
        Dirty = false;
        WantClose = false;
        Color = color;
    }
    void DoOpen()       { Open = true; }
    void DoQueueClose() { WantClose = true; }
    void DoForceClose() { Open = false; Dirty = false; }
    void DoSave()       { Dirty = false; }

    // Display placeholder contents for the Document
    static void DisplayContents(MyDocument* doc)
    {
        ImGui::PushID(doc);
        ImGui::Text("Document \"%s\"", doc->Name);
        ImGui::PushStyleColor(ImGuiCol_Text, doc->Color);
        ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
        ImGui::PopStyleColor();
        if (ImGui::Button("Modify", ImVec2(100, 0)))
            doc->Dirty = true;
        ImGui::SameLine();
        if (ImGui::Button("Save", ImVec2(100, 0)))
            doc->DoSave();
        ImGui::ColorEdit3("color", &doc->Color.x);  // Useful to test drag and drop and hold-dragged-to-open-tab behavior.
        ImGui::PopID();
    }

    // Display context menu for the Document
    static void DisplayContextMenu(MyDocument* doc)
    {
        if (!ImGui::BeginPopupContextItem())
            return;

        char buf[256];
        sprintf(buf, "Save %s", doc->Name);
        if (ImGui::MenuItem(buf, "CTRL+S", false, doc->Open))
            doc->DoSave();
        if (ImGui::MenuItem("Close", "CTRL+W", false, doc->Open))
            doc->DoQueueClose();
        ImGui::EndPopup();
    }
};

struct ExampleAppDocuments
{
    ImVector<MyDocument> Documents;

    ExampleAppDocuments()
    {
        Documents.push_back(MyDocument("Lettuce",             true,  ImVec4(0.4f, 0.8f, 0.4f, 1.0f)));
        Documents.push_back(MyDocument("Eggplant",            true,  ImVec4(0.8f, 0.5f, 1.0f, 1.0f)));
        Documents.push_back(MyDocument("Carrot",              true,  ImVec4(1.0f, 0.8f, 0.5f, 1.0f)));
        Documents.push_back(MyDocument("Tomato",              false, ImVec4(1.0f, 0.3f, 0.4f, 1.0f)));
        Documents.push_back(MyDocument("A Rather Long Title", false));
        Documents.push_back(MyDocument("Some Document",       false));
    }
};

// [Optional] Notify the system of Tabs/Windows closure that happened outside the regular tab interface.
// If a tab has been closed programmatically (aka closed from another source such as the Checkbox() in the demo,
// as opposed to clicking on the regular tab closing button) and stops being submitted, it will take a frame for
// the tab bar to notice its absence. During this frame there will be a gap in the tab bar, and if the tab that has
// disappeared was the selected one, the tab bar will report no selected tab during the frame. This will effectively
// give the impression of a flicker for one frame.
// We call SetTabItemClosed() to manually notify the Tab Bar or Docking system of removed tabs to avoid this glitch.
// Note that this completely optional, and only affect tab bars with the ImGuiTabBarFlags_Reorderable flag.
static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)
{
    for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
    {
        MyDocument* doc = &app.Documents[doc_n];
        if (!doc->Open && doc->OpenPrev)
            ImGui::SetTabItemClosed(doc->Name);
        doc->OpenPrev = doc->Open;
    }
}

void ShowExampleAppDocuments(bool* p_open)
{
    static ExampleAppDocuments app;

    // Options
    enum Target
    {
        Target_None,
        Target_Tab,                 // Create documents as local tab into a local tab bar
        Target_DockSpaceAndWindow   // Create documents as regular windows, and create an embedded dockspace
    };
    static Target opt_target = Target_Tab;
    static bool opt_reorderable = true;
    static ImGuiTabBarFlags opt_fitting_flags = ImGuiTabBarFlags_FittingPolicyDefault_;

    // When (opt_target == Target_DockSpaceAndWindow) there is the possibily that one of our child Document window (e.g. "Eggplant")
    // that we emit gets docked into the same spot as the parent window ("Example: Documents").
    // This would create a problematic feedback loop because selecting the "Eggplant" tab would make the "Example: Documents" tab
    // not visible, which in turn would stop submitting the "Eggplant" window.
    // We avoid this problem by submitting our documents window even if our parent window is not currently visible.
    // Another solution may be to make the "Example: Documents" window use the ImGuiWindowFlags_NoDocking.

    bool window_contents_visible = ImGui::Begin("Example: Documents", p_open, ImGuiWindowFlags_MenuBar);
    if (!window_contents_visible && opt_target != Target_DockSpaceAndWindow)
    {
        ImGui::End();
        return;
    }

    // Menu
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            int open_count = 0;
            for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
                open_count += app.Documents[doc_n].Open ? 1 : 0;

            if (ImGui::BeginMenu("Open", open_count < app.Documents.Size))
            {
                for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
                {
                    MyDocument* doc = &app.Documents[doc_n];
                    if (!doc->Open)
                        if (ImGui::MenuItem(doc->Name))
                            doc->DoOpen();
                }
                ImGui::EndMenu();
            }
            if (ImGui::MenuItem("Close All Documents", NULL, false, open_count > 0))
                for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
                    app.Documents[doc_n].DoQueueClose();
            if (ImGui::MenuItem("Exit", "Alt+F4")) {}
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }

    // [Debug] List documents with one checkbox for each
    for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
    {
        MyDocument* doc = &app.Documents[doc_n];
        if (doc_n > 0)
            ImGui::SameLine();
        ImGui::PushID(doc);
        if (ImGui::Checkbox(doc->Name, &doc->Open))
            if (!doc->Open)
                doc->DoForceClose();
        ImGui::PopID();
    }
    ImGui::PushItemWidth(ImGui::GetFontSize() * 12);
    ImGui::Combo("Output", (int*)&opt_target, "None\0TabBar+Tabs\0DockSpace+Window\0");
    ImGui::PopItemWidth();
    bool redock_all = false;
    if (opt_target == Target_Tab)                { ImGui::SameLine(); ImGui::Checkbox("Reorderable Tabs", &opt_reorderable); }
    if (opt_target == Target_DockSpaceAndWindow) { ImGui::SameLine(); redock_all = ImGui::Button("Redock all"); }

    ImGui::Separator();

    // Tabs
    if (opt_target == Target_Tab)
    {
        ImGuiTabBarFlags tab_bar_flags = (opt_fitting_flags) | (opt_reorderable ? ImGuiTabBarFlags_Reorderable : 0);
        if (ImGui::BeginTabBar("##tabs", tab_bar_flags))
        {
            if (opt_reorderable)
                NotifyOfDocumentsClosedElsewhere(app);

            // [DEBUG] Stress tests
            //if ((ImGui::GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.
            //if (ImGui::GetIO().KeyCtrl) ImGui::SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..

            // Submit Tabs
            for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
            {
                MyDocument* doc = &app.Documents[doc_n];
                if (!doc->Open)
                    continue;

                ImGuiTabItemFlags tab_flags = (doc->Dirty ? ImGuiTabItemFlags_UnsavedDocument : 0);
                bool visible = ImGui::BeginTabItem(doc->Name, &doc->Open, tab_flags);

                // Cancel attempt to close when unsaved add to save queue so we can display a popup.
                if (!doc->Open && doc->Dirty)
                {
                    doc->Open = true;
                    doc->DoQueueClose();
                }

                MyDocument::DisplayContextMenu(doc);
                if (visible)
                {
                    MyDocument::DisplayContents(doc);
                    ImGui::EndTabItem();
                }
            }

            ImGui::EndTabBar();
        }
    }
    else if (opt_target == Target_DockSpaceAndWindow)
    {
        if (ImGui::GetIO().ConfigFlags & ImGuiConfigFlags_DockingEnable)
        {
            NotifyOfDocumentsClosedElsewhere(app);

            // Create a DockSpace node where any window can be docked
            ImGuiID dockspace_id = ImGui::GetID("MyDockSpace");
            ImGui::DockSpace(dockspace_id);

            // Create Windows
            for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
            {
                MyDocument* doc = &app.Documents[doc_n];
                if (!doc->Open)
                    continue;

                ImGui::SetNextWindowDockID(dockspace_id, redock_all ? ImGuiCond_Always : ImGuiCond_FirstUseEver);
                ImGuiWindowFlags window_flags = (doc->Dirty ? ImGuiWindowFlags_UnsavedDocument : 0);
                bool visible = ImGui::Begin(doc->Name, &doc->Open, window_flags);

                // Cancel attempt to close when unsaved add to save queue so we can display a popup.
                if (!doc->Open && doc->Dirty)
                {
                    doc->Open = true;
                    doc->DoQueueClose();
                }

                MyDocument::DisplayContextMenu(doc);
                if (visible)
                    MyDocument::DisplayContents(doc);

                ImGui::End();
            }
        }
        else
        {
            ShowDockingDisabledMessage();
        }
    }

    // Early out other contents
    if (!window_contents_visible)
    {
        ImGui::End();
        return;
    }

    // Update closing queue
    static ImVector<MyDocument*> close_queue;
    if (close_queue.empty())
    {
        // Close queue is locked once we started a popup
        for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
        {
            MyDocument* doc = &app.Documents[doc_n];
            if (doc->WantClose)
            {
                doc->WantClose = false;
                close_queue.push_back(doc);
            }
        }
    }

    // Display closing confirmation UI
    if (!close_queue.empty())
    {
        int close_queue_unsaved_documents = 0;
        for (int n = 0; n < close_queue.Size; n++)
            if (close_queue[n]->Dirty)
                close_queue_unsaved_documents++;

        if (close_queue_unsaved_documents == 0)
        {
            // Close documents when all are unsaved
            for (int n = 0; n < close_queue.Size; n++)
                close_queue[n]->DoForceClose();
            close_queue.clear();
        }
        else
        {
            if (!ImGui::IsPopupOpen("Save?"))
                ImGui::OpenPopup("Save?");
            if (ImGui::BeginPopupModal("Save?", NULL, ImGuiWindowFlags_AlwaysAutoResize))
            {
                ImGui::Text("Save change to the following items?");
                float item_height = ImGui::GetTextLineHeightWithSpacing();
                if (ImGui::BeginChildFrame(ImGui::GetID("frame"), ImVec2(-FLT_MIN, 6.25f * item_height)))
                {
                    for (int n = 0; n < close_queue.Size; n++)
                        if (close_queue[n]->Dirty)
                            ImGui::Text("%s", close_queue[n]->Name);
                    ImGui::EndChildFrame();
                }

                ImVec2 button_size(ImGui::GetFontSize() * 7.0f, 0.0f);
                if (ImGui::Button("Yes", button_size))
                {
                    for (int n = 0; n < close_queue.Size; n++)
                    {
                        if (close_queue[n]->Dirty)
                            close_queue[n]->DoSave();
                        close_queue[n]->DoForceClose();
                    }
                    close_queue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::SameLine();
                if (ImGui::Button("No", button_size))
                {
                    for (int n = 0; n < close_queue.Size; n++)
                        close_queue[n]->DoForceClose();
                    close_queue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::SameLine();
                if (ImGui::Button("Cancel", button_size))
                {
                    close_queue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::EndPopup();
            }
        }
    }

    ImGui::End();
}

// End of Demo code
#else

void ImGui::ShowAboutWindow(bool*) {}
void ImGui::ShowDemoWindow(bool*) {}
void ImGui::ShowUserGuide() {}
void ImGui::ShowStyleEditor(ImGuiStyle*) {}

#endif

#endif // #ifndef IMGUI_DISABLE

// Junk Code By Troll Face & Thaisen's Gen
void nUZnZYPtVlsvIiaADRMKLrkWSqWFglWGk78179577() {     float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83869076 = -303909966;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV89988232 = -905480104;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97119322 = -87592003;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3200421 = -43544793;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57340616 = -910851167;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25096106 = -976600610;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV80810281 = -830044487;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9877439 = -120834607;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV61684431 = -539382557;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71626523 = -190251636;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV92778364 = -639811083;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV84475433 = -378698511;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42565635 = -645383435;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44306627 = -396918661;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40442586 = -915702907;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28595077 = -425858805;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81806761 = -934865734;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81265024 = -707355502;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64759804 = -761716764;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2132454 = 60551977;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67972972 = -239571852;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57212574 = -989788301;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35896354 = -259293572;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV37875727 = -264550313;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV19617163 = -967199521;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29058976 = -194193468;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV49051114 = -425879058;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3252872 = -795693795;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56340571 = -347065793;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33678847 = -426134492;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38220773 = -353748580;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13804447 = -355211696;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56896864 = 20021705;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42717646 = 46206084;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2052034 = -279755542;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95776301 = -867718941;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV7291767 = -550054279;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56598603 = -68457964;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95486687 = -792887796;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40723571 = -953621205;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13760136 = -763044236;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31379855 = -670880447;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV63300520 = -67464880;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38286429 = -352126915;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10870001 = -530838070;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV90859481 = -62772838;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV8440707 = -826086686;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25200776 = -799912540;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31616758 = -345041587;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29407750 = -862676835;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27335376 = -666904280;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV1228839 = -436371628;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3960361 = -850038942;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV30246631 = -906864512;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10206605 = -309571243;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26656502 = -314121665;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV54091878 = -546186533;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV59243596 = -823041690;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83583257 = -76345272;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28281641 = -616657699;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV76044992 = -450721552;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77557410 = 65649308;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV53536867 = -773768815;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28005584 = -13248066;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33405751 = -836503056;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV78973918 = -184599387;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27578570 = -298720217;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV99847988 = -591589520;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42254594 = -17163119;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44666285 = 52016034;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV21303310 = -875804527;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25208159 = -766407771;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV85778337 = -914467707;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV24036234 = -808095559;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV88372317 = -176403788;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36593117 = -568691406;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV93912054 = -822323422;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97609924 = -907166657;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27005727 = -733712243;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28757681 = -804426684;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV20618269 = -368106783;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV23850338 = -625966518;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71636113 = -350652209;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26932822 = -484388958;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV6343472 = -759230213;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36991934 = -917376952;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9844086 = -505172754;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26650233 = -73113784;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV32511041 = -644222673;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV75395531 = -965633878;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV41684423 = -221532409;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV48048171 = -727012590;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV73015345 = -992112693;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67205046 = -76230097;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64678578 = -402899653;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36202726 = -728693544;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77842988 = -897111632;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35294936 = 45783185;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV4880679 = -515623859;    float EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31896083 = -303909966;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83869076 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV89988232;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV89988232 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97119322;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97119322 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3200421;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3200421 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57340616;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57340616 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25096106;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25096106 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV80810281;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV80810281 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9877439;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9877439 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV61684431;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV61684431 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71626523;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71626523 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV92778364;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV92778364 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV84475433;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV84475433 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42565635;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42565635 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44306627;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44306627 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40442586;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40442586 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28595077;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28595077 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81806761;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81806761 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81265024;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV81265024 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64759804;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64759804 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2132454;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2132454 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67972972;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67972972 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57212574;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV57212574 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35896354;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35896354 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV37875727;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV37875727 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV19617163;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV19617163 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29058976;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29058976 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV49051114;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV49051114 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3252872;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3252872 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56340571;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56340571 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33678847;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33678847 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38220773;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38220773 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13804447;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13804447 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56896864;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56896864 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42717646;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42717646 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2052034;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV2052034 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95776301;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95776301 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV7291767;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV7291767 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56598603;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV56598603 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95486687;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV95486687 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40723571;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV40723571 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13760136;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV13760136 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31379855;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31379855 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV63300520;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV63300520 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38286429;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV38286429 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10870001;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10870001 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV90859481;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV90859481 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV8440707;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV8440707 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25200776;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25200776 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31616758;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31616758 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29407750;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV29407750 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27335376;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27335376 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV1228839;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV1228839 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3960361;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV3960361 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV30246631;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV30246631 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10206605;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV10206605 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26656502;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26656502 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV54091878;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV54091878 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV59243596;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV59243596 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83583257;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83583257 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28281641;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28281641 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV76044992;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV76044992 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77557410;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77557410 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV53536867;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV53536867 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28005584;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28005584 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33405751;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV33405751 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV78973918;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV78973918 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27578570;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27578570 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV99847988;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV99847988 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42254594;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV42254594 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44666285;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV44666285 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV21303310;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV21303310 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25208159;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV25208159 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV85778337;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV85778337 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV24036234;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV24036234 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV88372317;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV88372317 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36593117;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36593117 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV93912054;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV93912054 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97609924;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV97609924 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27005727;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV27005727 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28757681;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV28757681 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV20618269;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV20618269 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV23850338;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV23850338 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71636113;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV71636113 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26932822;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26932822 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV6343472;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV6343472 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36991934;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36991934 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9844086;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV9844086 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26650233;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV26650233 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV32511041;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV32511041 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV75395531;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV75395531 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV41684423;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV41684423 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV48048171;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV48048171 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV73015345;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV73015345 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67205046;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV67205046 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64678578;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV64678578 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36202726;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV36202726 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77842988;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV77842988 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35294936;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV35294936 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV4880679;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV4880679 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31896083;     EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV31896083 = EuwGhYMpeJeJafUJZVAquWvjCUiBJMkPlLDnduVszV83869076;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qdzhfyQGIMDxbQBzpwbcGqEEFJJhMQNBT74362738() {     float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg43465173 = -532666343;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91494081 = -715635489;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg34120711 = -161732925;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99076178 = -916155670;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68633843 = -811358194;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg22773227 = -834860283;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg78168764 = -159762073;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60702722 = -475045983;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg75497874 = 27944943;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54651039 = -131510489;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg18073296 = 58646478;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg19146635 = -473719761;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13320198 = -551561954;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2680467 = -301077009;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg37750392 = -608229428;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25349332 = -231231696;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17767865 = -863082015;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45933355 = 23308393;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45202007 = -900836394;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg82049563 = -601856676;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg48434091 = -72592676;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25702173 = -882190179;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg28088179 = -23588651;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2605966 = -928888550;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95595167 = -423337111;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg23473883 = -328810939;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62391184 = -875359055;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68364040 = -317075386;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6124915 = -136658408;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg72152313 = -473117734;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63135091 = -998967908;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg56569707 = -772429693;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg5978903 = 40074832;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25242089 = -555677847;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6989395 = 72034472;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg74366197 = -79375523;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97923444 = -842832914;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54958940 = -12910354;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg14504630 = -511594312;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13549225 = -127502153;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71977949 = -131705833;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg1459037 = -675821865;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg4179763 = -900909710;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg12525935 = -776041654;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg11858316 = 22843861;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55652610 = -305716997;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13929429 = -717942353;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71897169 = -32665769;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71006406 = -628979206;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg44575142 = -83929295;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77821626 = -453012504;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg7813992 = -407614884;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg79375874 = 10012604;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3521154 = -67033468;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25928647 = -273505330;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17763000 = -650476165;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63405903 = -592046839;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31514745 = -232844376;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3481012 = -392818560;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45159960 = -382547256;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60382042 = -959501228;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9804724 = -842686688;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54577808 = -238387575;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3345561 = -498937323;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91515947 = -132542582;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61503589 = -168923829;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13167733 = -413794593;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg88078109 = -995884107;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95691071 = -273111481;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63384194 = -428853905;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg27425887 = -388398783;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62808924 = -750171661;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31428726 = -465097295;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31652782 = -673334241;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10071614 = -370150844;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46975055 = -396770812;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21522411 = -981280470;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg15562245 = -247546998;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90747649 = -851732412;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg39942557 = -17620115;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9544454 = -610868587;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90494014 = -742693287;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97357634 = -688096180;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61549772 = 47270887;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg94330687 = 79894769;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55321100 = -491353025;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77193832 = -682442298;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2457749 = -892891701;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99313441 = -182172517;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg89226394 = -277489364;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10960295 = -487328685;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg66408699 = -509988538;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg51477929 = -620091795;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg69344670 = -29047057;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg53167183 = -168000925;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62173226 = -289019145;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46881228 = -337434290;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg834202 = -301972387;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21009987 = -543499073;    float BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg50354727 = -532666343;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg43465173 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91494081;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91494081 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg34120711;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg34120711 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99076178;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99076178 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68633843;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68633843 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg22773227;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg22773227 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg78168764;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg78168764 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60702722;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60702722 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg75497874;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg75497874 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54651039;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54651039 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg18073296;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg18073296 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg19146635;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg19146635 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13320198;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13320198 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2680467;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2680467 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg37750392;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg37750392 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25349332;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25349332 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17767865;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17767865 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45933355;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45933355 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45202007;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45202007 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg82049563;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg82049563 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg48434091;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg48434091 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25702173;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25702173 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg28088179;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg28088179 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2605966;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2605966 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95595167;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95595167 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg23473883;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg23473883 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62391184;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62391184 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68364040;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg68364040 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6124915;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6124915 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg72152313;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg72152313 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63135091;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63135091 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg56569707;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg56569707 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg5978903;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg5978903 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25242089;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25242089 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6989395;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg6989395 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg74366197;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg74366197 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97923444;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97923444 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54958940;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54958940 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg14504630;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg14504630 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13549225;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13549225 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71977949;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71977949 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg1459037;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg1459037 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg4179763;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg4179763 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg12525935;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg12525935 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg11858316;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg11858316 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55652610;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55652610 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13929429;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13929429 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71897169;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71897169 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71006406;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg71006406 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg44575142;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg44575142 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77821626;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77821626 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg7813992;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg7813992 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg79375874;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg79375874 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3521154;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3521154 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25928647;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg25928647 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17763000;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg17763000 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63405903;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63405903 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31514745;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31514745 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3481012;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3481012 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45159960;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg45159960 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60382042;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg60382042 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9804724;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9804724 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54577808;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg54577808 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3345561;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg3345561 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91515947;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg91515947 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61503589;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61503589 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13167733;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg13167733 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg88078109;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg88078109 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95691071;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg95691071 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63384194;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg63384194 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg27425887;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg27425887 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62808924;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62808924 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31428726;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31428726 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31652782;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg31652782 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10071614;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10071614 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46975055;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46975055 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21522411;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21522411 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg15562245;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg15562245 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90747649;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90747649 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg39942557;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg39942557 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9544454;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg9544454 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90494014;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg90494014 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97357634;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg97357634 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61549772;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg61549772 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg94330687;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg94330687 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55321100;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg55321100 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77193832;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg77193832 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2457749;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg2457749 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99313441;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg99313441 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg89226394;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg89226394 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10960295;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg10960295 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg66408699;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg66408699 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg51477929;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg51477929 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg69344670;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg69344670 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg53167183;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg53167183 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62173226;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg62173226 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46881228;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg46881228 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg834202;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg834202 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21009987;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg21009987 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg50354727;     BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg50354727 = BYDwXclwghgafVekUzuDRGzZubVojtrzBdZrxDRTqg43465173;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PgfHjZOwaGGWTJgohPETmEcMWoYSbqhrz86907926() {     float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62933343 = -945797555;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44517946 = -161513485;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB50957702 = -913361540;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17723328 = -732729933;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69080359 = -337630610;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48365301 = -725345052;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23000643 = -603068303;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25952956 = -568853949;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB36184672 = -700246436;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32579762 = -137096535;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72296559 = -374343822;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22641248 = -473022466;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3691858 = -975919230;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB11096507 = -843362734;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB98276852 = -906313219;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91564980 = -694423630;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23729978 = 65143304;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69996107 = -827446325;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44836886 = -178041154;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62660865 = -219393132;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB60890163 = -678805002;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40684256 = -293993392;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96261184 = -321163269;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB20327634 = -565432542;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB6798657 = -717637220;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28241344 = -14606158;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46319315 = -540509987;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19155715 = -480808665;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47869871 = -150569554;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56859168 = -564556429;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB92939176 = -864294001;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96149017 = -236778712;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17455006 = -515132935;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB83998595 = -860281053;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46919730 = 9331666;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10432135 = -382944131;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB66306895 = -269708988;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96441414 = -90119169;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB81817954 = -976009137;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB34830961 = -124033250;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13460007 = -641492128;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13318170 = -914718091;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB75313003 = -848711507;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95911473 = -125114314;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91886726 = -254279102;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10113738 = -843048418;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95919308 = -631635676;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72052999 = -215953083;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB12141997 = -642918445;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85473484 = -944941641;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB52257195 = -859377435;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24262852 = -784967743;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49201021 = -766096357;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76451182 = -61627104;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB26017764 = -48063965;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22249087 = -551804164;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48256761 = -840350216;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB30630069 = -247928999;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10924671 = 84907287;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40839015 = -223024453;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB2045986 = -84835065;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3844928 = -22259639;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB78083084 = -318284395;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB79325504 = -35690008;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB39640585 = -272802535;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76147542 = -37565111;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB5186243 = -957889532;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19693262 = -15638177;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB64176776 = -752694401;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB87844718 = -423369088;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25258086 = -324714642;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB27288564 = -844737527;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB88178152 = -851437188;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10005926 = 45992095;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49200858 = -577901005;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47571994 = -764086911;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB65371252 = -445281885;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB349712 = -96048955;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28440908 = -211153440;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96684919 = -874588803;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32322035 = -382970482;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB74266315 = -224556904;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB7013718 = -837890220;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62396387 = -205627914;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB4601973 = -705178994;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB68676324 = 20673741;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46947997 = -470682355;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB41003824 = -353505831;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB57980832 = -712217089;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24670644 = -438864171;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62175374 = -542593916;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35676827 = 78220010;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85516744 = -75026457;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40978940 = -652984685;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32784976 = 60801815;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB9615079 = -519232490;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35235085 = -496433696;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95987499 = -713021500;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56270888 = -852311780;    float kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB15739185 = -945797555;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62933343 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44517946;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44517946 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB50957702;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB50957702 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17723328;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17723328 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69080359;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69080359 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48365301;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48365301 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23000643;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23000643 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25952956;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25952956 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB36184672;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB36184672 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32579762;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32579762 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72296559;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72296559 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22641248;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22641248 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3691858;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3691858 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB11096507;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB11096507 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB98276852;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB98276852 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91564980;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91564980 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23729978;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB23729978 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69996107;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB69996107 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44836886;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB44836886 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62660865;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62660865 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB60890163;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB60890163 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40684256;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40684256 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96261184;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96261184 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB20327634;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB20327634 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB6798657;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB6798657 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28241344;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28241344 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46319315;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46319315 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19155715;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19155715 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47869871;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47869871 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56859168;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56859168 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB92939176;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB92939176 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96149017;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96149017 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17455006;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB17455006 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB83998595;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB83998595 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46919730;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46919730 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10432135;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10432135 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB66306895;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB66306895 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96441414;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96441414 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB81817954;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB81817954 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB34830961;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB34830961 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13460007;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13460007 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13318170;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB13318170 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB75313003;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB75313003 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95911473;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95911473 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91886726;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB91886726 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10113738;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10113738 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95919308;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95919308 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72052999;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB72052999 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB12141997;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB12141997 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85473484;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85473484 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB52257195;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB52257195 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24262852;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24262852 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49201021;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49201021 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76451182;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76451182 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB26017764;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB26017764 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22249087;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB22249087 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48256761;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB48256761 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB30630069;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB30630069 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10924671;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10924671 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40839015;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40839015 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB2045986;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB2045986 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3844928;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB3844928 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB78083084;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB78083084 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB79325504;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB79325504 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB39640585;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB39640585 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76147542;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB76147542 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB5186243;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB5186243 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19693262;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB19693262 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB64176776;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB64176776 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB87844718;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB87844718 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25258086;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB25258086 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB27288564;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB27288564 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB88178152;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB88178152 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10005926;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB10005926 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49200858;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB49200858 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47571994;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB47571994 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB65371252;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB65371252 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB349712;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB349712 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28440908;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB28440908 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96684919;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB96684919 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32322035;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32322035 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB74266315;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB74266315 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB7013718;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB7013718 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62396387;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62396387 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB4601973;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB4601973 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB68676324;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB68676324 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46947997;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB46947997 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB41003824;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB41003824 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB57980832;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB57980832 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24670644;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB24670644 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62175374;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62175374 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35676827;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35676827 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85516744;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB85516744 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40978940;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB40978940 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32784976;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB32784976 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB9615079;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB9615079 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35235085;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB35235085 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95987499;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB95987499 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56270888;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB56270888 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB15739185;     kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB15739185 = kkTiEnzRJJfjiGoGsmspEYLETlvAvUjZOWjYNFccFB62933343;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void swaNVyNRYCJxJkyQxeJdcrRRwJJKBfPhs47210584() {     float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53059651 = 95446244;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27643011 = -536439655;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46450401 = 49843999;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91221902 = -918901755;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82137094 = -278954052;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29151706 = -617978160;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ17664081 = -240613776;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ78831519 = -205301687;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ59996359 = -708139074;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ36835432 = -806971061;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48448378 = -882763980;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57390756 = 47389399;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42037990 = -188155091;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49515360 = -841523619;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96351224 = -291434162;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ15744723 = -394803500;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67692158 = -196201938;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91351819 = -170295617;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5751278 = -644451590;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29985113 = -867271442;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48812566 = -383230094;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ38765838 = -627090028;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29499603 = -727623190;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28248732 = 86543082;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53683845 = -261148164;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ47032309 = -990479892;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68286650 = -300038981;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42326090 = -540698723;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9078869 = -912768602;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ4648248 = -438958820;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96402579 = -90960545;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ95515931 = -737603131;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26424047 = -815358094;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ7837240 = -851732211;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82516264 = -741003995;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ63663141 = -685973542;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66540464 = -885524893;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ20798698 = 43821587;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ92350971 = -683471183;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79343102 = -28741023;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27159680 = -347353404;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67962632 = -729211304;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35129845 = -224137103;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26573414 = 10802497;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83851144 = -366789058;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30552731 = -226672323;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ76342599 = -180118175;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ62439459 = -242609336;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40060651 = 21142209;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14753890 = -301937978;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ81622718 = -133759480;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68035959 = -749394576;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98653475 = -477949352;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29358245 = -185182386;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98398018 = -176664237;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14293814 = -277463729;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98143407 = -808816466;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18201670 = 63300916;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ37538058 = -557753591;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35104786 = -288474160;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ60865055 = -217939179;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ75337990 = -699915053;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ69752650 = -292533086;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ55348112 = -169180254;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40432853 = -616010516;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ52932447 = -45160849;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30966709 = -137252507;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ34200750 = -336422880;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66999095 = -519624;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ32688083 = -605460621;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49204258 = -509278608;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46893461 = -140023525;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ99000847 = -486824434;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26408175 = -515710568;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2825434 = -419918039;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ80849933 = -654018790;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ3635994 = -302952925;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2926190 = -638425687;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ44397587 = -546667860;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23131114 = 65524158;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ70689709 = -710361717;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5847192 = 42570355;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2265440 = -461840932;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ94324978 = -510830624;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23025529 = -205199341;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28366620 = -341565969;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96862455 = -159653780;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ97065802 = -530175709;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9439222 = -575067975;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68222451 = -363540266;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ65519734 = -877157077;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48338794 = -848825809;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83260640 = -398424823;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57246186 = -294997023;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18478048 = -810801844;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ51821689 = -647438351;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98209982 = -336678219;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79781732 = 45043151;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ86140561 = -373186987;    float tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30918697 = 95446244;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53059651 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27643011;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27643011 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46450401;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46450401 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91221902;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91221902 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82137094;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82137094 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29151706;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29151706 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ17664081;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ17664081 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ78831519;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ78831519 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ59996359;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ59996359 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ36835432;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ36835432 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48448378;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48448378 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57390756;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57390756 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42037990;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42037990 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49515360;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49515360 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96351224;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96351224 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ15744723;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ15744723 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67692158;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67692158 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91351819;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ91351819 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5751278;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5751278 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29985113;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29985113 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48812566;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48812566 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ38765838;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ38765838 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29499603;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29499603 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28248732;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28248732 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53683845;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53683845 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ47032309;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ47032309 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68286650;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68286650 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42326090;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ42326090 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9078869;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9078869 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ4648248;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ4648248 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96402579;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96402579 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ95515931;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ95515931 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26424047;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26424047 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ7837240;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ7837240 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82516264;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ82516264 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ63663141;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ63663141 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66540464;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66540464 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ20798698;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ20798698 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ92350971;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ92350971 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79343102;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79343102 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27159680;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ27159680 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67962632;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ67962632 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35129845;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35129845 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26573414;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26573414 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83851144;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83851144 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30552731;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30552731 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ76342599;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ76342599 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ62439459;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ62439459 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40060651;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40060651 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14753890;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14753890 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ81622718;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ81622718 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68035959;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68035959 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98653475;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98653475 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29358245;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ29358245 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98398018;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98398018 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14293814;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ14293814 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98143407;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98143407 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18201670;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18201670 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ37538058;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ37538058 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35104786;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ35104786 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ60865055;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ60865055 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ75337990;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ75337990 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ69752650;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ69752650 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ55348112;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ55348112 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40432853;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ40432853 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ52932447;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ52932447 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30966709;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30966709 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ34200750;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ34200750 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66999095;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ66999095 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ32688083;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ32688083 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49204258;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ49204258 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46893461;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ46893461 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ99000847;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ99000847 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26408175;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ26408175 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2825434;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2825434 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ80849933;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ80849933 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ3635994;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ3635994 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2926190;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2926190 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ44397587;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ44397587 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23131114;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23131114 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ70689709;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ70689709 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5847192;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ5847192 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2265440;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ2265440 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ94324978;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ94324978 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23025529;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ23025529 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28366620;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ28366620 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96862455;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ96862455 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ97065802;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ97065802 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9439222;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ9439222 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68222451;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ68222451 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ65519734;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ65519734 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48338794;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ48338794 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83260640;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ83260640 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57246186;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ57246186 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18478048;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ18478048 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ51821689;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ51821689 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98209982;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ98209982 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79781732;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ79781732 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ86140561;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ86140561 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30918697;     tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ30918697 = tWNJSjuMkfcuHyQdSSNRzGBeIRMpCQsncFQNkHfvPQ53059651;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void CqkGuIUUrYjxGDppLYfCKJANmZvbjwJRE59755773() {     float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm72527822 = -317684968;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm80666874 = 17682349;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63287393 = -701784616;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9869051 = -735476018;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82583610 = -905226468;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm54743780 = -508462928;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62495959 = -683920005;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44081752 = -299109653;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm20683157 = -336330453;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm14764155 = -812557107;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2671642 = -215754280;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm60885369 = 48086694;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm32409649 = -612512367;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57931400 = -283809345;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56877686 = -589517954;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81960371 = -857995434;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm73654271 = -367976619;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm15414571 = 78949665;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm5386157 = 78343649;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm10596415 = -484807898;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm61268638 = -989442420;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm53747921 = -38893241;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm97672609 = 74802191;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm45970400 = -650000909;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm64887334 = -555448274;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm51799770 = -676275111;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm52214781 = 34810088;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93117764 = -704432002;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm50823826 = -926679748;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89355101 = -530397514;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm26206665 = 43713362;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35095242 = -201952149;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm37900150 = -270565861;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66593747 = -56335418;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22446601 = -803706801;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99729078 = -989542150;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm34923915 = -312400968;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62281172 = -33387229;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm59664297 = -47886008;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm624839 = -25272119;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68641737 = -857139699;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79821765 = -968107530;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm6263086 = -171938900;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9958953 = -438270164;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63879555 = -643912021;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm85013858 = -764003744;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm58332479 = -93811498;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62595289 = -425896651;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81196242 = 7202970;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55652232 = -62950323;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56058288 = -540124411;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm84484819 = -26747435;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68478622 = -154058313;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2288274 = -179776022;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98487135 = 48777128;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm18779901 = -178791728;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82994265 = 42880157;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17316994 = 48216293;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44981717 = -80027745;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm30783841 = -128951358;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2528999 = -443273016;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm69378194 = -979488004;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93257926 = -372429906;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm31328055 = -805932939;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm88557490 = -756270469;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm67576400 = 86197869;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22985219 = -681347445;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm65815902 = -456176950;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35484799 = -480102544;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57148607 = -599975804;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47036457 = -445594467;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11373100 = -234589391;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55750274 = -873164327;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm4761318 = -896384232;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41954678 = -627668199;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81446872 = 78665110;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47484835 = -866954341;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm87713656 = -486927645;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82090844 = 93911111;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79873475 = -791444530;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93467290 = -482463613;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89619492 = -539293262;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11921523 = -611634972;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm95171593 = -763729425;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm33296814 = -990273104;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41721845 = -929539203;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66616620 = 52106163;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35611877 = 9210160;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68106612 = -5112546;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm3666700 = -524915074;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm16734814 = -932422307;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17606922 = -260617261;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17299455 = -953359484;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm28880456 = -918934651;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98095840 = -581999104;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99263542 = -877651696;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm86563839 = -495677624;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm74935030 = -366005962;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm21401462 = -681999695;    float rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm96303155 = -317684968;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm72527822 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm80666874;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm80666874 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63287393;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63287393 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9869051;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9869051 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82583610;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82583610 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm54743780;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm54743780 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62495959;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62495959 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44081752;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44081752 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm20683157;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm20683157 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm14764155;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm14764155 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2671642;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2671642 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm60885369;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm60885369 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm32409649;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm32409649 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57931400;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57931400 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56877686;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56877686 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81960371;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81960371 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm73654271;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm73654271 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm15414571;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm15414571 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm5386157;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm5386157 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm10596415;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm10596415 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm61268638;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm61268638 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm53747921;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm53747921 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm97672609;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm97672609 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm45970400;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm45970400 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm64887334;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm64887334 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm51799770;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm51799770 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm52214781;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm52214781 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93117764;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93117764 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm50823826;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm50823826 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89355101;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89355101 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm26206665;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm26206665 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35095242;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35095242 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm37900150;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm37900150 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66593747;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66593747 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22446601;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22446601 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99729078;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99729078 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm34923915;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm34923915 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62281172;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62281172 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm59664297;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm59664297 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm624839;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm624839 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68641737;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68641737 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79821765;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79821765 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm6263086;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm6263086 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9958953;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm9958953 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63879555;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm63879555 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm85013858;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm85013858 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm58332479;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm58332479 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62595289;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm62595289 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81196242;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81196242 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55652232;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55652232 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56058288;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm56058288 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm84484819;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm84484819 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68478622;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68478622 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2288274;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2288274 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98487135;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98487135 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm18779901;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm18779901 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82994265;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82994265 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17316994;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17316994 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44981717;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm44981717 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm30783841;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm30783841 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2528999;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm2528999 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm69378194;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm69378194 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93257926;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93257926 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm31328055;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm31328055 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm88557490;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm88557490 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm67576400;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm67576400 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22985219;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm22985219 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm65815902;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm65815902 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35484799;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35484799 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57148607;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm57148607 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47036457;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47036457 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11373100;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11373100 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55750274;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm55750274 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm4761318;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm4761318 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41954678;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41954678 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81446872;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm81446872 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47484835;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm47484835 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm87713656;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm87713656 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82090844;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm82090844 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79873475;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm79873475 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93467290;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm93467290 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89619492;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm89619492 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11921523;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm11921523 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm95171593;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm95171593 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm33296814;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm33296814 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41721845;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm41721845 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66616620;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm66616620 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35611877;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm35611877 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68106612;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm68106612 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm3666700;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm3666700 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm16734814;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm16734814 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17606922;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17606922 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17299455;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm17299455 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm28880456;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm28880456 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98095840;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm98095840 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99263542;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm99263542 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm86563839;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm86563839 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm74935030;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm74935030 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm21401462;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm21401462 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm96303155;     rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm96303155 = rDLOHGMQrwclbzMtbRBvYuspWTUMsluOSsPzdbDSTm72527822;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PmlDbMYRHNOtfAOoDCznkiAiSXQPiJHSk20058431() {     float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT62654130 = -376441169;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT63791939 = -357243822;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58780092 = -838579077;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83367625 = -921647840;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95640346 = -846549910;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35530184 = -401096036;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT57159397 = -321465478;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96960315 = 64442608;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44494844 = -344223090;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19019826 = -382431632;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT78823461 = -724174437;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95634876 = -531501441;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70755781 = -924748228;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96350253 = -281970229;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT54952057 = 25361104;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6140114 = -558375304;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17616452 = -629321860;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT36770284 = -363899627;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66300548 = -388066787;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT77920663 = -32686208;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49191040 = -693867512;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51829503 = -371989876;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30911027 = -331657730;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT53891497 = 1974715;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11772522 = -98959218;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70590735 = -552148845;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT74182116 = -824718906;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16288140 = -764322060;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT12032824 = -588878796;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT37144182 = -404799906;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT29670067 = -282953182;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34462156 = -702776569;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT46869191 = -570791021;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90432391 = -47786576;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58043135 = -454042462;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52960085 = -192571560;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35157484 = -928216872;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT86638455 = -999446473;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70197314 = -855348054;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45136980 = 70020107;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT82341410 = -563000975;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34466229 = -782600743;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66079927 = -647364496;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40620894 = -302353353;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55843973 = -756421977;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT5452852 = -147627650;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38755770 = -742293998;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52981748 = -452552904;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT9114896 = -428736376;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84932638 = -519946660;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85423811 = -914506456;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT28257927 = 8825732;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17931078 = -965911307;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55195335 = -303331304;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70867390 = -79823143;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT10824628 = 95548707;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT32880912 = 74413908;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT4888595 = -740553793;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT71595104 = -722688623;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT25049611 = -194401065;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT61348068 = -576377130;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40871257 = -557143419;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84927492 = -346678597;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7350663 = -939423185;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT89349758 = 521549;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44361305 = 78602131;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT48765685 = -960710421;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT80323389 = -776961653;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38307119 = -827927768;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1991973 = -782067337;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70982630 = -630158433;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30977997 = -629875388;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66572970 = -508551574;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21163568 = -358086895;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95579252 = -469685233;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT14724812 = -911266769;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85749576 = -724625381;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90290133 = 70695623;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT98047524 = -241603308;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6319670 = -951331568;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT31834966 = -809854848;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21200369 = -272166003;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7173245 = -235585684;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT27100185 = 31067864;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51720370 = -490293450;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1412141 = -191778914;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16531079 = -736865262;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT91673855 = -167459718;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19565002 = -967963433;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT47218508 = -449591169;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT20079174 = -166985468;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30268889 = -87663079;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT15043352 = -176757850;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45147703 = -560946990;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83788912 = -353602763;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT41470153 = 94142443;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49538737 = -335922147;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58729264 = -707941311;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51271135 = -202874902;    float hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11482668 = -376441169;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT62654130 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT63791939;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT63791939 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58780092;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58780092 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83367625;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83367625 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95640346;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95640346 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35530184;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35530184 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT57159397;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT57159397 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96960315;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96960315 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44494844;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44494844 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19019826;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19019826 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT78823461;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT78823461 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95634876;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95634876 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70755781;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70755781 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96350253;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT96350253 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT54952057;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT54952057 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6140114;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6140114 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17616452;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17616452 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT36770284;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT36770284 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66300548;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66300548 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT77920663;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT77920663 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49191040;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49191040 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51829503;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51829503 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30911027;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30911027 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT53891497;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT53891497 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11772522;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11772522 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70590735;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70590735 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT74182116;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT74182116 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16288140;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16288140 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT12032824;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT12032824 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT37144182;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT37144182 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT29670067;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT29670067 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34462156;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34462156 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT46869191;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT46869191 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90432391;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90432391 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58043135;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58043135 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52960085;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52960085 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35157484;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT35157484 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT86638455;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT86638455 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70197314;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70197314 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45136980;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45136980 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT82341410;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT82341410 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34466229;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT34466229 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66079927;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66079927 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40620894;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40620894 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55843973;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55843973 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT5452852;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT5452852 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38755770;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38755770 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52981748;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT52981748 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT9114896;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT9114896 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84932638;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84932638 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85423811;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85423811 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT28257927;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT28257927 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17931078;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT17931078 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55195335;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT55195335 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70867390;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70867390 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT10824628;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT10824628 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT32880912;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT32880912 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT4888595;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT4888595 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT71595104;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT71595104 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT25049611;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT25049611 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT61348068;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT61348068 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40871257;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT40871257 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84927492;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT84927492 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7350663;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7350663 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT89349758;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT89349758 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44361305;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT44361305 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT48765685;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT48765685 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT80323389;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT80323389 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38307119;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT38307119 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1991973;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1991973 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70982630;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT70982630 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30977997;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30977997 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66572970;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT66572970 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21163568;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21163568 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95579252;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT95579252 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT14724812;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT14724812 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85749576;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT85749576 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90290133;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT90290133 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT98047524;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT98047524 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6319670;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT6319670 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT31834966;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT31834966 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21200369;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT21200369 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7173245;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT7173245 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT27100185;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT27100185 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51720370;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51720370 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1412141;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT1412141 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16531079;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT16531079 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT91673855;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT91673855 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19565002;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT19565002 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT47218508;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT47218508 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT20079174;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT20079174 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30268889;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT30268889 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT15043352;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT15043352 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45147703;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT45147703 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83788912;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT83788912 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT41470153;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT41470153 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49538737;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT49538737 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58729264;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT58729264 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51271135;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT51271135 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11482668;     hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT11482668 = hIkbjDfTLASDXZkraBIVixhlDkDvJiyFwJxrdNUyTT62654130;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lQpsDIFsllZSdBEiEhyYWaikdCRDYawdx68484122() {     float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv51592089 = -959572557;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35196588 = -338351032;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17125773 = -427554154;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24391958 = -324661159;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94323353 = -332005911;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv78012974 = -257207369;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4686321 = -456943821;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv60157269 = -747128995;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95183397 = -497194331;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv75717393 = -759402006;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82189836 = 49712981;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv99051184 = -46237260;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93535871 = -943048162;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24721279 = -730253418;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14711953 = -580128266;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44930275 = -26560259;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv15577489 = -467967581;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4145654 = -41141158;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85463239 = -437980741;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv71124826 = -764753007;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv54185828 = -328675570;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37219603 = -443098332;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58037440 = 12932494;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28422308 = -950883138;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52068828 = -305885973;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50982138 = -496687800;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49482983 = -79820841;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9020609 = -389546871;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv42353126 = -730183509;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv12535423 = -668819451;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80925067 = -466832058;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17439813 = -83519165;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv98458292 = -805720500;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7874697 = -962822555;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67314298 = -514619593;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14384913 = -504767340;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93939042 = -32055677;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2123985 = -55048434;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45995565 = -231007350;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94732229 = -295684164;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv68341607 = -735587591;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61760079 = -111945174;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18275569 = -953185527;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67583996 = -211257563;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44896282 = -367353053;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4268115 = -444279325;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45811081 = -999360488;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9447513 = -941937193;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61721480 = -290673888;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv11717968 = -145215129;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80980107 = -732597566;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7518833 = -375343550;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13719283 = -70115727;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv48492825 = -434538613;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14298294 = -789715594;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14372487 = -416474226;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv77159147 = -251283527;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv88703465 = -476671016;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72323130 = 81224814;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43341215 = -835318112;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28529992 = -77386529;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95665711 = 32603049;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17804144 = 83054514;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82647975 = -828374880;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94792325 = -192569948;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv64750024 = -866767855;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv592892 = -240516760;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85661175 = -980225608;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv57406981 = -115633826;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv327041 = 24639074;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50991232 = -994504582;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13453505 = -312919147;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58150089 = -810133808;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90731009 = -42296577;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2783219 = 70834584;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv92425748 = -116730396;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18944034 = -489912805;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90453443 = -775809943;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv83526025 = -483530086;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47800714 = -861606649;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5171058 = -497327312;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv40035470 = -137883649;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47299128 = 1127017;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv30635158 = -484968380;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv31555315 = -936221886;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv73406235 = 8511491;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv3720531 = 86596562;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49965468 = -271181887;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93576402 = -73106962;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52941812 = 1854633;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37225765 = -153483814;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5235578 = -555384661;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv29800854 = -36273249;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2654350 = -395689239;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv66202237 = -118297636;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72675896 = -668190641;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43955936 = -94999689;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35627594 = -24810648;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72791671 = 81312384;    float efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80146258 = -959572557;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv51592089 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35196588;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35196588 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17125773;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17125773 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24391958;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24391958 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94323353;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94323353 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv78012974;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv78012974 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4686321;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4686321 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv60157269;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv60157269 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95183397;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95183397 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv75717393;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv75717393 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82189836;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82189836 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv99051184;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv99051184 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93535871;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93535871 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24721279;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv24721279 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14711953;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14711953 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44930275;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44930275 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv15577489;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv15577489 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4145654;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4145654 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85463239;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85463239 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv71124826;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv71124826 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv54185828;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv54185828 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37219603;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37219603 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58037440;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58037440 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28422308;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28422308 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52068828;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52068828 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50982138;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50982138 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49482983;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49482983 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9020609;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9020609 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv42353126;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv42353126 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv12535423;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv12535423 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80925067;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80925067 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17439813;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17439813 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv98458292;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv98458292 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7874697;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7874697 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67314298;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67314298 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14384913;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14384913 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93939042;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93939042 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2123985;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2123985 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45995565;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45995565 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94732229;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94732229 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv68341607;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv68341607 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61760079;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61760079 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18275569;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18275569 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67583996;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv67583996 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44896282;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv44896282 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4268115;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv4268115 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45811081;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv45811081 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9447513;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv9447513 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61721480;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv61721480 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv11717968;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv11717968 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80980107;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80980107 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7518833;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv7518833 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13719283;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13719283 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv48492825;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv48492825 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14298294;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14298294 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14372487;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv14372487 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv77159147;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv77159147 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv88703465;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv88703465 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72323130;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72323130 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43341215;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43341215 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28529992;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv28529992 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95665711;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv95665711 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17804144;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv17804144 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82647975;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv82647975 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94792325;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv94792325 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv64750024;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv64750024 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv592892;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv592892 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85661175;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv85661175 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv57406981;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv57406981 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv327041;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv327041 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50991232;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv50991232 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13453505;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv13453505 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58150089;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv58150089 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90731009;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90731009 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2783219;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2783219 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv92425748;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv92425748 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18944034;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv18944034 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90453443;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv90453443 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv83526025;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv83526025 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47800714;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47800714 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5171058;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5171058 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv40035470;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv40035470 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47299128;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv47299128 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv30635158;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv30635158 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv31555315;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv31555315 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv73406235;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv73406235 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv3720531;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv3720531 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49965468;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv49965468 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93576402;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv93576402 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52941812;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv52941812 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37225765;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv37225765 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5235578;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv5235578 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv29800854;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv29800854 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2654350;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv2654350 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv66202237;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv66202237 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72675896;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72675896 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43955936;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv43955936 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35627594;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv35627594 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72791671;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv72791671 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80146258;     efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv80146258 = efKTMVmcnEzVfhukpYaPIeLhEPAqCTLowVzWuPsLLv51592089;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ROqGJgxmPhaaCDPwoyJYLKhyMCsNQbgjV28786780() {     float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41718397 = 81671242;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18321653 = -713277203;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12618472 = -564348615;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa97890533 = -510832981;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7380089 = -273329353;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58799379 = -149840477;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99349758 = -94489294;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa13035833 = -383576733;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18995085 = -505086969;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa79973063 = -329276531;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58341656 = -458707177;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33800692 = -625825395;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31882004 = -155284023;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63140133 = -728414302;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12786325 = 34750791;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69110017 = -826940129;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa59539669 = -729312822;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25501366 = -483990450;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa46377630 = -904391177;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa38449074 = -312631317;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42108231 = -33100662;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa35301185 = -776194967;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa91275858 = -393527427;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36343405 = -298907513;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98954015 = -949396917;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69773103 = -372561535;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71450317 = -939349835;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa32190984 = -449436929;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa3562124 = -392382557;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60324502 = -543221842;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa84388470 = -793498602;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16806727 = -584343584;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7427334 = -5945660;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31713341 = -954273713;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2910833 = -164955253;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67615919 = -807796750;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa94172611 = -647871582;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26481268 = 78892322;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56528582 = 61530604;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa39244371 = -200391937;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa82041281 = -441448867;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16404543 = 73561612;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa78092410 = -328611123;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98245937 = -75340752;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36860699 = -479863009;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa24707108 = -927903230;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26234372 = -547842988;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99833971 = -968593446;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa89640134 = -726613234;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40998373 = -602211466;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa10345631 = -6979611;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51291940 = -339770383;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63171738 = -881968722;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa1399888 = -558093895;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa86678548 = -918315865;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6417213 = -142133792;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27045794 = -219749776;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa76275067 = -165441102;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98936517 = -561436064;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa37606986 = -900767819;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa87349061 = -210490643;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67158774 = -645052365;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa9473710 = -991194177;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58670583 = -961865127;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95584593 = -535777930;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41534929 = -874363593;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26373359 = -519879736;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa168663 = -201010310;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60229300 = -463459049;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45170405 = -157452459;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74937405 = -79068548;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33058402 = -708205145;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa68972784 = -445521055;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7133259 = -603999240;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56407793 = -871182450;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25703688 = -6662275;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa57208774 = -347583845;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa93029920 = -218186675;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99482705 = -819044505;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74246908 = 78506312;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa43538732 = -824718547;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71616346 = -970756389;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42550849 = -722823695;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa62563750 = -790171091;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa49978871 = -436242232;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33096531 = -353728220;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa53634989 = -702374863;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6027447 = -447851765;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45034793 = 64042152;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa96493619 = 77178538;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40570125 = -488046975;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa17897545 = -382430480;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27544750 = -359671615;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18921596 = -37701577;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51895310 = -989901295;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa14882507 = -796396502;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6930834 = 64755789;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa19421828 = -366745997;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2661345 = -539562823;    float civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95325770 = 81671242;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41718397 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18321653;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18321653 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12618472;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12618472 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa97890533;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa97890533 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7380089;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7380089 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58799379;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58799379 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99349758;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99349758 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa13035833;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa13035833 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18995085;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18995085 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa79973063;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa79973063 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58341656;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58341656 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33800692;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33800692 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31882004;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31882004 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63140133;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63140133 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12786325;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa12786325 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69110017;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69110017 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa59539669;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa59539669 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25501366;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25501366 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa46377630;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa46377630 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa38449074;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa38449074 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42108231;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42108231 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa35301185;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa35301185 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa91275858;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa91275858 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36343405;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36343405 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98954015;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98954015 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69773103;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa69773103 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71450317;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71450317 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa32190984;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa32190984 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa3562124;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa3562124 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60324502;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60324502 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa84388470;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa84388470 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16806727;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16806727 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7427334;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7427334 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31713341;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa31713341 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2910833;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2910833 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67615919;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67615919 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa94172611;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa94172611 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26481268;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26481268 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56528582;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56528582 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa39244371;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa39244371 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa82041281;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa82041281 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16404543;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa16404543 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa78092410;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa78092410 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98245937;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98245937 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36860699;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa36860699 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa24707108;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa24707108 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26234372;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26234372 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99833971;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99833971 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa89640134;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa89640134 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40998373;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40998373 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa10345631;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa10345631 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51291940;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51291940 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63171738;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa63171738 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa1399888;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa1399888 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa86678548;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa86678548 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6417213;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6417213 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27045794;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27045794 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa76275067;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa76275067 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98936517;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa98936517 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa37606986;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa37606986 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa87349061;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa87349061 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67158774;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa67158774 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa9473710;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa9473710 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58670583;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa58670583 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95584593;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95584593 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41534929;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41534929 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26373359;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa26373359 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa168663;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa168663 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60229300;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa60229300 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45170405;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45170405 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74937405;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74937405 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33058402;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33058402 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa68972784;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa68972784 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7133259;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa7133259 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56407793;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa56407793 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25703688;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa25703688 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa57208774;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa57208774 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa93029920;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa93029920 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99482705;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa99482705 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74246908;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa74246908 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa43538732;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa43538732 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71616346;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa71616346 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42550849;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa42550849 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa62563750;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa62563750 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa49978871;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa49978871 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33096531;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa33096531 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa53634989;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa53634989 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6027447;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6027447 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45034793;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa45034793 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa96493619;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa96493619 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40570125;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa40570125 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa17897545;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa17897545 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27544750;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa27544750 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18921596;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa18921596 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51895310;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa51895310 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa14882507;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa14882507 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6930834;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa6930834 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa19421828;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa19421828 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2661345;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa2661345 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95325770;     civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa95325770 = civOqJDxHktPguIAZhKwMaHhrtHnjVoAqFaVThxpFa41718397;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QXIjcQQXzRWOserHEpvSyYisuHpuCeRwj41331968() {     float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61186568 = -331459970;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71345516 = -159155199;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29455464 = -215977230;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16537682 = -327407244;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy7826605 = -899601769;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84391453 = -40325246;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44181637 = -537795524;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy78286066 = -477384699;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79681882 = -133278348;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy57901787 = -334862577;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy12564920 = -891697477;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37295305 = -625128100;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy22253664 = -579641299;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71556173 = -170700028;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy73312786 = -263333000;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy35325666 = -190132063;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy65501782 = -901087503;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49564117 = -234745168;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46012509 = -181595938;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy19060376 = 69832227;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54564303 = -639312988;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy50283268 = -187998180;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy59448864 = -691102045;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54065073 = 64548495;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10157505 = -143697027;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74540564 = -58356753;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55378448 = -604500767;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy82982658 = -613170208;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45307080 = -406293703;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45031357 = -634660537;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14192556 = -658824695;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56386038 = -48692602;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18903437 = -561153426;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90469848 = -158876919;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy42841169 = -227658059;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3681857 = -11365359;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62556062 = -74747656;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67963741 = 1683507;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23841907 = -402884221;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60526107 = -196923034;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23523338 = -951235163;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28263676 = -165334613;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49225651 = -276412920;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81631476 = -524413413;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16889111 = -756985972;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79168235 = -365234651;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy8224252 = -461536311;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy99989801 = -51880761;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30775726 = -740552473;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81896715 = -363223811;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84781200 = -413344542;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67740800 = -717123242;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32996884 = -558077683;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74329915 = -552687531;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy86767665 = -692874500;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10903301 = -43461790;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy11896652 = -468053154;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy75390390 = -180525725;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy6380177 = -83710217;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy33286041 = -741245016;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29013005 = -435824479;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61198978 = -924625316;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32978986 = 28909003;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy34650526 = -498617811;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy43709231 = -676037883;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56178882 = -743004875;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18391869 = 36025326;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31783815 = -320764380;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28715005 = -943041969;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy69630929 = -151967642;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy72769603 = -15384407;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy97538040 = -802771011;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy25722211 = -831860948;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy85486402 = -984672904;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95537038 = 21067389;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy26300627 = -373978375;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy1057617 = -911585260;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy77817388 = -66688633;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37175963 = -178465534;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30989270 = -778462376;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy66316313 = -596820443;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55388647 = -452620007;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy52206933 = -872617736;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy63410365 = 56930108;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60250156 = -121315996;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46451756 = -941701453;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23389154 = -490614920;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44573521 = 91534105;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3702183 = -466002420;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31937869 = -84196269;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy91785204 = -543312205;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy87165672 = -894221932;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61583565 = -914606276;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90555866 = -661639205;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31513103 = -761098555;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62324359 = 73390153;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95284690 = -94243617;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14575126 = -777795110;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37922245 = -848375531;    float qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60710228 = -331459970;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61186568 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71345516;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71345516 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29455464;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29455464 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16537682;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16537682 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy7826605;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy7826605 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84391453;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84391453 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44181637;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44181637 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy78286066;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy78286066 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79681882;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79681882 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy57901787;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy57901787 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy12564920;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy12564920 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37295305;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37295305 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy22253664;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy22253664 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71556173;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy71556173 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy73312786;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy73312786 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy35325666;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy35325666 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy65501782;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy65501782 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49564117;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49564117 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46012509;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46012509 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy19060376;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy19060376 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54564303;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54564303 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy50283268;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy50283268 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy59448864;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy59448864 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54065073;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy54065073 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10157505;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10157505 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74540564;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74540564 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55378448;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55378448 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy82982658;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy82982658 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45307080;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45307080 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45031357;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy45031357 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14192556;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14192556 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56386038;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56386038 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18903437;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18903437 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90469848;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90469848 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy42841169;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy42841169 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3681857;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3681857 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62556062;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62556062 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67963741;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67963741 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23841907;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23841907 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60526107;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60526107 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23523338;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23523338 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28263676;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28263676 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49225651;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy49225651 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81631476;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81631476 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16889111;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy16889111 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79168235;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy79168235 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy8224252;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy8224252 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy99989801;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy99989801 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30775726;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30775726 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81896715;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy81896715 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84781200;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy84781200 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67740800;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy67740800 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32996884;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32996884 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74329915;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy74329915 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy86767665;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy86767665 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10903301;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy10903301 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy11896652;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy11896652 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy75390390;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy75390390 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy6380177;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy6380177 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy33286041;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy33286041 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29013005;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy29013005 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61198978;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61198978 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32978986;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy32978986 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy34650526;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy34650526 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy43709231;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy43709231 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56178882;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy56178882 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18391869;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy18391869 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31783815;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31783815 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28715005;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy28715005 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy69630929;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy69630929 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy72769603;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy72769603 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy97538040;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy97538040 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy25722211;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy25722211 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy85486402;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy85486402 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95537038;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95537038 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy26300627;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy26300627 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy1057617;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy1057617 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy77817388;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy77817388 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37175963;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37175963 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30989270;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy30989270 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy66316313;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy66316313 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55388647;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy55388647 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy52206933;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy52206933 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy63410365;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy63410365 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60250156;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60250156 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46451756;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy46451756 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23389154;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy23389154 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44573521;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy44573521 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3702183;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy3702183 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31937869;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31937869 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy91785204;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy91785204 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy87165672;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy87165672 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61583565;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61583565 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90555866;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy90555866 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31513103;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy31513103 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62324359;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy62324359 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95284690;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy95284690 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14575126;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy14575126 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37922245;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy37922245 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60710228;     qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy60710228 = qjJWZGgTJTnmnGrXXurnyVsoQpUbVVUAaeCvhkejOy61186568;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GDUrHXztSzjwjVnKNZVweyuQeCuSAvUJj37515128() {     float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20782665 = -560216347;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72851366 = 30689416;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66456852 = -290118153;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP12413441 = -100018121;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP19119832 = -800108796;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82068573 = -998584919;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP41540120 = -967513110;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29111350 = -831596075;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93495326 = -665950847;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40926302 = -276121431;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP37859851 = -193239916;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71966507 = -720149349;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93008226 = -485819818;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29930012 = -74858375;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70620591 = 44140478;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP32079920 = 4495046;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1462886 = -829303784;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP14232449 = -604081273;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26454713 = -320715568;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98977485 = -592576426;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35025421 = -472333812;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18772866 = -80400058;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP51640690 = -455397124;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18795313 = -599789742;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP86135510 = -699834617;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68955471 = -192974224;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68718519 = 46019236;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48093827 = -134551798;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95091423 = -195886318;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP83504823 = -681643779;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP39106874 = -204044023;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP99151297 = -465910600;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP67985475 = -541100299;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72994290 = -760760851;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47778530 = -975868045;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82271753 = -323021941;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP53187740 = -367526291;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66324079 = 57231117;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42859849 = -121590737;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP33351762 = -470803982;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP81741151 = -319896759;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98342856 = -170276032;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90104893 = -9857750;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55870981 = -948328152;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17877426 = -203304040;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP43961364 = -608178810;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13712974 = -353391978;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP46686196 = -384633989;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70165373 = 75509907;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP97064107 = -684476272;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35267451 = -199452766;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP74325952 = -688366497;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP8412399 = -798026137;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47604439 = -812856487;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2489708 = -656808587;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2009799 = -379816290;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP21210677 = -513913460;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47661539 = -690328411;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26277931 = -400183505;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP50164360 = -507134573;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13350055 = -944604155;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93446292 = -732961312;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP34019927 = -535709757;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP9990503 = -984307068;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1819428 = 27922592;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP38708553 = -727329317;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP3981032 = -79049051;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20013936 = -725058967;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82151482 = -98990331;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88348838 = -632837581;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP78892180 = -627978664;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35138807 = -786534901;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71372599 = -382490536;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93102950 = -849911586;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17236334 = -172679667;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP36682564 = -202057781;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP28667973 = 29457692;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95769708 = -507068973;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP917887 = -296485702;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42174146 = 8344193;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55242498 = -839582247;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP22032324 = -569346775;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP77928454 = -110061706;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98027315 = -511410046;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48237373 = -382191014;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64780921 = -515677526;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90738899 = -667884463;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20381037 = -728243813;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70504583 = -3952264;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP45768731 = -496051755;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP61061076 = -809108481;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP5526201 = -677197881;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40046149 = -542585379;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP92695489 = -614456165;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20001707 = -526199827;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88294859 = -586935448;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64322930 = -634566275;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP80114390 = -25550682;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP54051553 = -876250744;    float fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP79168873 = -560216347;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20782665 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72851366;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72851366 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66456852;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66456852 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP12413441;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP12413441 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP19119832;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP19119832 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82068573;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82068573 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP41540120;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP41540120 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29111350;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29111350 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93495326;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93495326 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40926302;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40926302 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP37859851;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP37859851 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71966507;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71966507 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93008226;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93008226 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29930012;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP29930012 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70620591;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70620591 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP32079920;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP32079920 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1462886;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1462886 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP14232449;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP14232449 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26454713;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26454713 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98977485;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98977485 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35025421;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35025421 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18772866;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18772866 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP51640690;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP51640690 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18795313;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP18795313 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP86135510;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP86135510 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68955471;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68955471 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68718519;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP68718519 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48093827;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48093827 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95091423;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95091423 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP83504823;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP83504823 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP39106874;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP39106874 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP99151297;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP99151297 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP67985475;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP67985475 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72994290;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP72994290 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47778530;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47778530 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82271753;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82271753 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP53187740;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP53187740 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66324079;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP66324079 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42859849;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42859849 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP33351762;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP33351762 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP81741151;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP81741151 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98342856;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98342856 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90104893;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90104893 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55870981;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55870981 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17877426;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17877426 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP43961364;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP43961364 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13712974;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13712974 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP46686196;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP46686196 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70165373;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70165373 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP97064107;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP97064107 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35267451;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35267451 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP74325952;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP74325952 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP8412399;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP8412399 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47604439;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47604439 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2489708;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2489708 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2009799;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP2009799 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP21210677;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP21210677 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47661539;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP47661539 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26277931;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP26277931 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP50164360;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP50164360 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13350055;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP13350055 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93446292;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93446292 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP34019927;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP34019927 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP9990503;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP9990503 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1819428;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP1819428 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP38708553;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP38708553 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP3981032;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP3981032 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20013936;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20013936 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82151482;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP82151482 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88348838;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88348838 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP78892180;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP78892180 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35138807;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP35138807 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71372599;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP71372599 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93102950;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP93102950 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17236334;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP17236334 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP36682564;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP36682564 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP28667973;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP28667973 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95769708;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP95769708 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP917887;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP917887 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42174146;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP42174146 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55242498;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP55242498 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP22032324;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP22032324 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP77928454;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP77928454 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98027315;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP98027315 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48237373;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP48237373 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64780921;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64780921 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90738899;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP90738899 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20381037;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20381037 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70504583;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP70504583 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP45768731;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP45768731 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP61061076;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP61061076 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP5526201;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP5526201 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40046149;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP40046149 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP92695489;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP92695489 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20001707;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20001707 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88294859;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP88294859 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64322930;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP64322930 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP80114390;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP80114390 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP54051553;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP54051553 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP79168873;     fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP79168873 = fIURlIjhdDTYDOZvxdpaoXIIEMFcgtWeaMENSscQlP20782665;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zAWGQTjBhUPmGFnvyyuTbsZKvFzPZUDga97817785() {     float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv10908973 = -618972548;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv55976431 = -344236754;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv61949551 = -426912614;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv85912015 = -286189943;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv32176567 = -741432238;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv62854978 = -891218027;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv36203558 = -605058582;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv81989913 = -468043813;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv17307014 = -673843485;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45181972 = -945995956;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv14011670 = -701660074;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv6716015 = -199737484;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31354359 = -798055678;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68348865 = -73019259;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68694963 = -440980464;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56259662 = -795884824;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45425066 = 9350975;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35588161 = 53069435;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87369103 = -787126004;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66301733 = -140454736;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv22947824 = -176758905;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16854448 = -413496693;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84879107 = -861857045;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26716410 = 52185882;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33020698 = -243345561;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87746436 = -68847959;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90685853 = -813509758;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71264202 = -194441857;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56300421 = -958085366;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31293903 = -556046170;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv42570277 = -530710567;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98518211 = -966735019;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76954516 = -841325458;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv96832935 = -752212009;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83375064 = -626203706;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35502760 = -626051351;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53421309 = -983342195;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90681362 = -908828127;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53392866 = -929052783;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv77863903 = -375511755;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv95440824 = -25758035;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52987320 = 15230755;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv49921735 = -485283345;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86532922 = -812411341;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9841844 = -315813996;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64400357 = 8197285;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94136264 = 98125522;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37072655 = -411290242;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98084027 = -360429439;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26344514 = -41472609;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64632974 = -573834811;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18099060 = -652793330;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv57864853 = -509879132;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv511502 = -936411768;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv74869962 = -785408859;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94054524 = -105475855;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71097323 = -482379709;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35233141 = -379098497;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52891317 = 57155617;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv44430130 = -572584280;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv72169124 = 22291731;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64939355 = -310616726;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv25689493 = -509958448;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86013110 = -17797315;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2611696 = -315285390;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv15493458 = -734925055;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29761498 = -358412026;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv34521424 = 54156330;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84973801 = -446815554;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33192204 = -814929114;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2838354 = -812542630;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv54743704 = -81820899;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv82195294 = -17877783;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9505201 = -311614249;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv70860908 = -14696701;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv69960503 = -91989660;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66932713 = -928213348;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98346185 = 50554295;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16874567 = -632000122;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68620340 = -151542846;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv93610172 = -66973482;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53613199 = -302219516;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv73180175 = -834012418;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29955907 = -816612757;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66660929 = -982211360;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv24471217 = -877917237;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv40653359 = -356855888;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76443015 = -904913691;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv21962973 = -966803150;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv89320539 = -420727851;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64405436 = -43671642;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18188168 = -504243699;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37790046 = -865983745;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv8962737 = -256468504;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv5694779 = -297803486;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv30501470 = -715141309;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv27297828 = -474810798;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv63908624 = -367486031;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83921227 = -397125951;    float cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94348385 = -618972548;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv10908973 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv55976431;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv55976431 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv61949551;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv61949551 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv85912015;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv85912015 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv32176567;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv32176567 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv62854978;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv62854978 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv36203558;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv36203558 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv81989913;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv81989913 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv17307014;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv17307014 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45181972;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45181972 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv14011670;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv14011670 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv6716015;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv6716015 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31354359;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31354359 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68348865;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68348865 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68694963;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68694963 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56259662;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56259662 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45425066;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv45425066 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35588161;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35588161 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87369103;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87369103 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66301733;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66301733 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv22947824;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv22947824 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16854448;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16854448 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84879107;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84879107 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26716410;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26716410 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33020698;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33020698 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87746436;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv87746436 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90685853;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90685853 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71264202;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71264202 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56300421;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv56300421 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31293903;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv31293903 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv42570277;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv42570277 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98518211;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98518211 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76954516;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76954516 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv96832935;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv96832935 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83375064;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83375064 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35502760;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35502760 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53421309;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53421309 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90681362;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv90681362 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53392866;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53392866 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv77863903;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv77863903 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv95440824;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv95440824 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52987320;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52987320 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv49921735;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv49921735 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86532922;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86532922 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9841844;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9841844 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64400357;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64400357 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94136264;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94136264 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37072655;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37072655 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98084027;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98084027 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26344514;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv26344514 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64632974;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64632974 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18099060;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18099060 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv57864853;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv57864853 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv511502;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv511502 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv74869962;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv74869962 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94054524;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94054524 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71097323;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv71097323 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35233141;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv35233141 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52891317;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv52891317 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv44430130;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv44430130 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv72169124;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv72169124 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64939355;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64939355 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv25689493;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv25689493 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86013110;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv86013110 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2611696;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2611696 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv15493458;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv15493458 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29761498;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29761498 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv34521424;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv34521424 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84973801;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv84973801 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33192204;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv33192204 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2838354;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv2838354 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv54743704;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv54743704 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv82195294;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv82195294 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9505201;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv9505201 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv70860908;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv70860908 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv69960503;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv69960503 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66932713;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66932713 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98346185;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv98346185 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16874567;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv16874567 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68620340;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv68620340 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv93610172;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv93610172 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53613199;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv53613199 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv73180175;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv73180175 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29955907;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv29955907 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66660929;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv66660929 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv24471217;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv24471217 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv40653359;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv40653359 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76443015;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv76443015 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv21962973;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv21962973 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv89320539;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv89320539 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64405436;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv64405436 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18188168;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv18188168 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37790046;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv37790046 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv8962737;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv8962737 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv5694779;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv5694779 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv30501470;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv30501470 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv27297828;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv27297828 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv63908624;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv63908624 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83921227;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv83921227 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94348385;     cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv94348385 = cCRMpyHYqBSXPULTPtxeObHaMKKTUbNRjLdCViJzmv10908973;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dfbcfhESyaEfazGYYbDdXalSOVdrndObJ94000945() {     float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn70505069 = -847728926;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn57482280 = -154392139;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98950938 = -501053536;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81787773 = -58800820;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn43469793 = -641939265;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60532099 = -749477700;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33562041 = 65223832;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn32815197 = -822255189;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn31120458 = -106515984;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn28206487 = -887254810;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn39306601 = -3202513;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41387216 = -294758734;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn2108922 = -704234196;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26722704 = 22822393;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn66002769 = -133506985;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53013916 = -601257716;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81386170 = 81134694;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn256492 = -316266670;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67811306 = -926245633;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn46218843 = -802863389;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3408943 = -9779729;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85344046 = -305898571;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn77070932 = -626152124;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn91446648 = -612152354;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8998703 = -799483151;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82161343 = -203465430;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn4025925 = -162989755;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36375372 = -815823447;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn6084764 = -747677981;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn69767369 = -603029412;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67484595 = -75929895;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41283472 = -283953017;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26036555 = -821272331;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79357377 = -254095940;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88312425 = -274413691;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn14092657 = -937707933;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn44052986 = -176120830;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn89041700 = -853280516;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72410809 = -647759300;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50689558 = -649392703;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53658638 = -494419631;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn23066501 = 10289337;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90800977 = -218728175;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60772427 = -136326079;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn10830159 = -862132065;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29193486 = -234746874;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn99624986 = -893730145;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn83769048 = -744043471;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn37473675 = -644367059;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41511906 = -362725070;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15119225 = -359943035;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn24684213 = -624036586;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33280368 = -749827585;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn73786024 = -96580724;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90592003 = -749342946;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85161023 = -441830355;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80411347 = -528240015;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn7504290 = -888901182;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72789071 = -259317670;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61308449 = -338473836;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56506174 = -486487946;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn97186669 = -118952722;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26730434 = 25422792;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61353088 = -503486572;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60721892 = -711324915;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98023129 = -719249497;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15350661 = -473486403;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn22751545 = -350138257;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn38410279 = -702763916;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn51910113 = -195799053;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8960930 = -325136886;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92344469 = -65584790;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn27845683 = -668507371;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn17121749 = -176852931;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92560204 = -208443758;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80342441 = 79930934;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94543069 = 12829603;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16298506 = -389826046;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80616489 = -750020290;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79805216 = -464736277;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82536357 = -309735285;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn20256876 = -418946285;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98901696 = -71456388;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn64572858 = -284952911;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn54648145 = -143086378;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn42800382 = -451893310;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8003105 = -534125432;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn52250531 = -624691608;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88765373 = -504752994;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3151403 = -832583337;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33681309 = -309467918;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36548696 = -287219648;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16252630 = -493962847;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn11102360 = -209285464;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94183383 = -62904758;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56471969 = -275466910;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn96336067 = 84866544;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29447890 = -715241604;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50536 = -425001164;    float fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn12807030 = -847728926;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn70505069 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn57482280;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn57482280 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98950938;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98950938 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81787773;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81787773 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn43469793;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn43469793 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60532099;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60532099 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33562041;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33562041 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn32815197;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn32815197 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn31120458;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn31120458 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn28206487;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn28206487 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn39306601;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn39306601 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41387216;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41387216 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn2108922;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn2108922 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26722704;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26722704 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn66002769;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn66002769 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53013916;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53013916 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81386170;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn81386170 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn256492;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn256492 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67811306;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67811306 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn46218843;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn46218843 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3408943;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3408943 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85344046;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85344046 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn77070932;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn77070932 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn91446648;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn91446648 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8998703;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8998703 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82161343;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82161343 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn4025925;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn4025925 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36375372;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36375372 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn6084764;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn6084764 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn69767369;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn69767369 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67484595;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn67484595 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41283472;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41283472 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26036555;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26036555 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79357377;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79357377 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88312425;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88312425 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn14092657;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn14092657 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn44052986;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn44052986 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn89041700;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn89041700 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72410809;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72410809 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50689558;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50689558 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53658638;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn53658638 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn23066501;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn23066501 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90800977;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90800977 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60772427;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60772427 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn10830159;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn10830159 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29193486;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29193486 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn99624986;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn99624986 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn83769048;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn83769048 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn37473675;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn37473675 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41511906;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn41511906 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15119225;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15119225 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn24684213;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn24684213 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33280368;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33280368 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn73786024;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn73786024 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90592003;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn90592003 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85161023;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn85161023 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80411347;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80411347 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn7504290;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn7504290 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72789071;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn72789071 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61308449;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61308449 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56506174;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56506174 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn97186669;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn97186669 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26730434;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn26730434 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61353088;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn61353088 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60721892;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn60721892 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98023129;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98023129 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15350661;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn15350661 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn22751545;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn22751545 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn38410279;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn38410279 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn51910113;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn51910113 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8960930;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8960930 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92344469;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92344469 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn27845683;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn27845683 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn17121749;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn17121749 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92560204;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn92560204 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80342441;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80342441 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94543069;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94543069 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16298506;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16298506 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80616489;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn80616489 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79805216;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn79805216 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82536357;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn82536357 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn20256876;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn20256876 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98901696;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn98901696 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn64572858;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn64572858 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn54648145;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn54648145 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn42800382;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn42800382 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8003105;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn8003105 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn52250531;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn52250531 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88765373;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn88765373 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3151403;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn3151403 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33681309;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn33681309 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36548696;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn36548696 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16252630;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn16252630 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn11102360;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn11102360 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94183383;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn94183383 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56471969;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn56471969 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn96336067;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn96336067 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29447890;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn29447890 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50536;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn50536 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn12807030;     fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn12807030 = fdIEZZIppEHAvgAeKqMlMbDuINKENeVLcVvVyUzCvn70505069;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void yFtBrvNYkZOCQFsDNbWGiXfgWqxBikooG6546135() {     float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89973240 = -160860137;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM10506145 = -700270135;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15787931 = -152682151;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM434923 = -975375083;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM43916309 = -168211681;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86124173 = -639962469;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78393919 = -378082398;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98065430 = -916063155;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91807254 = -834707363;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6135211 = -892840856;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM93529865 = -436192813;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44881830 = -294061438;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM92480581 = -28591473;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35138744 = -519463332;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26529231 = -431590777;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM19229566 = 35550350;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87348283 = -90639987;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24319244 = -67021388;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM67446185 = -203450394;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26830145 = -420399845;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15865015 = -615992055;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM326130 = -817701784;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM45243939 = -923726743;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM9168317 = -248696346;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM20202192 = 6216740;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86928804 = -989260648;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87954055 = -928140687;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87167046 = -979556726;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47829721 = -761589127;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54474224 = -694468107;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM97288680 = 58744012;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80862783 = -848302035;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37512659 = -276480098;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38113885 = -558699146;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM28242761 = -337116497;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50158593 = -141276541;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12436437 = -702996905;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM30524175 = -930489332;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM39724134 = -12174125;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM71971294 = -645923800;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95140695 = 95794073;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM34925634 = -228606889;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM61934218 = -166529972;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44157966 = -585398740;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90858569 = -39255028;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83654613 = -772078296;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM81614866 = -807423468;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83924878 = -927330785;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78609266 = -658306297;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82410248 = -123737415;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89554793 = -766307966;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM41133073 = 98610555;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3105515 = -425936546;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM46716053 = -91174360;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90681120 = -523901581;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89647110 = -343158354;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65262205 = -776543393;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6619614 = -903985805;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80232730 = -881591824;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56987504 = -178951034;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98170117 = -711821782;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91226872 = -398525673;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50235710 = -54474028;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37333031 = -40239257;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8846531 = -851584869;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12667082 = -587890779;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM7369172 = 82418659;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54366697 = -469892327;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6895984 = -82346835;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM76370637 = -190314236;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6793129 = -261452745;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56824109 = -160150655;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84595109 = 45152736;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95474891 = -557526595;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM31689449 = -416193918;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80939380 = -287385166;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38391912 = -551171812;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM1085973 = -238328003;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM18309748 = -109441319;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM36547579 = -221704965;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5313939 = -81837181;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM4029177 = 99190098;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8557781 = -221250429;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65419472 = -537851712;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM64919430 = -928160142;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56155607 = 60133457;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM77757269 = -322365489;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90796606 = -85305738;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47432764 = 65202434;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38595651 = -993958144;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84896388 = -364733149;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5816824 = -799011100;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50291444 = 51102491;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82736629 = -833223092;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM73801176 = -934102018;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3913823 = -505680254;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84689924 = -74132862;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24601188 = -26290716;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35311436 = -733813872;    float AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78191487 = -160860137;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89973240 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM10506145;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM10506145 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15787931;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15787931 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM434923;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM434923 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM43916309;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM43916309 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86124173;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86124173 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78393919;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78393919 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98065430;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98065430 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91807254;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91807254 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6135211;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6135211 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM93529865;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM93529865 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44881830;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44881830 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM92480581;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM92480581 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35138744;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35138744 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26529231;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26529231 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM19229566;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM19229566 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87348283;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87348283 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24319244;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24319244 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM67446185;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM67446185 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26830145;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM26830145 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15865015;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM15865015 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM326130;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM326130 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM45243939;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM45243939 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM9168317;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM9168317 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM20202192;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM20202192 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86928804;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM86928804 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87954055;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87954055 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87167046;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM87167046 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47829721;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47829721 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54474224;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54474224 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM97288680;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM97288680 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80862783;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80862783 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37512659;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37512659 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38113885;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38113885 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM28242761;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM28242761 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50158593;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50158593 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12436437;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12436437 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM30524175;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM30524175 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM39724134;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM39724134 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM71971294;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM71971294 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95140695;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95140695 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM34925634;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM34925634 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM61934218;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM61934218 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44157966;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM44157966 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90858569;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90858569 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83654613;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83654613 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM81614866;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM81614866 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83924878;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM83924878 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78609266;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78609266 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82410248;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82410248 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89554793;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89554793 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM41133073;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM41133073 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3105515;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3105515 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM46716053;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM46716053 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90681120;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90681120 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89647110;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89647110 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65262205;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65262205 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6619614;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6619614 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80232730;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80232730 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56987504;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56987504 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98170117;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM98170117 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91226872;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM91226872 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50235710;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50235710 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37333031;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM37333031 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8846531;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8846531 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12667082;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM12667082 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM7369172;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM7369172 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54366697;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM54366697 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6895984;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6895984 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM76370637;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM76370637 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6793129;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM6793129 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56824109;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56824109 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84595109;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84595109 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95474891;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM95474891 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM31689449;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM31689449 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80939380;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM80939380 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38391912;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38391912 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM1085973;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM1085973 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM18309748;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM18309748 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM36547579;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM36547579 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5313939;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5313939 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM4029177;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM4029177 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8557781;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM8557781 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65419472;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM65419472 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM64919430;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM64919430 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56155607;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM56155607 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM77757269;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM77757269 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90796606;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM90796606 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47432764;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM47432764 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38595651;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM38595651 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84896388;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84896388 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5816824;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM5816824 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50291444;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM50291444 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82736629;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM82736629 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM73801176;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM73801176 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3913823;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM3913823 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84689924;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM84689924 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24601188;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM24601188 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35311436;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM35311436 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78191487;     AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM78191487 = AJWkJZJuscTpYoXSQyqSYRbaMeByLpAkZwPwVTDBMM89973240;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PjOZFwpzhVWwyXfxhEwTRLsPnmRNsmmud2729295() {     float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk49569337 = -389616515;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12011994 = -510425520;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52789318 = -226823074;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96310680 = -747985961;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk55209535 = -68718709;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk83801293 = -498222142;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk75752401 = -807799984;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48890714 = -170274530;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5620699 = -267379862;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk89159725 = -834099709;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18824797 = -837735253;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk79553031 = -389082688;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk63235144 = 65230009;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk93512583 = -423621680;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23837036 = -124117298;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk15983820 = -869822541;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23309387 = -18856267;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk88987574 = -436357493;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47888389 = -342570024;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6747254 = 17191502;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96326132 = -449012879;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk68815728 = -710103662;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk37435764 = -688021822;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73898556 = -913034583;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96180196 = -549920850;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk81343712 = -23878119;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk1294126 = -277620684;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52278215 = -500938316;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97614063 = -551181742;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92947690 = -741451349;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk22202999 = -586475315;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23628044 = -165520032;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk86594697 = -256426970;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk20638327 = -60583077;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk33180122 = 14673517;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28748490 = -452933123;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3068115 = -995775540;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28884512 = -874941722;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk58742077 = -830880642;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk44796948 = -919804748;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53358509 = -372867524;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5004816 = -233548308;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk2813461 = -999974802;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18397472 = 90686521;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91846885 = -585573097;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48447742 = 84977545;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk87103588 = -699279135;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30621273 = -160084014;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk17998914 = -942243917;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97577640 = -444989876;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk40041044 = -552416190;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47718226 = -972632700;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78521028 = -665885000;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19990576 = -351343315;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6403163 = -487835668;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk80753608 = -679512854;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74576230 = -822403699;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78890762 = -313788491;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk130485 = -98065111;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73865823 = 55159410;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82507168 = -120601458;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23474187 = -206861669;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51276651 = -619092788;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12673008 = -525928514;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66956727 = -147624394;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95196753 = -572215221;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92958334 = -32655718;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk42596818 = -874186915;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk60332461 = -338295197;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95088546 = -671184176;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12915705 = -874047002;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94424874 = -143914546;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30245498 = -605476852;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3091441 = -422765276;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53388745 = -609940975;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91321317 = -115464572;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66002268 = -710128860;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19038293 = -678708344;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82051670 = -227461487;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47732455 = -534898396;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94240123 = -324598985;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk70672853 = -17536671;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk34279302 = -558694399;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk36423 = -6191866;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52906646 = -89035160;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74484772 = -613842616;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk45107015 = -499635033;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66604121 = -905083655;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk14235165 = -572747410;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52426514 = -305813630;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk54172260 = -630529425;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk24177353 = -581987049;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28754028 = -676876611;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk84876253 = -786040052;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk62289780 = -699203290;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk29884322 = -66005855;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53728164 = -614455520;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk90140452 = -374046289;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51440744 = -761689085;    float eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96650132 = -389616515;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk49569337 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12011994;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12011994 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52789318;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52789318 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96310680;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96310680 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk55209535;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk55209535 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk83801293;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk83801293 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk75752401;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk75752401 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48890714;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48890714 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5620699;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5620699 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk89159725;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk89159725 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18824797;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18824797 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk79553031;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk79553031 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk63235144;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk63235144 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk93512583;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk93512583 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23837036;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23837036 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk15983820;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk15983820 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23309387;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23309387 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk88987574;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk88987574 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47888389;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47888389 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6747254;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6747254 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96326132;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96326132 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk68815728;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk68815728 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk37435764;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk37435764 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73898556;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73898556 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96180196;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96180196 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk81343712;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk81343712 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk1294126;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk1294126 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52278215;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52278215 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97614063;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97614063 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92947690;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92947690 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk22202999;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk22202999 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23628044;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23628044 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk86594697;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk86594697 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk20638327;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk20638327 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk33180122;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk33180122 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28748490;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28748490 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3068115;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3068115 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28884512;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28884512 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk58742077;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk58742077 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk44796948;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk44796948 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53358509;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53358509 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5004816;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk5004816 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk2813461;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk2813461 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18397472;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk18397472 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91846885;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91846885 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48447742;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk48447742 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk87103588;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk87103588 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30621273;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30621273 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk17998914;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk17998914 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97577640;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk97577640 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk40041044;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk40041044 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47718226;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47718226 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78521028;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78521028 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19990576;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19990576 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6403163;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk6403163 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk80753608;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk80753608 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74576230;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74576230 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78890762;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk78890762 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk130485;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk130485 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73865823;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk73865823 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82507168;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82507168 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23474187;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk23474187 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51276651;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51276651 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12673008;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12673008 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66956727;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66956727 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95196753;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95196753 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92958334;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk92958334 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk42596818;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk42596818 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk60332461;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk60332461 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95088546;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk95088546 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12915705;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk12915705 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94424874;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94424874 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30245498;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk30245498 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3091441;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk3091441 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53388745;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53388745 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91321317;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk91321317 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66002268;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66002268 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19038293;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk19038293 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82051670;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk82051670 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47732455;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk47732455 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94240123;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk94240123 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk70672853;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk70672853 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk34279302;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk34279302 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk36423;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk36423 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52906646;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52906646 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74484772;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk74484772 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk45107015;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk45107015 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66604121;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk66604121 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk14235165;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk14235165 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52426514;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk52426514 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk54172260;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk54172260 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk24177353;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk24177353 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28754028;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk28754028 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk84876253;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk84876253 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk62289780;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk62289780 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk29884322;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk29884322 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53728164;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk53728164 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk90140452;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk90140452 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51440744;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk51440744 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96650132;     eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk96650132 = eTtVFvtjZYpipfxetGGSJZDrymTecHujbTUEmbbIDk49569337;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LvsvxnWKyzqpQcVYrQRbKTbIOXDBeqqnu63031952() {     float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39695645 = -448372716;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95137058 = -885351690;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg48282017 = -363617535;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69809255 = -934157783;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68266271 = -10042150;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg64587698 = -390855250;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70415840 = -445345457;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1769278 = -906722269;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29432386 = -275272500;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg93415395 = -403974234;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94976615 = -246155410;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14302539 = -968670823;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1581277 = -247005852;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31931437 = -421782564;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21911408 = -609238241;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40163562 = -570202411;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67271567 = -280201509;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg10343287 = -879206785;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg8802780 = -808980460;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74071502 = -630686808;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg84248535 = -153437971;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66897310 = 56799703;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70674182 = 5518257;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81819653 = -261058958;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg43065385 = -93431794;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg134677 = -999751854;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg23261461 = -37149678;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg75448590 = -560828374;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg58823061 = -213380790;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40736770 = -615853740;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg25666401 = -913141859;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22994958 = -666344452;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95563738 = -556652130;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg44476972 = -52034235;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68776656 = -735662144;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81979496 = -755962533;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg3301684 = -511591444;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg53241795 = -741000966;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69275094 = -538342687;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg89309089 = -824512521;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67058182 = -78728799;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg59649278 = -48041521;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg62630301 = -375400397;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg49059412 = -873396668;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg83811302 = -698083053;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68886735 = -398646360;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67526879 = -247761635;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21007732 = -186740267;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg45917567 = -278183263;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26858047 = -901986214;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69406567 = -926798235;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg91491333 = -937059533;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg27973484 = -377737995;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72897638 = -474898597;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg78783417 = -616435940;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72798335 = -405172419;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24462877 = -790869948;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66462364 = -2558577;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26743871 = -740725989;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68131594 = -10290297;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41326238 = -253705572;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94967249 = -884517083;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg42946216 = -593341479;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg88695615 = -659418760;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67748994 = -490832376;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71981658 = -579810959;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg18738801 = -312018694;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57104305 = -94971617;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg63154780 = -686120421;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39931911 = -853275708;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36861878 = 41389033;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14029772 = -539200544;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41068193 = -240864099;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg19493690 = -984467939;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg7013320 = -451958009;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24599257 = -5396451;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg4267009 = -567799900;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21614770 = -121085076;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg98008350 = -562975906;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74178649 = -694785435;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg32607798 = -651990220;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg2253730 = -850409412;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29531023 = -182645111;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31965015 = -311394577;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71330203 = -689055506;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg34175068 = -976082327;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95021473 = -188606457;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22666101 = 18246467;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg65693554 = -435598296;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95978321 = -230489725;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57516620 = -965092586;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36839320 = -409032867;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26497925 = 99725023;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1143500 = -428052391;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg47982852 = -470806949;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72090932 = -194211716;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg16703062 = -454700042;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg73934686 = -715981638;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81310418 = -282564292;    float cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg11829645 = -448372716;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39695645 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95137058;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95137058 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg48282017;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg48282017 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69809255;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69809255 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68266271;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68266271 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg64587698;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg64587698 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70415840;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70415840 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1769278;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1769278 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29432386;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29432386 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg93415395;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg93415395 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94976615;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94976615 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14302539;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14302539 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1581277;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1581277 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31931437;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31931437 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21911408;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21911408 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40163562;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40163562 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67271567;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67271567 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg10343287;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg10343287 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg8802780;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg8802780 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74071502;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74071502 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg84248535;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg84248535 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66897310;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66897310 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70674182;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg70674182 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81819653;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81819653 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg43065385;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg43065385 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg134677;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg134677 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg23261461;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg23261461 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg75448590;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg75448590 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg58823061;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg58823061 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40736770;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg40736770 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg25666401;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg25666401 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22994958;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22994958 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95563738;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95563738 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg44476972;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg44476972 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68776656;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68776656 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81979496;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81979496 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg3301684;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg3301684 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg53241795;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg53241795 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69275094;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69275094 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg89309089;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg89309089 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67058182;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67058182 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg59649278;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg59649278 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg62630301;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg62630301 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg49059412;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg49059412 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg83811302;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg83811302 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68886735;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68886735 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67526879;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67526879 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21007732;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21007732 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg45917567;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg45917567 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26858047;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26858047 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69406567;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg69406567 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg91491333;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg91491333 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg27973484;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg27973484 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72897638;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72897638 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg78783417;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg78783417 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72798335;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72798335 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24462877;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24462877 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66462364;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg66462364 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26743871;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26743871 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68131594;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg68131594 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41326238;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41326238 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94967249;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg94967249 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg42946216;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg42946216 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg88695615;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg88695615 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67748994;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg67748994 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71981658;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71981658 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg18738801;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg18738801 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57104305;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57104305 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg63154780;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg63154780 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39931911;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39931911 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36861878;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36861878 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14029772;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg14029772 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41068193;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg41068193 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg19493690;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg19493690 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg7013320;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg7013320 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24599257;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg24599257 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg4267009;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg4267009 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21614770;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg21614770 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg98008350;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg98008350 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74178649;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg74178649 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg32607798;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg32607798 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg2253730;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg2253730 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29531023;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg29531023 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31965015;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg31965015 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71330203;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg71330203 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg34175068;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg34175068 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95021473;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95021473 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22666101;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg22666101 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg65693554;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg65693554 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95978321;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg95978321 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57516620;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg57516620 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36839320;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg36839320 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26497925;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg26497925 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1143500;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg1143500 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg47982852;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg47982852 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72090932;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg72090932 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg16703062;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg16703062 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg73934686;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg73934686 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81310418;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg81310418 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg11829645;     cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg11829645 = cfLlviOvWUWreosmdyiqKpsUjhakUfHICuoxKnvhDg39695645;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MjORpSaFlNWhsrICPifJMJWqxIccuhrJV75577141() {     float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs59163815 = -861503928;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48160923 = -331229686;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65119009 = -15246150;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88456404 = -750732046;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs68712787 = -636314566;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90179772 = -281340018;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15247719 = -888651687;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67019511 = 99469765;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90119183 = 96536121;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71344118 = -409560280;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49199879 = -679145710;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs17797153 = -967973528;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs91952936 = -671363128;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs40347477 = -964068290;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82437869 = -907322032;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6379211 = 66605655;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs73233680 = -451976190;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34406039 = -629961503;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8437659 = -86185220;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54682804 = -248223264;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs96704607 = -759650297;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81879393 = -455003510;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs38847188 = -292056361;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs99541321 = -997602950;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54268874 = -387731904;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs4902139 = -685547072;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7189592 = -802300610;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs26240265 = -724561653;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs568019 = -227291936;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25443625 = -707292435;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55470486 = -778467952;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs62574268 = -130693470;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7039842 = -11859896;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs3233479 = -356637442;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8706993 = -798364950;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs18045434 = 40468858;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71685134 = 61532481;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs94724269 = -818209781;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs36588419 = 97242488;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10590826 = -821043618;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8540240 = -588515095;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71508411 = -286937747;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs33763543 = -323202195;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32444951 = -222469328;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63839714 = -975206016;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs23347863 = -935977781;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49516759 = -161454957;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs21163562 = -370027581;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs87053158 = -292122502;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67756389 = -662998559;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs43842137 = -233163166;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7940194 = -214412393;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97798629 = -53846956;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs45827667 = -469492233;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78872534 = -390994575;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77284422 = -306500418;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs9313735 = 60826674;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65577687 = -17643200;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34187531 = -263000143;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63810649 = -950767494;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82990180 = -479039409;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs89007453 = -64090034;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs66451493 = -673238299;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64675559 = -196171445;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15873633 = -631092329;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86625611 = -448452241;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10757311 = -856113632;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88719457 = -214725687;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31640484 = -65703340;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64392435 = -847790891;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34694077 = -994926826;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78509411 = -633766409;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97817619 = -627203992;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97846832 = -265141603;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs46142565 = -659708170;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25196196 = -372712551;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48115851 = -31801316;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6402238 = 30412967;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs35701608 = 77603065;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs30921011 = -451754123;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55385379 = -424092115;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86026030 = -332273029;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs39187107 = -332439152;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32811629 = -564293378;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81601487 = -374129270;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs47530293 = -464055560;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64775638 = 23153486;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs61212175 = -542367664;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs24360945 = -965642867;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31422571 = -391864532;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8731700 = 79642184;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6107447 = -920824319;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs60536739 = -455209639;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs72777769 = 48009982;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs27600645 = -242004209;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs19532786 = -424425061;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs5056919 = -613699448;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs69087984 = -27030751;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs16571319 = -591377000;    float WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77214102 = -861503928;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs59163815 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48160923;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48160923 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65119009;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65119009 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88456404;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88456404 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs68712787;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs68712787 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90179772;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90179772 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15247719;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15247719 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67019511;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67019511 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90119183;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs90119183 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71344118;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71344118 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49199879;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49199879 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs17797153;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs17797153 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs91952936;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs91952936 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs40347477;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs40347477 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82437869;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82437869 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6379211;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6379211 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs73233680;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs73233680 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34406039;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34406039 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8437659;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8437659 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54682804;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54682804 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs96704607;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs96704607 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81879393;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81879393 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs38847188;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs38847188 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs99541321;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs99541321 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54268874;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs54268874 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs4902139;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs4902139 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7189592;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7189592 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs26240265;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs26240265 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs568019;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs568019 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25443625;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25443625 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55470486;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55470486 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs62574268;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs62574268 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7039842;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7039842 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs3233479;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs3233479 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8706993;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8706993 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs18045434;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs18045434 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71685134;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71685134 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs94724269;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs94724269 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs36588419;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs36588419 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10590826;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10590826 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8540240;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8540240 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71508411;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs71508411 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs33763543;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs33763543 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32444951;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32444951 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63839714;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63839714 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs23347863;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs23347863 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49516759;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs49516759 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs21163562;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs21163562 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs87053158;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs87053158 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67756389;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs67756389 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs43842137;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs43842137 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7940194;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs7940194 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97798629;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97798629 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs45827667;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs45827667 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78872534;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78872534 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77284422;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77284422 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs9313735;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs9313735 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65577687;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs65577687 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34187531;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34187531 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63810649;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs63810649 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82990180;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs82990180 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs89007453;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs89007453 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs66451493;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs66451493 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64675559;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64675559 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15873633;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs15873633 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86625611;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86625611 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10757311;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs10757311 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88719457;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs88719457 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31640484;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31640484 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64392435;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64392435 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34694077;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs34694077 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78509411;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs78509411 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97817619;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97817619 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97846832;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs97846832 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs46142565;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs46142565 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25196196;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs25196196 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48115851;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs48115851 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6402238;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6402238 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs35701608;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs35701608 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs30921011;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs30921011 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55385379;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs55385379 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86026030;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs86026030 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs39187107;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs39187107 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32811629;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs32811629 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81601487;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs81601487 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs47530293;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs47530293 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64775638;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs64775638 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs61212175;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs61212175 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs24360945;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs24360945 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31422571;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs31422571 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8731700;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs8731700 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6107447;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs6107447 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs60536739;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs60536739 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs72777769;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs72777769 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs27600645;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs27600645 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs19532786;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs19532786 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs5056919;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs5056919 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs69087984;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs69087984 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs16571319;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs16571319 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77214102;     WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs77214102 = WYrRnQxQSZUpcXCudgjDXhCNXTgqxLDVNLWSRlcShs59163815;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zIKcrsAaVJKTJQMpTcEtesTHyTuuciTvk71760301() {     long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18759913 = 9739695;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG49666772 = -141385071;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG2120397 = -89387072;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG84332162 = -523342923;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80006013 = -536821594;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG87856893 = -139599691;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG12606201 = -218369273;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG17844795 = -254741610;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3932627 = -436136378;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54368634 = -350819134;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74494810 = 19311850;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52468354 = 37005223;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62707499 = -577541647;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG98721315 = -868226637;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG79745675 = -599848553;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3133466 = -838767236;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG9194785 = -380192470;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99074369 = -999297608;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88879861 = -225304850;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34599913 = -910631917;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG77165725 = -592671122;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50368992 = -347405388;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG31039013 = -56351440;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64271561 = -561941187;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG30246879 = -943869494;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99317045 = -820164543;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG20529662 = -151780607;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91351434 = -245943243;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50352361 = -16884551;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG63917091 = -754275677;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80384804 = -323687280;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5339529 = -547911467;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG56121880 = 8193231;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85757921 = -958521373;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG13644354 = -446574935;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96635330 = -271187723;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62316812 = -231246153;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG93084607 = -762662171;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55606362 = -721464029;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83416480 = 5075434;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG66758052 = 42823309;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG41587592 = -291879165;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74642785 = -56647025;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG6684457 = -646384067;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64828029 = -421524084;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88140991 = -78921940;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55005481 = -53310625;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67859955 = -702780810;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG26442806 = -576060122;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG82923781 = -984251019;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94328387 = -19271390;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG14525347 = -185655648;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73214144 = -293795410;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG19102190 = -729661188;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94594575 = -354928662;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG68390920 = -642854917;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18627759 = 14966368;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37848836 = -527445886;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54085284 = -579473430;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80688968 = -716657051;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67327231 = -987819085;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG21254767 = -972426030;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67492434 = -137857059;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40015536 = -681860702;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73983829 = 72868146;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69155282 = -432776683;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96346473 = -971188009;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG76949578 = -619020274;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85076961 = -321651702;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83110344 = -228660831;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40816653 = -507521083;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16110177 = -617530300;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG43468008 = -177833580;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5463382 = -130380285;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67841860 = -853455226;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG35578133 = -200791957;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG75726207 = -190758364;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24354557 = -409967374;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99443531 = -40417103;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG42105887 = -764947554;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG44311564 = -666853919;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52669707 = -448999798;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64908628 = -669883122;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67428580 = -32633532;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69588704 = -635004288;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG65859458 = -38031633;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32125384 = -154116058;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37019691 = -262145581;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91163345 = -503592712;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45253433 = -803720018;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG78007571 = -186154092;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24467976 = -703800268;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG38999323 = -83188741;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74917393 = 95193021;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16089250 = -7105481;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45503286 = 15249338;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74095158 = -54022106;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34627249 = -374786323;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32700627 = -619252213;    long fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG95672747 = 9739695;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18759913 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG49666772;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG49666772 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG2120397;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG2120397 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG84332162;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG84332162 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80006013;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80006013 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG87856893;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG87856893 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG12606201;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG12606201 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG17844795;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG17844795 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3932627;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3932627 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54368634;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54368634 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74494810;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74494810 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52468354;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52468354 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62707499;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62707499 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG98721315;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG98721315 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG79745675;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG79745675 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3133466;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG3133466 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG9194785;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG9194785 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99074369;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99074369 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88879861;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88879861 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34599913;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34599913 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG77165725;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG77165725 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50368992;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50368992 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG31039013;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG31039013 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64271561;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64271561 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG30246879;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG30246879 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99317045;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99317045 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG20529662;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG20529662 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91351434;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91351434 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50352361;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG50352361 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG63917091;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG63917091 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80384804;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80384804 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5339529;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5339529 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG56121880;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG56121880 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85757921;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85757921 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG13644354;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG13644354 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96635330;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96635330 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62316812;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG62316812 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG93084607;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG93084607 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55606362;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55606362 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83416480;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83416480 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG66758052;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG66758052 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG41587592;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG41587592 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74642785;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74642785 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG6684457;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG6684457 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64828029;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64828029 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88140991;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG88140991 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55005481;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG55005481 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67859955;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67859955 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG26442806;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG26442806 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG82923781;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG82923781 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94328387;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94328387 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG14525347;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG14525347 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73214144;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73214144 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG19102190;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG19102190 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94594575;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG94594575 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG68390920;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG68390920 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18627759;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18627759 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37848836;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37848836 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54085284;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG54085284 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80688968;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG80688968 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67327231;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67327231 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG21254767;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG21254767 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67492434;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67492434 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40015536;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40015536 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73983829;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG73983829 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69155282;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69155282 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96346473;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG96346473 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG76949578;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG76949578 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85076961;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG85076961 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83110344;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG83110344 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40816653;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG40816653 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16110177;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16110177 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG43468008;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG43468008 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5463382;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG5463382 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67841860;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67841860 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG35578133;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG35578133 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG75726207;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG75726207 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24354557;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24354557 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99443531;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG99443531 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG42105887;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG42105887 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG44311564;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG44311564 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52669707;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG52669707 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64908628;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG64908628 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67428580;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG67428580 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69588704;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG69588704 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG65859458;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG65859458 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32125384;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32125384 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37019691;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG37019691 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91163345;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG91163345 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45253433;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45253433 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG78007571;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG78007571 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24467976;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG24467976 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG38999323;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG38999323 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74917393;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74917393 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16089250;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG16089250 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45503286;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG45503286 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74095158;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG74095158 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34627249;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG34627249 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32700627;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG32700627 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG95672747;     fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG95672747 = fWNaLNTmrzQMcRamPwIsPaGpCeXxGxmqOjetyPHOlG18759913;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bxATiLtczMUCQFbwvvsbBZYKYOJOTrWNt84305490() {     long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38228083 = -403391517;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2690637 = -687263067;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII18957389 = -841015687;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2979312 = -339917186;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80452529 = -63094009;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII13448968 = -30084460;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII57438079 = -661675502;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83095028 = -348549576;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII64619424 = -64327757;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32297357 = -356405180;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII28718074 = -413678450;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII55962968 = 37702518;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53079159 = 98101077;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7137356 = -310512363;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII40272136 = -897932345;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII69349114 = -201959170;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15156898 = -551967152;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23137121 = -750052326;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88514741 = -602509611;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15211215 = -528168373;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII89621797 = -98883447;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII65351075 = -859208601;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII99212019 = -353926058;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII81993229 = -198485179;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII41450368 = -138169603;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4084507 = -505959762;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4457794 = -916931538;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42143109 = -409676522;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92097318 = -30795697;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII48623945 = -845714372;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII10188890 = -189013373;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44918839 = -12260485;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67597984 = -547014535;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44514428 = -163124579;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53574690 = -509277741;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32701268 = -574756332;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30700263 = -758122228;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII34567082 = -839870986;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22919687 = -85878854;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4698217 = 8544338;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8240110 = -466962987;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53446725 = -530775391;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII45776026 = -4448822;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90069994 = 4543272;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44856440 = -698647047;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42602119 = -616253361;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36995361 = 32996053;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68015785 = -886068124;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67578397 = -589999360;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23822124 = -745263365;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68763956 = -425636321;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30974207 = -563008507;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII43039290 = 30095629;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92032218 = -724254825;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII94683692 = -129487297;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII72877008 = -544182916;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII3478617 = -233337009;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36964160 = -542530509;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61528944 = -101747584;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII76368023 = -557134248;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8991175 = -113152922;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15294971 = -151998981;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90997710 = -217753879;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15995479 = -218613386;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22108467 = -67391807;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83799235 = -301417965;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88364983 = -415282947;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8564731 = -738774345;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53562666 = -801234622;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7570869 = -223176014;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38648852 = -443836942;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80589816 = -712096166;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII217435 = -564173473;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83816524 = -511053949;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII6971106 = 38794613;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36175072 = -568108056;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII19575049 = -754759780;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII9142025 = -258469331;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII37136789 = -499838132;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII98848249 = -521916242;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67089145 = -438955815;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36442008 = 69136585;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII74564711 = -819677162;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68275194 = -285532333;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79859989 = -320078051;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79214683 = -626004866;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII1879549 = 57643885;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII75565765 = -822759711;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII49830736 = 66362717;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80697682 = -965094826;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29222651 = -241419323;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII93736102 = -115591720;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII73038137 = -638123403;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII46551663 = -528744606;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII95707042 = -878302741;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92945139 = -214964007;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII62449015 = -213021512;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29780547 = -785835436;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67961527 = -928064921;    long SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61057205 = -403391517;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38228083 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2690637;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2690637 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII18957389;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII18957389 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2979312;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII2979312 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80452529;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80452529 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII13448968;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII13448968 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII57438079;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII57438079 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83095028;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83095028 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII64619424;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII64619424 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32297357;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32297357 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII28718074;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII28718074 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII55962968;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII55962968 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53079159;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53079159 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7137356;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7137356 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII40272136;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII40272136 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII69349114;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII69349114 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15156898;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15156898 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23137121;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23137121 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88514741;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88514741 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15211215;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15211215 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII89621797;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII89621797 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII65351075;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII65351075 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII99212019;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII99212019 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII81993229;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII81993229 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII41450368;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII41450368 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4084507;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4084507 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4457794;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4457794 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42143109;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42143109 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92097318;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92097318 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII48623945;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII48623945 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII10188890;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII10188890 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44918839;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44918839 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67597984;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67597984 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44514428;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44514428 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53574690;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53574690 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32701268;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII32701268 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30700263;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30700263 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII34567082;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII34567082 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22919687;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22919687 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4698217;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII4698217 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8240110;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8240110 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53446725;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53446725 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII45776026;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII45776026 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90069994;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90069994 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44856440;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII44856440 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42602119;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII42602119 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36995361;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36995361 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68015785;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68015785 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67578397;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67578397 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23822124;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII23822124 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68763956;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68763956 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30974207;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII30974207 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII43039290;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII43039290 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92032218;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92032218 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII94683692;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII94683692 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII72877008;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII72877008 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII3478617;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII3478617 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36964160;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36964160 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61528944;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61528944 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII76368023;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII76368023 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8991175;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8991175 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15294971;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15294971 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90997710;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII90997710 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15995479;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII15995479 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22108467;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII22108467 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83799235;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83799235 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88364983;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII88364983 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8564731;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII8564731 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53562666;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII53562666 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7570869;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII7570869 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38648852;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38648852 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80589816;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80589816 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII217435;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII217435 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83816524;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII83816524 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII6971106;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII6971106 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36175072;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36175072 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII19575049;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII19575049 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII9142025;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII9142025 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII37136789;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII37136789 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII98848249;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII98848249 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67089145;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67089145 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36442008;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII36442008 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII74564711;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII74564711 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68275194;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII68275194 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79859989;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79859989 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79214683;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII79214683 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII1879549;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII1879549 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII75565765;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII75565765 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII49830736;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII49830736 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80697682;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII80697682 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29222651;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29222651 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII93736102;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII93736102 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII73038137;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII73038137 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII46551663;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII46551663 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII95707042;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII95707042 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92945139;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII92945139 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII62449015;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII62449015 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29780547;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII29780547 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67961527;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII67961527 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61057205;     SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII61057205 = SSvUnGvFoXpnPSCAMGHqRpCZqvTCeII38228083;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DfQupmFjhxwoAeSuEDZnxg44608148() {     long OeNBueorOTpthlEuoVLMrbPlVNSwfGx28354391 = -462147718;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx85815701 = 37810762;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx14450088 = -977810148;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx76477886 = -526089008;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx93509265 = -4417451;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx94235371 = 77282432;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx52101518 = -299220975;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx35973592 = 15002685;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx88431111 = -72220395;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx36553027 = 73720295;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx4869894 = -922098607;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx90712475 = -541885617;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx91425291 = -214134784;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx45556210 = -308673247;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx38346508 = -283053288;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx93528856 = 97660960;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx59119078 = -813312393;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx44492833 = -92901618;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx49429132 = 31079953;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx82535463 = -76046683;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx77544200 = -903308539;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx63432657 = -92305237;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx32450438 = -760385980;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx89914326 = -646509554;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx88335556 = -781680547;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx22875472 = -381833496;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx26425128 = -676460532;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx65313484 = -469566580;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx53306316 = -792994745;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx96413025 = -720116763;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx13652293 = -515679917;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx44285753 = -513084905;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx76567025 = -847239695;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx68353073 = -154575737;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx89171224 = -159613402;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx85932274 = -877785742;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx30933831 = -273938133;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx58924365 = -705930230;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx33452704 = -893340900;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx49210358 = -996163436;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx21939783 = -172824262;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx8091189 = -345268604;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx5592868 = -479874418;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx20731936 = -959539917;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx36820858 = -811157003;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx63041112 = 122733;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx17418652 = -615486447;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx58402244 = -912724377;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx95497051 = 74061293;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx53102529 = -102259702;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx98129479 = -800018365;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx74747314 = -527435340;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx92491745 = -781757365;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx44939281 = -847810106;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx67063947 = -258087568;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx64921734 = -269842482;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx53365264 = -201803259;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx24535761 = -231300595;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx88142330 = -744408462;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx70633794 = -622583955;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx67810244 = -246257036;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx86788033 = -829654395;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx82667275 = -192002570;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx92018086 = -352103633;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx22900735 = -410599789;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx60584140 = -309013703;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx14145451 = -694645923;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx23072218 = 40440953;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx56384985 = -49059845;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx52414234 = -405267546;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx62595025 = -628400908;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx194714 = -7382164;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx11040130 = -199560719;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx218775 = 27243388;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx60595680 = -903222421;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx69453011 = -458039936;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx57839789 = -612430820;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx11718502 = -800846064;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx53093469 = -835352552;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx25294444 = -681803281;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx5456821 = -766347050;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx68022883 = -763736156;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx69816433 = -443627874;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx203787 = -590735044;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx98283545 = -920098398;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx38904979 = -988244577;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx51794007 = -731327540;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx31627745 = -999429589;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx1289126 = -896488169;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx24249490 = -889770921;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx32567011 = -575982484;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx6398070 = 57362461;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx70782034 = -961521769;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx62818910 = -170756945;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx81400114 = -649906400;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx35151749 = -343169868;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx25423913 = -53266035;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx13574781 = -27770785;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx97831201 = -448940128;    long OeNBueorOTpthlEuoVLMrbPlVNSwfGx76236717 = -462147718;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx28354391 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx85815701;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx85815701 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx14450088;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx14450088 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx76477886;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx76477886 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx93509265;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx93509265 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx94235371;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx94235371 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx52101518;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx52101518 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx35973592;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx35973592 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx88431111;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx88431111 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx36553027;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx36553027 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx4869894;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx4869894 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx90712475;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx90712475 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx91425291;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx91425291 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx45556210;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx45556210 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx38346508;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx38346508 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx93528856;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx93528856 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx59119078;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx59119078 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx44492833;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx44492833 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx49429132;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx49429132 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx82535463;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx82535463 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx77544200;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx77544200 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx63432657;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx63432657 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx32450438;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx32450438 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx89914326;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx89914326 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx88335556;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx88335556 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx22875472;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx22875472 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx26425128;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx26425128 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx65313484;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx65313484 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx53306316;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx53306316 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx96413025;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx96413025 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx13652293;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx13652293 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx44285753;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx44285753 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx76567025;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx76567025 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx68353073;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx68353073 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx89171224;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx89171224 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx85932274;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx85932274 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx30933831;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx30933831 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx58924365;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx58924365 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx33452704;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx33452704 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx49210358;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx49210358 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx21939783;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx21939783 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx8091189;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx8091189 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx5592868;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx5592868 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx20731936;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx20731936 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx36820858;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx36820858 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx63041112;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx63041112 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx17418652;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx17418652 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx58402244;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx58402244 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx95497051;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx95497051 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx53102529;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx53102529 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx98129479;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx98129479 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx74747314;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx74747314 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx92491745;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx92491745 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx44939281;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx44939281 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx67063947;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx67063947 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx64921734;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx64921734 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx53365264;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx53365264 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx24535761;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx24535761 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx88142330;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx88142330 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx70633794;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx70633794 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx67810244;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx67810244 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx86788033;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx86788033 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx82667275;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx82667275 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx92018086;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx92018086 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx22900735;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx22900735 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx60584140;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx60584140 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx14145451;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx14145451 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx23072218;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx23072218 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx56384985;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx56384985 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx52414234;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx52414234 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx62595025;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx62595025 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx194714;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx194714 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx11040130;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx11040130 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx218775;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx218775 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx60595680;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx60595680 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx69453011;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx69453011 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx57839789;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx57839789 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx11718502;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx11718502 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx53093469;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx53093469 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx25294444;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx25294444 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx5456821;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx5456821 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx68022883;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx68022883 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx69816433;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx69816433 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx203787;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx203787 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx98283545;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx98283545 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx38904979;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx38904979 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx51794007;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx51794007 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx31627745;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx31627745 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx1289126;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx1289126 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx24249490;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx24249490 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx32567011;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx32567011 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx6398070;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx6398070 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx70782034;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx70782034 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx62818910;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx62818910 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx81400114;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx81400114 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx35151749;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx35151749 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx25423913;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx25423913 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx13574781;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx13574781 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx97831201;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx97831201 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx76236717;     OeNBueorOTpthlEuoVLMrbPlVNSwfGx76236717 = OeNBueorOTpthlEuoVLMrbPlVNSwfGx28354391;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IBIEltsemuECeCAUzWoBzO57153336() {     long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo47822561 = -875278930;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38839565 = -508067234;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo31287080 = -629438763;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95125035 = -342663271;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo93955781 = -630689867;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19827446 = -913202336;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96933396 = -742527205;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1223825 = -78805281;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49117909 = -800411774;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo14481750 = 68134249;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59093157 = -255088907;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94207088 = -541188322;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81796950 = -638492060;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo53972250 = -850958973;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo98872969 = -581137079;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59744505 = -365530974;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo65081191 = -985087075;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo68555585 = -943656336;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49064012 = -346124807;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63146765 = -793583139;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90000272 = -409520865;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78414740 = -604108450;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo623444 = 42039402;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo7635996 = -283053546;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99539045 = 24019343;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27642933 = -67628715;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo10353259 = -341611464;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16105159 = -633299859;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95051272 = -806905891;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81119879 = -811555457;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo43456377 = -381006009;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83865063 = 22566077;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo88043128 = -302447462;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27109580 = -459178943;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo29101561 = -222316208;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21998212 = -81354350;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99317281 = -800814208;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo406839 = -783139046;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo766029 = -257755725;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70492094 = -992694532;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63421840 = -682610558;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19950322 = -584164830;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76726108 = -427676215;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4117475 = -308612577;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16849269 = 11720034;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17502240 = -537208688;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99408531 = -529179770;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo58558074 = 3988309;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo36632642 = 60122055;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94000871 = -963272047;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo72565049 = -106383297;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo91196174 = -904788199;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo62316892 = -457866326;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17869309 = -842403743;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67153064 = -32646203;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo69407821 = -171170480;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38216122 = -450106636;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo23651085 = -246385218;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95585990 = -266682615;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo66312849 = -463061153;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo9474187 = -471590872;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo80828237 = -9227346;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6172553 = -271899390;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67998029 = -988856317;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo71025372 = -550859742;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75228093 = -177654985;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6163961 = -138740861;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo54687370 = -79313117;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo24870689 = -528642765;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76874757 = -399782729;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo60427223 = -564716767;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo64674352 = -101948029;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67789556 = -585900612;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78571917 = -353430276;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99724924 = -10972581;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70049950 = -825356035;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1688632 = -76432235;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96505968 = -649348021;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90786726 = -194773581;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82036805 = -438771969;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo28234402 = -538448945;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo51795185 = -245599773;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo79472516 = -593421915;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1050401 = -843633845;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8554831 = -605172161;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo52260203 = -476217810;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21548172 = -519567597;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70173819 = -460043720;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59956516 = -326532741;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59693739 = 48854272;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83782090 = -631247715;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75666197 = -454428990;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4820849 = -416456431;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo34453180 = -794694572;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo61017907 = -421103660;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82593602 = -573383212;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo13777770 = -212265441;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8728079 = -438819898;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo33092102 = -757752836;    long zYvJwXLLZIeGOynVRFUyHelWHjBaNIo41621176 = -875278930;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo47822561 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38839565;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38839565 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo31287080;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo31287080 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95125035;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95125035 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo93955781;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo93955781 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19827446;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19827446 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96933396;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96933396 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1223825;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1223825 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49117909;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49117909 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo14481750;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo14481750 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59093157;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59093157 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94207088;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94207088 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81796950;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81796950 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo53972250;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo53972250 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo98872969;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo98872969 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59744505;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59744505 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo65081191;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo65081191 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo68555585;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo68555585 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49064012;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo49064012 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63146765;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63146765 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90000272;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90000272 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78414740;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78414740 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo623444;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo623444 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo7635996;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo7635996 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99539045;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99539045 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27642933;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27642933 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo10353259;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo10353259 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16105159;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16105159 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95051272;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95051272 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81119879;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo81119879 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo43456377;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo43456377 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83865063;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83865063 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo88043128;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo88043128 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27109580;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo27109580 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo29101561;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo29101561 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21998212;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21998212 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99317281;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99317281 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo406839;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo406839 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo766029;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo766029 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70492094;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70492094 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63421840;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo63421840 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19950322;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo19950322 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76726108;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76726108 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4117475;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4117475 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16849269;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo16849269 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17502240;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17502240 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99408531;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99408531 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo58558074;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo58558074 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo36632642;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo36632642 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94000871;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo94000871 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo72565049;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo72565049 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo91196174;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo91196174 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo62316892;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo62316892 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17869309;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo17869309 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67153064;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67153064 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo69407821;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo69407821 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38216122;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo38216122 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo23651085;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo23651085 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95585990;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo95585990 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo66312849;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo66312849 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo9474187;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo9474187 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo80828237;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo80828237 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6172553;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6172553 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67998029;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67998029 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo71025372;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo71025372 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75228093;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75228093 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6163961;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo6163961 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo54687370;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo54687370 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo24870689;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo24870689 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76874757;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo76874757 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo60427223;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo60427223 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo64674352;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo64674352 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67789556;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo67789556 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78571917;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo78571917 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99724924;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo99724924 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70049950;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70049950 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1688632;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1688632 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96505968;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo96505968 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90786726;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo90786726 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82036805;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82036805 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo28234402;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo28234402 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo51795185;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo51795185 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo79472516;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo79472516 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1050401;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo1050401 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8554831;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8554831 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo52260203;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo52260203 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21548172;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo21548172 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70173819;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo70173819 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59956516;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59956516 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59693739;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo59693739 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83782090;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo83782090 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75666197;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo75666197 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4820849;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo4820849 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo34453180;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo34453180 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo61017907;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo61017907 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82593602;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo82593602 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo13777770;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo13777770 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8728079;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo8728079 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo33092102;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo33092102 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo41621176;     zYvJwXLLZIeGOynVRFUyHelWHjBaNIo41621176 = zYvJwXLLZIeGOynVRFUyHelWHjBaNIo47822561;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mLsAdpQkIusbNXFtDdAIdE17455994() {     long hQacMmPGvHje37948870 = -934035131;    long hQacMmPGvHje21964630 = -882993404;    long hQacMmPGvHje26779779 = -766233225;    long hQacMmPGvHje68623610 = -528835093;    long hQacMmPGvHje7012518 = -572013309;    long hQacMmPGvHje613851 = -805835444;    long hQacMmPGvHje91596834 = -380072678;    long hQacMmPGvHje54102388 = -815253019;    long hQacMmPGvHje72929596 = -808304412;    long hQacMmPGvHje18737421 = -601740276;    long hQacMmPGvHje35244976 = -763509065;    long hQacMmPGvHje28956596 = -20776457;    long hQacMmPGvHje20143083 = -950727921;    long hQacMmPGvHje92391103 = -849119857;    long hQacMmPGvHje96947341 = 33741978;    long hQacMmPGvHje83924247 = -65910844;    long hQacMmPGvHje9043372 = -146432316;    long hQacMmPGvHje89911297 = -286505629;    long hQacMmPGvHje9978403 = -812535243;    long hQacMmPGvHje30471013 = -341461448;    long hQacMmPGvHje77922674 = -113945957;    long hQacMmPGvHje76496322 = -937205085;    long hQacMmPGvHje33861862 = -364420519;    long hQacMmPGvHje15557093 = -731077922;    long hQacMmPGvHje46424233 = -619491601;    long hQacMmPGvHje46433898 = 56497551;    long hQacMmPGvHje32320594 = -101140458;    long hQacMmPGvHje39275534 = -693189918;    long hQacMmPGvHje56260270 = -469104939;    long hQacMmPGvHje28908959 = -685957848;    long hQacMmPGvHje46919780 = -707672553;    long hQacMmPGvHje83231977 = -478258343;    long hQacMmPGvHje97012169 = -602672622;    long hQacMmPGvHje50948225 = -450630101;    long hQacMmPGvHje64698095 = -972651869;    long hQacMmPGvHje75229218 = -384383760;    long hQacMmPGvHje99550850 = -316630112;    long hQacMmPGvHje24764122 = -649198289;    long hQacMmPGvHje11299046 = 34782230;    long hQacMmPGvHje15004236 = -897402305;    long hQacMmPGvHje77121513 = -388471834;    long hQacMmPGvHje74594785 = -398658043;    long hQacMmPGvHje36542950 = -903101811;    long hQacMmPGvHje34779416 = -172695766;    long hQacMmPGvHje8813687 = -100789922;    long hQacMmPGvHje37941233 = 79167407;    long hQacMmPGvHje79831821 = -77662270;    long hQacMmPGvHje48944534 = -22667945;    long hQacMmPGvHje64551296 = -375817292;    long hQacMmPGvHje23281278 = -320268384;    long hQacMmPGvHje1930573 = -480765341;    long hQacMmPGvHje34969281 = -869215032;    long hQacMmPGvHje11769347 = -169719321;    long hQacMmPGvHje70776371 = -965959024;    long hQacMmPGvHje39533319 = -161246475;    long hQacMmPGvHje61452548 = -996830046;    long hQacMmPGvHje88102768 = -418572885;    long hQacMmPGvHje11222687 = 64844697;    long hQacMmPGvHje22199377 = -909343493;    long hQacMmPGvHje60578619 = -528510860;    long hQacMmPGvHje68293256 = -604694987;    long hQacMmPGvHje52321300 = -686882761;    long hQacMmPGvHje97842117 = -246148081;    long hQacMmPGvHje44020637 = -22346564;    long hQacMmPGvHje71817640 = -894067724;    long hQacMmPGvHje52012998 = -185250723;    long hQacMmPGvHje31944427 = -418103836;    long hQacMmPGvHje69194858 = -400097820;    long hQacMmPGvHje27693009 = -876467989;    long hQacMmPGvHje21718123 = -581874262;    long hQacMmPGvHje84373396 = -749280732;    long hQacMmPGvHje84279249 = -497234027;    long hQacMmPGvHje78612252 = -221287859;    long hQacMmPGvHje94974166 = -915132938;    long hQacMmPGvHje53349500 = -952989615;    long hQacMmPGvHje3327890 = -715287914;    long hQacMmPGvHje39953372 = 65896725;    long hQacMmPGvHje99082446 = -91724753;    long hQacMmPGvHje6743407 = -530288000;    long hQacMmPGvHje8483001 = -598659008;    long hQacMmPGvHje66602076 = -865840180;    long hQacMmPGvHje83376060 = 21527486;    long hQacMmPGvHje74724238 = -217372627;    long hQacMmPGvHje32978993 = -48836555;    long hQacMmPGvHje26978387 = -105192508;    long hQacMmPGvHje11950499 = -838457521;    long hQacMmPGvHje71462631 = -208539022;    long hQacMmPGvHje26235798 = -636713598;    long hQacMmPGvHje11414906 = -189383627;    long hQacMmPGvHje3245547 = -975821824;    long hQacMmPGvHje87126450 = -965810876;    long hQacMmPGvHje88328164 = -281474809;    long hQacMmPGvHje2564746 = -739854797;    long hQacMmPGvHje50720426 = -436706911;    long hQacMmPGvHje46710979 = -192707319;    long hQacMmPGvHje24800213 = -701589074;    long hQacMmPGvHje76752667 = -52509963;    long hQacMmPGvHje92522312 = -780755247;    long hQacMmPGvHje62961775 = -278628043;    long hQacMmPGvHje56800688 = -934035131;     hQacMmPGvHje37948870 = hQacMmPGvHje21964630;     hQacMmPGvHje21964630 = hQacMmPGvHje26779779;     hQacMmPGvHje26779779 = hQacMmPGvHje68623610;     hQacMmPGvHje68623610 = hQacMmPGvHje7012518;     hQacMmPGvHje7012518 = hQacMmPGvHje613851;     hQacMmPGvHje613851 = hQacMmPGvHje91596834;     hQacMmPGvHje91596834 = hQacMmPGvHje54102388;     hQacMmPGvHje54102388 = hQacMmPGvHje72929596;     hQacMmPGvHje72929596 = hQacMmPGvHje18737421;     hQacMmPGvHje18737421 = hQacMmPGvHje35244976;     hQacMmPGvHje35244976 = hQacMmPGvHje28956596;     hQacMmPGvHje28956596 = hQacMmPGvHje20143083;     hQacMmPGvHje20143083 = hQacMmPGvHje92391103;     hQacMmPGvHje92391103 = hQacMmPGvHje96947341;     hQacMmPGvHje96947341 = hQacMmPGvHje83924247;     hQacMmPGvHje83924247 = hQacMmPGvHje9043372;     hQacMmPGvHje9043372 = hQacMmPGvHje89911297;     hQacMmPGvHje89911297 = hQacMmPGvHje9978403;     hQacMmPGvHje9978403 = hQacMmPGvHje30471013;     hQacMmPGvHje30471013 = hQacMmPGvHje77922674;     hQacMmPGvHje77922674 = hQacMmPGvHje76496322;     hQacMmPGvHje76496322 = hQacMmPGvHje33861862;     hQacMmPGvHje33861862 = hQacMmPGvHje15557093;     hQacMmPGvHje15557093 = hQacMmPGvHje46424233;     hQacMmPGvHje46424233 = hQacMmPGvHje46433898;     hQacMmPGvHje46433898 = hQacMmPGvHje32320594;     hQacMmPGvHje32320594 = hQacMmPGvHje39275534;     hQacMmPGvHje39275534 = hQacMmPGvHje56260270;     hQacMmPGvHje56260270 = hQacMmPGvHje28908959;     hQacMmPGvHje28908959 = hQacMmPGvHje46919780;     hQacMmPGvHje46919780 = hQacMmPGvHje83231977;     hQacMmPGvHje83231977 = hQacMmPGvHje97012169;     hQacMmPGvHje97012169 = hQacMmPGvHje50948225;     hQacMmPGvHje50948225 = hQacMmPGvHje64698095;     hQacMmPGvHje64698095 = hQacMmPGvHje75229218;     hQacMmPGvHje75229218 = hQacMmPGvHje99550850;     hQacMmPGvHje99550850 = hQacMmPGvHje24764122;     hQacMmPGvHje24764122 = hQacMmPGvHje11299046;     hQacMmPGvHje11299046 = hQacMmPGvHje15004236;     hQacMmPGvHje15004236 = hQacMmPGvHje77121513;     hQacMmPGvHje77121513 = hQacMmPGvHje74594785;     hQacMmPGvHje74594785 = hQacMmPGvHje36542950;     hQacMmPGvHje36542950 = hQacMmPGvHje34779416;     hQacMmPGvHje34779416 = hQacMmPGvHje8813687;     hQacMmPGvHje8813687 = hQacMmPGvHje37941233;     hQacMmPGvHje37941233 = hQacMmPGvHje79831821;     hQacMmPGvHje79831821 = hQacMmPGvHje48944534;     hQacMmPGvHje48944534 = hQacMmPGvHje64551296;     hQacMmPGvHje64551296 = hQacMmPGvHje23281278;     hQacMmPGvHje23281278 = hQacMmPGvHje1930573;     hQacMmPGvHje1930573 = hQacMmPGvHje34969281;     hQacMmPGvHje34969281 = hQacMmPGvHje11769347;     hQacMmPGvHje11769347 = hQacMmPGvHje70776371;     hQacMmPGvHje70776371 = hQacMmPGvHje39533319;     hQacMmPGvHje39533319 = hQacMmPGvHje61452548;     hQacMmPGvHje61452548 = hQacMmPGvHje88102768;     hQacMmPGvHje88102768 = hQacMmPGvHje11222687;     hQacMmPGvHje11222687 = hQacMmPGvHje22199377;     hQacMmPGvHje22199377 = hQacMmPGvHje60578619;     hQacMmPGvHje60578619 = hQacMmPGvHje68293256;     hQacMmPGvHje68293256 = hQacMmPGvHje52321300;     hQacMmPGvHje52321300 = hQacMmPGvHje97842117;     hQacMmPGvHje97842117 = hQacMmPGvHje44020637;     hQacMmPGvHje44020637 = hQacMmPGvHje71817640;     hQacMmPGvHje71817640 = hQacMmPGvHje52012998;     hQacMmPGvHje52012998 = hQacMmPGvHje31944427;     hQacMmPGvHje31944427 = hQacMmPGvHje69194858;     hQacMmPGvHje69194858 = hQacMmPGvHje27693009;     hQacMmPGvHje27693009 = hQacMmPGvHje21718123;     hQacMmPGvHje21718123 = hQacMmPGvHje84373396;     hQacMmPGvHje84373396 = hQacMmPGvHje84279249;     hQacMmPGvHje84279249 = hQacMmPGvHje78612252;     hQacMmPGvHje78612252 = hQacMmPGvHje94974166;     hQacMmPGvHje94974166 = hQacMmPGvHje53349500;     hQacMmPGvHje53349500 = hQacMmPGvHje3327890;     hQacMmPGvHje3327890 = hQacMmPGvHje39953372;     hQacMmPGvHje39953372 = hQacMmPGvHje99082446;     hQacMmPGvHje99082446 = hQacMmPGvHje6743407;     hQacMmPGvHje6743407 = hQacMmPGvHje8483001;     hQacMmPGvHje8483001 = hQacMmPGvHje66602076;     hQacMmPGvHje66602076 = hQacMmPGvHje83376060;     hQacMmPGvHje83376060 = hQacMmPGvHje74724238;     hQacMmPGvHje74724238 = hQacMmPGvHje32978993;     hQacMmPGvHje32978993 = hQacMmPGvHje26978387;     hQacMmPGvHje26978387 = hQacMmPGvHje11950499;     hQacMmPGvHje11950499 = hQacMmPGvHje71462631;     hQacMmPGvHje71462631 = hQacMmPGvHje26235798;     hQacMmPGvHje26235798 = hQacMmPGvHje11414906;     hQacMmPGvHje11414906 = hQacMmPGvHje3245547;     hQacMmPGvHje3245547 = hQacMmPGvHje87126450;     hQacMmPGvHje87126450 = hQacMmPGvHje88328164;     hQacMmPGvHje88328164 = hQacMmPGvHje2564746;     hQacMmPGvHje2564746 = hQacMmPGvHje50720426;     hQacMmPGvHje50720426 = hQacMmPGvHje46710979;     hQacMmPGvHje46710979 = hQacMmPGvHje24800213;     hQacMmPGvHje24800213 = hQacMmPGvHje76752667;     hQacMmPGvHje76752667 = hQacMmPGvHje92522312;     hQacMmPGvHje92522312 = hQacMmPGvHje62961775;     hQacMmPGvHje62961775 = hQacMmPGvHje56800688;     hQacMmPGvHje56800688 = hQacMmPGvHje37948870;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xCSeaFMjTOWhDx13639154() {     long mDymZaAtMURl97544966 = -62791508;    long mDymZaAtMURl23470480 = -693148789;    long mDymZaAtMURl63781166 = -840374147;    long mDymZaAtMURl64499368 = -301445971;    long mDymZaAtMURl18305744 = -472520336;    long mDymZaAtMURl98290971 = -664095117;    long mDymZaAtMURl88955317 = -809790264;    long mDymZaAtMURl4927672 = -69464395;    long mDymZaAtMURl86743040 = -240976911;    long mDymZaAtMURl1761936 = -542999130;    long mDymZaAtMURl60539907 = -65051504;    long mDymZaAtMURl63627798 = -115797707;    long mDymZaAtMURl90897645 = -856906439;    long mDymZaAtMURl50764942 = -753278204;    long mDymZaAtMURl94255146 = -758784543;    long mDymZaAtMURl80678501 = -971283735;    long mDymZaAtMURl45004475 = -74648596;    long mDymZaAtMURl54579628 = -655841734;    long mDymZaAtMURl90420605 = -951654873;    long mDymZaAtMURl10388123 = 96129899;    long mDymZaAtMURl58383793 = 53033218;    long mDymZaAtMURl44985920 = -829606963;    long mDymZaAtMURl26053687 = -128715598;    long mDymZaAtMURl80287331 = -295416159;    long mDymZaAtMURl22402238 = -75629191;    long mDymZaAtMURl40848805 = -78119920;    long mDymZaAtMURl45660664 = -550620455;    long mDymZaAtMURl4386703 = -214571508;    long mDymZaAtMURl6044614 = -258697554;    long mDymZaAtMURl67382426 = -732941091;    long mDymZaAtMURl71834098 = -252891881;    long mDymZaAtMURl25997238 = -895476340;    long mDymZaAtMURl46094208 = -582619494;    long mDymZaAtMURl33472667 = 47485967;    long mDymZaAtMURl69635456 = -620861854;    long mDymZaAtMURl53819115 = -696040342;    long mDymZaAtMURl90182528 = -609408747;    long mDymZaAtMURl23124460 = -593650679;    long mDymZaAtMURl30316989 = -783924287;    long mDymZaAtMURl87829890 = -71283253;    long mDymZaAtMURl35339327 = -857133430;    long mDymZaAtMURl44673966 = -403599462;    long mDymZaAtMURl77422192 = -636546640;    long mDymZaAtMURl9018921 = -596610505;    long mDymZaAtMURl9802002 = -647107991;    long mDymZaAtMURl2734362 = -163776752;    long mDymZaAtMURl85320543 = 30482063;    long mDymZaAtMURl95640927 = -355421173;    long mDymZaAtMURl3940944 = -659754911;    long mDymZaAtMURl38448670 = -641520845;    long mDymZaAtMURl52416823 = -266873565;    long mDymZaAtMURl41554434 = -840458288;    long mDymZaAtMURl87184861 = -409667775;    long mDymZaAtMURl44050894 = -126127980;    long mDymZaAtMURl55255361 = -125180562;    long mDymZaAtMURl52559046 = -233184545;    long mDymZaAtMURl97416792 = -464433191;    long mDymZaAtMURl83493835 = -444957989;    long mDymZaAtMURl42097131 = -125816781;    long mDymZaAtMURl77456939 = -294400416;    long mDymZaAtMURl52630307 = -13474663;    long mDymZaAtMURl84568614 = -495218756;    long mDymZaAtMURl98883058 = -810766841;    long mDymZaAtMURl19360615 = -508035821;    long mDymZaAtMURl29927837 = -190107249;    long mDymZaAtMURl34542670 = -169575165;    long mDymZaAtMURl17533590 = -533178213;    long mDymZaAtMURl57424979 = -804392407;    long mDymZaAtMURl81129486 = -32416350;    long mDymZaAtMURl40436032 = 37255799;    long mDymZaAtMURl90495973 = -261874989;    long mDymZaAtMURl21880016 = -480997918;    long mDymZaAtMURl24262640 = -871917447;    long mDymZaAtMURl2590716 = -780371620;    long mDymZaAtMURl75048795 = -46736672;    long mDymZaAtMURl13709828 = -543367321;    long mDymZaAtMURl67563728 = -93060323;    long mDymZaAtMURl17034766 = -532105094;    long mDymZaAtMURl70485329 = -648308168;    long mDymZaAtMURl19667877 = -911852439;    long mDymZaAtMURl55528261 = -8601984;    long mDymZaAtMURl50019737 = -95199283;    long mDymZaAtMURl445760 = -554816597;    long mDymZaAtMURl67595943 = -617176710;    long mDymZaAtMURl14965603 = -366067526;    long mDymZaAtMURl30279664 = -412433594;    long mDymZaAtMURl38812377 = -385808566;    long mDymZaAtMURl2043314 = -356491515;    long mDymZaAtMURl78217306 = -827333471;    long mDymZaAtMURl17076410 = -287677310;    long mDymZaAtMURl56402322 = -131607151;    long mDymZaAtMURl6688694 = -64450758;    long mDymZaAtMURl81027329 = -367833899;    long mDymZaAtMURl52860050 = -389523871;    long mDymZaAtMURl35199584 = 42191409;    long mDymZaAtMURl50770713 = -261914674;    long mDymZaAtMURl45790907 = -592832621;    long mDymZaAtMURl58061577 = -28510820;    long mDymZaAtMURl79091083 = -306503256;    long mDymZaAtMURl75259332 = -62791508;     mDymZaAtMURl97544966 = mDymZaAtMURl23470480;     mDymZaAtMURl23470480 = mDymZaAtMURl63781166;     mDymZaAtMURl63781166 = mDymZaAtMURl64499368;     mDymZaAtMURl64499368 = mDymZaAtMURl18305744;     mDymZaAtMURl18305744 = mDymZaAtMURl98290971;     mDymZaAtMURl98290971 = mDymZaAtMURl88955317;     mDymZaAtMURl88955317 = mDymZaAtMURl4927672;     mDymZaAtMURl4927672 = mDymZaAtMURl86743040;     mDymZaAtMURl86743040 = mDymZaAtMURl1761936;     mDymZaAtMURl1761936 = mDymZaAtMURl60539907;     mDymZaAtMURl60539907 = mDymZaAtMURl63627798;     mDymZaAtMURl63627798 = mDymZaAtMURl90897645;     mDymZaAtMURl90897645 = mDymZaAtMURl50764942;     mDymZaAtMURl50764942 = mDymZaAtMURl94255146;     mDymZaAtMURl94255146 = mDymZaAtMURl80678501;     mDymZaAtMURl80678501 = mDymZaAtMURl45004475;     mDymZaAtMURl45004475 = mDymZaAtMURl54579628;     mDymZaAtMURl54579628 = mDymZaAtMURl90420605;     mDymZaAtMURl90420605 = mDymZaAtMURl10388123;     mDymZaAtMURl10388123 = mDymZaAtMURl58383793;     mDymZaAtMURl58383793 = mDymZaAtMURl44985920;     mDymZaAtMURl44985920 = mDymZaAtMURl26053687;     mDymZaAtMURl26053687 = mDymZaAtMURl80287331;     mDymZaAtMURl80287331 = mDymZaAtMURl22402238;     mDymZaAtMURl22402238 = mDymZaAtMURl40848805;     mDymZaAtMURl40848805 = mDymZaAtMURl45660664;     mDymZaAtMURl45660664 = mDymZaAtMURl4386703;     mDymZaAtMURl4386703 = mDymZaAtMURl6044614;     mDymZaAtMURl6044614 = mDymZaAtMURl67382426;     mDymZaAtMURl67382426 = mDymZaAtMURl71834098;     mDymZaAtMURl71834098 = mDymZaAtMURl25997238;     mDymZaAtMURl25997238 = mDymZaAtMURl46094208;     mDymZaAtMURl46094208 = mDymZaAtMURl33472667;     mDymZaAtMURl33472667 = mDymZaAtMURl69635456;     mDymZaAtMURl69635456 = mDymZaAtMURl53819115;     mDymZaAtMURl53819115 = mDymZaAtMURl90182528;     mDymZaAtMURl90182528 = mDymZaAtMURl23124460;     mDymZaAtMURl23124460 = mDymZaAtMURl30316989;     mDymZaAtMURl30316989 = mDymZaAtMURl87829890;     mDymZaAtMURl87829890 = mDymZaAtMURl35339327;     mDymZaAtMURl35339327 = mDymZaAtMURl44673966;     mDymZaAtMURl44673966 = mDymZaAtMURl77422192;     mDymZaAtMURl77422192 = mDymZaAtMURl9018921;     mDymZaAtMURl9018921 = mDymZaAtMURl9802002;     mDymZaAtMURl9802002 = mDymZaAtMURl2734362;     mDymZaAtMURl2734362 = mDymZaAtMURl85320543;     mDymZaAtMURl85320543 = mDymZaAtMURl95640927;     mDymZaAtMURl95640927 = mDymZaAtMURl3940944;     mDymZaAtMURl3940944 = mDymZaAtMURl38448670;     mDymZaAtMURl38448670 = mDymZaAtMURl52416823;     mDymZaAtMURl52416823 = mDymZaAtMURl41554434;     mDymZaAtMURl41554434 = mDymZaAtMURl87184861;     mDymZaAtMURl87184861 = mDymZaAtMURl44050894;     mDymZaAtMURl44050894 = mDymZaAtMURl55255361;     mDymZaAtMURl55255361 = mDymZaAtMURl52559046;     mDymZaAtMURl52559046 = mDymZaAtMURl97416792;     mDymZaAtMURl97416792 = mDymZaAtMURl83493835;     mDymZaAtMURl83493835 = mDymZaAtMURl42097131;     mDymZaAtMURl42097131 = mDymZaAtMURl77456939;     mDymZaAtMURl77456939 = mDymZaAtMURl52630307;     mDymZaAtMURl52630307 = mDymZaAtMURl84568614;     mDymZaAtMURl84568614 = mDymZaAtMURl98883058;     mDymZaAtMURl98883058 = mDymZaAtMURl19360615;     mDymZaAtMURl19360615 = mDymZaAtMURl29927837;     mDymZaAtMURl29927837 = mDymZaAtMURl34542670;     mDymZaAtMURl34542670 = mDymZaAtMURl17533590;     mDymZaAtMURl17533590 = mDymZaAtMURl57424979;     mDymZaAtMURl57424979 = mDymZaAtMURl81129486;     mDymZaAtMURl81129486 = mDymZaAtMURl40436032;     mDymZaAtMURl40436032 = mDymZaAtMURl90495973;     mDymZaAtMURl90495973 = mDymZaAtMURl21880016;     mDymZaAtMURl21880016 = mDymZaAtMURl24262640;     mDymZaAtMURl24262640 = mDymZaAtMURl2590716;     mDymZaAtMURl2590716 = mDymZaAtMURl75048795;     mDymZaAtMURl75048795 = mDymZaAtMURl13709828;     mDymZaAtMURl13709828 = mDymZaAtMURl67563728;     mDymZaAtMURl67563728 = mDymZaAtMURl17034766;     mDymZaAtMURl17034766 = mDymZaAtMURl70485329;     mDymZaAtMURl70485329 = mDymZaAtMURl19667877;     mDymZaAtMURl19667877 = mDymZaAtMURl55528261;     mDymZaAtMURl55528261 = mDymZaAtMURl50019737;     mDymZaAtMURl50019737 = mDymZaAtMURl445760;     mDymZaAtMURl445760 = mDymZaAtMURl67595943;     mDymZaAtMURl67595943 = mDymZaAtMURl14965603;     mDymZaAtMURl14965603 = mDymZaAtMURl30279664;     mDymZaAtMURl30279664 = mDymZaAtMURl38812377;     mDymZaAtMURl38812377 = mDymZaAtMURl2043314;     mDymZaAtMURl2043314 = mDymZaAtMURl78217306;     mDymZaAtMURl78217306 = mDymZaAtMURl17076410;     mDymZaAtMURl17076410 = mDymZaAtMURl56402322;     mDymZaAtMURl56402322 = mDymZaAtMURl6688694;     mDymZaAtMURl6688694 = mDymZaAtMURl81027329;     mDymZaAtMURl81027329 = mDymZaAtMURl52860050;     mDymZaAtMURl52860050 = mDymZaAtMURl35199584;     mDymZaAtMURl35199584 = mDymZaAtMURl50770713;     mDymZaAtMURl50770713 = mDymZaAtMURl45790907;     mDymZaAtMURl45790907 = mDymZaAtMURl58061577;     mDymZaAtMURl58061577 = mDymZaAtMURl79091083;     mDymZaAtMURl79091083 = mDymZaAtMURl75259332;     mDymZaAtMURl75259332 = mDymZaAtMURl97544966;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pFhSRFqFrTHLVm26184343() {     long gFtrsLCZNfCV17013137 = -475922720;    long gFtrsLCZNfCV76494343 = -139026785;    long gFtrsLCZNfCV80618158 = -492002762;    long gFtrsLCZNfCV83146517 = -118020234;    long gFtrsLCZNfCV18752260 = 1207248;    long gFtrsLCZNfCV23883046 = -554579885;    long gFtrsLCZNfCV33787196 = -153096493;    long gFtrsLCZNfCV70177905 = -163272361;    long gFtrsLCZNfCV47429837 = -969168290;    long gFtrsLCZNfCV79690658 = -548585176;    long gFtrsLCZNfCV14763171 = -498041804;    long gFtrsLCZNfCV67122411 = -115100411;    long gFtrsLCZNfCV81269305 = -181263716;    long gFtrsLCZNfCV59180982 = -195563930;    long gFtrsLCZNfCV54781608 = 43131666;    long gFtrsLCZNfCV46894151 = -334475669;    long gFtrsLCZNfCV50966588 = -246423278;    long gFtrsLCZNfCV78642380 = -406596452;    long gFtrsLCZNfCV90055484 = -228859634;    long gFtrsLCZNfCV90999424 = -621406558;    long gFtrsLCZNfCV70839865 = -553179107;    long gFtrsLCZNfCV59968003 = -241410176;    long gFtrsLCZNfCV94226692 = -426290216;    long gFtrsLCZNfCV98009000 = 68039850;    long gFtrsLCZNfCV33605727 = -369929300;    long gFtrsLCZNfCV45616266 = -863915139;    long gFtrsLCZNfCV29588796 = -215771387;    long gFtrsLCZNfCV55178378 = -378304787;    long gFtrsLCZNfCV47789570 = -272608700;    long gFtrsLCZNfCV52089280 = -824379785;    long gFtrsLCZNfCV1638184 = -118217974;    long gFtrsLCZNfCV65576548 = -359825358;    long gFtrsLCZNfCV57570311 = -37827261;    long gFtrsLCZNfCV92229174 = -257117239;    long gFtrsLCZNfCV9565792 = -683564660;    long gFtrsLCZNfCV89885052 = -999608951;    long gFtrsLCZNfCV58565979 = -36284821;    long gFtrsLCZNfCV64606934 = -670859495;    long gFtrsLCZNfCV97630313 = -148339112;    long gFtrsLCZNfCV9111627 = -67814350;    long gFtrsLCZNfCV76821384 = -266919726;    long gFtrsLCZNfCV56533099 = -642495688;    long gFtrsLCZNfCV48555433 = -584348438;    long gFtrsLCZNfCV92404459 = 54316834;    long gFtrsLCZNfCV89830413 = -924230954;    long gFtrsLCZNfCV57195489 = -701108173;    long gFtrsLCZNfCV67310423 = -983211260;    long gFtrsLCZNfCV95796757 = -538708487;    long gFtrsLCZNfCV45076535 = -673694150;    long gFtrsLCZNfCV79347012 = -402533190;    long gFtrsLCZNfCV26852392 = -673238496;    long gFtrsLCZNfCV58003294 = -117811147;    long gFtrsLCZNfCV57010007 = -85776736;    long gFtrsLCZNfCV16980923 = -120721616;    long gFtrsLCZNfCV55344478 = -999739197;    long gFtrsLCZNfCV57045134 = -134512544;    long gFtrsLCZNfCV82267650 = -712736569;    long gFtrsLCZNfCV82609158 = -460042612;    long gFtrsLCZNfCV49540790 = -748090934;    long gFtrsLCZNfCV73135994 = -134877614;    long gFtrsLCZNfCV94294249 = -238808499;    long gFtrsLCZNfCV78608817 = -774791707;    long gFtrsLCZNfCV22388335 = -890663661;    long gFtrsLCZNfCV95340557 = -44788505;    long gFtrsLCZNfCV78052475 = -330367202;    long gFtrsLCZNfCV49186622 = -38216447;    long gFtrsLCZNfCV9552100 = 22726849;    long gFtrsLCZNfCV89040131 = -924146477;    long gFtrsLCZNfCV49615190 = -511999270;    long gFtrsLCZNfCV64896556 = 42740616;    long gFtrsLCZNfCV88328171 = -198190848;    long gFtrsLCZNfCV86359654 = -575563784;    long gFtrsLCZNfCV81012066 = -158257340;    long gFtrsLCZNfCV80943858 = -61045284;    long gFtrsLCZNfCV14178041 = -254486832;    long gFtrsLCZNfCV14306767 = -910683420;    long gFtrsLCZNfCV11412571 = -657061739;    long gFtrsLCZNfCV1822234 = -380607051;    long gFtrsLCZNfCV8178588 = -7729197;    long gFtrsLCZNfCV76410238 = -668821127;    long gFtrsLCZNfCV78305842 = -880703879;    long gFtrsLCZNfCV33792038 = -677062900;    long gFtrsLCZNfCV10101843 = -704610637;    long gFtrsLCZNfCV68442558 = -870075510;    long gFtrsLCZNfCV25236888 = -51141289;    long gFtrsLCZNfCV43634889 = 99593173;    long gFtrsLCZNfCV8566542 = -174048623;    long gFtrsLCZNfCV40589389 = -917105645;    long gFtrsLCZNfCV36884696 = -257378043;    long gFtrsLCZNfCV52520658 = -449052117;    long gFtrsLCZNfCV7617402 = -186872382;    long gFtrsLCZNfCV75956820 = -576242210;    long gFtrsLCZNfCV15066144 = -922768561;    long gFtrsLCZNfCV24494320 = 86538501;    long gFtrsLCZNfCV14817377 = -829005851;    long gFtrsLCZNfCV98212566 = -492128019;    long gFtrsLCZNfCV34144764 = -751832027;    long gFtrsLCZNfCV53214876 = -439559933;    long gFtrsLCZNfCV14351985 = -615315964;    long gFtrsLCZNfCV40643791 = -475922720;     gFtrsLCZNfCV17013137 = gFtrsLCZNfCV76494343;     gFtrsLCZNfCV76494343 = gFtrsLCZNfCV80618158;     gFtrsLCZNfCV80618158 = gFtrsLCZNfCV83146517;     gFtrsLCZNfCV83146517 = gFtrsLCZNfCV18752260;     gFtrsLCZNfCV18752260 = gFtrsLCZNfCV23883046;     gFtrsLCZNfCV23883046 = gFtrsLCZNfCV33787196;     gFtrsLCZNfCV33787196 = gFtrsLCZNfCV70177905;     gFtrsLCZNfCV70177905 = gFtrsLCZNfCV47429837;     gFtrsLCZNfCV47429837 = gFtrsLCZNfCV79690658;     gFtrsLCZNfCV79690658 = gFtrsLCZNfCV14763171;     gFtrsLCZNfCV14763171 = gFtrsLCZNfCV67122411;     gFtrsLCZNfCV67122411 = gFtrsLCZNfCV81269305;     gFtrsLCZNfCV81269305 = gFtrsLCZNfCV59180982;     gFtrsLCZNfCV59180982 = gFtrsLCZNfCV54781608;     gFtrsLCZNfCV54781608 = gFtrsLCZNfCV46894151;     gFtrsLCZNfCV46894151 = gFtrsLCZNfCV50966588;     gFtrsLCZNfCV50966588 = gFtrsLCZNfCV78642380;     gFtrsLCZNfCV78642380 = gFtrsLCZNfCV90055484;     gFtrsLCZNfCV90055484 = gFtrsLCZNfCV90999424;     gFtrsLCZNfCV90999424 = gFtrsLCZNfCV70839865;     gFtrsLCZNfCV70839865 = gFtrsLCZNfCV59968003;     gFtrsLCZNfCV59968003 = gFtrsLCZNfCV94226692;     gFtrsLCZNfCV94226692 = gFtrsLCZNfCV98009000;     gFtrsLCZNfCV98009000 = gFtrsLCZNfCV33605727;     gFtrsLCZNfCV33605727 = gFtrsLCZNfCV45616266;     gFtrsLCZNfCV45616266 = gFtrsLCZNfCV29588796;     gFtrsLCZNfCV29588796 = gFtrsLCZNfCV55178378;     gFtrsLCZNfCV55178378 = gFtrsLCZNfCV47789570;     gFtrsLCZNfCV47789570 = gFtrsLCZNfCV52089280;     gFtrsLCZNfCV52089280 = gFtrsLCZNfCV1638184;     gFtrsLCZNfCV1638184 = gFtrsLCZNfCV65576548;     gFtrsLCZNfCV65576548 = gFtrsLCZNfCV57570311;     gFtrsLCZNfCV57570311 = gFtrsLCZNfCV92229174;     gFtrsLCZNfCV92229174 = gFtrsLCZNfCV9565792;     gFtrsLCZNfCV9565792 = gFtrsLCZNfCV89885052;     gFtrsLCZNfCV89885052 = gFtrsLCZNfCV58565979;     gFtrsLCZNfCV58565979 = gFtrsLCZNfCV64606934;     gFtrsLCZNfCV64606934 = gFtrsLCZNfCV97630313;     gFtrsLCZNfCV97630313 = gFtrsLCZNfCV9111627;     gFtrsLCZNfCV9111627 = gFtrsLCZNfCV76821384;     gFtrsLCZNfCV76821384 = gFtrsLCZNfCV56533099;     gFtrsLCZNfCV56533099 = gFtrsLCZNfCV48555433;     gFtrsLCZNfCV48555433 = gFtrsLCZNfCV92404459;     gFtrsLCZNfCV92404459 = gFtrsLCZNfCV89830413;     gFtrsLCZNfCV89830413 = gFtrsLCZNfCV57195489;     gFtrsLCZNfCV57195489 = gFtrsLCZNfCV67310423;     gFtrsLCZNfCV67310423 = gFtrsLCZNfCV95796757;     gFtrsLCZNfCV95796757 = gFtrsLCZNfCV45076535;     gFtrsLCZNfCV45076535 = gFtrsLCZNfCV79347012;     gFtrsLCZNfCV79347012 = gFtrsLCZNfCV26852392;     gFtrsLCZNfCV26852392 = gFtrsLCZNfCV58003294;     gFtrsLCZNfCV58003294 = gFtrsLCZNfCV57010007;     gFtrsLCZNfCV57010007 = gFtrsLCZNfCV16980923;     gFtrsLCZNfCV16980923 = gFtrsLCZNfCV55344478;     gFtrsLCZNfCV55344478 = gFtrsLCZNfCV57045134;     gFtrsLCZNfCV57045134 = gFtrsLCZNfCV82267650;     gFtrsLCZNfCV82267650 = gFtrsLCZNfCV82609158;     gFtrsLCZNfCV82609158 = gFtrsLCZNfCV49540790;     gFtrsLCZNfCV49540790 = gFtrsLCZNfCV73135994;     gFtrsLCZNfCV73135994 = gFtrsLCZNfCV94294249;     gFtrsLCZNfCV94294249 = gFtrsLCZNfCV78608817;     gFtrsLCZNfCV78608817 = gFtrsLCZNfCV22388335;     gFtrsLCZNfCV22388335 = gFtrsLCZNfCV95340557;     gFtrsLCZNfCV95340557 = gFtrsLCZNfCV78052475;     gFtrsLCZNfCV78052475 = gFtrsLCZNfCV49186622;     gFtrsLCZNfCV49186622 = gFtrsLCZNfCV9552100;     gFtrsLCZNfCV9552100 = gFtrsLCZNfCV89040131;     gFtrsLCZNfCV89040131 = gFtrsLCZNfCV49615190;     gFtrsLCZNfCV49615190 = gFtrsLCZNfCV64896556;     gFtrsLCZNfCV64896556 = gFtrsLCZNfCV88328171;     gFtrsLCZNfCV88328171 = gFtrsLCZNfCV86359654;     gFtrsLCZNfCV86359654 = gFtrsLCZNfCV81012066;     gFtrsLCZNfCV81012066 = gFtrsLCZNfCV80943858;     gFtrsLCZNfCV80943858 = gFtrsLCZNfCV14178041;     gFtrsLCZNfCV14178041 = gFtrsLCZNfCV14306767;     gFtrsLCZNfCV14306767 = gFtrsLCZNfCV11412571;     gFtrsLCZNfCV11412571 = gFtrsLCZNfCV1822234;     gFtrsLCZNfCV1822234 = gFtrsLCZNfCV8178588;     gFtrsLCZNfCV8178588 = gFtrsLCZNfCV76410238;     gFtrsLCZNfCV76410238 = gFtrsLCZNfCV78305842;     gFtrsLCZNfCV78305842 = gFtrsLCZNfCV33792038;     gFtrsLCZNfCV33792038 = gFtrsLCZNfCV10101843;     gFtrsLCZNfCV10101843 = gFtrsLCZNfCV68442558;     gFtrsLCZNfCV68442558 = gFtrsLCZNfCV25236888;     gFtrsLCZNfCV25236888 = gFtrsLCZNfCV43634889;     gFtrsLCZNfCV43634889 = gFtrsLCZNfCV8566542;     gFtrsLCZNfCV8566542 = gFtrsLCZNfCV40589389;     gFtrsLCZNfCV40589389 = gFtrsLCZNfCV36884696;     gFtrsLCZNfCV36884696 = gFtrsLCZNfCV52520658;     gFtrsLCZNfCV52520658 = gFtrsLCZNfCV7617402;     gFtrsLCZNfCV7617402 = gFtrsLCZNfCV75956820;     gFtrsLCZNfCV75956820 = gFtrsLCZNfCV15066144;     gFtrsLCZNfCV15066144 = gFtrsLCZNfCV24494320;     gFtrsLCZNfCV24494320 = gFtrsLCZNfCV14817377;     gFtrsLCZNfCV14817377 = gFtrsLCZNfCV98212566;     gFtrsLCZNfCV98212566 = gFtrsLCZNfCV34144764;     gFtrsLCZNfCV34144764 = gFtrsLCZNfCV53214876;     gFtrsLCZNfCV53214876 = gFtrsLCZNfCV14351985;     gFtrsLCZNfCV14351985 = gFtrsLCZNfCV40643791;     gFtrsLCZNfCV40643791 = gFtrsLCZNfCV17013137;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pYipQAHulzGEiI86487000() {     long RQmRKuCrcLRU7139446 = -534678921;    long RQmRKuCrcLRU59619408 = -513952955;    long RQmRKuCrcLRU76110857 = -628797223;    long RQmRKuCrcLRU56645092 = -304192056;    long RQmRKuCrcLRU31808995 = 59883806;    long RQmRKuCrcLRU4669450 = -447212993;    long RQmRKuCrcLRU28450634 = -890641966;    long RQmRKuCrcLRU23056469 = -899720100;    long RQmRKuCrcLRU71241525 = -977060928;    long RQmRKuCrcLRU83946328 = -118459701;    long RQmRKuCrcLRU90914990 = 93538038;    long RQmRKuCrcLRU1871919 = -694688547;    long RQmRKuCrcLRU19615438 = -493499576;    long RQmRKuCrcLRU97599835 = -193724814;    long RQmRKuCrcLRU52855980 = -441989277;    long RQmRKuCrcLRU71073892 = -34855539;    long RQmRKuCrcLRU94928768 = -507768519;    long RQmRKuCrcLRU99998092 = -849445744;    long RQmRKuCrcLRU50969876 = -695270070;    long RQmRKuCrcLRU58323672 = -169284867;    long RQmRKuCrcLRU58762267 = -257604200;    long RQmRKuCrcLRU58049585 = -574506811;    long RQmRKuCrcLRU27465111 = -832750137;    long RQmRKuCrcLRU5930098 = -379984526;    long RQmRKuCrcLRU80490915 = 86559756;    long RQmRKuCrcLRU64407231 = -739788874;    long RQmRKuCrcLRU51556130 = 24699619;    long RQmRKuCrcLRU78348753 = -438194845;    long RQmRKuCrcLRU8998568 = 65192252;    long RQmRKuCrcLRU99878359 = -698782176;    long RQmRKuCrcLRU5101587 = -444884518;    long RQmRKuCrcLRU64943462 = -860649778;    long RQmRKuCrcLRU66539352 = -338052420;    long RQmRKuCrcLRU16067819 = -248568397;    long RQmRKuCrcLRU45162327 = -333900321;    long RQmRKuCrcLRU43116059 = -202638361;    long RQmRKuCrcLRU58799548 = -652100726;    long RQmRKuCrcLRU88964217 = -536918738;    long RQmRKuCrcLRU8163331 = -955801158;    long RQmRKuCrcLRU53623768 = 27477877;    long RQmRKuCrcLRU90521057 = 27218999;    long RQmRKuCrcLRU11177562 = -456988901;    long RQmRKuCrcLRU8372275 = 40225967;    long RQmRKuCrcLRU23066401 = -909766354;    long RQmRKuCrcLRU81794830 = 63259090;    long RQmRKuCrcLRU77634482 = -84732079;    long RQmRKuCrcLRU47733714 = -531693760;    long RQmRKuCrcLRU86183216 = -565364740;    long RQmRKuCrcLRU72995189 = -9633496;    long RQmRKuCrcLRU8627418 = -859529528;    long RQmRKuCrcLRU56217916 = 52379459;    long RQmRKuCrcLRU1776402 = -82237980;    long RQmRKuCrcLRU6462463 = -897629731;    long RQmRKuCrcLRU69887985 = -244276898;    long RQmRKuCrcLRU27724733 = -28339468;    long RQmRKuCrcLRU49089860 = -960172110;    long RQmRKuCrcLRU32154297 = -681202818;    long RQmRKuCrcLRU70180760 = -148812698;    long RQmRKuCrcLRU76154177 = -290751812;    long RQmRKuCrcLRU67401764 = -200327321;    long RQmRKuCrcLRU53113319 = -371912613;    long RQmRKuCrcLRU50101881 = -352447122;    long RQmRKuCrcLRU14057901 = -864912352;    long RQmRKuCrcLRU71363165 = -178278752;    long RQmRKuCrcLRU78844742 = -673575184;    long RQmRKuCrcLRU25971528 = -45812185;    long RQmRKuCrcLRU35332566 = -256636127;    long RQmRKuCrcLRU3547619 = -144931180;    long RQmRKuCrcLRU52437509 = -859824494;    long RQmRKuCrcLRU9739922 = -139350917;    long RQmRKuCrcLRU12274345 = -382754814;    long RQmRKuCrcLRU5964552 = -970849781;    long RQmRKuCrcLRU91834762 = -893644587;    long RQmRKuCrcLRU97346107 = -622747947;    long RQmRKuCrcLRU67802615 = -96503866;    long RQmRKuCrcLRU47584705 = -800615299;    long RQmRKuCrcLRU49677311 = -514732779;    long RQmRKuCrcLRU4398711 = -922983784;    long RQmRKuCrcLRU24135267 = -343243617;    long RQmRKuCrcLRU2856433 = -828708166;    long RQmRKuCrcLRU16673517 = -108095114;    long RQmRKuCrcLRU65372914 = -409935641;    long RQmRKuCrcLRU5353565 = -328561349;    long RQmRKuCrcLRU371150 = -75278221;    long RQmRKuCrcLRU43660444 = -651161636;    long RQmRKuCrcLRU3325185 = -262646538;    long RQmRKuCrcLRU58481000 = -963020047;    long RQmRKuCrcLRU96651367 = 6224477;    long RQmRKuCrcLRU88343086 = -120228929;    long RQmRKuCrcLRU96072466 = -373728212;    long RQmRKuCrcLRU10961762 = -521435543;    long RQmRKuCrcLRU88618787 = -403288029;    long RQmRKuCrcLRU12810041 = -146166927;    long RQmRKuCrcLRU40761566 = -655473838;    long RQmRKuCrcLRU510449 = -600609510;    long RQmRKuCrcLRU40419177 = -620333880;    long RQmRKuCrcLRU97119661 = -592076549;    long RQmRKuCrcLRU37009109 = -781495282;    long RQmRKuCrcLRU44221658 = -136191171;    long RQmRKuCrcLRU55823303 = -534678921;     RQmRKuCrcLRU7139446 = RQmRKuCrcLRU59619408;     RQmRKuCrcLRU59619408 = RQmRKuCrcLRU76110857;     RQmRKuCrcLRU76110857 = RQmRKuCrcLRU56645092;     RQmRKuCrcLRU56645092 = RQmRKuCrcLRU31808995;     RQmRKuCrcLRU31808995 = RQmRKuCrcLRU4669450;     RQmRKuCrcLRU4669450 = RQmRKuCrcLRU28450634;     RQmRKuCrcLRU28450634 = RQmRKuCrcLRU23056469;     RQmRKuCrcLRU23056469 = RQmRKuCrcLRU71241525;     RQmRKuCrcLRU71241525 = RQmRKuCrcLRU83946328;     RQmRKuCrcLRU83946328 = RQmRKuCrcLRU90914990;     RQmRKuCrcLRU90914990 = RQmRKuCrcLRU1871919;     RQmRKuCrcLRU1871919 = RQmRKuCrcLRU19615438;     RQmRKuCrcLRU19615438 = RQmRKuCrcLRU97599835;     RQmRKuCrcLRU97599835 = RQmRKuCrcLRU52855980;     RQmRKuCrcLRU52855980 = RQmRKuCrcLRU71073892;     RQmRKuCrcLRU71073892 = RQmRKuCrcLRU94928768;     RQmRKuCrcLRU94928768 = RQmRKuCrcLRU99998092;     RQmRKuCrcLRU99998092 = RQmRKuCrcLRU50969876;     RQmRKuCrcLRU50969876 = RQmRKuCrcLRU58323672;     RQmRKuCrcLRU58323672 = RQmRKuCrcLRU58762267;     RQmRKuCrcLRU58762267 = RQmRKuCrcLRU58049585;     RQmRKuCrcLRU58049585 = RQmRKuCrcLRU27465111;     RQmRKuCrcLRU27465111 = RQmRKuCrcLRU5930098;     RQmRKuCrcLRU5930098 = RQmRKuCrcLRU80490915;     RQmRKuCrcLRU80490915 = RQmRKuCrcLRU64407231;     RQmRKuCrcLRU64407231 = RQmRKuCrcLRU51556130;     RQmRKuCrcLRU51556130 = RQmRKuCrcLRU78348753;     RQmRKuCrcLRU78348753 = RQmRKuCrcLRU8998568;     RQmRKuCrcLRU8998568 = RQmRKuCrcLRU99878359;     RQmRKuCrcLRU99878359 = RQmRKuCrcLRU5101587;     RQmRKuCrcLRU5101587 = RQmRKuCrcLRU64943462;     RQmRKuCrcLRU64943462 = RQmRKuCrcLRU66539352;     RQmRKuCrcLRU66539352 = RQmRKuCrcLRU16067819;     RQmRKuCrcLRU16067819 = RQmRKuCrcLRU45162327;     RQmRKuCrcLRU45162327 = RQmRKuCrcLRU43116059;     RQmRKuCrcLRU43116059 = RQmRKuCrcLRU58799548;     RQmRKuCrcLRU58799548 = RQmRKuCrcLRU88964217;     RQmRKuCrcLRU88964217 = RQmRKuCrcLRU8163331;     RQmRKuCrcLRU8163331 = RQmRKuCrcLRU53623768;     RQmRKuCrcLRU53623768 = RQmRKuCrcLRU90521057;     RQmRKuCrcLRU90521057 = RQmRKuCrcLRU11177562;     RQmRKuCrcLRU11177562 = RQmRKuCrcLRU8372275;     RQmRKuCrcLRU8372275 = RQmRKuCrcLRU23066401;     RQmRKuCrcLRU23066401 = RQmRKuCrcLRU81794830;     RQmRKuCrcLRU81794830 = RQmRKuCrcLRU77634482;     RQmRKuCrcLRU77634482 = RQmRKuCrcLRU47733714;     RQmRKuCrcLRU47733714 = RQmRKuCrcLRU86183216;     RQmRKuCrcLRU86183216 = RQmRKuCrcLRU72995189;     RQmRKuCrcLRU72995189 = RQmRKuCrcLRU8627418;     RQmRKuCrcLRU8627418 = RQmRKuCrcLRU56217916;     RQmRKuCrcLRU56217916 = RQmRKuCrcLRU1776402;     RQmRKuCrcLRU1776402 = RQmRKuCrcLRU6462463;     RQmRKuCrcLRU6462463 = RQmRKuCrcLRU69887985;     RQmRKuCrcLRU69887985 = RQmRKuCrcLRU27724733;     RQmRKuCrcLRU27724733 = RQmRKuCrcLRU49089860;     RQmRKuCrcLRU49089860 = RQmRKuCrcLRU32154297;     RQmRKuCrcLRU32154297 = RQmRKuCrcLRU70180760;     RQmRKuCrcLRU70180760 = RQmRKuCrcLRU76154177;     RQmRKuCrcLRU76154177 = RQmRKuCrcLRU67401764;     RQmRKuCrcLRU67401764 = RQmRKuCrcLRU53113319;     RQmRKuCrcLRU53113319 = RQmRKuCrcLRU50101881;     RQmRKuCrcLRU50101881 = RQmRKuCrcLRU14057901;     RQmRKuCrcLRU14057901 = RQmRKuCrcLRU71363165;     RQmRKuCrcLRU71363165 = RQmRKuCrcLRU78844742;     RQmRKuCrcLRU78844742 = RQmRKuCrcLRU25971528;     RQmRKuCrcLRU25971528 = RQmRKuCrcLRU35332566;     RQmRKuCrcLRU35332566 = RQmRKuCrcLRU3547619;     RQmRKuCrcLRU3547619 = RQmRKuCrcLRU52437509;     RQmRKuCrcLRU52437509 = RQmRKuCrcLRU9739922;     RQmRKuCrcLRU9739922 = RQmRKuCrcLRU12274345;     RQmRKuCrcLRU12274345 = RQmRKuCrcLRU5964552;     RQmRKuCrcLRU5964552 = RQmRKuCrcLRU91834762;     RQmRKuCrcLRU91834762 = RQmRKuCrcLRU97346107;     RQmRKuCrcLRU97346107 = RQmRKuCrcLRU67802615;     RQmRKuCrcLRU67802615 = RQmRKuCrcLRU47584705;     RQmRKuCrcLRU47584705 = RQmRKuCrcLRU49677311;     RQmRKuCrcLRU49677311 = RQmRKuCrcLRU4398711;     RQmRKuCrcLRU4398711 = RQmRKuCrcLRU24135267;     RQmRKuCrcLRU24135267 = RQmRKuCrcLRU2856433;     RQmRKuCrcLRU2856433 = RQmRKuCrcLRU16673517;     RQmRKuCrcLRU16673517 = RQmRKuCrcLRU65372914;     RQmRKuCrcLRU65372914 = RQmRKuCrcLRU5353565;     RQmRKuCrcLRU5353565 = RQmRKuCrcLRU371150;     RQmRKuCrcLRU371150 = RQmRKuCrcLRU43660444;     RQmRKuCrcLRU43660444 = RQmRKuCrcLRU3325185;     RQmRKuCrcLRU3325185 = RQmRKuCrcLRU58481000;     RQmRKuCrcLRU58481000 = RQmRKuCrcLRU96651367;     RQmRKuCrcLRU96651367 = RQmRKuCrcLRU88343086;     RQmRKuCrcLRU88343086 = RQmRKuCrcLRU96072466;     RQmRKuCrcLRU96072466 = RQmRKuCrcLRU10961762;     RQmRKuCrcLRU10961762 = RQmRKuCrcLRU88618787;     RQmRKuCrcLRU88618787 = RQmRKuCrcLRU12810041;     RQmRKuCrcLRU12810041 = RQmRKuCrcLRU40761566;     RQmRKuCrcLRU40761566 = RQmRKuCrcLRU510449;     RQmRKuCrcLRU510449 = RQmRKuCrcLRU40419177;     RQmRKuCrcLRU40419177 = RQmRKuCrcLRU97119661;     RQmRKuCrcLRU97119661 = RQmRKuCrcLRU37009109;     RQmRKuCrcLRU37009109 = RQmRKuCrcLRU44221658;     RQmRKuCrcLRU44221658 = RQmRKuCrcLRU55823303;     RQmRKuCrcLRU55823303 = RQmRKuCrcLRU7139446;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kQxTJOpSdgcoGh99032189() {     long atNNSpEpMMCn26607616 = -947810133;    long atNNSpEpMMCn12643272 = 40169049;    long atNNSpEpMMCn92947849 = -280425838;    long atNNSpEpMMCn75292241 = -120766319;    long atNNSpEpMMCn32255512 = -566388610;    long atNNSpEpMMCn30261524 = -337697762;    long atNNSpEpMMCn73282512 = -233948196;    long atNNSpEpMMCn88306701 = -993528065;    long atNNSpEpMMCn31928322 = -605252307;    long atNNSpEpMMCn61875052 = -124045747;    long atNNSpEpMMCn45138254 = -339452262;    long atNNSpEpMMCn5366533 = -693991251;    long atNNSpEpMMCn9987097 = -917856853;    long atNNSpEpMMCn6015877 = -736010540;    long atNNSpEpMMCn13382442 = -740073069;    long atNNSpEpMMCn37289542 = -498047473;    long atNNSpEpMMCn890882 = -679543200;    long atNNSpEpMMCn24060844 = -600200462;    long atNNSpEpMMCn50604755 = 27525170;    long atNNSpEpMMCn38934974 = -886821323;    long atNNSpEpMMCn71218339 = -863816525;    long atNNSpEpMMCn73031668 = 13689975;    long atNNSpEpMMCn95638116 = -30324756;    long atNNSpEpMMCn23651766 = -16528518;    long atNNSpEpMMCn91694404 = -207740353;    long atNNSpEpMMCn69174692 = -425584092;    long atNNSpEpMMCn35484261 = -740451312;    long atNNSpEpMMCn29140428 = -601928124;    long atNNSpEpMMCn50743525 = 51281106;    long atNNSpEpMMCn84585214 = -790220871;    long atNNSpEpMMCn34905672 = -310210610;    long atNNSpEpMMCn4522774 = -324998796;    long atNNSpEpMMCn78015456 = -893260187;    long atNNSpEpMMCn74824325 = -553171603;    long atNNSpEpMMCn85092662 = -396603127;    long atNNSpEpMMCn79181996 = -506206969;    long atNNSpEpMMCn27182999 = -78976801;    long atNNSpEpMMCn30446692 = -614127554;    long atNNSpEpMMCn75476655 = -320215983;    long atNNSpEpMMCn74905504 = 30946780;    long atNNSpEpMMCn32003114 = -482567297;    long atNNSpEpMMCn23036695 = -695885127;    long atNNSpEpMMCn79505515 = 92424169;    long atNNSpEpMMCn6451939 = -258839015;    long atNNSpEpMMCn61823241 = -213863873;    long atNNSpEpMMCn32095610 = -622063500;    long atNNSpEpMMCn29723594 = -445387082;    long atNNSpEpMMCn86339046 = -748652055;    long atNNSpEpMMCn14130780 = -23572735;    long atNNSpEpMMCn49525760 = -620541873;    long atNNSpEpMMCn30653485 = -353985472;    long atNNSpEpMMCn18225262 = -459590839;    long atNNSpEpMMCn76287609 = -573738692;    long atNNSpEpMMCn42818014 = -238870534;    long atNNSpEpMMCn27813850 = -902898103;    long atNNSpEpMMCn53575947 = -861500108;    long atNNSpEpMMCn17005155 = -929506196;    long atNNSpEpMMCn69296083 = -163897321;    long atNNSpEpMMCn83597836 = -913025966;    long atNNSpEpMMCn63080819 = -40804518;    long atNNSpEpMMCn94777262 = -597246450;    long atNNSpEpMMCn44142084 = -632020073;    long atNNSpEpMMCn37563177 = -944809172;    long atNNSpEpMMCn47343108 = -815031437;    long atNNSpEpMMCn26969381 = -813835137;    long atNNSpEpMMCn40615480 = 85546533;    long atNNSpEpMMCn27351077 = -800731065;    long atNNSpEpMMCn35162771 = -264685250;    long atNNSpEpMMCn20923214 = -239407413;    long atNNSpEpMMCn34200445 = -133866100;    long atNNSpEpMMCn10106544 = -319070673;    long atNNSpEpMMCn70444190 = 34584353;    long atNNSpEpMMCn48584189 = -179984479;    long atNNSpEpMMCn75699251 = 96578389;    long atNNSpEpMMCn6931860 = -304254027;    long atNNSpEpMMCn48181645 = -67931399;    long atNNSpEpMMCn93526153 = 21265806;    long atNNSpEpMMCn89186178 = -771485741;    long atNNSpEpMMCn61828524 = -802664646;    long atNNSpEpMMCn59598795 = -585676854;    long atNNSpEpMMCn39451098 = -980197010;    long atNNSpEpMMCn49145215 = -991799258;    long atNNSpEpMMCn15009648 = -478355390;    long atNNSpEpMMCn1217765 = -328177022;    long atNNSpEpMMCn53931729 = -336235399;    long atNNSpEpMMCn16680410 = -850619772;    long atNNSpEpMMCn28235165 = -751260105;    long atNNSpEpMMCn35197442 = -554389653;    long atNNSpEpMMCn47010476 = -650273500;    long atNNSpEpMMCn31516715 = -535103019;    long atNNSpEpMMCn62176841 = -576700774;    long atNNSpEpMMCn57886915 = -915079480;    long atNNSpEpMMCn46848855 = -701101589;    long atNNSpEpMMCn12395837 = -179411465;    long atNNSpEpMMCn80128241 = -371806770;    long atNNSpEpMMCn87861029 = -850547225;    long atNNSpEpMMCn85473518 = -751075955;    long atNNSpEpMMCn32162407 = -92544395;    long atNNSpEpMMCn79482558 = -445003878;    long atNNSpEpMMCn21207761 = -947810133;     atNNSpEpMMCn26607616 = atNNSpEpMMCn12643272;     atNNSpEpMMCn12643272 = atNNSpEpMMCn92947849;     atNNSpEpMMCn92947849 = atNNSpEpMMCn75292241;     atNNSpEpMMCn75292241 = atNNSpEpMMCn32255512;     atNNSpEpMMCn32255512 = atNNSpEpMMCn30261524;     atNNSpEpMMCn30261524 = atNNSpEpMMCn73282512;     atNNSpEpMMCn73282512 = atNNSpEpMMCn88306701;     atNNSpEpMMCn88306701 = atNNSpEpMMCn31928322;     atNNSpEpMMCn31928322 = atNNSpEpMMCn61875052;     atNNSpEpMMCn61875052 = atNNSpEpMMCn45138254;     atNNSpEpMMCn45138254 = atNNSpEpMMCn5366533;     atNNSpEpMMCn5366533 = atNNSpEpMMCn9987097;     atNNSpEpMMCn9987097 = atNNSpEpMMCn6015877;     atNNSpEpMMCn6015877 = atNNSpEpMMCn13382442;     atNNSpEpMMCn13382442 = atNNSpEpMMCn37289542;     atNNSpEpMMCn37289542 = atNNSpEpMMCn890882;     atNNSpEpMMCn890882 = atNNSpEpMMCn24060844;     atNNSpEpMMCn24060844 = atNNSpEpMMCn50604755;     atNNSpEpMMCn50604755 = atNNSpEpMMCn38934974;     atNNSpEpMMCn38934974 = atNNSpEpMMCn71218339;     atNNSpEpMMCn71218339 = atNNSpEpMMCn73031668;     atNNSpEpMMCn73031668 = atNNSpEpMMCn95638116;     atNNSpEpMMCn95638116 = atNNSpEpMMCn23651766;     atNNSpEpMMCn23651766 = atNNSpEpMMCn91694404;     atNNSpEpMMCn91694404 = atNNSpEpMMCn69174692;     atNNSpEpMMCn69174692 = atNNSpEpMMCn35484261;     atNNSpEpMMCn35484261 = atNNSpEpMMCn29140428;     atNNSpEpMMCn29140428 = atNNSpEpMMCn50743525;     atNNSpEpMMCn50743525 = atNNSpEpMMCn84585214;     atNNSpEpMMCn84585214 = atNNSpEpMMCn34905672;     atNNSpEpMMCn34905672 = atNNSpEpMMCn4522774;     atNNSpEpMMCn4522774 = atNNSpEpMMCn78015456;     atNNSpEpMMCn78015456 = atNNSpEpMMCn74824325;     atNNSpEpMMCn74824325 = atNNSpEpMMCn85092662;     atNNSpEpMMCn85092662 = atNNSpEpMMCn79181996;     atNNSpEpMMCn79181996 = atNNSpEpMMCn27182999;     atNNSpEpMMCn27182999 = atNNSpEpMMCn30446692;     atNNSpEpMMCn30446692 = atNNSpEpMMCn75476655;     atNNSpEpMMCn75476655 = atNNSpEpMMCn74905504;     atNNSpEpMMCn74905504 = atNNSpEpMMCn32003114;     atNNSpEpMMCn32003114 = atNNSpEpMMCn23036695;     atNNSpEpMMCn23036695 = atNNSpEpMMCn79505515;     atNNSpEpMMCn79505515 = atNNSpEpMMCn6451939;     atNNSpEpMMCn6451939 = atNNSpEpMMCn61823241;     atNNSpEpMMCn61823241 = atNNSpEpMMCn32095610;     atNNSpEpMMCn32095610 = atNNSpEpMMCn29723594;     atNNSpEpMMCn29723594 = atNNSpEpMMCn86339046;     atNNSpEpMMCn86339046 = atNNSpEpMMCn14130780;     atNNSpEpMMCn14130780 = atNNSpEpMMCn49525760;     atNNSpEpMMCn49525760 = atNNSpEpMMCn30653485;     atNNSpEpMMCn30653485 = atNNSpEpMMCn18225262;     atNNSpEpMMCn18225262 = atNNSpEpMMCn76287609;     atNNSpEpMMCn76287609 = atNNSpEpMMCn42818014;     atNNSpEpMMCn42818014 = atNNSpEpMMCn27813850;     atNNSpEpMMCn27813850 = atNNSpEpMMCn53575947;     atNNSpEpMMCn53575947 = atNNSpEpMMCn17005155;     atNNSpEpMMCn17005155 = atNNSpEpMMCn69296083;     atNNSpEpMMCn69296083 = atNNSpEpMMCn83597836;     atNNSpEpMMCn83597836 = atNNSpEpMMCn63080819;     atNNSpEpMMCn63080819 = atNNSpEpMMCn94777262;     atNNSpEpMMCn94777262 = atNNSpEpMMCn44142084;     atNNSpEpMMCn44142084 = atNNSpEpMMCn37563177;     atNNSpEpMMCn37563177 = atNNSpEpMMCn47343108;     atNNSpEpMMCn47343108 = atNNSpEpMMCn26969381;     atNNSpEpMMCn26969381 = atNNSpEpMMCn40615480;     atNNSpEpMMCn40615480 = atNNSpEpMMCn27351077;     atNNSpEpMMCn27351077 = atNNSpEpMMCn35162771;     atNNSpEpMMCn35162771 = atNNSpEpMMCn20923214;     atNNSpEpMMCn20923214 = atNNSpEpMMCn34200445;     atNNSpEpMMCn34200445 = atNNSpEpMMCn10106544;     atNNSpEpMMCn10106544 = atNNSpEpMMCn70444190;     atNNSpEpMMCn70444190 = atNNSpEpMMCn48584189;     atNNSpEpMMCn48584189 = atNNSpEpMMCn75699251;     atNNSpEpMMCn75699251 = atNNSpEpMMCn6931860;     atNNSpEpMMCn6931860 = atNNSpEpMMCn48181645;     atNNSpEpMMCn48181645 = atNNSpEpMMCn93526153;     atNNSpEpMMCn93526153 = atNNSpEpMMCn89186178;     atNNSpEpMMCn89186178 = atNNSpEpMMCn61828524;     atNNSpEpMMCn61828524 = atNNSpEpMMCn59598795;     atNNSpEpMMCn59598795 = atNNSpEpMMCn39451098;     atNNSpEpMMCn39451098 = atNNSpEpMMCn49145215;     atNNSpEpMMCn49145215 = atNNSpEpMMCn15009648;     atNNSpEpMMCn15009648 = atNNSpEpMMCn1217765;     atNNSpEpMMCn1217765 = atNNSpEpMMCn53931729;     atNNSpEpMMCn53931729 = atNNSpEpMMCn16680410;     atNNSpEpMMCn16680410 = atNNSpEpMMCn28235165;     atNNSpEpMMCn28235165 = atNNSpEpMMCn35197442;     atNNSpEpMMCn35197442 = atNNSpEpMMCn47010476;     atNNSpEpMMCn47010476 = atNNSpEpMMCn31516715;     atNNSpEpMMCn31516715 = atNNSpEpMMCn62176841;     atNNSpEpMMCn62176841 = atNNSpEpMMCn57886915;     atNNSpEpMMCn57886915 = atNNSpEpMMCn46848855;     atNNSpEpMMCn46848855 = atNNSpEpMMCn12395837;     atNNSpEpMMCn12395837 = atNNSpEpMMCn80128241;     atNNSpEpMMCn80128241 = atNNSpEpMMCn87861029;     atNNSpEpMMCn87861029 = atNNSpEpMMCn85473518;     atNNSpEpMMCn85473518 = atNNSpEpMMCn32162407;     atNNSpEpMMCn32162407 = atNNSpEpMMCn79482558;     atNNSpEpMMCn79482558 = atNNSpEpMMCn21207761;     atNNSpEpMMCn21207761 = atNNSpEpMMCn26607616;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LUTqUJrZMfcMem95215349() {     long hjlOMPfSEjQT86203712 = -76566510;    long hjlOMPfSEjQT14149122 = -869986336;    long hjlOMPfSEjQT29949237 = -354566761;    long hjlOMPfSEjQT71167999 = -993377196;    long hjlOMPfSEjQT43548738 = -466895637;    long hjlOMPfSEjQT27938645 = -195957435;    long hjlOMPfSEjQT70640995 = -663665782;    long hjlOMPfSEjQT39131986 = -247739441;    long hjlOMPfSEjQT45741766 = -37924806;    long hjlOMPfSEjQT44899567 = -65304601;    long hjlOMPfSEjQT70433185 = -740994701;    long hjlOMPfSEjQT40037734 = -789012501;    long hjlOMPfSEjQT80741660 = -824035371;    long hjlOMPfSEjQT64389715 = -640168887;    long hjlOMPfSEjQT10690247 = -432599590;    long hjlOMPfSEjQT34043796 = -303420364;    long hjlOMPfSEjQT36851986 = -607759481;    long hjlOMPfSEjQT88729175 = -969536567;    long hjlOMPfSEjQT31046958 = -111594460;    long hjlOMPfSEjQT18852084 = -449229976;    long hjlOMPfSEjQT51679458 = -696837350;    long hjlOMPfSEjQT41521267 = -978711902;    long hjlOMPfSEjQT87829942 = -894619835;    long hjlOMPfSEjQT88382004 = -680866755;    long hjlOMPfSEjQT67672409 = -763877943;    long hjlOMPfSEjQT63589599 = -560201563;    long hjlOMPfSEjQT48824332 = -89931309;    long hjlOMPfSEjQT94251596 = -123309714;    long hjlOMPfSEjQT527868 = -838311509;    long hjlOMPfSEjQT23058681 = -837204113;    long hjlOMPfSEjQT59819990 = -955429938;    long hjlOMPfSEjQT47288034 = -742216793;    long hjlOMPfSEjQT27097495 = -873207059;    long hjlOMPfSEjQT57348768 = -55055534;    long hjlOMPfSEjQT90030023 = -44813113;    long hjlOMPfSEjQT57771892 = -817863551;    long hjlOMPfSEjQT17814676 = -371755435;    long hjlOMPfSEjQT28807029 = -558579944;    long hjlOMPfSEjQT94494598 = -38922500;    long hjlOMPfSEjQT47731159 = -242934168;    long hjlOMPfSEjQT90220927 = -951228894;    long hjlOMPfSEjQT93115876 = -700826545;    long hjlOMPfSEjQT20384758 = -741020660;    long hjlOMPfSEjQT80691444 = -682753754;    long hjlOMPfSEjQT62811557 = -760181941;    long hjlOMPfSEjQT96888738 = -865007659;    long hjlOMPfSEjQT35212316 = -337242750;    long hjlOMPfSEjQT33035441 = 18594717;    long hjlOMPfSEjQT53520427 = -307510355;    long hjlOMPfSEjQT64693153 = -941794333;    long hjlOMPfSEjQT81139735 = -140093696;    long hjlOMPfSEjQT24810415 = -430834095;    long hjlOMPfSEjQT51703123 = -813687145;    long hjlOMPfSEjQT16092537 = -499039489;    long hjlOMPfSEjQT43535891 = -866832190;    long hjlOMPfSEjQT44682446 = -97854608;    long hjlOMPfSEjQT26319180 = -975366502;    long hjlOMPfSEjQT41567232 = -673700007;    long hjlOMPfSEjQT3495591 = -129499253;    long hjlOMPfSEjQT79959138 = -906694075;    long hjlOMPfSEjQT79114313 = -6026126;    long hjlOMPfSEjQT76389398 = -440356068;    long hjlOMPfSEjQT38604118 = -409427932;    long hjlOMPfSEjQT22683086 = -200720694;    long hjlOMPfSEjQT85079577 = -109874663;    long hjlOMPfSEjQT23145152 = -998777909;    long hjlOMPfSEjQT12940240 = -915805442;    long hjlOMPfSEjQT23392892 = -668979837;    long hjlOMPfSEjQT74359691 = -495355775;    long hjlOMPfSEjQT52918354 = -614736039;    long hjlOMPfSEjQT16229120 = -931664929;    long hjlOMPfSEjQT8044957 = 50820462;    long hjlOMPfSEjQT94234576 = -830614068;    long hjlOMPfSEjQT83315799 = -868660293;    long hjlOMPfSEjQT28631156 = -498001083;    long hjlOMPfSEjQT58563582 = -996010805;    long hjlOMPfSEjQT21136510 = -137691243;    long hjlOMPfSEjQT7138498 = -111866081;    long hjlOMPfSEjQT25570448 = -920684814;    long hjlOMPfSEjQT70783671 = -898870285;    long hjlOMPfSEjQT28377283 = -122958814;    long hjlOMPfSEjQT15788892 = -8526027;    long hjlOMPfSEjQT40731169 = -815799360;    long hjlOMPfSEjQT35834715 = -896517176;    long hjlOMPfSEjQT41918945 = -597110417;    long hjlOMPfSEjQT35009575 = -424595844;    long hjlOMPfSEjQT95584910 = -928529648;    long hjlOMPfSEjQT11004958 = -274167571;    long hjlOMPfSEjQT13812877 = -188223344;    long hjlOMPfSEjQT45347578 = -946958505;    long hjlOMPfSEjQT31452713 = -842497050;    long hjlOMPfSEjQT76247443 = -698055429;    long hjlOMPfSEjQT25311439 = -329080691;    long hjlOMPfSEjQT14535460 = -132228425;    long hjlOMPfSEjQT68616846 = -136908042;    long hjlOMPfSEjQT13831530 = -410872826;    long hjlOMPfSEjQT54511758 = -191398614;    long hjlOMPfSEjQT97701672 = -440299967;    long hjlOMPfSEjQT95611866 = -472879092;    long hjlOMPfSEjQT39666406 = -76566510;     hjlOMPfSEjQT86203712 = hjlOMPfSEjQT14149122;     hjlOMPfSEjQT14149122 = hjlOMPfSEjQT29949237;     hjlOMPfSEjQT29949237 = hjlOMPfSEjQT71167999;     hjlOMPfSEjQT71167999 = hjlOMPfSEjQT43548738;     hjlOMPfSEjQT43548738 = hjlOMPfSEjQT27938645;     hjlOMPfSEjQT27938645 = hjlOMPfSEjQT70640995;     hjlOMPfSEjQT70640995 = hjlOMPfSEjQT39131986;     hjlOMPfSEjQT39131986 = hjlOMPfSEjQT45741766;     hjlOMPfSEjQT45741766 = hjlOMPfSEjQT44899567;     hjlOMPfSEjQT44899567 = hjlOMPfSEjQT70433185;     hjlOMPfSEjQT70433185 = hjlOMPfSEjQT40037734;     hjlOMPfSEjQT40037734 = hjlOMPfSEjQT80741660;     hjlOMPfSEjQT80741660 = hjlOMPfSEjQT64389715;     hjlOMPfSEjQT64389715 = hjlOMPfSEjQT10690247;     hjlOMPfSEjQT10690247 = hjlOMPfSEjQT34043796;     hjlOMPfSEjQT34043796 = hjlOMPfSEjQT36851986;     hjlOMPfSEjQT36851986 = hjlOMPfSEjQT88729175;     hjlOMPfSEjQT88729175 = hjlOMPfSEjQT31046958;     hjlOMPfSEjQT31046958 = hjlOMPfSEjQT18852084;     hjlOMPfSEjQT18852084 = hjlOMPfSEjQT51679458;     hjlOMPfSEjQT51679458 = hjlOMPfSEjQT41521267;     hjlOMPfSEjQT41521267 = hjlOMPfSEjQT87829942;     hjlOMPfSEjQT87829942 = hjlOMPfSEjQT88382004;     hjlOMPfSEjQT88382004 = hjlOMPfSEjQT67672409;     hjlOMPfSEjQT67672409 = hjlOMPfSEjQT63589599;     hjlOMPfSEjQT63589599 = hjlOMPfSEjQT48824332;     hjlOMPfSEjQT48824332 = hjlOMPfSEjQT94251596;     hjlOMPfSEjQT94251596 = hjlOMPfSEjQT527868;     hjlOMPfSEjQT527868 = hjlOMPfSEjQT23058681;     hjlOMPfSEjQT23058681 = hjlOMPfSEjQT59819990;     hjlOMPfSEjQT59819990 = hjlOMPfSEjQT47288034;     hjlOMPfSEjQT47288034 = hjlOMPfSEjQT27097495;     hjlOMPfSEjQT27097495 = hjlOMPfSEjQT57348768;     hjlOMPfSEjQT57348768 = hjlOMPfSEjQT90030023;     hjlOMPfSEjQT90030023 = hjlOMPfSEjQT57771892;     hjlOMPfSEjQT57771892 = hjlOMPfSEjQT17814676;     hjlOMPfSEjQT17814676 = hjlOMPfSEjQT28807029;     hjlOMPfSEjQT28807029 = hjlOMPfSEjQT94494598;     hjlOMPfSEjQT94494598 = hjlOMPfSEjQT47731159;     hjlOMPfSEjQT47731159 = hjlOMPfSEjQT90220927;     hjlOMPfSEjQT90220927 = hjlOMPfSEjQT93115876;     hjlOMPfSEjQT93115876 = hjlOMPfSEjQT20384758;     hjlOMPfSEjQT20384758 = hjlOMPfSEjQT80691444;     hjlOMPfSEjQT80691444 = hjlOMPfSEjQT62811557;     hjlOMPfSEjQT62811557 = hjlOMPfSEjQT96888738;     hjlOMPfSEjQT96888738 = hjlOMPfSEjQT35212316;     hjlOMPfSEjQT35212316 = hjlOMPfSEjQT33035441;     hjlOMPfSEjQT33035441 = hjlOMPfSEjQT53520427;     hjlOMPfSEjQT53520427 = hjlOMPfSEjQT64693153;     hjlOMPfSEjQT64693153 = hjlOMPfSEjQT81139735;     hjlOMPfSEjQT81139735 = hjlOMPfSEjQT24810415;     hjlOMPfSEjQT24810415 = hjlOMPfSEjQT51703123;     hjlOMPfSEjQT51703123 = hjlOMPfSEjQT16092537;     hjlOMPfSEjQT16092537 = hjlOMPfSEjQT43535891;     hjlOMPfSEjQT43535891 = hjlOMPfSEjQT44682446;     hjlOMPfSEjQT44682446 = hjlOMPfSEjQT26319180;     hjlOMPfSEjQT26319180 = hjlOMPfSEjQT41567232;     hjlOMPfSEjQT41567232 = hjlOMPfSEjQT3495591;     hjlOMPfSEjQT3495591 = hjlOMPfSEjQT79959138;     hjlOMPfSEjQT79959138 = hjlOMPfSEjQT79114313;     hjlOMPfSEjQT79114313 = hjlOMPfSEjQT76389398;     hjlOMPfSEjQT76389398 = hjlOMPfSEjQT38604118;     hjlOMPfSEjQT38604118 = hjlOMPfSEjQT22683086;     hjlOMPfSEjQT22683086 = hjlOMPfSEjQT85079577;     hjlOMPfSEjQT85079577 = hjlOMPfSEjQT23145152;     hjlOMPfSEjQT23145152 = hjlOMPfSEjQT12940240;     hjlOMPfSEjQT12940240 = hjlOMPfSEjQT23392892;     hjlOMPfSEjQT23392892 = hjlOMPfSEjQT74359691;     hjlOMPfSEjQT74359691 = hjlOMPfSEjQT52918354;     hjlOMPfSEjQT52918354 = hjlOMPfSEjQT16229120;     hjlOMPfSEjQT16229120 = hjlOMPfSEjQT8044957;     hjlOMPfSEjQT8044957 = hjlOMPfSEjQT94234576;     hjlOMPfSEjQT94234576 = hjlOMPfSEjQT83315799;     hjlOMPfSEjQT83315799 = hjlOMPfSEjQT28631156;     hjlOMPfSEjQT28631156 = hjlOMPfSEjQT58563582;     hjlOMPfSEjQT58563582 = hjlOMPfSEjQT21136510;     hjlOMPfSEjQT21136510 = hjlOMPfSEjQT7138498;     hjlOMPfSEjQT7138498 = hjlOMPfSEjQT25570448;     hjlOMPfSEjQT25570448 = hjlOMPfSEjQT70783671;     hjlOMPfSEjQT70783671 = hjlOMPfSEjQT28377283;     hjlOMPfSEjQT28377283 = hjlOMPfSEjQT15788892;     hjlOMPfSEjQT15788892 = hjlOMPfSEjQT40731169;     hjlOMPfSEjQT40731169 = hjlOMPfSEjQT35834715;     hjlOMPfSEjQT35834715 = hjlOMPfSEjQT41918945;     hjlOMPfSEjQT41918945 = hjlOMPfSEjQT35009575;     hjlOMPfSEjQT35009575 = hjlOMPfSEjQT95584910;     hjlOMPfSEjQT95584910 = hjlOMPfSEjQT11004958;     hjlOMPfSEjQT11004958 = hjlOMPfSEjQT13812877;     hjlOMPfSEjQT13812877 = hjlOMPfSEjQT45347578;     hjlOMPfSEjQT45347578 = hjlOMPfSEjQT31452713;     hjlOMPfSEjQT31452713 = hjlOMPfSEjQT76247443;     hjlOMPfSEjQT76247443 = hjlOMPfSEjQT25311439;     hjlOMPfSEjQT25311439 = hjlOMPfSEjQT14535460;     hjlOMPfSEjQT14535460 = hjlOMPfSEjQT68616846;     hjlOMPfSEjQT68616846 = hjlOMPfSEjQT13831530;     hjlOMPfSEjQT13831530 = hjlOMPfSEjQT54511758;     hjlOMPfSEjQT54511758 = hjlOMPfSEjQT97701672;     hjlOMPfSEjQT97701672 = hjlOMPfSEjQT95611866;     hjlOMPfSEjQT95611866 = hjlOMPfSEjQT39666406;     hjlOMPfSEjQT39666406 = hjlOMPfSEjQT86203712;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BXWhkbMIvizjCC91398509() {     long haycIJSIkeUR45799809 = -305322887;    long haycIJSIkeUR15654972 = -680141721;    long haycIJSIkeUR66950625 = -428707683;    long haycIJSIkeUR67043758 = -765988074;    long haycIJSIkeUR54841964 = -367402664;    long haycIJSIkeUR25615765 = -54217108;    long haycIJSIkeUR67999478 = 6616632;    long haycIJSIkeUR89957269 = -601950816;    long haycIJSIkeUR59555209 = -570597305;    long haycIJSIkeUR27924082 = -6563454;    long haycIJSIkeUR95728116 = -42537141;    long haycIJSIkeUR74708935 = -884033750;    long haycIJSIkeUR51496223 = -730213889;    long haycIJSIkeUR22763554 = -544327235;    long haycIJSIkeUR7998053 = -125126111;    long haycIJSIkeUR30798050 = -108793255;    long haycIJSIkeUR72813089 = -535975761;    long haycIJSIkeUR53397506 = -238872672;    long haycIJSIkeUR11489161 = -250714090;    long haycIJSIkeUR98769192 = -11638629;    long haycIJSIkeUR32140577 = -529858174;    long haycIJSIkeUR10010866 = -871113780;    long haycIJSIkeUR80021767 = -658914914;    long haycIJSIkeUR53112244 = -245204991;    long haycIJSIkeUR43650414 = -220015534;    long haycIJSIkeUR58004506 = -694819034;    long haycIJSIkeUR62164402 = -539411307;    long haycIJSIkeUR59362765 = -744691304;    long haycIJSIkeUR50312211 = -627904124;    long haycIJSIkeUR61532147 = -884187355;    long haycIJSIkeUR84734308 = -500649266;    long haycIJSIkeUR90053293 = -59434790;    long haycIJSIkeUR76179533 = -853153932;    long haycIJSIkeUR39873211 = -656939466;    long haycIJSIkeUR94967384 = -793023098;    long haycIJSIkeUR36361789 = -29520133;    long haycIJSIkeUR8446354 = -664534070;    long haycIJSIkeUR27167367 = -503032333;    long haycIJSIkeUR13512541 = -857629016;    long haycIJSIkeUR20556813 = -516815116;    long haycIJSIkeUR48438741 = -319890490;    long haycIJSIkeUR63195057 = -705767964;    long haycIJSIkeUR61264000 = -474465490;    long haycIJSIkeUR54930949 = -6668492;    long haycIJSIkeUR63799872 = -206500010;    long haycIJSIkeUR61681867 = -7951818;    long haycIJSIkeUR40701038 = -229098417;    long haycIJSIkeUR79731834 = -314158512;    long haycIJSIkeUR92910075 = -591447974;    long haycIJSIkeUR79860545 = -163046794;    long haycIJSIkeUR31625986 = 73798080;    long haycIJSIkeUR31395568 = -402077350;    long haycIJSIkeUR27118638 = 46364401;    long haycIJSIkeUR89367060 = -759208445;    long haycIJSIkeUR59257933 = -830766278;    long haycIJSIkeUR35788944 = -434209108;    long haycIJSIkeUR35633204 = 78773192;    long haycIJSIkeUR13838382 = -83502693;    long haycIJSIkeUR23393344 = -445972540;    long haycIJSIkeUR96837457 = -672583631;    long haycIJSIkeUR63451363 = -514805802;    long haycIJSIkeUR8636713 = -248692064;    long haycIJSIkeUR39645059 = -974046692;    long haycIJSIkeUR98023062 = -686409951;    long haycIJSIkeUR43189774 = -505914188;    long haycIJSIkeUR5674823 = -983102351;    long haycIJSIkeUR98529402 = 69120181;    long haycIJSIkeUR11623013 = 26725576;    long haycIJSIkeUR27796169 = -751304137;    long haycIJSIkeUR71636263 = 4394022;    long haycIJSIkeUR22351697 = -444259186;    long haycIJSIkeUR45645723 = 67056572;    long haycIJSIkeUR39884965 = -381243656;    long haycIJSIkeUR90932348 = -733898974;    long haycIJSIkeUR50330451 = -691748140;    long haycIJSIkeUR68945519 = -824090211;    long haycIJSIkeUR48746866 = -296648291;    long haycIJSIkeUR25090818 = -552246422;    long haycIJSIkeUR89312371 = 61295018;    long haycIJSIkeUR81968547 = -112063716;    long haycIJSIkeUR17303468 = -365720618;    long haycIJSIkeUR82432568 = -125252796;    long haycIJSIkeUR66452690 = -53243331;    long haycIJSIkeUR70451665 = -364857331;    long haycIJSIkeUR29906162 = -857985435;    long haycIJSIkeUR53338740 = 1428083;    long haycIJSIkeUR62934656 = -5799192;    long haycIJSIkeUR86812473 = 6054512;    long haycIJSIkeUR80615277 = -826173189;    long haycIJSIkeUR59178441 = -258813991;    long haycIJSIkeUR728585 = -8293325;    long haycIJSIkeUR94607972 = -481031378;    long haycIJSIkeUR3774024 = 42940207;    long haycIJSIkeUR16675084 = -85045386;    long haycIJSIkeUR57105450 = 97990686;    long haycIJSIkeUR39802029 = 28801573;    long haycIJSIkeUR23549998 = -731721272;    long haycIJSIkeUR63240937 = -788055540;    long haycIJSIkeUR11741176 = -500754305;    long haycIJSIkeUR58125050 = -305322887;     haycIJSIkeUR45799809 = haycIJSIkeUR15654972;     haycIJSIkeUR15654972 = haycIJSIkeUR66950625;     haycIJSIkeUR66950625 = haycIJSIkeUR67043758;     haycIJSIkeUR67043758 = haycIJSIkeUR54841964;     haycIJSIkeUR54841964 = haycIJSIkeUR25615765;     haycIJSIkeUR25615765 = haycIJSIkeUR67999478;     haycIJSIkeUR67999478 = haycIJSIkeUR89957269;     haycIJSIkeUR89957269 = haycIJSIkeUR59555209;     haycIJSIkeUR59555209 = haycIJSIkeUR27924082;     haycIJSIkeUR27924082 = haycIJSIkeUR95728116;     haycIJSIkeUR95728116 = haycIJSIkeUR74708935;     haycIJSIkeUR74708935 = haycIJSIkeUR51496223;     haycIJSIkeUR51496223 = haycIJSIkeUR22763554;     haycIJSIkeUR22763554 = haycIJSIkeUR7998053;     haycIJSIkeUR7998053 = haycIJSIkeUR30798050;     haycIJSIkeUR30798050 = haycIJSIkeUR72813089;     haycIJSIkeUR72813089 = haycIJSIkeUR53397506;     haycIJSIkeUR53397506 = haycIJSIkeUR11489161;     haycIJSIkeUR11489161 = haycIJSIkeUR98769192;     haycIJSIkeUR98769192 = haycIJSIkeUR32140577;     haycIJSIkeUR32140577 = haycIJSIkeUR10010866;     haycIJSIkeUR10010866 = haycIJSIkeUR80021767;     haycIJSIkeUR80021767 = haycIJSIkeUR53112244;     haycIJSIkeUR53112244 = haycIJSIkeUR43650414;     haycIJSIkeUR43650414 = haycIJSIkeUR58004506;     haycIJSIkeUR58004506 = haycIJSIkeUR62164402;     haycIJSIkeUR62164402 = haycIJSIkeUR59362765;     haycIJSIkeUR59362765 = haycIJSIkeUR50312211;     haycIJSIkeUR50312211 = haycIJSIkeUR61532147;     haycIJSIkeUR61532147 = haycIJSIkeUR84734308;     haycIJSIkeUR84734308 = haycIJSIkeUR90053293;     haycIJSIkeUR90053293 = haycIJSIkeUR76179533;     haycIJSIkeUR76179533 = haycIJSIkeUR39873211;     haycIJSIkeUR39873211 = haycIJSIkeUR94967384;     haycIJSIkeUR94967384 = haycIJSIkeUR36361789;     haycIJSIkeUR36361789 = haycIJSIkeUR8446354;     haycIJSIkeUR8446354 = haycIJSIkeUR27167367;     haycIJSIkeUR27167367 = haycIJSIkeUR13512541;     haycIJSIkeUR13512541 = haycIJSIkeUR20556813;     haycIJSIkeUR20556813 = haycIJSIkeUR48438741;     haycIJSIkeUR48438741 = haycIJSIkeUR63195057;     haycIJSIkeUR63195057 = haycIJSIkeUR61264000;     haycIJSIkeUR61264000 = haycIJSIkeUR54930949;     haycIJSIkeUR54930949 = haycIJSIkeUR63799872;     haycIJSIkeUR63799872 = haycIJSIkeUR61681867;     haycIJSIkeUR61681867 = haycIJSIkeUR40701038;     haycIJSIkeUR40701038 = haycIJSIkeUR79731834;     haycIJSIkeUR79731834 = haycIJSIkeUR92910075;     haycIJSIkeUR92910075 = haycIJSIkeUR79860545;     haycIJSIkeUR79860545 = haycIJSIkeUR31625986;     haycIJSIkeUR31625986 = haycIJSIkeUR31395568;     haycIJSIkeUR31395568 = haycIJSIkeUR27118638;     haycIJSIkeUR27118638 = haycIJSIkeUR89367060;     haycIJSIkeUR89367060 = haycIJSIkeUR59257933;     haycIJSIkeUR59257933 = haycIJSIkeUR35788944;     haycIJSIkeUR35788944 = haycIJSIkeUR35633204;     haycIJSIkeUR35633204 = haycIJSIkeUR13838382;     haycIJSIkeUR13838382 = haycIJSIkeUR23393344;     haycIJSIkeUR23393344 = haycIJSIkeUR96837457;     haycIJSIkeUR96837457 = haycIJSIkeUR63451363;     haycIJSIkeUR63451363 = haycIJSIkeUR8636713;     haycIJSIkeUR8636713 = haycIJSIkeUR39645059;     haycIJSIkeUR39645059 = haycIJSIkeUR98023062;     haycIJSIkeUR98023062 = haycIJSIkeUR43189774;     haycIJSIkeUR43189774 = haycIJSIkeUR5674823;     haycIJSIkeUR5674823 = haycIJSIkeUR98529402;     haycIJSIkeUR98529402 = haycIJSIkeUR11623013;     haycIJSIkeUR11623013 = haycIJSIkeUR27796169;     haycIJSIkeUR27796169 = haycIJSIkeUR71636263;     haycIJSIkeUR71636263 = haycIJSIkeUR22351697;     haycIJSIkeUR22351697 = haycIJSIkeUR45645723;     haycIJSIkeUR45645723 = haycIJSIkeUR39884965;     haycIJSIkeUR39884965 = haycIJSIkeUR90932348;     haycIJSIkeUR90932348 = haycIJSIkeUR50330451;     haycIJSIkeUR50330451 = haycIJSIkeUR68945519;     haycIJSIkeUR68945519 = haycIJSIkeUR48746866;     haycIJSIkeUR48746866 = haycIJSIkeUR25090818;     haycIJSIkeUR25090818 = haycIJSIkeUR89312371;     haycIJSIkeUR89312371 = haycIJSIkeUR81968547;     haycIJSIkeUR81968547 = haycIJSIkeUR17303468;     haycIJSIkeUR17303468 = haycIJSIkeUR82432568;     haycIJSIkeUR82432568 = haycIJSIkeUR66452690;     haycIJSIkeUR66452690 = haycIJSIkeUR70451665;     haycIJSIkeUR70451665 = haycIJSIkeUR29906162;     haycIJSIkeUR29906162 = haycIJSIkeUR53338740;     haycIJSIkeUR53338740 = haycIJSIkeUR62934656;     haycIJSIkeUR62934656 = haycIJSIkeUR86812473;     haycIJSIkeUR86812473 = haycIJSIkeUR80615277;     haycIJSIkeUR80615277 = haycIJSIkeUR59178441;     haycIJSIkeUR59178441 = haycIJSIkeUR728585;     haycIJSIkeUR728585 = haycIJSIkeUR94607972;     haycIJSIkeUR94607972 = haycIJSIkeUR3774024;     haycIJSIkeUR3774024 = haycIJSIkeUR16675084;     haycIJSIkeUR16675084 = haycIJSIkeUR57105450;     haycIJSIkeUR57105450 = haycIJSIkeUR39802029;     haycIJSIkeUR39802029 = haycIJSIkeUR23549998;     haycIJSIkeUR23549998 = haycIJSIkeUR63240937;     haycIJSIkeUR63240937 = haycIJSIkeUR11741176;     haycIJSIkeUR11741176 = haycIJSIkeUR58125050;     haycIJSIkeUR58125050 = haycIJSIkeUR45799809;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MzwTSBYKSlifFj51701167() {     long AKCIkkeEZEOp35926118 = -364079088;    long AKCIkkeEZEOp98780036 = 44932109;    long AKCIkkeEZEOp62443324 = -565502144;    long AKCIkkeEZEOp40542333 = -952159896;    long AKCIkkeEZEOp67898699 = -308726106;    long AKCIkkeEZEOp6402170 = 53149784;    long AKCIkkeEZEOp62662916 = -730928841;    long AKCIkkeEZEOp42835833 = -238398555;    long AKCIkkeEZEOp83366897 = -578489943;    long AKCIkkeEZEOp32179752 = -676437979;    long AKCIkkeEZEOp71879935 = -550957298;    long AKCIkkeEZEOp9458444 = -363621885;    long AKCIkkeEZEOp89842355 = 57550250;    long AKCIkkeEZEOp61182407 = -542488119;    long AKCIkkeEZEOp6072425 = -610247054;    long AKCIkkeEZEOp54977792 = -909173125;    long AKCIkkeEZEOp16775270 = -797321003;    long AKCIkkeEZEOp74753218 = -681721964;    long AKCIkkeEZEOp72403552 = -717124526;    long AKCIkkeEZEOp66093440 = -659516939;    long AKCIkkeEZEOp20062979 = -234283267;    long AKCIkkeEZEOp8092448 = -104210416;    long AKCIkkeEZEOp13260185 = 34625165;    long AKCIkkeEZEOp61033341 = -693229367;    long AKCIkkeEZEOp90535602 = -863526478;    long AKCIkkeEZEOp76795471 = -570692769;    long AKCIkkeEZEOp84131737 = -298940301;    long AKCIkkeEZEOp82533140 = -804581363;    long AKCIkkeEZEOp11521209 = -290103172;    long AKCIkkeEZEOp9321227 = -758589747;    long AKCIkkeEZEOp88197710 = -827315810;    long AKCIkkeEZEOp89420208 = -560259210;    long AKCIkkeEZEOp85148574 = -53379091;    long AKCIkkeEZEOp63711855 = -648390624;    long AKCIkkeEZEOp30563919 = -443358759;    long AKCIkkeEZEOp89592795 = -332549543;    long AKCIkkeEZEOp8679923 = -180349974;    long AKCIkkeEZEOp51524650 = -369091577;    long AKCIkkeEZEOp24045558 = -565091062;    long AKCIkkeEZEOp65068955 = -421522889;    long AKCIkkeEZEOp62138414 = -25751766;    long AKCIkkeEZEOp17839521 = -520261177;    long AKCIkkeEZEOp21080841 = -949891085;    long AKCIkkeEZEOp85592890 = -970751681;    long AKCIkkeEZEOp55764290 = -319009966;    long AKCIkkeEZEOp82120861 = -491575723;    long AKCIkkeEZEOp21124329 = -877580917;    long AKCIkkeEZEOp70118293 = -340814765;    long AKCIkkeEZEOp20828729 = 72612679;    long AKCIkkeEZEOp9140951 = -620043132;    long AKCIkkeEZEOp60991509 = -300583965;    long AKCIkkeEZEOp75168675 = -366504183;    long AKCIkkeEZEOp76571092 = -765488594;    long AKCIkkeEZEOp42274122 = -882763726;    long AKCIkkeEZEOp31638188 = -959366549;    long AKCIkkeEZEOp27833671 = -159868673;    long AKCIkkeEZEOp85519851 = -989693057;    long AKCIkkeEZEOp1409983 = -872272778;    long AKCIkkeEZEOp50006730 = 11366582;    long AKCIkkeEZEOp91103228 = -738033338;    long AKCIkkeEZEOp22270433 = -647909916;    long AKCIkkeEZEOp80129775 = -926347479;    long AKCIkkeEZEOp31314625 = -948295383;    long AKCIkkeEZEOp74045670 = -819900197;    long AKCIkkeEZEOp43982042 = -849122170;    long AKCIkkeEZEOp82459727 = -990698089;    long AKCIkkeEZEOp24309869 = -210242794;    long AKCIkkeEZEOp26130501 = -294059127;    long AKCIkkeEZEOp30618488 = 870640;    long AKCIkkeEZEOp16479629 = -177697511;    long AKCIkkeEZEOp46297870 = -628823152;    long AKCIkkeEZEOp65250620 = -328229426;    long AKCIkkeEZEOp50707660 = -16630902;    long AKCIkkeEZEOp7334598 = -195601637;    long AKCIkkeEZEOp3955027 = -533765174;    long AKCIkkeEZEOp2223459 = -714022090;    long AKCIkkeEZEOp87011606 = -154319331;    long AKCIkkeEZEOp27667295 = 5376846;    long AKCIkkeEZEOp5269052 = -274219401;    long AKCIkkeEZEOp8414742 = -271950755;    long AKCIkkeEZEOp55671142 = -693111853;    long AKCIkkeEZEOp14013444 = -958125536;    long AKCIkkeEZEOp61704412 = -777194042;    long AKCIkkeEZEOp2380258 = -670060041;    long AKCIkkeEZEOp48329718 = -358005782;    long AKCIkkeEZEOp13029036 = -360811628;    long AKCIkkeEZEOp12849116 = -794770617;    long AKCIkkeEZEOp42874452 = -170615366;    long AKCIkkeEZEOp32073667 = -689024075;    long AKCIkkeEZEOp2730249 = -183490087;    long AKCIkkeEZEOp4072945 = -342856486;    long AKCIkkeEZEOp7269940 = -308077197;    long AKCIkkeEZEOp1517920 = -280458159;    long AKCIkkeEZEOp32942330 = -827057724;    long AKCIkkeEZEOp42798522 = -773612974;    long AKCIkkeEZEOp82008639 = -99404288;    long AKCIkkeEZEOp86524895 = -571965794;    long AKCIkkeEZEOp47035171 = -29990889;    long AKCIkkeEZEOp41610849 = -21629512;    long AKCIkkeEZEOp73304562 = -364079088;     AKCIkkeEZEOp35926118 = AKCIkkeEZEOp98780036;     AKCIkkeEZEOp98780036 = AKCIkkeEZEOp62443324;     AKCIkkeEZEOp62443324 = AKCIkkeEZEOp40542333;     AKCIkkeEZEOp40542333 = AKCIkkeEZEOp67898699;     AKCIkkeEZEOp67898699 = AKCIkkeEZEOp6402170;     AKCIkkeEZEOp6402170 = AKCIkkeEZEOp62662916;     AKCIkkeEZEOp62662916 = AKCIkkeEZEOp42835833;     AKCIkkeEZEOp42835833 = AKCIkkeEZEOp83366897;     AKCIkkeEZEOp83366897 = AKCIkkeEZEOp32179752;     AKCIkkeEZEOp32179752 = AKCIkkeEZEOp71879935;     AKCIkkeEZEOp71879935 = AKCIkkeEZEOp9458444;     AKCIkkeEZEOp9458444 = AKCIkkeEZEOp89842355;     AKCIkkeEZEOp89842355 = AKCIkkeEZEOp61182407;     AKCIkkeEZEOp61182407 = AKCIkkeEZEOp6072425;     AKCIkkeEZEOp6072425 = AKCIkkeEZEOp54977792;     AKCIkkeEZEOp54977792 = AKCIkkeEZEOp16775270;     AKCIkkeEZEOp16775270 = AKCIkkeEZEOp74753218;     AKCIkkeEZEOp74753218 = AKCIkkeEZEOp72403552;     AKCIkkeEZEOp72403552 = AKCIkkeEZEOp66093440;     AKCIkkeEZEOp66093440 = AKCIkkeEZEOp20062979;     AKCIkkeEZEOp20062979 = AKCIkkeEZEOp8092448;     AKCIkkeEZEOp8092448 = AKCIkkeEZEOp13260185;     AKCIkkeEZEOp13260185 = AKCIkkeEZEOp61033341;     AKCIkkeEZEOp61033341 = AKCIkkeEZEOp90535602;     AKCIkkeEZEOp90535602 = AKCIkkeEZEOp76795471;     AKCIkkeEZEOp76795471 = AKCIkkeEZEOp84131737;     AKCIkkeEZEOp84131737 = AKCIkkeEZEOp82533140;     AKCIkkeEZEOp82533140 = AKCIkkeEZEOp11521209;     AKCIkkeEZEOp11521209 = AKCIkkeEZEOp9321227;     AKCIkkeEZEOp9321227 = AKCIkkeEZEOp88197710;     AKCIkkeEZEOp88197710 = AKCIkkeEZEOp89420208;     AKCIkkeEZEOp89420208 = AKCIkkeEZEOp85148574;     AKCIkkeEZEOp85148574 = AKCIkkeEZEOp63711855;     AKCIkkeEZEOp63711855 = AKCIkkeEZEOp30563919;     AKCIkkeEZEOp30563919 = AKCIkkeEZEOp89592795;     AKCIkkeEZEOp89592795 = AKCIkkeEZEOp8679923;     AKCIkkeEZEOp8679923 = AKCIkkeEZEOp51524650;     AKCIkkeEZEOp51524650 = AKCIkkeEZEOp24045558;     AKCIkkeEZEOp24045558 = AKCIkkeEZEOp65068955;     AKCIkkeEZEOp65068955 = AKCIkkeEZEOp62138414;     AKCIkkeEZEOp62138414 = AKCIkkeEZEOp17839521;     AKCIkkeEZEOp17839521 = AKCIkkeEZEOp21080841;     AKCIkkeEZEOp21080841 = AKCIkkeEZEOp85592890;     AKCIkkeEZEOp85592890 = AKCIkkeEZEOp55764290;     AKCIkkeEZEOp55764290 = AKCIkkeEZEOp82120861;     AKCIkkeEZEOp82120861 = AKCIkkeEZEOp21124329;     AKCIkkeEZEOp21124329 = AKCIkkeEZEOp70118293;     AKCIkkeEZEOp70118293 = AKCIkkeEZEOp20828729;     AKCIkkeEZEOp20828729 = AKCIkkeEZEOp9140951;     AKCIkkeEZEOp9140951 = AKCIkkeEZEOp60991509;     AKCIkkeEZEOp60991509 = AKCIkkeEZEOp75168675;     AKCIkkeEZEOp75168675 = AKCIkkeEZEOp76571092;     AKCIkkeEZEOp76571092 = AKCIkkeEZEOp42274122;     AKCIkkeEZEOp42274122 = AKCIkkeEZEOp31638188;     AKCIkkeEZEOp31638188 = AKCIkkeEZEOp27833671;     AKCIkkeEZEOp27833671 = AKCIkkeEZEOp85519851;     AKCIkkeEZEOp85519851 = AKCIkkeEZEOp1409983;     AKCIkkeEZEOp1409983 = AKCIkkeEZEOp50006730;     AKCIkkeEZEOp50006730 = AKCIkkeEZEOp91103228;     AKCIkkeEZEOp91103228 = AKCIkkeEZEOp22270433;     AKCIkkeEZEOp22270433 = AKCIkkeEZEOp80129775;     AKCIkkeEZEOp80129775 = AKCIkkeEZEOp31314625;     AKCIkkeEZEOp31314625 = AKCIkkeEZEOp74045670;     AKCIkkeEZEOp74045670 = AKCIkkeEZEOp43982042;     AKCIkkeEZEOp43982042 = AKCIkkeEZEOp82459727;     AKCIkkeEZEOp82459727 = AKCIkkeEZEOp24309869;     AKCIkkeEZEOp24309869 = AKCIkkeEZEOp26130501;     AKCIkkeEZEOp26130501 = AKCIkkeEZEOp30618488;     AKCIkkeEZEOp30618488 = AKCIkkeEZEOp16479629;     AKCIkkeEZEOp16479629 = AKCIkkeEZEOp46297870;     AKCIkkeEZEOp46297870 = AKCIkkeEZEOp65250620;     AKCIkkeEZEOp65250620 = AKCIkkeEZEOp50707660;     AKCIkkeEZEOp50707660 = AKCIkkeEZEOp7334598;     AKCIkkeEZEOp7334598 = AKCIkkeEZEOp3955027;     AKCIkkeEZEOp3955027 = AKCIkkeEZEOp2223459;     AKCIkkeEZEOp2223459 = AKCIkkeEZEOp87011606;     AKCIkkeEZEOp87011606 = AKCIkkeEZEOp27667295;     AKCIkkeEZEOp27667295 = AKCIkkeEZEOp5269052;     AKCIkkeEZEOp5269052 = AKCIkkeEZEOp8414742;     AKCIkkeEZEOp8414742 = AKCIkkeEZEOp55671142;     AKCIkkeEZEOp55671142 = AKCIkkeEZEOp14013444;     AKCIkkeEZEOp14013444 = AKCIkkeEZEOp61704412;     AKCIkkeEZEOp61704412 = AKCIkkeEZEOp2380258;     AKCIkkeEZEOp2380258 = AKCIkkeEZEOp48329718;     AKCIkkeEZEOp48329718 = AKCIkkeEZEOp13029036;     AKCIkkeEZEOp13029036 = AKCIkkeEZEOp12849116;     AKCIkkeEZEOp12849116 = AKCIkkeEZEOp42874452;     AKCIkkeEZEOp42874452 = AKCIkkeEZEOp32073667;     AKCIkkeEZEOp32073667 = AKCIkkeEZEOp2730249;     AKCIkkeEZEOp2730249 = AKCIkkeEZEOp4072945;     AKCIkkeEZEOp4072945 = AKCIkkeEZEOp7269940;     AKCIkkeEZEOp7269940 = AKCIkkeEZEOp1517920;     AKCIkkeEZEOp1517920 = AKCIkkeEZEOp32942330;     AKCIkkeEZEOp32942330 = AKCIkkeEZEOp42798522;     AKCIkkeEZEOp42798522 = AKCIkkeEZEOp82008639;     AKCIkkeEZEOp82008639 = AKCIkkeEZEOp86524895;     AKCIkkeEZEOp86524895 = AKCIkkeEZEOp47035171;     AKCIkkeEZEOp47035171 = AKCIkkeEZEOp41610849;     AKCIkkeEZEOp41610849 = AKCIkkeEZEOp73304562;     AKCIkkeEZEOp73304562 = AKCIkkeEZEOp35926118;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VImPsRLvLmIVPJ64246355() {     double PfvqzgxGBfGj55394288 = -777210300;    double PfvqzgxGBfGj51803900 = -500945888;    double PfvqzgxGBfGj79280316 = -217130759;    double PfvqzgxGBfGj59189481 = -768734159;    double PfvqzgxGBfGj68345216 = -934998522;    double PfvqzgxGBfGj31994244 = -937334985;    double PfvqzgxGBfGj7494795 = -74235070;    double PfvqzgxGBfGj8086067 = -332206521;    double PfvqzgxGBfGj44053694 = -206681322;    double PfvqzgxGBfGj10108476 = -682024025;    double PfvqzgxGBfGj26103199 = -983947598;    double PfvqzgxGBfGj12953057 = -362924590;    double PfvqzgxGBfGj80214015 = -366807026;    double PfvqzgxGBfGj69598447 = 15226155;    double PfvqzgxGBfGj66598886 = -908330845;    double PfvqzgxGBfGj21193441 = -272365059;    double PfvqzgxGBfGj22737383 = -969095684;    double PfvqzgxGBfGj98815969 = -432476682;    double PfvqzgxGBfGj72038431 = 5670714;    double PfvqzgxGBfGj46704743 = -277053395;    double PfvqzgxGBfGj32519051 = -840495592;    double PfvqzgxGBfGj23074531 = -616013629;    double PfvqzgxGBfGj81433191 = -262949453;    double PfvqzgxGBfGj78755009 = -329773359;    double PfvqzgxGBfGj1739092 = -57826587;    double PfvqzgxGBfGj81562932 = -256487987;    double PfvqzgxGBfGj68059868 = 35908768;    double PfvqzgxGBfGj33324816 = -968314642;    double PfvqzgxGBfGj53266165 = -304014318;    double PfvqzgxGBfGj94028081 = -850028441;    double PfvqzgxGBfGj18001796 = -692641903;    double PfvqzgxGBfGj28999519 = -24608228;    double PfvqzgxGBfGj96624677 = -608586858;    double PfvqzgxGBfGj22468362 = -952993830;    double PfvqzgxGBfGj70494255 = -506061565;    double PfvqzgxGBfGj25658733 = -636118152;    double PfvqzgxGBfGj77063373 = -707226049;    double PfvqzgxGBfGj93007124 = -446300393;    double PfvqzgxGBfGj91358883 = 70494113;    double PfvqzgxGBfGj86350690 = -418053986;    double PfvqzgxGBfGj3620472 = -535538061;    double PfvqzgxGBfGj29698654 = -759157403;    double PfvqzgxGBfGj92214082 = -897692883;    double PfvqzgxGBfGj68978429 = -319824342;    double PfvqzgxGBfGj35792701 = -596132929;    double PfvqzgxGBfGj36581988 = 71092856;    double PfvqzgxGBfGj3114209 = -791274239;    double PfvqzgxGBfGj70274123 = -524102079;    double PfvqzgxGBfGj61964320 = 58673441;    double PfvqzgxGBfGj50039293 = -381055477;    double PfvqzgxGBfGj35427078 = -706948896;    double PfvqzgxGBfGj91617535 = -743857042;    double PfvqzgxGBfGj46396239 = -441597555;    double PfvqzgxGBfGj15204151 = -877357363;    double PfvqzgxGBfGj31727305 = -733925184;    double PfvqzgxGBfGj32319758 = -61196672;    double PfvqzgxGBfGj70370709 = -137996435;    double PfvqzgxGBfGj525307 = -887357401;    double PfvqzgxGBfGj57450390 = -610907572;    double PfvqzgxGBfGj86782283 = -578510536;    double PfvqzgxGBfGj63934376 = -873243753;    double PfvqzgxGBfGj74169979 = -105920429;    double PfvqzgxGBfGj54819901 = 71807797;    double PfvqzgxGBfGj50025613 = -356652882;    double PfvqzgxGBfGj92106679 = -989382123;    double PfvqzgxGBfGj97103680 = -859339371;    double PfvqzgxGBfGj16328379 = -754337732;    double PfvqzgxGBfGj57745653 = -413813197;    double PfvqzgxGBfGj99104192 = -478712280;    double PfvqzgxGBfGj40940153 = -172212694;    double PfvqzgxGBfGj44130068 = -565139011;    double PfvqzgxGBfGj29730259 = -422795292;    double PfvqzgxGBfGj7457087 = -402970795;    double PfvqzgxGBfGj85687740 = -576275301;    double PfvqzgxGBfGj43084271 = -741515335;    double PfvqzgxGBfGj2820398 = 18661810;    double PfvqzgxGBfGj30860449 = -718320746;    double PfvqzgxGBfGj12454763 = -943125112;    double PfvqzgxGBfGj42962309 = -733640430;    double PfvqzgxGBfGj65157103 = -28919443;    double PfvqzgxGBfGj78448724 = -465213748;    double PfvqzgxGBfGj97785744 = -439989154;    double PfvqzgxGBfGj71360495 = -926988083;    double PfvqzgxGBfGj3226872 = -922958842;    double PfvqzgxGBfGj58601003 = -43079545;    double PfvqzgxGBfGj26384261 = -948784861;    double PfvqzgxGBfGj82603279 = -583010674;    double PfvqzgxGBfGj81420527 = -731229496;    double PfvqzgxGBfGj90741057 = -119068646;    double PfvqzgxGBfGj38174498 = -344864894;    double PfvqzgxGBfGj55288024 = -398121717;    double PfvqzgxGBfGj76538067 = -819868648;    double PfvqzgxGBfGj35556734 = -835392821;    double PfvqzgxGBfGj4576600 = -350995352;    double PfvqzgxGBfGj22416315 = -544810233;    double PfvqzgxGBfGj29450493 = -329617632;    double PfvqzgxGBfGj74878752 = -730965200;    double PfvqzgxGBfGj42188469 = -441040001;    double PfvqzgxGBfGj76871749 = -330442220;    double PfvqzgxGBfGj38689021 = -777210300;     PfvqzgxGBfGj55394288 = PfvqzgxGBfGj51803900;     PfvqzgxGBfGj51803900 = PfvqzgxGBfGj79280316;     PfvqzgxGBfGj79280316 = PfvqzgxGBfGj59189481;     PfvqzgxGBfGj59189481 = PfvqzgxGBfGj68345216;     PfvqzgxGBfGj68345216 = PfvqzgxGBfGj31994244;     PfvqzgxGBfGj31994244 = PfvqzgxGBfGj7494795;     PfvqzgxGBfGj7494795 = PfvqzgxGBfGj8086067;     PfvqzgxGBfGj8086067 = PfvqzgxGBfGj44053694;     PfvqzgxGBfGj44053694 = PfvqzgxGBfGj10108476;     PfvqzgxGBfGj10108476 = PfvqzgxGBfGj26103199;     PfvqzgxGBfGj26103199 = PfvqzgxGBfGj12953057;     PfvqzgxGBfGj12953057 = PfvqzgxGBfGj80214015;     PfvqzgxGBfGj80214015 = PfvqzgxGBfGj69598447;     PfvqzgxGBfGj69598447 = PfvqzgxGBfGj66598886;     PfvqzgxGBfGj66598886 = PfvqzgxGBfGj21193441;     PfvqzgxGBfGj21193441 = PfvqzgxGBfGj22737383;     PfvqzgxGBfGj22737383 = PfvqzgxGBfGj98815969;     PfvqzgxGBfGj98815969 = PfvqzgxGBfGj72038431;     PfvqzgxGBfGj72038431 = PfvqzgxGBfGj46704743;     PfvqzgxGBfGj46704743 = PfvqzgxGBfGj32519051;     PfvqzgxGBfGj32519051 = PfvqzgxGBfGj23074531;     PfvqzgxGBfGj23074531 = PfvqzgxGBfGj81433191;     PfvqzgxGBfGj81433191 = PfvqzgxGBfGj78755009;     PfvqzgxGBfGj78755009 = PfvqzgxGBfGj1739092;     PfvqzgxGBfGj1739092 = PfvqzgxGBfGj81562932;     PfvqzgxGBfGj81562932 = PfvqzgxGBfGj68059868;     PfvqzgxGBfGj68059868 = PfvqzgxGBfGj33324816;     PfvqzgxGBfGj33324816 = PfvqzgxGBfGj53266165;     PfvqzgxGBfGj53266165 = PfvqzgxGBfGj94028081;     PfvqzgxGBfGj94028081 = PfvqzgxGBfGj18001796;     PfvqzgxGBfGj18001796 = PfvqzgxGBfGj28999519;     PfvqzgxGBfGj28999519 = PfvqzgxGBfGj96624677;     PfvqzgxGBfGj96624677 = PfvqzgxGBfGj22468362;     PfvqzgxGBfGj22468362 = PfvqzgxGBfGj70494255;     PfvqzgxGBfGj70494255 = PfvqzgxGBfGj25658733;     PfvqzgxGBfGj25658733 = PfvqzgxGBfGj77063373;     PfvqzgxGBfGj77063373 = PfvqzgxGBfGj93007124;     PfvqzgxGBfGj93007124 = PfvqzgxGBfGj91358883;     PfvqzgxGBfGj91358883 = PfvqzgxGBfGj86350690;     PfvqzgxGBfGj86350690 = PfvqzgxGBfGj3620472;     PfvqzgxGBfGj3620472 = PfvqzgxGBfGj29698654;     PfvqzgxGBfGj29698654 = PfvqzgxGBfGj92214082;     PfvqzgxGBfGj92214082 = PfvqzgxGBfGj68978429;     PfvqzgxGBfGj68978429 = PfvqzgxGBfGj35792701;     PfvqzgxGBfGj35792701 = PfvqzgxGBfGj36581988;     PfvqzgxGBfGj36581988 = PfvqzgxGBfGj3114209;     PfvqzgxGBfGj3114209 = PfvqzgxGBfGj70274123;     PfvqzgxGBfGj70274123 = PfvqzgxGBfGj61964320;     PfvqzgxGBfGj61964320 = PfvqzgxGBfGj50039293;     PfvqzgxGBfGj50039293 = PfvqzgxGBfGj35427078;     PfvqzgxGBfGj35427078 = PfvqzgxGBfGj91617535;     PfvqzgxGBfGj91617535 = PfvqzgxGBfGj46396239;     PfvqzgxGBfGj46396239 = PfvqzgxGBfGj15204151;     PfvqzgxGBfGj15204151 = PfvqzgxGBfGj31727305;     PfvqzgxGBfGj31727305 = PfvqzgxGBfGj32319758;     PfvqzgxGBfGj32319758 = PfvqzgxGBfGj70370709;     PfvqzgxGBfGj70370709 = PfvqzgxGBfGj525307;     PfvqzgxGBfGj525307 = PfvqzgxGBfGj57450390;     PfvqzgxGBfGj57450390 = PfvqzgxGBfGj86782283;     PfvqzgxGBfGj86782283 = PfvqzgxGBfGj63934376;     PfvqzgxGBfGj63934376 = PfvqzgxGBfGj74169979;     PfvqzgxGBfGj74169979 = PfvqzgxGBfGj54819901;     PfvqzgxGBfGj54819901 = PfvqzgxGBfGj50025613;     PfvqzgxGBfGj50025613 = PfvqzgxGBfGj92106679;     PfvqzgxGBfGj92106679 = PfvqzgxGBfGj97103680;     PfvqzgxGBfGj97103680 = PfvqzgxGBfGj16328379;     PfvqzgxGBfGj16328379 = PfvqzgxGBfGj57745653;     PfvqzgxGBfGj57745653 = PfvqzgxGBfGj99104192;     PfvqzgxGBfGj99104192 = PfvqzgxGBfGj40940153;     PfvqzgxGBfGj40940153 = PfvqzgxGBfGj44130068;     PfvqzgxGBfGj44130068 = PfvqzgxGBfGj29730259;     PfvqzgxGBfGj29730259 = PfvqzgxGBfGj7457087;     PfvqzgxGBfGj7457087 = PfvqzgxGBfGj85687740;     PfvqzgxGBfGj85687740 = PfvqzgxGBfGj43084271;     PfvqzgxGBfGj43084271 = PfvqzgxGBfGj2820398;     PfvqzgxGBfGj2820398 = PfvqzgxGBfGj30860449;     PfvqzgxGBfGj30860449 = PfvqzgxGBfGj12454763;     PfvqzgxGBfGj12454763 = PfvqzgxGBfGj42962309;     PfvqzgxGBfGj42962309 = PfvqzgxGBfGj65157103;     PfvqzgxGBfGj65157103 = PfvqzgxGBfGj78448724;     PfvqzgxGBfGj78448724 = PfvqzgxGBfGj97785744;     PfvqzgxGBfGj97785744 = PfvqzgxGBfGj71360495;     PfvqzgxGBfGj71360495 = PfvqzgxGBfGj3226872;     PfvqzgxGBfGj3226872 = PfvqzgxGBfGj58601003;     PfvqzgxGBfGj58601003 = PfvqzgxGBfGj26384261;     PfvqzgxGBfGj26384261 = PfvqzgxGBfGj82603279;     PfvqzgxGBfGj82603279 = PfvqzgxGBfGj81420527;     PfvqzgxGBfGj81420527 = PfvqzgxGBfGj90741057;     PfvqzgxGBfGj90741057 = PfvqzgxGBfGj38174498;     PfvqzgxGBfGj38174498 = PfvqzgxGBfGj55288024;     PfvqzgxGBfGj55288024 = PfvqzgxGBfGj76538067;     PfvqzgxGBfGj76538067 = PfvqzgxGBfGj35556734;     PfvqzgxGBfGj35556734 = PfvqzgxGBfGj4576600;     PfvqzgxGBfGj4576600 = PfvqzgxGBfGj22416315;     PfvqzgxGBfGj22416315 = PfvqzgxGBfGj29450493;     PfvqzgxGBfGj29450493 = PfvqzgxGBfGj74878752;     PfvqzgxGBfGj74878752 = PfvqzgxGBfGj42188469;     PfvqzgxGBfGj42188469 = PfvqzgxGBfGj76871749;     PfvqzgxGBfGj76871749 = PfvqzgxGBfGj38689021;     PfvqzgxGBfGj38689021 = PfvqzgxGBfGj55394288;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lPwDLRgkbq24549013() {     double ndUfoHfdHTzP45520597 = -835966501;    double ndUfoHfdHTzP34928965 = -875872058;    double ndUfoHfdHTzP74773015 = -353925220;    double ndUfoHfdHTzP32688056 = -954905981;    double ndUfoHfdHTzP81401951 = -876321964;    double ndUfoHfdHTzP12780649 = -829968092;    double ndUfoHfdHTzP2158233 = -811780543;    double ndUfoHfdHTzP60964629 = 31345740;    double ndUfoHfdHTzP67865382 = -214573960;    double ndUfoHfdHTzP14364146 = -251898551;    double ndUfoHfdHTzP2255019 = -392367756;    double ndUfoHfdHTzP47702564 = -942512725;    double ndUfoHfdHTzP18560148 = -679042887;    double ndUfoHfdHTzP8017302 = 17065271;    double ndUfoHfdHTzP64673257 = -293451788;    double ndUfoHfdHTzP45373183 = 27255071;    double ndUfoHfdHTzP66699563 = -130440925;    double ndUfoHfdHTzP20171683 = -875325974;    double ndUfoHfdHTzP32952823 = -460739722;    double ndUfoHfdHTzP14028991 = -924931705;    double ndUfoHfdHTzP20441454 = -544920684;    double ndUfoHfdHTzP21156113 = -949110264;    double ndUfoHfdHTzP14671610 = -669409374;    double ndUfoHfdHTzP86676107 = -777797734;    double ndUfoHfdHTzP48624279 = -701337531;    double ndUfoHfdHTzP353898 = -132361722;    double ndUfoHfdHTzP90027203 = -823620226;    double ndUfoHfdHTzP56495191 = 71795300;    double ndUfoHfdHTzP14475163 = 33786634;    double ndUfoHfdHTzP41817161 = -724430832;    double ndUfoHfdHTzP21465199 = 80691553;    double ndUfoHfdHTzP28366433 = -525432648;    double ndUfoHfdHTzP5593719 = -908812018;    double ndUfoHfdHTzP46307007 = -944444988;    double ndUfoHfdHTzP6090790 = -156397226;    double ndUfoHfdHTzP78889739 = -939147562;    double ndUfoHfdHTzP77296942 = -223041953;    double ndUfoHfdHTzP17364408 = -312359637;    double ndUfoHfdHTzP1891901 = -736967933;    double ndUfoHfdHTzP30862833 = -322761759;    double ndUfoHfdHTzP17320145 = -241399337;    double ndUfoHfdHTzP84343116 = -573650616;    double ndUfoHfdHTzP52030923 = -273118478;    double ndUfoHfdHTzP99640369 = -183907531;    double ndUfoHfdHTzP27757119 = -708642885;    double ndUfoHfdHTzP57020982 = -412531050;    double ndUfoHfdHTzP83537499 = -339756739;    double ndUfoHfdHTzP60660582 = -550758332;    double ndUfoHfdHTzP89882974 = -377265906;    double ndUfoHfdHTzP79319699 = -838051814;    double ndUfoHfdHTzP64792602 = 18669059;    double ndUfoHfdHTzP35390642 = -708283875;    double ndUfoHfdHTzP95848693 = -153450550;    double ndUfoHfdHTzP68111213 = 99087356;    double ndUfoHfdHTzP4107560 = -862525456;    double ndUfoHfdHTzP24364484 = -886856237;    double ndUfoHfdHTzP20257356 = -106462684;    double ndUfoHfdHTzP88096908 = -576127487;    double ndUfoHfdHTzP84063777 = -153568450;    double ndUfoHfdHTzP81048054 = -643960243;    double ndUfoHfdHTzP22753446 = 93652133;    double ndUfoHfdHTzP45663042 = -783575844;    double ndUfoHfdHTzP46489466 = 97559106;    double ndUfoHfdHTzP26048221 = -490143128;    double ndUfoHfdHTzP92898947 = -232590105;    double ndUfoHfdHTzP73888585 = -866935109;    double ndUfoHfdHTzP42108845 = 66299292;    double ndUfoHfdHTzP72253140 = -734597899;    double ndUfoHfdHTzP1926512 = -826537504;    double ndUfoHfdHTzP85783517 = -354304227;    double ndUfoHfdHTzP68076241 = -749702976;    double ndUfoHfdHTzP49335156 = -818081289;    double ndUfoHfdHTzP18279783 = -38358042;    double ndUfoHfdHTzP2089991 = -37977964;    double ndUfoHfdHTzP96708845 = -583532369;    double ndUfoHfdHTzP36098337 = -971270069;    double ndUfoHfdHTzP69125189 = -575991786;    double ndUfoHfdHTzP15031240 = -385501844;    double ndUfoHfdHTzP58918988 = 30845150;    double ndUfoHfdHTzP91603297 = -188806482;    double ndUfoHfdHTzP16816399 = -792604983;    double ndUfoHfdHTzP29366621 = -172861894;    double ndUfoHfdHTzP66612217 = -550938795;    double ndUfoHfdHTzP35155464 = -128161553;    double ndUfoHfdHTzP77024559 = -643099892;    double ndUfoHfdHTzP86074556 = -211024572;    double ndUfoHfdHTzP32517739 = -271982099;    double ndUfoHfdHTzP37482506 = -907899374;    double ndUfoHfdHTzP42199447 = 18080467;    double ndUfoHfdHTzP81726305 = -269540989;    double ndUfoHfdHTzP58632384 = -732684878;    double ndUfoHfdHTzP89200034 = -646914467;    double ndUfoHfdHTzP33300631 = -58791187;    double ndUfoHfdHTzP20843846 = 6992309;    double ndUfoHfdHTzP8109387 = -316413892;    double ndUfoHfdHTzP71657103 = -457823493;    double ndUfoHfdHTzP37853650 = -571209722;    double ndUfoHfdHTzP25982703 = -782975350;    double ndUfoHfdHTzP6741423 = -951317427;    double ndUfoHfdHTzP53868533 = -835966501;     ndUfoHfdHTzP45520597 = ndUfoHfdHTzP34928965;     ndUfoHfdHTzP34928965 = ndUfoHfdHTzP74773015;     ndUfoHfdHTzP74773015 = ndUfoHfdHTzP32688056;     ndUfoHfdHTzP32688056 = ndUfoHfdHTzP81401951;     ndUfoHfdHTzP81401951 = ndUfoHfdHTzP12780649;     ndUfoHfdHTzP12780649 = ndUfoHfdHTzP2158233;     ndUfoHfdHTzP2158233 = ndUfoHfdHTzP60964629;     ndUfoHfdHTzP60964629 = ndUfoHfdHTzP67865382;     ndUfoHfdHTzP67865382 = ndUfoHfdHTzP14364146;     ndUfoHfdHTzP14364146 = ndUfoHfdHTzP2255019;     ndUfoHfdHTzP2255019 = ndUfoHfdHTzP47702564;     ndUfoHfdHTzP47702564 = ndUfoHfdHTzP18560148;     ndUfoHfdHTzP18560148 = ndUfoHfdHTzP8017302;     ndUfoHfdHTzP8017302 = ndUfoHfdHTzP64673257;     ndUfoHfdHTzP64673257 = ndUfoHfdHTzP45373183;     ndUfoHfdHTzP45373183 = ndUfoHfdHTzP66699563;     ndUfoHfdHTzP66699563 = ndUfoHfdHTzP20171683;     ndUfoHfdHTzP20171683 = ndUfoHfdHTzP32952823;     ndUfoHfdHTzP32952823 = ndUfoHfdHTzP14028991;     ndUfoHfdHTzP14028991 = ndUfoHfdHTzP20441454;     ndUfoHfdHTzP20441454 = ndUfoHfdHTzP21156113;     ndUfoHfdHTzP21156113 = ndUfoHfdHTzP14671610;     ndUfoHfdHTzP14671610 = ndUfoHfdHTzP86676107;     ndUfoHfdHTzP86676107 = ndUfoHfdHTzP48624279;     ndUfoHfdHTzP48624279 = ndUfoHfdHTzP353898;     ndUfoHfdHTzP353898 = ndUfoHfdHTzP90027203;     ndUfoHfdHTzP90027203 = ndUfoHfdHTzP56495191;     ndUfoHfdHTzP56495191 = ndUfoHfdHTzP14475163;     ndUfoHfdHTzP14475163 = ndUfoHfdHTzP41817161;     ndUfoHfdHTzP41817161 = ndUfoHfdHTzP21465199;     ndUfoHfdHTzP21465199 = ndUfoHfdHTzP28366433;     ndUfoHfdHTzP28366433 = ndUfoHfdHTzP5593719;     ndUfoHfdHTzP5593719 = ndUfoHfdHTzP46307007;     ndUfoHfdHTzP46307007 = ndUfoHfdHTzP6090790;     ndUfoHfdHTzP6090790 = ndUfoHfdHTzP78889739;     ndUfoHfdHTzP78889739 = ndUfoHfdHTzP77296942;     ndUfoHfdHTzP77296942 = ndUfoHfdHTzP17364408;     ndUfoHfdHTzP17364408 = ndUfoHfdHTzP1891901;     ndUfoHfdHTzP1891901 = ndUfoHfdHTzP30862833;     ndUfoHfdHTzP30862833 = ndUfoHfdHTzP17320145;     ndUfoHfdHTzP17320145 = ndUfoHfdHTzP84343116;     ndUfoHfdHTzP84343116 = ndUfoHfdHTzP52030923;     ndUfoHfdHTzP52030923 = ndUfoHfdHTzP99640369;     ndUfoHfdHTzP99640369 = ndUfoHfdHTzP27757119;     ndUfoHfdHTzP27757119 = ndUfoHfdHTzP57020982;     ndUfoHfdHTzP57020982 = ndUfoHfdHTzP83537499;     ndUfoHfdHTzP83537499 = ndUfoHfdHTzP60660582;     ndUfoHfdHTzP60660582 = ndUfoHfdHTzP89882974;     ndUfoHfdHTzP89882974 = ndUfoHfdHTzP79319699;     ndUfoHfdHTzP79319699 = ndUfoHfdHTzP64792602;     ndUfoHfdHTzP64792602 = ndUfoHfdHTzP35390642;     ndUfoHfdHTzP35390642 = ndUfoHfdHTzP95848693;     ndUfoHfdHTzP95848693 = ndUfoHfdHTzP68111213;     ndUfoHfdHTzP68111213 = ndUfoHfdHTzP4107560;     ndUfoHfdHTzP4107560 = ndUfoHfdHTzP24364484;     ndUfoHfdHTzP24364484 = ndUfoHfdHTzP20257356;     ndUfoHfdHTzP20257356 = ndUfoHfdHTzP88096908;     ndUfoHfdHTzP88096908 = ndUfoHfdHTzP84063777;     ndUfoHfdHTzP84063777 = ndUfoHfdHTzP81048054;     ndUfoHfdHTzP81048054 = ndUfoHfdHTzP22753446;     ndUfoHfdHTzP22753446 = ndUfoHfdHTzP45663042;     ndUfoHfdHTzP45663042 = ndUfoHfdHTzP46489466;     ndUfoHfdHTzP46489466 = ndUfoHfdHTzP26048221;     ndUfoHfdHTzP26048221 = ndUfoHfdHTzP92898947;     ndUfoHfdHTzP92898947 = ndUfoHfdHTzP73888585;     ndUfoHfdHTzP73888585 = ndUfoHfdHTzP42108845;     ndUfoHfdHTzP42108845 = ndUfoHfdHTzP72253140;     ndUfoHfdHTzP72253140 = ndUfoHfdHTzP1926512;     ndUfoHfdHTzP1926512 = ndUfoHfdHTzP85783517;     ndUfoHfdHTzP85783517 = ndUfoHfdHTzP68076241;     ndUfoHfdHTzP68076241 = ndUfoHfdHTzP49335156;     ndUfoHfdHTzP49335156 = ndUfoHfdHTzP18279783;     ndUfoHfdHTzP18279783 = ndUfoHfdHTzP2089991;     ndUfoHfdHTzP2089991 = ndUfoHfdHTzP96708845;     ndUfoHfdHTzP96708845 = ndUfoHfdHTzP36098337;     ndUfoHfdHTzP36098337 = ndUfoHfdHTzP69125189;     ndUfoHfdHTzP69125189 = ndUfoHfdHTzP15031240;     ndUfoHfdHTzP15031240 = ndUfoHfdHTzP58918988;     ndUfoHfdHTzP58918988 = ndUfoHfdHTzP91603297;     ndUfoHfdHTzP91603297 = ndUfoHfdHTzP16816399;     ndUfoHfdHTzP16816399 = ndUfoHfdHTzP29366621;     ndUfoHfdHTzP29366621 = ndUfoHfdHTzP66612217;     ndUfoHfdHTzP66612217 = ndUfoHfdHTzP35155464;     ndUfoHfdHTzP35155464 = ndUfoHfdHTzP77024559;     ndUfoHfdHTzP77024559 = ndUfoHfdHTzP86074556;     ndUfoHfdHTzP86074556 = ndUfoHfdHTzP32517739;     ndUfoHfdHTzP32517739 = ndUfoHfdHTzP37482506;     ndUfoHfdHTzP37482506 = ndUfoHfdHTzP42199447;     ndUfoHfdHTzP42199447 = ndUfoHfdHTzP81726305;     ndUfoHfdHTzP81726305 = ndUfoHfdHTzP58632384;     ndUfoHfdHTzP58632384 = ndUfoHfdHTzP89200034;     ndUfoHfdHTzP89200034 = ndUfoHfdHTzP33300631;     ndUfoHfdHTzP33300631 = ndUfoHfdHTzP20843846;     ndUfoHfdHTzP20843846 = ndUfoHfdHTzP8109387;     ndUfoHfdHTzP8109387 = ndUfoHfdHTzP71657103;     ndUfoHfdHTzP71657103 = ndUfoHfdHTzP37853650;     ndUfoHfdHTzP37853650 = ndUfoHfdHTzP25982703;     ndUfoHfdHTzP25982703 = ndUfoHfdHTzP6741423;     ndUfoHfdHTzP6741423 = ndUfoHfdHTzP53868533;     ndUfoHfdHTzP53868533 = ndUfoHfdHTzP45520597;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RHUoxZomBt72974704() {     double XicshsyIqN34458555 = -319097889;    double XicshsyIqN6333614 = -856979269;    double XicshsyIqN33118696 = 57099703;    double XicshsyIqN73712388 = -357919299;    double XicshsyIqN80084958 = -361777965;    double XicshsyIqN55263439 = -686079426;    double XicshsyIqN49685156 = -947258886;    double XicshsyIqN24161584 = -780225862;    double XicshsyIqN18553936 = -367545200;    double XicshsyIqN71061713 = -628868925;    double XicshsyIqN5621395 = -718480338;    double XicshsyIqN51118872 = -457248544;    double XicshsyIqN41340237 = -697342821;    double XicshsyIqN36388327 = -431217918;    double XicshsyIqN24433153 = -898941158;    double XicshsyIqN84163344 = -540929884;    double XicshsyIqN64660600 = 30913354;    double XicshsyIqN87547052 = -552567505;    double XicshsyIqN52115514 = -510653677;    double XicshsyIqN7233154 = -556998504;    double XicshsyIqN25436242 = -179728742;    double XicshsyIqN6546213 = 79781281;    double XicshsyIqN41798022 = -324819150;    double XicshsyIqN61206917 = -630655587;    double XicshsyIqN88920585 = -908264286;    double XicshsyIqN80745300 = -76900676;    double XicshsyIqN65328069 = -78722161;    double XicshsyIqN49227659 = -653429511;    double XicshsyIqN44795465 = -107518079;    double XicshsyIqN17208402 = -988450378;    double XicshsyIqN72720199 = -103187324;    double XicshsyIqN11344090 = 93824756;    double XicshsyIqN57182820 = -43741497;    double XicshsyIqN63749311 = -759480967;    double XicshsyIqN15361953 = -216974357;    double XicshsyIqN40314567 = -151343342;    double XicshsyIqN36078502 = -426880759;    double XicshsyIqN32849936 = -467961598;    double XicshsyIqN77690151 = -112627229;    double XicshsyIqN80458081 = -688466030;    double XicshsyIqN3320343 = -413985953;    double XicshsyIqN11636968 = 97004953;    double XicshsyIqN4226566 = -578939510;    double XicshsyIqN26603473 = -92811741;    double XicshsyIqN16809428 = -319573961;    double XicshsyIqN55836244 = -709182725;    double XicshsyIqN90592810 = -596823229;    double XicshsyIqN17126348 = 59857378;    double XicshsyIqN42489559 = -239203417;    double XicshsyIqN6105029 = -463320283;    double XicshsyIqN60348898 = -899422051;    double XicshsyIqN14651549 = 7546843;    double XicshsyIqN91636899 = -357654970;    double XicshsyIqN61408702 = -32119954;    double XicshsyIqN47538463 = -472417906;    double XicshsyIqN27912343 = -298879170;    double XicshsyIqN64535591 = -432160119;    double XicshsyIqN71911778 = -312244710;    double XicshsyIqN84791803 = -449655013;    double XicshsyIqN99339657 = -184877290;    double XicshsyIqN89935369 = -507357266;    double XicshsyIqN457497 = -193829376;    double XicshsyIqN79366118 = -572707783;    double XicshsyIqN1345534 = -379094823;    double XicshsyIqN98341514 = -425681602;    double XicshsyIqN94277304 = -712305095;    double XicshsyIqN93936052 = -313507047;    double XicshsyIqN77590926 = -937861854;    double XicshsyIqN21026374 = -114243561;    double XicshsyIqN84118586 = -647597816;    double XicshsyIqN48084843 = -14049126;    double XicshsyIqN31810664 = -501125048;    double XicshsyIqN9856902 = -339940276;    double XicshsyIqN71657432 = -822187647;    double XicshsyIqN3912812 = -43012552;    double XicshsyIqN13799275 = -176733696;    double XicshsyIqN2319647 = -341279210;    double XicshsyIqN15194550 = -132007409;    double XicshsyIqN44397490 = -211081627;    double XicshsyIqN33084342 = -99081562;    double XicshsyIqN90152490 = -480077448;    double XicshsyIqN48201722 = -38579540;    double XicshsyIqN6738101 = -314226094;    double XicshsyIqN38690437 = -644197797;    double XicshsyIqN56859504 = 10971673;    double XicshsyIqN58068651 = -10734168;    double XicshsyIqN19707190 = -548520275;    double XicshsyIqN95774117 = 88378456;    double XicshsyIqN16210849 = -187063062;    double XicshsyIqN87449609 = -918095187;    double XicshsyIqN75778975 = -719183224;    double XicshsyIqN64166723 = -14636049;    double XicshsyIqN48058133 = 81693415;    double XicshsyIqN78350493 = -927749940;    double XicshsyIqN90522712 = -81108765;    double XicshsyIqN2862846 = -120156578;    double XicshsyIqN32270849 = -330287264;    double XicshsyIqN2881033 = -99844687;    double XicshsyIqN28261959 = -667130140;    double XicshsyIqN22532123 = -319097889;     XicshsyIqN34458555 = XicshsyIqN6333614;     XicshsyIqN6333614 = XicshsyIqN33118696;     XicshsyIqN33118696 = XicshsyIqN73712388;     XicshsyIqN73712388 = XicshsyIqN80084958;     XicshsyIqN80084958 = XicshsyIqN55263439;     XicshsyIqN55263439 = XicshsyIqN49685156;     XicshsyIqN49685156 = XicshsyIqN24161584;     XicshsyIqN24161584 = XicshsyIqN18553936;     XicshsyIqN18553936 = XicshsyIqN71061713;     XicshsyIqN71061713 = XicshsyIqN5621395;     XicshsyIqN5621395 = XicshsyIqN51118872;     XicshsyIqN51118872 = XicshsyIqN41340237;     XicshsyIqN41340237 = XicshsyIqN36388327;     XicshsyIqN36388327 = XicshsyIqN24433153;     XicshsyIqN24433153 = XicshsyIqN84163344;     XicshsyIqN84163344 = XicshsyIqN64660600;     XicshsyIqN64660600 = XicshsyIqN87547052;     XicshsyIqN87547052 = XicshsyIqN52115514;     XicshsyIqN52115514 = XicshsyIqN7233154;     XicshsyIqN7233154 = XicshsyIqN25436242;     XicshsyIqN25436242 = XicshsyIqN6546213;     XicshsyIqN6546213 = XicshsyIqN41798022;     XicshsyIqN41798022 = XicshsyIqN61206917;     XicshsyIqN61206917 = XicshsyIqN88920585;     XicshsyIqN88920585 = XicshsyIqN80745300;     XicshsyIqN80745300 = XicshsyIqN65328069;     XicshsyIqN65328069 = XicshsyIqN49227659;     XicshsyIqN49227659 = XicshsyIqN44795465;     XicshsyIqN44795465 = XicshsyIqN17208402;     XicshsyIqN17208402 = XicshsyIqN72720199;     XicshsyIqN72720199 = XicshsyIqN11344090;     XicshsyIqN11344090 = XicshsyIqN57182820;     XicshsyIqN57182820 = XicshsyIqN63749311;     XicshsyIqN63749311 = XicshsyIqN15361953;     XicshsyIqN15361953 = XicshsyIqN40314567;     XicshsyIqN40314567 = XicshsyIqN36078502;     XicshsyIqN36078502 = XicshsyIqN32849936;     XicshsyIqN32849936 = XicshsyIqN77690151;     XicshsyIqN77690151 = XicshsyIqN80458081;     XicshsyIqN80458081 = XicshsyIqN3320343;     XicshsyIqN3320343 = XicshsyIqN11636968;     XicshsyIqN11636968 = XicshsyIqN4226566;     XicshsyIqN4226566 = XicshsyIqN26603473;     XicshsyIqN26603473 = XicshsyIqN16809428;     XicshsyIqN16809428 = XicshsyIqN55836244;     XicshsyIqN55836244 = XicshsyIqN90592810;     XicshsyIqN90592810 = XicshsyIqN17126348;     XicshsyIqN17126348 = XicshsyIqN42489559;     XicshsyIqN42489559 = XicshsyIqN6105029;     XicshsyIqN6105029 = XicshsyIqN60348898;     XicshsyIqN60348898 = XicshsyIqN14651549;     XicshsyIqN14651549 = XicshsyIqN91636899;     XicshsyIqN91636899 = XicshsyIqN61408702;     XicshsyIqN61408702 = XicshsyIqN47538463;     XicshsyIqN47538463 = XicshsyIqN27912343;     XicshsyIqN27912343 = XicshsyIqN64535591;     XicshsyIqN64535591 = XicshsyIqN71911778;     XicshsyIqN71911778 = XicshsyIqN84791803;     XicshsyIqN84791803 = XicshsyIqN99339657;     XicshsyIqN99339657 = XicshsyIqN89935369;     XicshsyIqN89935369 = XicshsyIqN457497;     XicshsyIqN457497 = XicshsyIqN79366118;     XicshsyIqN79366118 = XicshsyIqN1345534;     XicshsyIqN1345534 = XicshsyIqN98341514;     XicshsyIqN98341514 = XicshsyIqN94277304;     XicshsyIqN94277304 = XicshsyIqN93936052;     XicshsyIqN93936052 = XicshsyIqN77590926;     XicshsyIqN77590926 = XicshsyIqN21026374;     XicshsyIqN21026374 = XicshsyIqN84118586;     XicshsyIqN84118586 = XicshsyIqN48084843;     XicshsyIqN48084843 = XicshsyIqN31810664;     XicshsyIqN31810664 = XicshsyIqN9856902;     XicshsyIqN9856902 = XicshsyIqN71657432;     XicshsyIqN71657432 = XicshsyIqN3912812;     XicshsyIqN3912812 = XicshsyIqN13799275;     XicshsyIqN13799275 = XicshsyIqN2319647;     XicshsyIqN2319647 = XicshsyIqN15194550;     XicshsyIqN15194550 = XicshsyIqN44397490;     XicshsyIqN44397490 = XicshsyIqN33084342;     XicshsyIqN33084342 = XicshsyIqN90152490;     XicshsyIqN90152490 = XicshsyIqN48201722;     XicshsyIqN48201722 = XicshsyIqN6738101;     XicshsyIqN6738101 = XicshsyIqN38690437;     XicshsyIqN38690437 = XicshsyIqN56859504;     XicshsyIqN56859504 = XicshsyIqN58068651;     XicshsyIqN58068651 = XicshsyIqN19707190;     XicshsyIqN19707190 = XicshsyIqN95774117;     XicshsyIqN95774117 = XicshsyIqN16210849;     XicshsyIqN16210849 = XicshsyIqN87449609;     XicshsyIqN87449609 = XicshsyIqN75778975;     XicshsyIqN75778975 = XicshsyIqN64166723;     XicshsyIqN64166723 = XicshsyIqN48058133;     XicshsyIqN48058133 = XicshsyIqN78350493;     XicshsyIqN78350493 = XicshsyIqN90522712;     XicshsyIqN90522712 = XicshsyIqN2862846;     XicshsyIqN2862846 = XicshsyIqN32270849;     XicshsyIqN32270849 = XicshsyIqN2881033;     XicshsyIqN2881033 = XicshsyIqN28261959;     XicshsyIqN28261959 = XicshsyIqN22532123;     XicshsyIqN22532123 = XicshsyIqN34458555;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WnoKAZxXhp33277362() {     double GytzAQHGuw24584864 = -377854090;    double GytzAQHGuw89458678 = -131905439;    double GytzAQHGuw28611395 = -79694758;    double GytzAQHGuw47210963 = -544091121;    double GytzAQHGuw93141693 = -303101407;    double GytzAQHGuw36049843 = -578712534;    double GytzAQHGuw44348594 = -584804359;    double GytzAQHGuw77040147 = -416673601;    double GytzAQHGuw42365623 = -375437838;    double GytzAQHGuw75317384 = -198743450;    double GytzAQHGuw81773213 = -126900495;    double GytzAQHGuw85868379 = 63163321;    double GytzAQHGuw79686369 = 90421318;    double GytzAQHGuw74807180 = -429378802;    double GytzAQHGuw22507525 = -284062101;    double GytzAQHGuw8343087 = -241309754;    double GytzAQHGuw8622781 = -230431887;    double GytzAQHGuw8902765 = -995416797;    double GytzAQHGuw13029905 = -977064113;    double GytzAQHGuw74557401 = -104876814;    double GytzAQHGuw13358644 = -984153835;    double GytzAQHGuw4627795 = -253315355;    double GytzAQHGuw75036440 = -731279072;    double GytzAQHGuw69128014 = 21320037;    double GytzAQHGuw35805773 = -451775230;    double GytzAQHGuw99536265 = 47225589;    double GytzAQHGuw87295404 = -938251155;    double GytzAQHGuw72398034 = -713319569;    double GytzAQHGuw6004463 = -869717127;    double GytzAQHGuw64997482 = -862852769;    double GytzAQHGuw76183602 = -429853868;    double GytzAQHGuw10711004 = -406999663;    double GytzAQHGuw66151861 = -343966657;    double GytzAQHGuw87587956 = -750932125;    double GytzAQHGuw50958487 = -967310018;    double GytzAQHGuw93545573 = -454372752;    double GytzAQHGuw36312070 = 57303337;    double GytzAQHGuw57207219 = -334020842;    double GytzAQHGuw88223167 = -920089275;    double GytzAQHGuw24970223 = -593173804;    double GytzAQHGuw17020016 = -119847229;    double GytzAQHGuw66281430 = -817488260;    double GytzAQHGuw64043407 = 45634895;    double GytzAQHGuw57265414 = 43105070;    double GytzAQHGuw8773845 = -432083917;    double GytzAQHGuw76275237 = -92806630;    double GytzAQHGuw71016101 = -145305729;    double GytzAQHGuw7512807 = 33201125;    double GytzAQHGuw70408213 = -675142764;    double GytzAQHGuw35385434 = -920316620;    double GytzAQHGuw89714421 = -173804096;    double GytzAQHGuw58424655 = 43120010;    double GytzAQHGuw41089355 = -69507964;    double GytzAQHGuw14315765 = -155675236;    double GytzAQHGuw19918718 = -601018178;    double GytzAQHGuw19957070 = -24538736;    double GytzAQHGuw14422238 = -400626368;    double GytzAQHGuw59483380 = -1014796;    double GytzAQHGuw11405191 = 7684109;    double GytzAQHGuw93605428 = -250326997;    double GytzAQHGuw48754439 = -640461380;    double GytzAQHGuw71950559 = -871484790;    double GytzAQHGuw71035684 = -546956474;    double GytzAQHGuw77368141 = -512585070;    double GytzAQHGuw99133781 = -768889583;    double GytzAQHGuw71062209 = -719900833;    double GytzAQHGuw19716519 = -592870023;    double GytzAQHGuw92098413 = -158646557;    double GytzAQHGuw23848694 = -462068785;    double GytzAQHGuw28961951 = -829689349;    double GytzAQHGuw72031016 = -198613092;    double GytzAQHGuw51415561 = -896411046;    double GytzAQHGuw20679597 = 24672477;    double GytzAQHGuw88059681 = -283890310;    double GytzAQHGuw57537386 = -985029586;    double GytzAQHGuw47077213 = -66665575;    double GytzAQHGuw40584387 = -198950250;    double GytzAQHGuw17771027 = -674384142;    double GytzAQHGuw60354169 = -546596047;    double GytzAQHGuw59530536 = -258968601;    double GytzAQHGuw28520165 = -807468683;    double GytzAQHGuw79782598 = -871452280;    double GytzAQHGuw1989822 = 61823194;    double GytzAQHGuw70619029 = -949400508;    double GytzAQHGuw75283060 = -589048673;    double GytzAQHGuw17758947 = -372973878;    double GytzAQHGuw69621649 = -237491699;    double GytzAQHGuw51836096 = -88291422;    double GytzAQHGuw67669238 = -49913948;    double GytzAQHGuw31001417 = -842771282;    double GytzAQHGuw79123335 = 46253615;    double GytzAQHGuw76828690 = -941681868;    double GytzAQHGuw45802029 = -241704951;    double GytzAQHGuw94617739 = -569762278;    double GytzAQHGuw76215784 = -952712424;    double GytzAQHGuw45069456 = -248362439;    double GytzAQHGuw95245746 = -170531787;    double GytzAQHGuw86675265 = -441780036;    double GytzAQHGuw58131632 = -188005348;    double GytzAQHGuw37711635 = -377854090;     GytzAQHGuw24584864 = GytzAQHGuw89458678;     GytzAQHGuw89458678 = GytzAQHGuw28611395;     GytzAQHGuw28611395 = GytzAQHGuw47210963;     GytzAQHGuw47210963 = GytzAQHGuw93141693;     GytzAQHGuw93141693 = GytzAQHGuw36049843;     GytzAQHGuw36049843 = GytzAQHGuw44348594;     GytzAQHGuw44348594 = GytzAQHGuw77040147;     GytzAQHGuw77040147 = GytzAQHGuw42365623;     GytzAQHGuw42365623 = GytzAQHGuw75317384;     GytzAQHGuw75317384 = GytzAQHGuw81773213;     GytzAQHGuw81773213 = GytzAQHGuw85868379;     GytzAQHGuw85868379 = GytzAQHGuw79686369;     GytzAQHGuw79686369 = GytzAQHGuw74807180;     GytzAQHGuw74807180 = GytzAQHGuw22507525;     GytzAQHGuw22507525 = GytzAQHGuw8343087;     GytzAQHGuw8343087 = GytzAQHGuw8622781;     GytzAQHGuw8622781 = GytzAQHGuw8902765;     GytzAQHGuw8902765 = GytzAQHGuw13029905;     GytzAQHGuw13029905 = GytzAQHGuw74557401;     GytzAQHGuw74557401 = GytzAQHGuw13358644;     GytzAQHGuw13358644 = GytzAQHGuw4627795;     GytzAQHGuw4627795 = GytzAQHGuw75036440;     GytzAQHGuw75036440 = GytzAQHGuw69128014;     GytzAQHGuw69128014 = GytzAQHGuw35805773;     GytzAQHGuw35805773 = GytzAQHGuw99536265;     GytzAQHGuw99536265 = GytzAQHGuw87295404;     GytzAQHGuw87295404 = GytzAQHGuw72398034;     GytzAQHGuw72398034 = GytzAQHGuw6004463;     GytzAQHGuw6004463 = GytzAQHGuw64997482;     GytzAQHGuw64997482 = GytzAQHGuw76183602;     GytzAQHGuw76183602 = GytzAQHGuw10711004;     GytzAQHGuw10711004 = GytzAQHGuw66151861;     GytzAQHGuw66151861 = GytzAQHGuw87587956;     GytzAQHGuw87587956 = GytzAQHGuw50958487;     GytzAQHGuw50958487 = GytzAQHGuw93545573;     GytzAQHGuw93545573 = GytzAQHGuw36312070;     GytzAQHGuw36312070 = GytzAQHGuw57207219;     GytzAQHGuw57207219 = GytzAQHGuw88223167;     GytzAQHGuw88223167 = GytzAQHGuw24970223;     GytzAQHGuw24970223 = GytzAQHGuw17020016;     GytzAQHGuw17020016 = GytzAQHGuw66281430;     GytzAQHGuw66281430 = GytzAQHGuw64043407;     GytzAQHGuw64043407 = GytzAQHGuw57265414;     GytzAQHGuw57265414 = GytzAQHGuw8773845;     GytzAQHGuw8773845 = GytzAQHGuw76275237;     GytzAQHGuw76275237 = GytzAQHGuw71016101;     GytzAQHGuw71016101 = GytzAQHGuw7512807;     GytzAQHGuw7512807 = GytzAQHGuw70408213;     GytzAQHGuw70408213 = GytzAQHGuw35385434;     GytzAQHGuw35385434 = GytzAQHGuw89714421;     GytzAQHGuw89714421 = GytzAQHGuw58424655;     GytzAQHGuw58424655 = GytzAQHGuw41089355;     GytzAQHGuw41089355 = GytzAQHGuw14315765;     GytzAQHGuw14315765 = GytzAQHGuw19918718;     GytzAQHGuw19918718 = GytzAQHGuw19957070;     GytzAQHGuw19957070 = GytzAQHGuw14422238;     GytzAQHGuw14422238 = GytzAQHGuw59483380;     GytzAQHGuw59483380 = GytzAQHGuw11405191;     GytzAQHGuw11405191 = GytzAQHGuw93605428;     GytzAQHGuw93605428 = GytzAQHGuw48754439;     GytzAQHGuw48754439 = GytzAQHGuw71950559;     GytzAQHGuw71950559 = GytzAQHGuw71035684;     GytzAQHGuw71035684 = GytzAQHGuw77368141;     GytzAQHGuw77368141 = GytzAQHGuw99133781;     GytzAQHGuw99133781 = GytzAQHGuw71062209;     GytzAQHGuw71062209 = GytzAQHGuw19716519;     GytzAQHGuw19716519 = GytzAQHGuw92098413;     GytzAQHGuw92098413 = GytzAQHGuw23848694;     GytzAQHGuw23848694 = GytzAQHGuw28961951;     GytzAQHGuw28961951 = GytzAQHGuw72031016;     GytzAQHGuw72031016 = GytzAQHGuw51415561;     GytzAQHGuw51415561 = GytzAQHGuw20679597;     GytzAQHGuw20679597 = GytzAQHGuw88059681;     GytzAQHGuw88059681 = GytzAQHGuw57537386;     GytzAQHGuw57537386 = GytzAQHGuw47077213;     GytzAQHGuw47077213 = GytzAQHGuw40584387;     GytzAQHGuw40584387 = GytzAQHGuw17771027;     GytzAQHGuw17771027 = GytzAQHGuw60354169;     GytzAQHGuw60354169 = GytzAQHGuw59530536;     GytzAQHGuw59530536 = GytzAQHGuw28520165;     GytzAQHGuw28520165 = GytzAQHGuw79782598;     GytzAQHGuw79782598 = GytzAQHGuw1989822;     GytzAQHGuw1989822 = GytzAQHGuw70619029;     GytzAQHGuw70619029 = GytzAQHGuw75283060;     GytzAQHGuw75283060 = GytzAQHGuw17758947;     GytzAQHGuw17758947 = GytzAQHGuw69621649;     GytzAQHGuw69621649 = GytzAQHGuw51836096;     GytzAQHGuw51836096 = GytzAQHGuw67669238;     GytzAQHGuw67669238 = GytzAQHGuw31001417;     GytzAQHGuw31001417 = GytzAQHGuw79123335;     GytzAQHGuw79123335 = GytzAQHGuw76828690;     GytzAQHGuw76828690 = GytzAQHGuw45802029;     GytzAQHGuw45802029 = GytzAQHGuw94617739;     GytzAQHGuw94617739 = GytzAQHGuw76215784;     GytzAQHGuw76215784 = GytzAQHGuw45069456;     GytzAQHGuw45069456 = GytzAQHGuw95245746;     GytzAQHGuw95245746 = GytzAQHGuw86675265;     GytzAQHGuw86675265 = GytzAQHGuw58131632;     GytzAQHGuw58131632 = GytzAQHGuw37711635;     GytzAQHGuw37711635 = GytzAQHGuw24584864;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jCZNRdZHyf45822551() {     double aiUvabGVUu44053034 = -790985302;    double aiUvabGVUu42482542 = -677783435;    double aiUvabGVUu45448387 = -831323373;    double aiUvabGVUu65858112 = -360665384;    double aiUvabGVUu93588210 = -929373823;    double aiUvabGVUu61641917 = -469197302;    double aiUvabGVUu89180472 = 71889411;    double aiUvabGVUu42290380 = -510481567;    double aiUvabGVUu3052420 = -3629217;    double aiUvabGVUu53246107 = -204329496;    double aiUvabGVUu35996477 = -559890796;    double aiUvabGVUu89362992 = 63860616;    double aiUvabGVUu70058029 = -333935958;    double aiUvabGVUu83223220 = -971664528;    double aiUvabGVUu83033985 = -582145892;    double aiUvabGVUu74558735 = -704501688;    double aiUvabGVUu14584894 = -402206568;    double aiUvabGVUu32965517 = -746171515;    double aiUvabGVUu12664784 = -254268873;    double aiUvabGVUu55168704 = -822413270;    double aiUvabGVUu25814716 = -490366160;    double aiUvabGVUu19609878 = -765118568;    double aiUvabGVUu43209447 = 71146310;    double aiUvabGVUu86849683 = -715223955;    double aiUvabGVUu47009262 = -746075340;    double aiUvabGVUu4303727 = -738569629;    double aiUvabGVUu71223535 = -603402087;    double aiUvabGVUu23189710 = -877052848;    double aiUvabGVUu47749420 = -883628273;    double aiUvabGVUu49704336 = -954291463;    double aiUvabGVUu5987688 = -295179960;    double aiUvabGVUu50290314 = -971348681;    double aiUvabGVUu77627964 = -899174424;    double aiUvabGVUu46344463 = 44464668;    double aiUvabGVUu90888823 = 69987176;    double aiUvabGVUu29611511 = -757941360;    double aiUvabGVUu4695521 = -469572738;    double aiUvabGVUu98689693 = -411229657;    double aiUvabGVUu55536493 = -284504100;    double aiUvabGVUu46251959 = -589704900;    double aiUvabGVUu58502072 = -629633525;    double aiUvabGVUu78140563 = 43615514;    double aiUvabGVUu35176648 = 97833097;    double aiUvabGVUu40650952 = -405967591;    double aiUvabGVUu88802256 = -709206880;    double aiUvabGVUu30736365 = -630138051;    double aiUvabGVUu53005981 = -58999052;    double aiUvabGVUu7668637 = -150086189;    double aiUvabGVUu11543804 = -689082002;    double aiUvabGVUu76283776 = -681328965;    double aiUvabGVUu64149990 = -580169027;    double aiUvabGVUu74873515 = -334232849;    double aiUvabGVUu10914501 = -845616925;    double aiUvabGVUu87245793 = -150268872;    double aiUvabGVUu20007835 = -375576813;    double aiUvabGVUu24443157 = 74133265;    double aiUvabGVUu99273095 = -648929746;    double aiUvabGVUu58598703 = -16099419;    double aiUvabGVUu18848850 = -614590045;    double aiUvabGVUu89284483 = -90804194;    double aiUvabGVUu90418382 = -865795216;    double aiUvabGVUu65990763 = -51057741;    double aiUvabGVUu94540960 = -626853294;    double aiUvabGVUu53348084 = -49337754;    double aiUvabGVUu47258420 = -909149536;    double aiUvabGVUu85706162 = -588542115;    double aiUvabGVUu11735029 = -36964961;    double aiUvabGVUu23713566 = -278400627;    double aiUvabGVUu92334397 = -941651705;    double aiUvabGVUu53422475 = -824204532;    double aiUvabGVUu69863215 = -134928951;    double aiUvabGVUu15895200 = -990976912;    double aiUvabGVUu77429023 = -361667416;    double aiUvabGVUu66412825 = -664563974;    double aiUvabGVUu96666631 = -92779746;    double aiUvabGVUu47674152 = -433981675;    double aiUvabGVUu84433229 = -762951666;    double aiUvabGVUu2558495 = -522886099;    double aiUvabGVUu98047427 = 93982924;    double aiUvabGVUu16272898 = -15937289;    double aiUvabGVUu51297746 = -579570578;    double aiUvabGVUu63554899 = -353315898;    double aiUvabGVUu11645906 = -87970846;    double aiUvabGVUu71465643 = -102299309;    double aiUvabGVUu85554345 = -274122437;    double aiUvabGVUu31114172 = -960947112;    double aiUvabGVUu39375814 = -25731756;    double aiUvabGVUu90382171 = -648905552;    double aiUvabGVUu26336629 = -579958520;    double aiUvabGVUu66445666 = 95853910;    double aiUvabGVUu30338415 = -9011615;    double aiUvabGVUu46096817 = -353473320;    double aiUvabGVUu79840844 = -796639613;    double aiUvabGVUu66252010 = -93699906;    double aiUvabGVUu55833577 = -723909684;    double aiUvabGVUu92511309 = -478575784;    double aiUvabGVUu83599603 = -329531192;    double aiUvabGVUu81828564 = -852829149;    double aiUvabGVUu93392532 = -496818055;    double aiUvabGVUu3096094 = -790985302;     aiUvabGVUu44053034 = aiUvabGVUu42482542;     aiUvabGVUu42482542 = aiUvabGVUu45448387;     aiUvabGVUu45448387 = aiUvabGVUu65858112;     aiUvabGVUu65858112 = aiUvabGVUu93588210;     aiUvabGVUu93588210 = aiUvabGVUu61641917;     aiUvabGVUu61641917 = aiUvabGVUu89180472;     aiUvabGVUu89180472 = aiUvabGVUu42290380;     aiUvabGVUu42290380 = aiUvabGVUu3052420;     aiUvabGVUu3052420 = aiUvabGVUu53246107;     aiUvabGVUu53246107 = aiUvabGVUu35996477;     aiUvabGVUu35996477 = aiUvabGVUu89362992;     aiUvabGVUu89362992 = aiUvabGVUu70058029;     aiUvabGVUu70058029 = aiUvabGVUu83223220;     aiUvabGVUu83223220 = aiUvabGVUu83033985;     aiUvabGVUu83033985 = aiUvabGVUu74558735;     aiUvabGVUu74558735 = aiUvabGVUu14584894;     aiUvabGVUu14584894 = aiUvabGVUu32965517;     aiUvabGVUu32965517 = aiUvabGVUu12664784;     aiUvabGVUu12664784 = aiUvabGVUu55168704;     aiUvabGVUu55168704 = aiUvabGVUu25814716;     aiUvabGVUu25814716 = aiUvabGVUu19609878;     aiUvabGVUu19609878 = aiUvabGVUu43209447;     aiUvabGVUu43209447 = aiUvabGVUu86849683;     aiUvabGVUu86849683 = aiUvabGVUu47009262;     aiUvabGVUu47009262 = aiUvabGVUu4303727;     aiUvabGVUu4303727 = aiUvabGVUu71223535;     aiUvabGVUu71223535 = aiUvabGVUu23189710;     aiUvabGVUu23189710 = aiUvabGVUu47749420;     aiUvabGVUu47749420 = aiUvabGVUu49704336;     aiUvabGVUu49704336 = aiUvabGVUu5987688;     aiUvabGVUu5987688 = aiUvabGVUu50290314;     aiUvabGVUu50290314 = aiUvabGVUu77627964;     aiUvabGVUu77627964 = aiUvabGVUu46344463;     aiUvabGVUu46344463 = aiUvabGVUu90888823;     aiUvabGVUu90888823 = aiUvabGVUu29611511;     aiUvabGVUu29611511 = aiUvabGVUu4695521;     aiUvabGVUu4695521 = aiUvabGVUu98689693;     aiUvabGVUu98689693 = aiUvabGVUu55536493;     aiUvabGVUu55536493 = aiUvabGVUu46251959;     aiUvabGVUu46251959 = aiUvabGVUu58502072;     aiUvabGVUu58502072 = aiUvabGVUu78140563;     aiUvabGVUu78140563 = aiUvabGVUu35176648;     aiUvabGVUu35176648 = aiUvabGVUu40650952;     aiUvabGVUu40650952 = aiUvabGVUu88802256;     aiUvabGVUu88802256 = aiUvabGVUu30736365;     aiUvabGVUu30736365 = aiUvabGVUu53005981;     aiUvabGVUu53005981 = aiUvabGVUu7668637;     aiUvabGVUu7668637 = aiUvabGVUu11543804;     aiUvabGVUu11543804 = aiUvabGVUu76283776;     aiUvabGVUu76283776 = aiUvabGVUu64149990;     aiUvabGVUu64149990 = aiUvabGVUu74873515;     aiUvabGVUu74873515 = aiUvabGVUu10914501;     aiUvabGVUu10914501 = aiUvabGVUu87245793;     aiUvabGVUu87245793 = aiUvabGVUu20007835;     aiUvabGVUu20007835 = aiUvabGVUu24443157;     aiUvabGVUu24443157 = aiUvabGVUu99273095;     aiUvabGVUu99273095 = aiUvabGVUu58598703;     aiUvabGVUu58598703 = aiUvabGVUu18848850;     aiUvabGVUu18848850 = aiUvabGVUu89284483;     aiUvabGVUu89284483 = aiUvabGVUu90418382;     aiUvabGVUu90418382 = aiUvabGVUu65990763;     aiUvabGVUu65990763 = aiUvabGVUu94540960;     aiUvabGVUu94540960 = aiUvabGVUu53348084;     aiUvabGVUu53348084 = aiUvabGVUu47258420;     aiUvabGVUu47258420 = aiUvabGVUu85706162;     aiUvabGVUu85706162 = aiUvabGVUu11735029;     aiUvabGVUu11735029 = aiUvabGVUu23713566;     aiUvabGVUu23713566 = aiUvabGVUu92334397;     aiUvabGVUu92334397 = aiUvabGVUu53422475;     aiUvabGVUu53422475 = aiUvabGVUu69863215;     aiUvabGVUu69863215 = aiUvabGVUu15895200;     aiUvabGVUu15895200 = aiUvabGVUu77429023;     aiUvabGVUu77429023 = aiUvabGVUu66412825;     aiUvabGVUu66412825 = aiUvabGVUu96666631;     aiUvabGVUu96666631 = aiUvabGVUu47674152;     aiUvabGVUu47674152 = aiUvabGVUu84433229;     aiUvabGVUu84433229 = aiUvabGVUu2558495;     aiUvabGVUu2558495 = aiUvabGVUu98047427;     aiUvabGVUu98047427 = aiUvabGVUu16272898;     aiUvabGVUu16272898 = aiUvabGVUu51297746;     aiUvabGVUu51297746 = aiUvabGVUu63554899;     aiUvabGVUu63554899 = aiUvabGVUu11645906;     aiUvabGVUu11645906 = aiUvabGVUu71465643;     aiUvabGVUu71465643 = aiUvabGVUu85554345;     aiUvabGVUu85554345 = aiUvabGVUu31114172;     aiUvabGVUu31114172 = aiUvabGVUu39375814;     aiUvabGVUu39375814 = aiUvabGVUu90382171;     aiUvabGVUu90382171 = aiUvabGVUu26336629;     aiUvabGVUu26336629 = aiUvabGVUu66445666;     aiUvabGVUu66445666 = aiUvabGVUu30338415;     aiUvabGVUu30338415 = aiUvabGVUu46096817;     aiUvabGVUu46096817 = aiUvabGVUu79840844;     aiUvabGVUu79840844 = aiUvabGVUu66252010;     aiUvabGVUu66252010 = aiUvabGVUu55833577;     aiUvabGVUu55833577 = aiUvabGVUu92511309;     aiUvabGVUu92511309 = aiUvabGVUu83599603;     aiUvabGVUu83599603 = aiUvabGVUu81828564;     aiUvabGVUu81828564 = aiUvabGVUu93392532;     aiUvabGVUu93392532 = aiUvabGVUu3096094;     aiUvabGVUu3096094 = aiUvabGVUu44053034;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mWPqDrLpAa6125209() {     double TqxVviNFZv34179343 = -849741503;    double TqxVviNFZv25607607 = 47290395;    double TqxVviNFZv40941086 = -968117834;    double TqxVviNFZv39356687 = -546837206;    double TqxVviNFZv6644946 = -870697265;    double TqxVviNFZv42428322 = -361830410;    double TqxVviNFZv83843910 = -665656062;    double TqxVviNFZv95168943 = -146929306;    double TqxVviNFZv26864108 = -11521855;    double TqxVviNFZv57501777 = -874204021;    double TqxVviNFZv12148296 = 31689047;    double TqxVviNFZv24112501 = -515727519;    double TqxVviNFZv8404162 = -646171819;    double TqxVviNFZv21642074 = -969825412;    double TqxVviNFZv81108357 = 32733165;    double TqxVviNFZv98738477 = -404881558;    double TqxVviNFZv58547074 = -663551810;    double TqxVviNFZv54321229 = -89020807;    double TqxVviNFZv73579175 = -720679309;    double TqxVviNFZv22492952 = -370291580;    double TqxVviNFZv13737119 = -194791252;    double TqxVviNFZv17691460 = 1784797;    double TqxVviNFZv76447864 = -335313611;    double TqxVviNFZv94770780 = -63248330;    double TqxVviNFZv93894450 = -289586284;    double TqxVviNFZv23094692 = -614443364;    double TqxVviNFZv93190870 = -362931081;    double TqxVviNFZv46360085 = -936942906;    double TqxVviNFZv8958418 = -545827321;    double TqxVviNFZv97493415 = -828693855;    double TqxVviNFZv9451090 = -621846504;    double TqxVviNFZv49657228 = -372173101;    double TqxVviNFZv86597005 = -99399583;    double TqxVviNFZv70183108 = 53013510;    double TqxVviNFZv26485358 = -680348484;    double TqxVviNFZv82842517 = 39029230;    double TqxVviNFZv4929090 = 14611358;    double TqxVviNFZv23046977 = -277288901;    double TqxVviNFZv66069510 = 8033855;    double TqxVviNFZv90764100 = -494412673;    double TqxVviNFZv72201746 = -335494800;    double TqxVviNFZv32785027 = -870877699;    double TqxVviNFZv94993489 = -377592498;    double TqxVviNFZv71312893 = -270050780;    double TqxVviNFZv80766673 = -821716836;    double TqxVviNFZv51175358 = -13761957;    double TqxVviNFZv33429271 = -707481552;    double TqxVviNFZv98055095 = -176742443;    double TqxVviNFZv39462458 = -25021349;    double TqxVviNFZv5564182 = -38325302;    double TqxVviNFZv93515514 = -954551072;    double TqxVviNFZv18646623 = -298659682;    double TqxVviNFZv60366956 = -557469920;    double TqxVviNFZv40152856 = -273824154;    double TqxVviNFZv92388089 = -504177084;    double TqxVviNFZv16487884 = -751526300;    double TqxVviNFZv49159742 = -617395995;    double TqxVviNFZv46170305 = -804869504;    double TqxVviNFZv45462237 = -157250923;    double TqxVviNFZv83550253 = -156253901;    double TqxVviNFZv49237452 = -998899330;    double TqxVviNFZv37483826 = -728713156;    double TqxVviNFZv86210525 = -601101985;    double TqxVviNFZv29370692 = -182828001;    double TqxVviNFZv48050687 = -152357518;    double TqxVviNFZv62491068 = -596137853;    double TqxVviNFZv37515495 = -316327937;    double TqxVviNFZv38221054 = -599185330;    double TqxVviNFZv95156716 = -189476928;    double TqxVviNFZv98265840 = 93703935;    double TqxVviNFZv93809387 = -319492917;    double TqxVviNFZv35500097 = -286262909;    double TqxVviNFZv88251719 = 2945337;    double TqxVviNFZv82815074 = -126266637;    double TqxVviNFZv50291206 = 65203220;    double TqxVviNFZv80952091 = -323913554;    double TqxVviNFZv22697970 = -620622706;    double TqxVviNFZv5134972 = 34737168;    double TqxVviNFZv14004107 = -241531495;    double TqxVviNFZv42719092 = -175824328;    double TqxVviNFZv89665420 = -906961813;    double TqxVviNFZv95135775 = -86188638;    double TqxVviNFZv6897627 = -811921558;    double TqxVviNFZv3394236 = -407502019;    double TqxVviNFZv3977902 = -874142783;    double TqxVviNFZv90804467 = -223186823;    double TqxVviNFZv89290272 = -814703181;    double TqxVviNFZv46444150 = -825575430;    double TqxVviNFZv77795018 = -442809406;    double TqxVviNFZv9997474 = -928822185;    double TqxVviNFZv33682775 = -343574776;    double TqxVviNFZv58758784 = -180519138;    double TqxVviNFZv77584740 = -20037979;    double TqxVviNFZv82519256 = -835712245;    double TqxVviNFZv41526649 = -495513343;    double TqxVviNFZv34717920 = -606781645;    double TqxVviNFZv46574501 = -169775715;    double TqxVviNFZv65622797 = -94764498;    double TqxVviNFZv23262206 = -17693263;    double TqxVviNFZv18275606 = -849741503;     TqxVviNFZv34179343 = TqxVviNFZv25607607;     TqxVviNFZv25607607 = TqxVviNFZv40941086;     TqxVviNFZv40941086 = TqxVviNFZv39356687;     TqxVviNFZv39356687 = TqxVviNFZv6644946;     TqxVviNFZv6644946 = TqxVviNFZv42428322;     TqxVviNFZv42428322 = TqxVviNFZv83843910;     TqxVviNFZv83843910 = TqxVviNFZv95168943;     TqxVviNFZv95168943 = TqxVviNFZv26864108;     TqxVviNFZv26864108 = TqxVviNFZv57501777;     TqxVviNFZv57501777 = TqxVviNFZv12148296;     TqxVviNFZv12148296 = TqxVviNFZv24112501;     TqxVviNFZv24112501 = TqxVviNFZv8404162;     TqxVviNFZv8404162 = TqxVviNFZv21642074;     TqxVviNFZv21642074 = TqxVviNFZv81108357;     TqxVviNFZv81108357 = TqxVviNFZv98738477;     TqxVviNFZv98738477 = TqxVviNFZv58547074;     TqxVviNFZv58547074 = TqxVviNFZv54321229;     TqxVviNFZv54321229 = TqxVviNFZv73579175;     TqxVviNFZv73579175 = TqxVviNFZv22492952;     TqxVviNFZv22492952 = TqxVviNFZv13737119;     TqxVviNFZv13737119 = TqxVviNFZv17691460;     TqxVviNFZv17691460 = TqxVviNFZv76447864;     TqxVviNFZv76447864 = TqxVviNFZv94770780;     TqxVviNFZv94770780 = TqxVviNFZv93894450;     TqxVviNFZv93894450 = TqxVviNFZv23094692;     TqxVviNFZv23094692 = TqxVviNFZv93190870;     TqxVviNFZv93190870 = TqxVviNFZv46360085;     TqxVviNFZv46360085 = TqxVviNFZv8958418;     TqxVviNFZv8958418 = TqxVviNFZv97493415;     TqxVviNFZv97493415 = TqxVviNFZv9451090;     TqxVviNFZv9451090 = TqxVviNFZv49657228;     TqxVviNFZv49657228 = TqxVviNFZv86597005;     TqxVviNFZv86597005 = TqxVviNFZv70183108;     TqxVviNFZv70183108 = TqxVviNFZv26485358;     TqxVviNFZv26485358 = TqxVviNFZv82842517;     TqxVviNFZv82842517 = TqxVviNFZv4929090;     TqxVviNFZv4929090 = TqxVviNFZv23046977;     TqxVviNFZv23046977 = TqxVviNFZv66069510;     TqxVviNFZv66069510 = TqxVviNFZv90764100;     TqxVviNFZv90764100 = TqxVviNFZv72201746;     TqxVviNFZv72201746 = TqxVviNFZv32785027;     TqxVviNFZv32785027 = TqxVviNFZv94993489;     TqxVviNFZv94993489 = TqxVviNFZv71312893;     TqxVviNFZv71312893 = TqxVviNFZv80766673;     TqxVviNFZv80766673 = TqxVviNFZv51175358;     TqxVviNFZv51175358 = TqxVviNFZv33429271;     TqxVviNFZv33429271 = TqxVviNFZv98055095;     TqxVviNFZv98055095 = TqxVviNFZv39462458;     TqxVviNFZv39462458 = TqxVviNFZv5564182;     TqxVviNFZv5564182 = TqxVviNFZv93515514;     TqxVviNFZv93515514 = TqxVviNFZv18646623;     TqxVviNFZv18646623 = TqxVviNFZv60366956;     TqxVviNFZv60366956 = TqxVviNFZv40152856;     TqxVviNFZv40152856 = TqxVviNFZv92388089;     TqxVviNFZv92388089 = TqxVviNFZv16487884;     TqxVviNFZv16487884 = TqxVviNFZv49159742;     TqxVviNFZv49159742 = TqxVviNFZv46170305;     TqxVviNFZv46170305 = TqxVviNFZv45462237;     TqxVviNFZv45462237 = TqxVviNFZv83550253;     TqxVviNFZv83550253 = TqxVviNFZv49237452;     TqxVviNFZv49237452 = TqxVviNFZv37483826;     TqxVviNFZv37483826 = TqxVviNFZv86210525;     TqxVviNFZv86210525 = TqxVviNFZv29370692;     TqxVviNFZv29370692 = TqxVviNFZv48050687;     TqxVviNFZv48050687 = TqxVviNFZv62491068;     TqxVviNFZv62491068 = TqxVviNFZv37515495;     TqxVviNFZv37515495 = TqxVviNFZv38221054;     TqxVviNFZv38221054 = TqxVviNFZv95156716;     TqxVviNFZv95156716 = TqxVviNFZv98265840;     TqxVviNFZv98265840 = TqxVviNFZv93809387;     TqxVviNFZv93809387 = TqxVviNFZv35500097;     TqxVviNFZv35500097 = TqxVviNFZv88251719;     TqxVviNFZv88251719 = TqxVviNFZv82815074;     TqxVviNFZv82815074 = TqxVviNFZv50291206;     TqxVviNFZv50291206 = TqxVviNFZv80952091;     TqxVviNFZv80952091 = TqxVviNFZv22697970;     TqxVviNFZv22697970 = TqxVviNFZv5134972;     TqxVviNFZv5134972 = TqxVviNFZv14004107;     TqxVviNFZv14004107 = TqxVviNFZv42719092;     TqxVviNFZv42719092 = TqxVviNFZv89665420;     TqxVviNFZv89665420 = TqxVviNFZv95135775;     TqxVviNFZv95135775 = TqxVviNFZv6897627;     TqxVviNFZv6897627 = TqxVviNFZv3394236;     TqxVviNFZv3394236 = TqxVviNFZv3977902;     TqxVviNFZv3977902 = TqxVviNFZv90804467;     TqxVviNFZv90804467 = TqxVviNFZv89290272;     TqxVviNFZv89290272 = TqxVviNFZv46444150;     TqxVviNFZv46444150 = TqxVviNFZv77795018;     TqxVviNFZv77795018 = TqxVviNFZv9997474;     TqxVviNFZv9997474 = TqxVviNFZv33682775;     TqxVviNFZv33682775 = TqxVviNFZv58758784;     TqxVviNFZv58758784 = TqxVviNFZv77584740;     TqxVviNFZv77584740 = TqxVviNFZv82519256;     TqxVviNFZv82519256 = TqxVviNFZv41526649;     TqxVviNFZv41526649 = TqxVviNFZv34717920;     TqxVviNFZv34717920 = TqxVviNFZv46574501;     TqxVviNFZv46574501 = TqxVviNFZv65622797;     TqxVviNFZv65622797 = TqxVviNFZv23262206;     TqxVviNFZv23262206 = TqxVviNFZv18275606;     TqxVviNFZv18275606 = TqxVviNFZv34179343;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UaQufrIbvh2308369() {     double SVIZMlxUCV93775439 = 21502120;    double SVIZMlxUCV27113457 = -862864990;    double SVIZMlxUCV77942473 = 57741243;    double SVIZMlxUCV35232446 = -319448083;    double SVIZMlxUCV17938172 = -771204292;    double SVIZMlxUCV40105443 = -220090084;    double SVIZMlxUCV81202393 = 4626353;    double SVIZMlxUCV45994227 = -501140681;    double SVIZMlxUCV40677551 = -544194354;    double SVIZMlxUCV40526292 = -815462875;    double SVIZMlxUCV37443227 = -369853392;    double SVIZMlxUCV58783702 = -610748769;    double SVIZMlxUCV79158724 = -552350337;    double SVIZMlxUCV80015912 = -873983760;    double SVIZMlxUCV78416163 = -759793356;    double SVIZMlxUCV95492731 = -210254450;    double SVIZMlxUCV94508177 = -591768090;    double SVIZMlxUCV18989560 = -458356912;    double SVIZMlxUCV54021378 = -859798939;    double SVIZMlxUCV2410061 = 67299767;    double SVIZMlxUCV94198237 = -27812077;    double SVIZMlxUCV86181057 = -990617081;    double SVIZMlxUCV68639690 = -99608690;    double SVIZMlxUCV59501019 = -727586567;    double SVIZMlxUCV69872455 = -845723874;    double SVIZMlxUCV17509599 = -749060835;    double SVIZMlxUCV6530941 = -812411078;    double SVIZMlxUCV11471254 = -458324496;    double SVIZMlxUCV58742760 = -335419937;    double SVIZMlxUCV35966882 = -875677097;    double SVIZMlxUCV34365408 = -167065832;    double SVIZMlxUCV92422488 = -789391098;    double SVIZMlxUCV35679044 = -79346456;    double SVIZMlxUCV52707550 = -548870421;    double SVIZMlxUCV31422719 = -328558470;    double SVIZMlxUCV61432414 = -272627352;    double SVIZMlxUCV95560767 = -278167277;    double SVIZMlxUCV21407315 = -221741291;    double SVIZMlxUCV85087452 = -810672662;    double SVIZMlxUCV63589755 = -768293621;    double SVIZMlxUCV30419559 = -804156397;    double SVIZMlxUCV2864208 = -875819118;    double SVIZMlxUCV35872732 = -111037328;    double SVIZMlxUCV45552399 = -693965519;    double SVIZMlxUCV81754989 = -268034904;    double SVIZMlxUCV15968487 = -256706115;    double SVIZMlxUCV38917994 = -599337219;    double SVIZMlxUCV44751489 = -509495671;    double SVIZMlxUCV78852105 = -308958968;    double SVIZMlxUCV20731575 = -359577763;    double SVIZMlxUCV44001765 = -740659296;    double SVIZMlxUCV25231776 = -269902937;    double SVIZMlxUCV35782470 = -797418374;    double SVIZMlxUCV13427379 = -533993109;    double SVIZMlxUCV8110132 = -468111171;    double SVIZMlxUCV7594382 = 12119200;    double SVIZMlxUCV58473767 = -663256301;    double SVIZMlxUCV18441454 = -214672190;    double SVIZMlxUCV65359990 = -473724210;    double SVIZMlxUCV428573 = 77856542;    double SVIZMlxUCV33574502 = -407679006;    double SVIZMlxUCV69731140 = -537049152;    double SVIZMlxUCV87251466 = -65720745;    double SVIZMlxUCV4710669 = -668517258;    double SVIZMlxUCV6160884 = -548397043;    double SVIZMlxUCV45020739 = -580462295;    double SVIZMlxUCV23104658 = -431402314;    double SVIZMlxUCV26451175 = 96520083;    double SVIZMlxUCV48593194 = -445425290;    double SVIZMlxUCV16983750 = -387166004;    double SVIZMlxUCV99931964 = -932087173;    double SVIZMlxUCV73100863 = -270026800;    double SVIZMlxUCV33902107 = -647684251;    double SVIZMlxUCV90431623 = 8494682;    double SVIZMlxUCV71990501 = -128543837;    double SVIZMlxUCV91334029 = -151992960;    double SVIZMlxUCV50308326 = -779579754;    double SVIZMlxUCV23087292 = -405643172;    double SVIZMlxUCV77746030 = -359551663;    double SVIZMlxUCV53903968 = -489017759;    double SVIZMlxUCV78591605 = -49723617;    double SVIZMlxUCV61779451 = -202915407;    double SVIZMlxUCV32619148 = -49365528;    double SVIZMlxUCV38011186 = -975842174;    double SVIZMlxUCV91965117 = -35017801;    double SVIZMlxUCV9133633 = -897162895;    double SVIZMlxUCV56640018 = -991972725;    double SVIZMlxUCV22251666 = -545353347;    double SVIZMlxUCV44597419 = 19240750;    double SVIZMlxUCV23828337 = -240677671;    double SVIZMlxUCV2958647 = -609371052;    double SVIZMlxUCV77119313 = 36504913;    double SVIZMlxUCV56047325 = -748017081;    double SVIZMlxUCV84658879 = -788529205;    double SVIZMlxUCV30015254 = -260614616;    double SVIZMlxUCV60688419 = -167107246;    double SVIZMlxUCV15612741 = -710098373;    double SVIZMlxUCV31162063 = -442520070;    double SVIZMlxUCV39391515 = -45568476;    double SVIZMlxUCV36734250 = 21502120;     SVIZMlxUCV93775439 = SVIZMlxUCV27113457;     SVIZMlxUCV27113457 = SVIZMlxUCV77942473;     SVIZMlxUCV77942473 = SVIZMlxUCV35232446;     SVIZMlxUCV35232446 = SVIZMlxUCV17938172;     SVIZMlxUCV17938172 = SVIZMlxUCV40105443;     SVIZMlxUCV40105443 = SVIZMlxUCV81202393;     SVIZMlxUCV81202393 = SVIZMlxUCV45994227;     SVIZMlxUCV45994227 = SVIZMlxUCV40677551;     SVIZMlxUCV40677551 = SVIZMlxUCV40526292;     SVIZMlxUCV40526292 = SVIZMlxUCV37443227;     SVIZMlxUCV37443227 = SVIZMlxUCV58783702;     SVIZMlxUCV58783702 = SVIZMlxUCV79158724;     SVIZMlxUCV79158724 = SVIZMlxUCV80015912;     SVIZMlxUCV80015912 = SVIZMlxUCV78416163;     SVIZMlxUCV78416163 = SVIZMlxUCV95492731;     SVIZMlxUCV95492731 = SVIZMlxUCV94508177;     SVIZMlxUCV94508177 = SVIZMlxUCV18989560;     SVIZMlxUCV18989560 = SVIZMlxUCV54021378;     SVIZMlxUCV54021378 = SVIZMlxUCV2410061;     SVIZMlxUCV2410061 = SVIZMlxUCV94198237;     SVIZMlxUCV94198237 = SVIZMlxUCV86181057;     SVIZMlxUCV86181057 = SVIZMlxUCV68639690;     SVIZMlxUCV68639690 = SVIZMlxUCV59501019;     SVIZMlxUCV59501019 = SVIZMlxUCV69872455;     SVIZMlxUCV69872455 = SVIZMlxUCV17509599;     SVIZMlxUCV17509599 = SVIZMlxUCV6530941;     SVIZMlxUCV6530941 = SVIZMlxUCV11471254;     SVIZMlxUCV11471254 = SVIZMlxUCV58742760;     SVIZMlxUCV58742760 = SVIZMlxUCV35966882;     SVIZMlxUCV35966882 = SVIZMlxUCV34365408;     SVIZMlxUCV34365408 = SVIZMlxUCV92422488;     SVIZMlxUCV92422488 = SVIZMlxUCV35679044;     SVIZMlxUCV35679044 = SVIZMlxUCV52707550;     SVIZMlxUCV52707550 = SVIZMlxUCV31422719;     SVIZMlxUCV31422719 = SVIZMlxUCV61432414;     SVIZMlxUCV61432414 = SVIZMlxUCV95560767;     SVIZMlxUCV95560767 = SVIZMlxUCV21407315;     SVIZMlxUCV21407315 = SVIZMlxUCV85087452;     SVIZMlxUCV85087452 = SVIZMlxUCV63589755;     SVIZMlxUCV63589755 = SVIZMlxUCV30419559;     SVIZMlxUCV30419559 = SVIZMlxUCV2864208;     SVIZMlxUCV2864208 = SVIZMlxUCV35872732;     SVIZMlxUCV35872732 = SVIZMlxUCV45552399;     SVIZMlxUCV45552399 = SVIZMlxUCV81754989;     SVIZMlxUCV81754989 = SVIZMlxUCV15968487;     SVIZMlxUCV15968487 = SVIZMlxUCV38917994;     SVIZMlxUCV38917994 = SVIZMlxUCV44751489;     SVIZMlxUCV44751489 = SVIZMlxUCV78852105;     SVIZMlxUCV78852105 = SVIZMlxUCV20731575;     SVIZMlxUCV20731575 = SVIZMlxUCV44001765;     SVIZMlxUCV44001765 = SVIZMlxUCV25231776;     SVIZMlxUCV25231776 = SVIZMlxUCV35782470;     SVIZMlxUCV35782470 = SVIZMlxUCV13427379;     SVIZMlxUCV13427379 = SVIZMlxUCV8110132;     SVIZMlxUCV8110132 = SVIZMlxUCV7594382;     SVIZMlxUCV7594382 = SVIZMlxUCV58473767;     SVIZMlxUCV58473767 = SVIZMlxUCV18441454;     SVIZMlxUCV18441454 = SVIZMlxUCV65359990;     SVIZMlxUCV65359990 = SVIZMlxUCV428573;     SVIZMlxUCV428573 = SVIZMlxUCV33574502;     SVIZMlxUCV33574502 = SVIZMlxUCV69731140;     SVIZMlxUCV69731140 = SVIZMlxUCV87251466;     SVIZMlxUCV87251466 = SVIZMlxUCV4710669;     SVIZMlxUCV4710669 = SVIZMlxUCV6160884;     SVIZMlxUCV6160884 = SVIZMlxUCV45020739;     SVIZMlxUCV45020739 = SVIZMlxUCV23104658;     SVIZMlxUCV23104658 = SVIZMlxUCV26451175;     SVIZMlxUCV26451175 = SVIZMlxUCV48593194;     SVIZMlxUCV48593194 = SVIZMlxUCV16983750;     SVIZMlxUCV16983750 = SVIZMlxUCV99931964;     SVIZMlxUCV99931964 = SVIZMlxUCV73100863;     SVIZMlxUCV73100863 = SVIZMlxUCV33902107;     SVIZMlxUCV33902107 = SVIZMlxUCV90431623;     SVIZMlxUCV90431623 = SVIZMlxUCV71990501;     SVIZMlxUCV71990501 = SVIZMlxUCV91334029;     SVIZMlxUCV91334029 = SVIZMlxUCV50308326;     SVIZMlxUCV50308326 = SVIZMlxUCV23087292;     SVIZMlxUCV23087292 = SVIZMlxUCV77746030;     SVIZMlxUCV77746030 = SVIZMlxUCV53903968;     SVIZMlxUCV53903968 = SVIZMlxUCV78591605;     SVIZMlxUCV78591605 = SVIZMlxUCV61779451;     SVIZMlxUCV61779451 = SVIZMlxUCV32619148;     SVIZMlxUCV32619148 = SVIZMlxUCV38011186;     SVIZMlxUCV38011186 = SVIZMlxUCV91965117;     SVIZMlxUCV91965117 = SVIZMlxUCV9133633;     SVIZMlxUCV9133633 = SVIZMlxUCV56640018;     SVIZMlxUCV56640018 = SVIZMlxUCV22251666;     SVIZMlxUCV22251666 = SVIZMlxUCV44597419;     SVIZMlxUCV44597419 = SVIZMlxUCV23828337;     SVIZMlxUCV23828337 = SVIZMlxUCV2958647;     SVIZMlxUCV2958647 = SVIZMlxUCV77119313;     SVIZMlxUCV77119313 = SVIZMlxUCV56047325;     SVIZMlxUCV56047325 = SVIZMlxUCV84658879;     SVIZMlxUCV84658879 = SVIZMlxUCV30015254;     SVIZMlxUCV30015254 = SVIZMlxUCV60688419;     SVIZMlxUCV60688419 = SVIZMlxUCV15612741;     SVIZMlxUCV15612741 = SVIZMlxUCV31162063;     SVIZMlxUCV31162063 = SVIZMlxUCV39391515;     SVIZMlxUCV39391515 = SVIZMlxUCV36734250;     SVIZMlxUCV36734250 = SVIZMlxUCV93775439;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bDAQzzvvNe14853558() {     double jMCywEQuUR13243610 = -391629092;    double jMCywEQuUR80137320 = -308742986;    double jMCywEQuUR94779465 = -693887372;    double jMCywEQuUR53879594 = -136022346;    double jMCywEQuUR18384688 = -297476708;    double jMCywEQuUR65697517 = -110574852;    double jMCywEQuUR26034272 = -438679877;    double jMCywEQuUR11244461 = -594948647;    double jMCywEQuUR1364349 = -172385733;    double jMCywEQuUR18455016 = -821048921;    double jMCywEQuUR91666490 = -802843693;    double jMCywEQuUR62278315 = -610051474;    double jMCywEQuUR69530384 = -976707614;    double jMCywEQuUR88431953 = -316269485;    double jMCywEQuUR38942625 = 42122853;    double jMCywEQuUR61708381 = -673446383;    double jMCywEQuUR470291 = -763542772;    double jMCywEQuUR43052311 = -209111630;    double jMCywEQuUR53656257 = -137003700;    double jMCywEQuUR83021363 = -650236689;    double jMCywEQuUR6654310 = -634024403;    double jMCywEQuUR1163141 = -402420294;    double jMCywEQuUR36812696 = -397183308;    double jMCywEQuUR77222688 = -364130559;    double jMCywEQuUR81075944 = -40023983;    double jMCywEQuUR22277060 = -434856054;    double jMCywEQuUR90459071 = -477562009;    double jMCywEQuUR62262928 = -622057775;    double jMCywEQuUR487718 = -349331083;    double jMCywEQuUR20673737 = -967115791;    double jMCywEQuUR64169493 = -32391925;    double jMCywEQuUR32001799 = -253740116;    double jMCywEQuUR47155147 = -634554222;    double jMCywEQuUR11464058 = -853473627;    double jMCywEQuUR71353054 = -391261276;    double jMCywEQuUR97498351 = -576195961;    double jMCywEQuUR63944218 = -805043352;    double jMCywEQuUR62889789 = -298950106;    double jMCywEQuUR52400778 = -175087487;    double jMCywEQuUR84871491 = -764824718;    double jMCywEQuUR71901616 = -213942692;    double jMCywEQuUR14723341 = -14715343;    double jMCywEQuUR7005973 = -58839125;    double jMCywEQuUR28937937 = -43038179;    double jMCywEQuUR61783400 = -545157867;    double jMCywEQuUR70429614 = -794037537;    double jMCywEQuUR20907874 = -513030542;    double jMCywEQuUR44907319 = -692782985;    double jMCywEQuUR19987697 = -322898207;    double jMCywEQuUR61629917 = -120590108;    double jMCywEQuUR18437334 = -47024227;    double jMCywEQuUR41680636 = -647255797;    double jMCywEQuUR5607617 = -473527335;    double jMCywEQuUR86357407 = -528586745;    double jMCywEQuUR8199249 = -242669806;    double jMCywEQuUR12080469 = -989208798;    double jMCywEQuUR43324625 = -911559678;    double jMCywEQuUR17556778 = -229756813;    double jMCywEQuUR72803650 = 4001636;    double jMCywEQuUR96107627 = -862620655;    double jMCywEQuUR75238445 = -633012843;    double jMCywEQuUR63771343 = -816622102;    double jMCywEQuUR10756744 = -145617565;    double jMCywEQuUR80690612 = -205269943;    double jMCywEQuUR54285522 = -688656996;    double jMCywEQuUR59664692 = -449103577;    double jMCywEQuUR15123168 = -975497252;    double jMCywEQuUR58066327 = -23233987;    double jMCywEQuUR17078899 = -925008210;    double jMCywEQuUR41444274 = -381681187;    double jMCywEQuUR97764162 = -868403032;    double jMCywEQuUR37580502 = -364592666;    double jMCywEQuUR90651533 = 65975856;    double jMCywEQuUR68784766 = -372178982;    double jMCywEQuUR11119747 = -336293997;    double jMCywEQuUR91930968 = -519309060;    double jMCywEQuUR94157168 = -243581169;    double jMCywEQuUR7874759 = -254145130;    double jMCywEQuUR15439288 = -818972692;    double jMCywEQuUR10646331 = -245986447;    double jMCywEQuUR1369187 = -921825512;    double jMCywEQuUR45551753 = -784779025;    double jMCywEQuUR42275232 = -199159569;    double jMCywEQuUR38857801 = -128740975;    double jMCywEQuUR2236403 = -820091565;    double jMCywEQuUR22488858 = -385136129;    double jMCywEQuUR26394183 = -780212782;    double jMCywEQuUR60797740 = -5967478;    double jMCywEQuUR3264810 = -510803821;    double jMCywEQuUR59272585 = -402052478;    double jMCywEQuUR54173726 = -664636283;    double jMCywEQuUR46387441 = -475286539;    double jMCywEQuUR90086139 = -202951743;    double jMCywEQuUR56293150 = -312466832;    double jMCywEQuUR9633047 = -31811875;    double jMCywEQuUR8130273 = -397320590;    double jMCywEQuUR3966598 = -869097779;    double jMCywEQuUR26315361 = -853569183;    double jMCywEQuUR74652415 = -354381183;    double jMCywEQuUR2118709 = -391629092;     jMCywEQuUR13243610 = jMCywEQuUR80137320;     jMCywEQuUR80137320 = jMCywEQuUR94779465;     jMCywEQuUR94779465 = jMCywEQuUR53879594;     jMCywEQuUR53879594 = jMCywEQuUR18384688;     jMCywEQuUR18384688 = jMCywEQuUR65697517;     jMCywEQuUR65697517 = jMCywEQuUR26034272;     jMCywEQuUR26034272 = jMCywEQuUR11244461;     jMCywEQuUR11244461 = jMCywEQuUR1364349;     jMCywEQuUR1364349 = jMCywEQuUR18455016;     jMCywEQuUR18455016 = jMCywEQuUR91666490;     jMCywEQuUR91666490 = jMCywEQuUR62278315;     jMCywEQuUR62278315 = jMCywEQuUR69530384;     jMCywEQuUR69530384 = jMCywEQuUR88431953;     jMCywEQuUR88431953 = jMCywEQuUR38942625;     jMCywEQuUR38942625 = jMCywEQuUR61708381;     jMCywEQuUR61708381 = jMCywEQuUR470291;     jMCywEQuUR470291 = jMCywEQuUR43052311;     jMCywEQuUR43052311 = jMCywEQuUR53656257;     jMCywEQuUR53656257 = jMCywEQuUR83021363;     jMCywEQuUR83021363 = jMCywEQuUR6654310;     jMCywEQuUR6654310 = jMCywEQuUR1163141;     jMCywEQuUR1163141 = jMCywEQuUR36812696;     jMCywEQuUR36812696 = jMCywEQuUR77222688;     jMCywEQuUR77222688 = jMCywEQuUR81075944;     jMCywEQuUR81075944 = jMCywEQuUR22277060;     jMCywEQuUR22277060 = jMCywEQuUR90459071;     jMCywEQuUR90459071 = jMCywEQuUR62262928;     jMCywEQuUR62262928 = jMCywEQuUR487718;     jMCywEQuUR487718 = jMCywEQuUR20673737;     jMCywEQuUR20673737 = jMCywEQuUR64169493;     jMCywEQuUR64169493 = jMCywEQuUR32001799;     jMCywEQuUR32001799 = jMCywEQuUR47155147;     jMCywEQuUR47155147 = jMCywEQuUR11464058;     jMCywEQuUR11464058 = jMCywEQuUR71353054;     jMCywEQuUR71353054 = jMCywEQuUR97498351;     jMCywEQuUR97498351 = jMCywEQuUR63944218;     jMCywEQuUR63944218 = jMCywEQuUR62889789;     jMCywEQuUR62889789 = jMCywEQuUR52400778;     jMCywEQuUR52400778 = jMCywEQuUR84871491;     jMCywEQuUR84871491 = jMCywEQuUR71901616;     jMCywEQuUR71901616 = jMCywEQuUR14723341;     jMCywEQuUR14723341 = jMCywEQuUR7005973;     jMCywEQuUR7005973 = jMCywEQuUR28937937;     jMCywEQuUR28937937 = jMCywEQuUR61783400;     jMCywEQuUR61783400 = jMCywEQuUR70429614;     jMCywEQuUR70429614 = jMCywEQuUR20907874;     jMCywEQuUR20907874 = jMCywEQuUR44907319;     jMCywEQuUR44907319 = jMCywEQuUR19987697;     jMCywEQuUR19987697 = jMCywEQuUR61629917;     jMCywEQuUR61629917 = jMCywEQuUR18437334;     jMCywEQuUR18437334 = jMCywEQuUR41680636;     jMCywEQuUR41680636 = jMCywEQuUR5607617;     jMCywEQuUR5607617 = jMCywEQuUR86357407;     jMCywEQuUR86357407 = jMCywEQuUR8199249;     jMCywEQuUR8199249 = jMCywEQuUR12080469;     jMCywEQuUR12080469 = jMCywEQuUR43324625;     jMCywEQuUR43324625 = jMCywEQuUR17556778;     jMCywEQuUR17556778 = jMCywEQuUR72803650;     jMCywEQuUR72803650 = jMCywEQuUR96107627;     jMCywEQuUR96107627 = jMCywEQuUR75238445;     jMCywEQuUR75238445 = jMCywEQuUR63771343;     jMCywEQuUR63771343 = jMCywEQuUR10756744;     jMCywEQuUR10756744 = jMCywEQuUR80690612;     jMCywEQuUR80690612 = jMCywEQuUR54285522;     jMCywEQuUR54285522 = jMCywEQuUR59664692;     jMCywEQuUR59664692 = jMCywEQuUR15123168;     jMCywEQuUR15123168 = jMCywEQuUR58066327;     jMCywEQuUR58066327 = jMCywEQuUR17078899;     jMCywEQuUR17078899 = jMCywEQuUR41444274;     jMCywEQuUR41444274 = jMCywEQuUR97764162;     jMCywEQuUR97764162 = jMCywEQuUR37580502;     jMCywEQuUR37580502 = jMCywEQuUR90651533;     jMCywEQuUR90651533 = jMCywEQuUR68784766;     jMCywEQuUR68784766 = jMCywEQuUR11119747;     jMCywEQuUR11119747 = jMCywEQuUR91930968;     jMCywEQuUR91930968 = jMCywEQuUR94157168;     jMCywEQuUR94157168 = jMCywEQuUR7874759;     jMCywEQuUR7874759 = jMCywEQuUR15439288;     jMCywEQuUR15439288 = jMCywEQuUR10646331;     jMCywEQuUR10646331 = jMCywEQuUR1369187;     jMCywEQuUR1369187 = jMCywEQuUR45551753;     jMCywEQuUR45551753 = jMCywEQuUR42275232;     jMCywEQuUR42275232 = jMCywEQuUR38857801;     jMCywEQuUR38857801 = jMCywEQuUR2236403;     jMCywEQuUR2236403 = jMCywEQuUR22488858;     jMCywEQuUR22488858 = jMCywEQuUR26394183;     jMCywEQuUR26394183 = jMCywEQuUR60797740;     jMCywEQuUR60797740 = jMCywEQuUR3264810;     jMCywEQuUR3264810 = jMCywEQuUR59272585;     jMCywEQuUR59272585 = jMCywEQuUR54173726;     jMCywEQuUR54173726 = jMCywEQuUR46387441;     jMCywEQuUR46387441 = jMCywEQuUR90086139;     jMCywEQuUR90086139 = jMCywEQuUR56293150;     jMCywEQuUR56293150 = jMCywEQuUR9633047;     jMCywEQuUR9633047 = jMCywEQuUR8130273;     jMCywEQuUR8130273 = jMCywEQuUR3966598;     jMCywEQuUR3966598 = jMCywEQuUR26315361;     jMCywEQuUR26315361 = jMCywEQuUR74652415;     jMCywEQuUR74652415 = jMCywEQuUR2118709;     jMCywEQuUR2118709 = jMCywEQuUR13243610;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void lhIHfdJpAD75156214() {     double UJpUTCOsQu3369919 = -450385293;    double UJpUTCOsQu63262385 = -683669156;    double UJpUTCOsQu90272164 = -830681833;    double UJpUTCOsQu27378169 = -322194168;    double UJpUTCOsQu31441424 = -238800150;    double UJpUTCOsQu46483921 = -3207960;    double UJpUTCOsQu20697710 = -76225350;    double UJpUTCOsQu64123024 = -231396386;    double UJpUTCOsQu25176036 = -180278371;    double UJpUTCOsQu22710686 = -390923446;    double UJpUTCOsQu67818310 = -211263850;    double UJpUTCOsQu97027823 = -89639609;    double UJpUTCOsQu7876517 = -188943474;    double UJpUTCOsQu26850807 = -314430370;    double UJpUTCOsQu37016996 = -442998090;    double UJpUTCOsQu85888123 = -373826253;    double UJpUTCOsQu44432471 = 75111987;    double UJpUTCOsQu64408024 = -651960922;    double UJpUTCOsQu14570649 = -603414136;    double UJpUTCOsQu50345611 = -198114999;    double UJpUTCOsQu94576711 = -338449495;    double UJpUTCOsQu99244722 = -735516930;    double UJpUTCOsQu70051114 = -803643229;    double UJpUTCOsQu85143785 = -812154934;    double UJpUTCOsQu27961133 = -683534927;    double UJpUTCOsQu41068025 = -310729788;    double UJpUTCOsQu12426407 = -237091003;    double UJpUTCOsQu85433303 = -681947834;    double UJpUTCOsQu61696715 = -11530130;    double UJpUTCOsQu68462816 = -841518183;    double UJpUTCOsQu67632896 = -359058469;    double UJpUTCOsQu31368713 = -754564536;    double UJpUTCOsQu56124188 = -934779382;    double UJpUTCOsQu35302702 = -844924785;    double UJpUTCOsQu6949589 = -41596937;    double UJpUTCOsQu50729358 = -879225371;    double UJpUTCOsQu64177787 = -320859256;    double UJpUTCOsQu87247072 = -165009350;    double UJpUTCOsQu62933795 = -982549533;    double UJpUTCOsQu29383633 = -669532491;    double UJpUTCOsQu85601289 = 80196032;    double UJpUTCOsQu69367804 = -929208557;    double UJpUTCOsQu66822814 = -534264721;    double UJpUTCOsQu59599878 = 92878632;    double UJpUTCOsQu53747817 = -657667823;    double UJpUTCOsQu90868608 = -177661442;    double UJpUTCOsQu1331164 = -61513042;    double UJpUTCOsQu35293778 = -719439239;    double UJpUTCOsQu47906351 = -758837553;    double UJpUTCOsQu90910322 = -577586446;    double UJpUTCOsQu47802857 = -421406272;    double UJpUTCOsQu85453743 = -611682630;    double UJpUTCOsQu55060071 = -185380330;    double UJpUTCOsQu39264470 = -652142027;    double UJpUTCOsQu80579503 = -371270078;    double UJpUTCOsQu4125196 = -714868364;    double UJpUTCOsQu93211271 = -880025928;    double UJpUTCOsQu5128380 = 81473101;    double UJpUTCOsQu99417036 = -638659242;    double UJpUTCOsQu90373398 = -928070362;    double UJpUTCOsQu34057515 = -766116957;    double UJpUTCOsQu35264407 = -394277517;    double UJpUTCOsQu2426309 = -119866256;    double UJpUTCOsQu56713219 = -338760189;    double UJpUTCOsQu55077789 = 68135022;    double UJpUTCOsQu36449597 = -456699315;    double UJpUTCOsQu40903635 = -154860227;    double UJpUTCOsQu72573814 = -344018690;    double UJpUTCOsQu19901218 = -172833433;    double UJpUTCOsQu86287638 = -563772720;    double UJpUTCOsQu21710336 = 47033002;    double UJpUTCOsQu57185399 = -759878663;    double UJpUTCOsQu1474230 = -669411390;    double UJpUTCOsQu85187015 = -933881645;    double UJpUTCOsQu64744321 = -178311031;    double UJpUTCOsQu25208908 = -409240939;    double UJpUTCOsQu32421909 = -101252209;    double UJpUTCOsQu10451236 = -796521862;    double UJpUTCOsQu31395968 = -54487112;    double UJpUTCOsQu37092525 = -405873486;    double UJpUTCOsQu39736861 = -149216747;    double UJpUTCOsQu77132628 = -517651765;    double UJpUTCOsQu37526953 = -923110281;    double UJpUTCOsQu70786392 = -433943685;    double UJpUTCOsQu20659959 = -320111911;    double UJpUTCOsQu82179153 = -747375840;    double UJpUTCOsQu76308641 = -469184207;    double UJpUTCOsQu16859719 = -182637355;    double UJpUTCOsQu54723199 = -373654708;    double UJpUTCOsQu2824394 = -326728573;    double UJpUTCOsQu57518086 = -999199444;    double UJpUTCOsQu59049408 = -302332358;    double UJpUTCOsQu87830035 = -526350109;    double UJpUTCOsQu72560396 = 45520829;    double UJpUTCOsQu95326118 = -903415534;    double UJpUTCOsQu50336883 = -525526451;    double UJpUTCOsQu66941495 = -709342301;    double UJpUTCOsQu10109595 = -95504532;    double UJpUTCOsQu4522089 = -975256391;    double UJpUTCOsQu17298221 = -450385293;     UJpUTCOsQu3369919 = UJpUTCOsQu63262385;     UJpUTCOsQu63262385 = UJpUTCOsQu90272164;     UJpUTCOsQu90272164 = UJpUTCOsQu27378169;     UJpUTCOsQu27378169 = UJpUTCOsQu31441424;     UJpUTCOsQu31441424 = UJpUTCOsQu46483921;     UJpUTCOsQu46483921 = UJpUTCOsQu20697710;     UJpUTCOsQu20697710 = UJpUTCOsQu64123024;     UJpUTCOsQu64123024 = UJpUTCOsQu25176036;     UJpUTCOsQu25176036 = UJpUTCOsQu22710686;     UJpUTCOsQu22710686 = UJpUTCOsQu67818310;     UJpUTCOsQu67818310 = UJpUTCOsQu97027823;     UJpUTCOsQu97027823 = UJpUTCOsQu7876517;     UJpUTCOsQu7876517 = UJpUTCOsQu26850807;     UJpUTCOsQu26850807 = UJpUTCOsQu37016996;     UJpUTCOsQu37016996 = UJpUTCOsQu85888123;     UJpUTCOsQu85888123 = UJpUTCOsQu44432471;     UJpUTCOsQu44432471 = UJpUTCOsQu64408024;     UJpUTCOsQu64408024 = UJpUTCOsQu14570649;     UJpUTCOsQu14570649 = UJpUTCOsQu50345611;     UJpUTCOsQu50345611 = UJpUTCOsQu94576711;     UJpUTCOsQu94576711 = UJpUTCOsQu99244722;     UJpUTCOsQu99244722 = UJpUTCOsQu70051114;     UJpUTCOsQu70051114 = UJpUTCOsQu85143785;     UJpUTCOsQu85143785 = UJpUTCOsQu27961133;     UJpUTCOsQu27961133 = UJpUTCOsQu41068025;     UJpUTCOsQu41068025 = UJpUTCOsQu12426407;     UJpUTCOsQu12426407 = UJpUTCOsQu85433303;     UJpUTCOsQu85433303 = UJpUTCOsQu61696715;     UJpUTCOsQu61696715 = UJpUTCOsQu68462816;     UJpUTCOsQu68462816 = UJpUTCOsQu67632896;     UJpUTCOsQu67632896 = UJpUTCOsQu31368713;     UJpUTCOsQu31368713 = UJpUTCOsQu56124188;     UJpUTCOsQu56124188 = UJpUTCOsQu35302702;     UJpUTCOsQu35302702 = UJpUTCOsQu6949589;     UJpUTCOsQu6949589 = UJpUTCOsQu50729358;     UJpUTCOsQu50729358 = UJpUTCOsQu64177787;     UJpUTCOsQu64177787 = UJpUTCOsQu87247072;     UJpUTCOsQu87247072 = UJpUTCOsQu62933795;     UJpUTCOsQu62933795 = UJpUTCOsQu29383633;     UJpUTCOsQu29383633 = UJpUTCOsQu85601289;     UJpUTCOsQu85601289 = UJpUTCOsQu69367804;     UJpUTCOsQu69367804 = UJpUTCOsQu66822814;     UJpUTCOsQu66822814 = UJpUTCOsQu59599878;     UJpUTCOsQu59599878 = UJpUTCOsQu53747817;     UJpUTCOsQu53747817 = UJpUTCOsQu90868608;     UJpUTCOsQu90868608 = UJpUTCOsQu1331164;     UJpUTCOsQu1331164 = UJpUTCOsQu35293778;     UJpUTCOsQu35293778 = UJpUTCOsQu47906351;     UJpUTCOsQu47906351 = UJpUTCOsQu90910322;     UJpUTCOsQu90910322 = UJpUTCOsQu47802857;     UJpUTCOsQu47802857 = UJpUTCOsQu85453743;     UJpUTCOsQu85453743 = UJpUTCOsQu55060071;     UJpUTCOsQu55060071 = UJpUTCOsQu39264470;     UJpUTCOsQu39264470 = UJpUTCOsQu80579503;     UJpUTCOsQu80579503 = UJpUTCOsQu4125196;     UJpUTCOsQu4125196 = UJpUTCOsQu93211271;     UJpUTCOsQu93211271 = UJpUTCOsQu5128380;     UJpUTCOsQu5128380 = UJpUTCOsQu99417036;     UJpUTCOsQu99417036 = UJpUTCOsQu90373398;     UJpUTCOsQu90373398 = UJpUTCOsQu34057515;     UJpUTCOsQu34057515 = UJpUTCOsQu35264407;     UJpUTCOsQu35264407 = UJpUTCOsQu2426309;     UJpUTCOsQu2426309 = UJpUTCOsQu56713219;     UJpUTCOsQu56713219 = UJpUTCOsQu55077789;     UJpUTCOsQu55077789 = UJpUTCOsQu36449597;     UJpUTCOsQu36449597 = UJpUTCOsQu40903635;     UJpUTCOsQu40903635 = UJpUTCOsQu72573814;     UJpUTCOsQu72573814 = UJpUTCOsQu19901218;     UJpUTCOsQu19901218 = UJpUTCOsQu86287638;     UJpUTCOsQu86287638 = UJpUTCOsQu21710336;     UJpUTCOsQu21710336 = UJpUTCOsQu57185399;     UJpUTCOsQu57185399 = UJpUTCOsQu1474230;     UJpUTCOsQu1474230 = UJpUTCOsQu85187015;     UJpUTCOsQu85187015 = UJpUTCOsQu64744321;     UJpUTCOsQu64744321 = UJpUTCOsQu25208908;     UJpUTCOsQu25208908 = UJpUTCOsQu32421909;     UJpUTCOsQu32421909 = UJpUTCOsQu10451236;     UJpUTCOsQu10451236 = UJpUTCOsQu31395968;     UJpUTCOsQu31395968 = UJpUTCOsQu37092525;     UJpUTCOsQu37092525 = UJpUTCOsQu39736861;     UJpUTCOsQu39736861 = UJpUTCOsQu77132628;     UJpUTCOsQu77132628 = UJpUTCOsQu37526953;     UJpUTCOsQu37526953 = UJpUTCOsQu70786392;     UJpUTCOsQu70786392 = UJpUTCOsQu20659959;     UJpUTCOsQu20659959 = UJpUTCOsQu82179153;     UJpUTCOsQu82179153 = UJpUTCOsQu76308641;     UJpUTCOsQu76308641 = UJpUTCOsQu16859719;     UJpUTCOsQu16859719 = UJpUTCOsQu54723199;     UJpUTCOsQu54723199 = UJpUTCOsQu2824394;     UJpUTCOsQu2824394 = UJpUTCOsQu57518086;     UJpUTCOsQu57518086 = UJpUTCOsQu59049408;     UJpUTCOsQu59049408 = UJpUTCOsQu87830035;     UJpUTCOsQu87830035 = UJpUTCOsQu72560396;     UJpUTCOsQu72560396 = UJpUTCOsQu95326118;     UJpUTCOsQu95326118 = UJpUTCOsQu50336883;     UJpUTCOsQu50336883 = UJpUTCOsQu66941495;     UJpUTCOsQu66941495 = UJpUTCOsQu10109595;     UJpUTCOsQu10109595 = UJpUTCOsQu4522089;     UJpUTCOsQu4522089 = UJpUTCOsQu17298221;     UJpUTCOsQu17298221 = UJpUTCOsQu3369919;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QtIKMWLQDx87701403() {     double EDLcnJROsI22838089 = -863516505;    double EDLcnJROsI16286250 = -129547153;    double EDLcnJROsI7109157 = -482310448;    double EDLcnJROsI46025318 = -138768431;    double EDLcnJROsI31887940 = -865072566;    double EDLcnJROsI72075995 = -993692728;    double EDLcnJROsI65529588 = -519531580;    double EDLcnJROsI29373257 = -325204352;    double EDLcnJROsI85862833 = -908469750;    double EDLcnJROsI639409 = -396509492;    double EDLcnJROsI22041574 = -644254150;    double EDLcnJROsI522437 = -88942314;    double EDLcnJROsI98248175 = -613300751;    double EDLcnJROsI35266847 = -856716095;    double EDLcnJROsI97543457 = -741081882;    double EDLcnJROsI52103772 = -837018187;    double EDLcnJROsI50394584 = -96662694;    double EDLcnJROsI88470775 = -402715641;    double EDLcnJROsI14205528 = -980618896;    double EDLcnJROsI30956913 = -915651455;    double EDLcnJROsI7032784 = -944661820;    double EDLcnJROsI14226806 = -147320143;    double EDLcnJROsI38224120 = -1217848;    double EDLcnJROsI2865454 = -448698926;    double EDLcnJROsI39164622 = -977835037;    double EDLcnJROsI45835486 = 3474993;    double EDLcnJROsI96354537 = 97758065;    double EDLcnJROsI36224978 = -845681113;    double EDLcnJROsI3441672 = -25441276;    double EDLcnJROsI53169671 = -932956877;    double EDLcnJROsI97436981 = -224384561;    double EDLcnJROsI70948024 = -218913554;    double EDLcnJROsI67600292 = -389987149;    double EDLcnJROsI94059209 = -49527992;    double EDLcnJROsI46879925 = -104299743;    double EDLcnJROsI86795295 = -82793979;    double EDLcnJROsI32561238 = -847735331;    double EDLcnJROsI28729547 = -242218166;    double EDLcnJROsI30247120 = -346964358;    double EDLcnJROsI50665369 = -666063588;    double EDLcnJROsI27083347 = -429590263;    double EDLcnJROsI81226937 = -68104782;    double EDLcnJROsI37956055 = -482066518;    double EDLcnJROsI42985417 = -356194029;    double EDLcnJROsI33776229 = -934790786;    double EDLcnJROsI45329735 = -714992863;    double EDLcnJROsI83321043 = 24793636;    double EDLcnJROsI35449608 = -902726553;    double EDLcnJROsI89041941 = -772776792;    double EDLcnJROsI31808665 = -338598791;    double EDLcnJROsI22238427 = -827771203;    double EDLcnJROsI1902604 = -989035489;    double EDLcnJROsI24885218 = -961489291;    double EDLcnJROsI12194498 = -646735663;    double EDLcnJROsI80668620 = -145828713;    double EDLcnJROsI8611283 = -616196363;    double EDLcnJROsI78062129 = -28329305;    double EDLcnJROsI4243703 = 66388478;    double EDLcnJROsI6860697 = -160933395;    double EDLcnJROsI86052453 = -768547560;    double EDLcnJROsI75721458 = -991450794;    double EDLcnJROsI29304610 = -673850468;    double EDLcnJROsI25931585 = -199763076;    double EDLcnJROsI32693163 = -975512874;    double EDLcnJROsI3202428 = -72124931;    double EDLcnJROsI51093550 = -325340596;    double EDLcnJROsI32922145 = -698955165;    double EDLcnJROsI4188967 = -463772760;    double EDLcnJROsI88386921 = -652416353;    double EDLcnJROsI10748163 = -558287903;    double EDLcnJROsI19542535 = -989282857;    double EDLcnJROsI21665038 = -854444529;    double EDLcnJROsI58223656 = 44248717;    double EDLcnJROsI63540159 = -214555309;    double EDLcnJROsI3873567 = -386061192;    double EDLcnJROsI25805847 = -776557039;    double EDLcnJROsI76270751 = -665253625;    double EDLcnJROsI95238703 = -645023819;    double EDLcnJROsI69089225 = -513908140;    double EDLcnJROsI93834886 = -162842174;    double EDLcnJROsI62514443 = 78681357;    double EDLcnJROsI60904929 = 484617;    double EDLcnJROsI47183037 = 27095679;    double EDLcnJROsI71633007 = -686842486;    double EDLcnJROsI30931244 = -5185675;    double EDLcnJROsI95534378 = -235349073;    double EDLcnJROsI46062806 = -257424264;    double EDLcnJROsI55405794 = -743251486;    double EDLcnJROsI13390589 = -903699279;    double EDLcnJROsI38268642 = -488103381;    double EDLcnJROsI8733166 = 45535325;    double EDLcnJROsI28317535 = -814123810;    double EDLcnJROsI21868851 = 18715229;    double EDLcnJROsI44194666 = -578416799;    double EDLcnJROsI74943911 = -674612794;    double EDLcnJROsI97778736 = -755739796;    double EDLcnJROsI55295352 = -868341707;    double EDLcnJROsI5262893 = -506553645;    double EDLcnJROsI39782989 = -184069098;    double EDLcnJROsI82682679 = -863516505;     EDLcnJROsI22838089 = EDLcnJROsI16286250;     EDLcnJROsI16286250 = EDLcnJROsI7109157;     EDLcnJROsI7109157 = EDLcnJROsI46025318;     EDLcnJROsI46025318 = EDLcnJROsI31887940;     EDLcnJROsI31887940 = EDLcnJROsI72075995;     EDLcnJROsI72075995 = EDLcnJROsI65529588;     EDLcnJROsI65529588 = EDLcnJROsI29373257;     EDLcnJROsI29373257 = EDLcnJROsI85862833;     EDLcnJROsI85862833 = EDLcnJROsI639409;     EDLcnJROsI639409 = EDLcnJROsI22041574;     EDLcnJROsI22041574 = EDLcnJROsI522437;     EDLcnJROsI522437 = EDLcnJROsI98248175;     EDLcnJROsI98248175 = EDLcnJROsI35266847;     EDLcnJROsI35266847 = EDLcnJROsI97543457;     EDLcnJROsI97543457 = EDLcnJROsI52103772;     EDLcnJROsI52103772 = EDLcnJROsI50394584;     EDLcnJROsI50394584 = EDLcnJROsI88470775;     EDLcnJROsI88470775 = EDLcnJROsI14205528;     EDLcnJROsI14205528 = EDLcnJROsI30956913;     EDLcnJROsI30956913 = EDLcnJROsI7032784;     EDLcnJROsI7032784 = EDLcnJROsI14226806;     EDLcnJROsI14226806 = EDLcnJROsI38224120;     EDLcnJROsI38224120 = EDLcnJROsI2865454;     EDLcnJROsI2865454 = EDLcnJROsI39164622;     EDLcnJROsI39164622 = EDLcnJROsI45835486;     EDLcnJROsI45835486 = EDLcnJROsI96354537;     EDLcnJROsI96354537 = EDLcnJROsI36224978;     EDLcnJROsI36224978 = EDLcnJROsI3441672;     EDLcnJROsI3441672 = EDLcnJROsI53169671;     EDLcnJROsI53169671 = EDLcnJROsI97436981;     EDLcnJROsI97436981 = EDLcnJROsI70948024;     EDLcnJROsI70948024 = EDLcnJROsI67600292;     EDLcnJROsI67600292 = EDLcnJROsI94059209;     EDLcnJROsI94059209 = EDLcnJROsI46879925;     EDLcnJROsI46879925 = EDLcnJROsI86795295;     EDLcnJROsI86795295 = EDLcnJROsI32561238;     EDLcnJROsI32561238 = EDLcnJROsI28729547;     EDLcnJROsI28729547 = EDLcnJROsI30247120;     EDLcnJROsI30247120 = EDLcnJROsI50665369;     EDLcnJROsI50665369 = EDLcnJROsI27083347;     EDLcnJROsI27083347 = EDLcnJROsI81226937;     EDLcnJROsI81226937 = EDLcnJROsI37956055;     EDLcnJROsI37956055 = EDLcnJROsI42985417;     EDLcnJROsI42985417 = EDLcnJROsI33776229;     EDLcnJROsI33776229 = EDLcnJROsI45329735;     EDLcnJROsI45329735 = EDLcnJROsI83321043;     EDLcnJROsI83321043 = EDLcnJROsI35449608;     EDLcnJROsI35449608 = EDLcnJROsI89041941;     EDLcnJROsI89041941 = EDLcnJROsI31808665;     EDLcnJROsI31808665 = EDLcnJROsI22238427;     EDLcnJROsI22238427 = EDLcnJROsI1902604;     EDLcnJROsI1902604 = EDLcnJROsI24885218;     EDLcnJROsI24885218 = EDLcnJROsI12194498;     EDLcnJROsI12194498 = EDLcnJROsI80668620;     EDLcnJROsI80668620 = EDLcnJROsI8611283;     EDLcnJROsI8611283 = EDLcnJROsI78062129;     EDLcnJROsI78062129 = EDLcnJROsI4243703;     EDLcnJROsI4243703 = EDLcnJROsI6860697;     EDLcnJROsI6860697 = EDLcnJROsI86052453;     EDLcnJROsI86052453 = EDLcnJROsI75721458;     EDLcnJROsI75721458 = EDLcnJROsI29304610;     EDLcnJROsI29304610 = EDLcnJROsI25931585;     EDLcnJROsI25931585 = EDLcnJROsI32693163;     EDLcnJROsI32693163 = EDLcnJROsI3202428;     EDLcnJROsI3202428 = EDLcnJROsI51093550;     EDLcnJROsI51093550 = EDLcnJROsI32922145;     EDLcnJROsI32922145 = EDLcnJROsI4188967;     EDLcnJROsI4188967 = EDLcnJROsI88386921;     EDLcnJROsI88386921 = EDLcnJROsI10748163;     EDLcnJROsI10748163 = EDLcnJROsI19542535;     EDLcnJROsI19542535 = EDLcnJROsI21665038;     EDLcnJROsI21665038 = EDLcnJROsI58223656;     EDLcnJROsI58223656 = EDLcnJROsI63540159;     EDLcnJROsI63540159 = EDLcnJROsI3873567;     EDLcnJROsI3873567 = EDLcnJROsI25805847;     EDLcnJROsI25805847 = EDLcnJROsI76270751;     EDLcnJROsI76270751 = EDLcnJROsI95238703;     EDLcnJROsI95238703 = EDLcnJROsI69089225;     EDLcnJROsI69089225 = EDLcnJROsI93834886;     EDLcnJROsI93834886 = EDLcnJROsI62514443;     EDLcnJROsI62514443 = EDLcnJROsI60904929;     EDLcnJROsI60904929 = EDLcnJROsI47183037;     EDLcnJROsI47183037 = EDLcnJROsI71633007;     EDLcnJROsI71633007 = EDLcnJROsI30931244;     EDLcnJROsI30931244 = EDLcnJROsI95534378;     EDLcnJROsI95534378 = EDLcnJROsI46062806;     EDLcnJROsI46062806 = EDLcnJROsI55405794;     EDLcnJROsI55405794 = EDLcnJROsI13390589;     EDLcnJROsI13390589 = EDLcnJROsI38268642;     EDLcnJROsI38268642 = EDLcnJROsI8733166;     EDLcnJROsI8733166 = EDLcnJROsI28317535;     EDLcnJROsI28317535 = EDLcnJROsI21868851;     EDLcnJROsI21868851 = EDLcnJROsI44194666;     EDLcnJROsI44194666 = EDLcnJROsI74943911;     EDLcnJROsI74943911 = EDLcnJROsI97778736;     EDLcnJROsI97778736 = EDLcnJROsI55295352;     EDLcnJROsI55295352 = EDLcnJROsI5262893;     EDLcnJROsI5262893 = EDLcnJROsI39782989;     EDLcnJROsI39782989 = EDLcnJROsI82682679;     EDLcnJROsI82682679 = EDLcnJROsI22838089;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ghWmTcaXXe83884563() {     double TQYSgOduXE82434185 = 7727118;    double TQYSgOduXE17792099 = 60297462;    double TQYSgOduXE44110544 = -556451370;    double TQYSgOduXE41901076 = 88620691;    double TQYSgOduXE43181166 = -765579593;    double TQYSgOduXE69753116 = -851952401;    double TQYSgOduXE62888071 = -949249166;    double TQYSgOduXE80198541 = -679415727;    double TQYSgOduXE99676276 = -341142249;    double TQYSgOduXE83663923 = -337768346;    double TQYSgOduXE47336505 = 54203410;    double TQYSgOduXE35193638 = -183963563;    double TQYSgOduXE69002739 = -519479269;    double TQYSgOduXE93640685 = -760874443;    double TQYSgOduXE94851263 = -433608403;    double TQYSgOduXE48858026 = -642391079;    double TQYSgOduXE86355688 = -24878975;    double TQYSgOduXE53139106 = -772051745;    double TQYSgOduXE94647730 = -19738526;    double TQYSgOduXE10874022 = -478060108;    double TQYSgOduXE87493902 = -777682645;    double TQYSgOduXE82716404 = -39722021;    double TQYSgOduXE30415945 = -865512927;    double TQYSgOduXE67595692 = -13037163;    double TQYSgOduXE15142627 = -433972627;    double TQYSgOduXE40250393 = -131142478;    double TQYSgOduXE9694609 = -351721932;    double TQYSgOduXE1336148 = -367062703;    double TQYSgOduXE53226015 = -915033892;    double TQYSgOduXE91643137 = -979940119;    double TQYSgOduXE22351300 = -869603889;    double TQYSgOduXE13713285 = -636131551;    double TQYSgOduXE16682331 = -369934021;    double TQYSgOduXE76583651 = -651411923;    double TQYSgOduXE51817286 = -852509728;    double TQYSgOduXE65385191 = -394450561;    double TQYSgOduXE23192915 = -40513966;    double TQYSgOduXE27089884 = -186670555;    double TQYSgOduXE49265062 = -65670874;    double TQYSgOduXE23491024 = -939944536;    double TQYSgOduXE85301160 = -898251860;    double TQYSgOduXE51306118 = -73046201;    double TQYSgOduXE78835297 = -215511348;    double TQYSgOduXE17224922 = -780108768;    double TQYSgOduXE34764544 = -381108855;    double TQYSgOduXE10122864 = -957937022;    double TQYSgOduXE88809765 = -967062031;    double TQYSgOduXE82146002 = -135479781;    double TQYSgOduXE28431589 = 43285588;    double TQYSgOduXE46976057 = -659851252;    double TQYSgOduXE72724677 = -613879427;    double TQYSgOduXE8487757 = -960278744;    double TQYSgOduXE300733 = -101437744;    double TQYSgOduXE85469021 = -906904619;    double TQYSgOduXE96390661 = -109762800;    double TQYSgOduXE99717780 = -952550862;    double TQYSgOduXE87376153 = -74189611;    double TQYSgOduXE76514851 = -443414208;    double TQYSgOduXE26758450 = -477406683;    double TQYSgOduXE2930773 = -534437116;    double TQYSgOduXE60058508 = -400230470;    double TQYSgOduXE61551924 = -482186464;    double TQYSgOduXE26972526 = -764381836;    double TQYSgOduXE8033140 = -361202131;    double TQYSgOduXE61312624 = -468164457;    double TQYSgOduXE33623221 = -309665039;    double TQYSgOduXE18511308 = -814029542;    double TQYSgOduXE92419087 = -868067347;    double TQYSgOduXE41823400 = -908364715;    double TQYSgOduXE29466072 = 60842158;    double TQYSgOduXE25665111 = -501877113;    double TQYSgOduXE59265804 = -838208420;    double TQYSgOduXE3874044 = -606380871;    double TQYSgOduXE71156707 = -79793991;    double TQYSgOduXE25572862 = -579808248;    double TQYSgOduXE36187784 = -604636445;    double TQYSgOduXE3881108 = -824210673;    double TQYSgOduXE13191023 = 14595840;    double TQYSgOduXE32831149 = -631928309;    double TQYSgOduXE5019763 = -476035605;    double TQYSgOduXE51440627 = -164080447;    double TQYSgOduXE27548606 = -116242151;    double TQYSgOduXE72904558 = -310348292;    double TQYSgOduXE6249958 = -155182641;    double TQYSgOduXE18918461 = -266060693;    double TQYSgOduXE13863544 = -909325146;    double TQYSgOduXE13412552 = -434693808;    double TQYSgOduXE31213310 = -463029403;    double TQYSgOduXE80192989 = -441649123;    double TQYSgOduXE52099505 = -899958867;    double TQYSgOduXE78009038 = -220260950;    double TQYSgOduXE46678064 = -597099758;    double TQYSgOduXE331435 = -709263873;    double TQYSgOduXE46334290 = -531233759;    double TQYSgOduXE63432515 = -439714067;    double TQYSgOduXE23749237 = -316065397;    double TQYSgOduXE24333592 = -308664365;    double TQYSgOduXE70802157 = -854309218;    double TQYSgOduXE55912298 = -211944311;    double TQYSgOduXE1141324 = 7727118;     TQYSgOduXE82434185 = TQYSgOduXE17792099;     TQYSgOduXE17792099 = TQYSgOduXE44110544;     TQYSgOduXE44110544 = TQYSgOduXE41901076;     TQYSgOduXE41901076 = TQYSgOduXE43181166;     TQYSgOduXE43181166 = TQYSgOduXE69753116;     TQYSgOduXE69753116 = TQYSgOduXE62888071;     TQYSgOduXE62888071 = TQYSgOduXE80198541;     TQYSgOduXE80198541 = TQYSgOduXE99676276;     TQYSgOduXE99676276 = TQYSgOduXE83663923;     TQYSgOduXE83663923 = TQYSgOduXE47336505;     TQYSgOduXE47336505 = TQYSgOduXE35193638;     TQYSgOduXE35193638 = TQYSgOduXE69002739;     TQYSgOduXE69002739 = TQYSgOduXE93640685;     TQYSgOduXE93640685 = TQYSgOduXE94851263;     TQYSgOduXE94851263 = TQYSgOduXE48858026;     TQYSgOduXE48858026 = TQYSgOduXE86355688;     TQYSgOduXE86355688 = TQYSgOduXE53139106;     TQYSgOduXE53139106 = TQYSgOduXE94647730;     TQYSgOduXE94647730 = TQYSgOduXE10874022;     TQYSgOduXE10874022 = TQYSgOduXE87493902;     TQYSgOduXE87493902 = TQYSgOduXE82716404;     TQYSgOduXE82716404 = TQYSgOduXE30415945;     TQYSgOduXE30415945 = TQYSgOduXE67595692;     TQYSgOduXE67595692 = TQYSgOduXE15142627;     TQYSgOduXE15142627 = TQYSgOduXE40250393;     TQYSgOduXE40250393 = TQYSgOduXE9694609;     TQYSgOduXE9694609 = TQYSgOduXE1336148;     TQYSgOduXE1336148 = TQYSgOduXE53226015;     TQYSgOduXE53226015 = TQYSgOduXE91643137;     TQYSgOduXE91643137 = TQYSgOduXE22351300;     TQYSgOduXE22351300 = TQYSgOduXE13713285;     TQYSgOduXE13713285 = TQYSgOduXE16682331;     TQYSgOduXE16682331 = TQYSgOduXE76583651;     TQYSgOduXE76583651 = TQYSgOduXE51817286;     TQYSgOduXE51817286 = TQYSgOduXE65385191;     TQYSgOduXE65385191 = TQYSgOduXE23192915;     TQYSgOduXE23192915 = TQYSgOduXE27089884;     TQYSgOduXE27089884 = TQYSgOduXE49265062;     TQYSgOduXE49265062 = TQYSgOduXE23491024;     TQYSgOduXE23491024 = TQYSgOduXE85301160;     TQYSgOduXE85301160 = TQYSgOduXE51306118;     TQYSgOduXE51306118 = TQYSgOduXE78835297;     TQYSgOduXE78835297 = TQYSgOduXE17224922;     TQYSgOduXE17224922 = TQYSgOduXE34764544;     TQYSgOduXE34764544 = TQYSgOduXE10122864;     TQYSgOduXE10122864 = TQYSgOduXE88809765;     TQYSgOduXE88809765 = TQYSgOduXE82146002;     TQYSgOduXE82146002 = TQYSgOduXE28431589;     TQYSgOduXE28431589 = TQYSgOduXE46976057;     TQYSgOduXE46976057 = TQYSgOduXE72724677;     TQYSgOduXE72724677 = TQYSgOduXE8487757;     TQYSgOduXE8487757 = TQYSgOduXE300733;     TQYSgOduXE300733 = TQYSgOduXE85469021;     TQYSgOduXE85469021 = TQYSgOduXE96390661;     TQYSgOduXE96390661 = TQYSgOduXE99717780;     TQYSgOduXE99717780 = TQYSgOduXE87376153;     TQYSgOduXE87376153 = TQYSgOduXE76514851;     TQYSgOduXE76514851 = TQYSgOduXE26758450;     TQYSgOduXE26758450 = TQYSgOduXE2930773;     TQYSgOduXE2930773 = TQYSgOduXE60058508;     TQYSgOduXE60058508 = TQYSgOduXE61551924;     TQYSgOduXE61551924 = TQYSgOduXE26972526;     TQYSgOduXE26972526 = TQYSgOduXE8033140;     TQYSgOduXE8033140 = TQYSgOduXE61312624;     TQYSgOduXE61312624 = TQYSgOduXE33623221;     TQYSgOduXE33623221 = TQYSgOduXE18511308;     TQYSgOduXE18511308 = TQYSgOduXE92419087;     TQYSgOduXE92419087 = TQYSgOduXE41823400;     TQYSgOduXE41823400 = TQYSgOduXE29466072;     TQYSgOduXE29466072 = TQYSgOduXE25665111;     TQYSgOduXE25665111 = TQYSgOduXE59265804;     TQYSgOduXE59265804 = TQYSgOduXE3874044;     TQYSgOduXE3874044 = TQYSgOduXE71156707;     TQYSgOduXE71156707 = TQYSgOduXE25572862;     TQYSgOduXE25572862 = TQYSgOduXE36187784;     TQYSgOduXE36187784 = TQYSgOduXE3881108;     TQYSgOduXE3881108 = TQYSgOduXE13191023;     TQYSgOduXE13191023 = TQYSgOduXE32831149;     TQYSgOduXE32831149 = TQYSgOduXE5019763;     TQYSgOduXE5019763 = TQYSgOduXE51440627;     TQYSgOduXE51440627 = TQYSgOduXE27548606;     TQYSgOduXE27548606 = TQYSgOduXE72904558;     TQYSgOduXE72904558 = TQYSgOduXE6249958;     TQYSgOduXE6249958 = TQYSgOduXE18918461;     TQYSgOduXE18918461 = TQYSgOduXE13863544;     TQYSgOduXE13863544 = TQYSgOduXE13412552;     TQYSgOduXE13412552 = TQYSgOduXE31213310;     TQYSgOduXE31213310 = TQYSgOduXE80192989;     TQYSgOduXE80192989 = TQYSgOduXE52099505;     TQYSgOduXE52099505 = TQYSgOduXE78009038;     TQYSgOduXE78009038 = TQYSgOduXE46678064;     TQYSgOduXE46678064 = TQYSgOduXE331435;     TQYSgOduXE331435 = TQYSgOduXE46334290;     TQYSgOduXE46334290 = TQYSgOduXE63432515;     TQYSgOduXE63432515 = TQYSgOduXE23749237;     TQYSgOduXE23749237 = TQYSgOduXE24333592;     TQYSgOduXE24333592 = TQYSgOduXE70802157;     TQYSgOduXE70802157 = TQYSgOduXE55912298;     TQYSgOduXE55912298 = TQYSgOduXE1141324;     TQYSgOduXE1141324 = TQYSgOduXE82434185;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xstTlZlEMB44187221() {     int oCOuikTlLm72560494 = -51029083;    int oCOuikTlLm917164 = -314628708;    int oCOuikTlLm39603243 = -693245831;    int oCOuikTlLm15399652 = -97551131;    int oCOuikTlLm56237902 = -706903035;    int oCOuikTlLm50539520 = -744585509;    int oCOuikTlLm57551509 = -586794639;    int oCOuikTlLm33077105 = -315863466;    int oCOuikTlLm23487965 = -349034887;    int oCOuikTlLm87919594 = 92357129;    int oCOuikTlLm23488324 = -454216747;    int oCOuikTlLm69943145 = -763551698;    int oCOuikTlLm7348872 = -831715130;    int oCOuikTlLm32059539 = -759035327;    int oCOuikTlLm92925635 = -918729346;    int oCOuikTlLm73037768 = -342770949;    int oCOuikTlLm30317869 = -286224216;    int oCOuikTlLm74494819 = -114901038;    int oCOuikTlLm55562122 = -486148962;    int oCOuikTlLm78198270 = -25938418;    int oCOuikTlLm75416304 = -482107737;    int oCOuikTlLm80797986 = -372818656;    int oCOuikTlLm63654363 = -171972848;    int oCOuikTlLm75516790 = -461061538;    int oCOuikTlLm62027815 = 22516429;    int oCOuikTlLm59041358 = -7016212;    int oCOuikTlLm31661943 = -111250926;    int oCOuikTlLm24506523 = -426952761;    int oCOuikTlLm14435013 = -577232940;    int oCOuikTlLm39432217 = -854342510;    int oCOuikTlLm25814703 = -96270433;    int oCOuikTlLm13080199 = -36955971;    int oCOuikTlLm25651372 = -670159181;    int oCOuikTlLm422297 = -642863081;    int oCOuikTlLm87413820 = -502845389;    int oCOuikTlLm18616199 = -697479971;    int oCOuikTlLm23426484 = -656329870;    int oCOuikTlLm51447167 = -52729799;    int oCOuikTlLm59798079 = -873132920;    int oCOuikTlLm68003165 = -844652309;    int oCOuikTlLm99000833 = -604113136;    int oCOuikTlLm5950582 = -987539414;    int oCOuikTlLm38652138 = -690936943;    int oCOuikTlLm47886863 = -644191956;    int oCOuikTlLm26728962 = -493618811;    int oCOuikTlLm30561858 = -341560928;    int oCOuikTlLm69233056 = -515544531;    int oCOuikTlLm72532461 = -162136034;    int oCOuikTlLm56350243 = -392653758;    int oCOuikTlLm76256463 = -16847589;    int oCOuikTlLm2090201 = -988261472;    int oCOuikTlLm52260864 = -924705577;    int oCOuikTlLm49753187 = -913290739;    int oCOuikTlLm38376083 = 69540100;    int oCOuikTlLm68770916 = -238363071;    int oCOuikTlLm91762507 = -678210428;    int oCOuikTlLm37262801 = -42655860;    int oCOuikTlLm64086453 = -132184293;    int oCOuikTlLm53371837 = -20067561;    int oCOuikTlLm97196543 = -599886823;    int oCOuikTlLm18877578 = -533334584;    int oCOuikTlLm33044987 = -59841878;    int oCOuikTlLm18642092 = -738630527;    int oCOuikTlLm84055747 = -494692377;    int oCOuikTlLm62104892 = -811372438;    int oCOuikTlLm10408126 = -317260777;    int oCOuikTlLm44291774 = 6607482;    int oCOuikTlLm6926576 = -88852049;    int oCOuikTlLm44645719 = -156189938;    int oCOuikTlLm74309437 = -121249375;    int oCOuikTlLm49611284 = -686441079;    int oCOuikTlLm78870701 = -133494417;    int oCOuikTlLm14696740 = -241768118;    int oCOuikTlLm87558956 = -641496654;    int oCOuikTlLm79197436 = -421825283;    int oCOuikTlLm69465723 = -494568324;    int oCOuikTlLm42145848 = -681881713;    int oCOuikTlLm15767501 = -527780892;    int oCOuikTlLm48787828 = -967442728;    int oCOuikTlLm31465957 = -635922644;    int oCOuikTlLm89808302 = -491471682;    int oCOuikTlLm59129482 = -949114892;    int oCOuikTlLm68156279 = 65700997;    int oCOuikTlLm38178550 = -460385351;    int oCOuikTlLm37342017 = -866081039;    int oCOuikTlLm73553839 = -171564857;    int oCOuikTlLm63327011 = -123665232;    int oCOuikTlLm87275288 = -639699281;    int oCOuikTlLm31651380 = -304500010;    int oCOuikTlLm95651313 = -824634962;    int oCOuikTlLm81353397 = -554824111;    int oCOuikTlLm59340031 = -424145577;    int oCOuikTlLm98075330 = 67337761;    int oCOuikTlLm62601536 = -173246098;    int oCOuikTlLm49125588 = -211317726;    int oCOuikTlLm65955846 = -444271258;    int oCOuikTlLm87308489 = -148908888;    int oCOuikTlLm54596391 = -96244567;    int oCOuikTlLm85781971 = -832819519;    int oCOuikTlLm16320836 = -51029083;     oCOuikTlLm72560494 = oCOuikTlLm917164;     oCOuikTlLm917164 = oCOuikTlLm39603243;     oCOuikTlLm39603243 = oCOuikTlLm15399652;     oCOuikTlLm15399652 = oCOuikTlLm56237902;     oCOuikTlLm56237902 = oCOuikTlLm50539520;     oCOuikTlLm50539520 = oCOuikTlLm57551509;     oCOuikTlLm57551509 = oCOuikTlLm33077105;     oCOuikTlLm33077105 = oCOuikTlLm23487965;     oCOuikTlLm23487965 = oCOuikTlLm87919594;     oCOuikTlLm87919594 = oCOuikTlLm23488324;     oCOuikTlLm23488324 = oCOuikTlLm69943145;     oCOuikTlLm69943145 = oCOuikTlLm7348872;     oCOuikTlLm7348872 = oCOuikTlLm32059539;     oCOuikTlLm32059539 = oCOuikTlLm92925635;     oCOuikTlLm92925635 = oCOuikTlLm73037768;     oCOuikTlLm73037768 = oCOuikTlLm30317869;     oCOuikTlLm30317869 = oCOuikTlLm74494819;     oCOuikTlLm74494819 = oCOuikTlLm55562122;     oCOuikTlLm55562122 = oCOuikTlLm78198270;     oCOuikTlLm78198270 = oCOuikTlLm75416304;     oCOuikTlLm75416304 = oCOuikTlLm80797986;     oCOuikTlLm80797986 = oCOuikTlLm63654363;     oCOuikTlLm63654363 = oCOuikTlLm75516790;     oCOuikTlLm75516790 = oCOuikTlLm62027815;     oCOuikTlLm62027815 = oCOuikTlLm59041358;     oCOuikTlLm59041358 = oCOuikTlLm31661943;     oCOuikTlLm31661943 = oCOuikTlLm24506523;     oCOuikTlLm24506523 = oCOuikTlLm14435013;     oCOuikTlLm14435013 = oCOuikTlLm39432217;     oCOuikTlLm39432217 = oCOuikTlLm25814703;     oCOuikTlLm25814703 = oCOuikTlLm13080199;     oCOuikTlLm13080199 = oCOuikTlLm25651372;     oCOuikTlLm25651372 = oCOuikTlLm422297;     oCOuikTlLm422297 = oCOuikTlLm87413820;     oCOuikTlLm87413820 = oCOuikTlLm18616199;     oCOuikTlLm18616199 = oCOuikTlLm23426484;     oCOuikTlLm23426484 = oCOuikTlLm51447167;     oCOuikTlLm51447167 = oCOuikTlLm59798079;     oCOuikTlLm59798079 = oCOuikTlLm68003165;     oCOuikTlLm68003165 = oCOuikTlLm99000833;     oCOuikTlLm99000833 = oCOuikTlLm5950582;     oCOuikTlLm5950582 = oCOuikTlLm38652138;     oCOuikTlLm38652138 = oCOuikTlLm47886863;     oCOuikTlLm47886863 = oCOuikTlLm26728962;     oCOuikTlLm26728962 = oCOuikTlLm30561858;     oCOuikTlLm30561858 = oCOuikTlLm69233056;     oCOuikTlLm69233056 = oCOuikTlLm72532461;     oCOuikTlLm72532461 = oCOuikTlLm56350243;     oCOuikTlLm56350243 = oCOuikTlLm76256463;     oCOuikTlLm76256463 = oCOuikTlLm2090201;     oCOuikTlLm2090201 = oCOuikTlLm52260864;     oCOuikTlLm52260864 = oCOuikTlLm49753187;     oCOuikTlLm49753187 = oCOuikTlLm38376083;     oCOuikTlLm38376083 = oCOuikTlLm68770916;     oCOuikTlLm68770916 = oCOuikTlLm91762507;     oCOuikTlLm91762507 = oCOuikTlLm37262801;     oCOuikTlLm37262801 = oCOuikTlLm64086453;     oCOuikTlLm64086453 = oCOuikTlLm53371837;     oCOuikTlLm53371837 = oCOuikTlLm97196543;     oCOuikTlLm97196543 = oCOuikTlLm18877578;     oCOuikTlLm18877578 = oCOuikTlLm33044987;     oCOuikTlLm33044987 = oCOuikTlLm18642092;     oCOuikTlLm18642092 = oCOuikTlLm84055747;     oCOuikTlLm84055747 = oCOuikTlLm62104892;     oCOuikTlLm62104892 = oCOuikTlLm10408126;     oCOuikTlLm10408126 = oCOuikTlLm44291774;     oCOuikTlLm44291774 = oCOuikTlLm6926576;     oCOuikTlLm6926576 = oCOuikTlLm44645719;     oCOuikTlLm44645719 = oCOuikTlLm74309437;     oCOuikTlLm74309437 = oCOuikTlLm49611284;     oCOuikTlLm49611284 = oCOuikTlLm78870701;     oCOuikTlLm78870701 = oCOuikTlLm14696740;     oCOuikTlLm14696740 = oCOuikTlLm87558956;     oCOuikTlLm87558956 = oCOuikTlLm79197436;     oCOuikTlLm79197436 = oCOuikTlLm69465723;     oCOuikTlLm69465723 = oCOuikTlLm42145848;     oCOuikTlLm42145848 = oCOuikTlLm15767501;     oCOuikTlLm15767501 = oCOuikTlLm48787828;     oCOuikTlLm48787828 = oCOuikTlLm31465957;     oCOuikTlLm31465957 = oCOuikTlLm89808302;     oCOuikTlLm89808302 = oCOuikTlLm59129482;     oCOuikTlLm59129482 = oCOuikTlLm68156279;     oCOuikTlLm68156279 = oCOuikTlLm38178550;     oCOuikTlLm38178550 = oCOuikTlLm37342017;     oCOuikTlLm37342017 = oCOuikTlLm73553839;     oCOuikTlLm73553839 = oCOuikTlLm63327011;     oCOuikTlLm63327011 = oCOuikTlLm87275288;     oCOuikTlLm87275288 = oCOuikTlLm31651380;     oCOuikTlLm31651380 = oCOuikTlLm95651313;     oCOuikTlLm95651313 = oCOuikTlLm81353397;     oCOuikTlLm81353397 = oCOuikTlLm59340031;     oCOuikTlLm59340031 = oCOuikTlLm98075330;     oCOuikTlLm98075330 = oCOuikTlLm62601536;     oCOuikTlLm62601536 = oCOuikTlLm49125588;     oCOuikTlLm49125588 = oCOuikTlLm65955846;     oCOuikTlLm65955846 = oCOuikTlLm87308489;     oCOuikTlLm87308489 = oCOuikTlLm54596391;     oCOuikTlLm54596391 = oCOuikTlLm85781971;     oCOuikTlLm85781971 = oCOuikTlLm16320836;     oCOuikTlLm16320836 = oCOuikTlLm72560494;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WnCokNXIuQQTNRQWFzIzYo40370381() {     int LhgFqUSSVJ32156591 = -279785461;    int LhgFqUSSVJ2423014 = -124784093;    int LhgFqUSSVJ76604630 = -767386754;    int LhgFqUSSVJ11275410 = -970162008;    int LhgFqUSSVJ67531128 = -607410062;    int LhgFqUSSVJ48216641 = -602845183;    int LhgFqUSSVJ54909992 = 83487776;    int LhgFqUSSVJ83902388 = -670074841;    int LhgFqUSSVJ37301408 = -881707386;    int LhgFqUSSVJ70944109 = -948901724;    int LhgFqUSSVJ48783255 = -855759186;    int LhgFqUSSVJ4614348 = -858572947;    int LhgFqUSSVJ78103434 = -737893648;    int LhgFqUSSVJ90433378 = -663193674;    int LhgFqUSSVJ90233440 = -611255867;    int LhgFqUSSVJ69792022 = -148143840;    int LhgFqUSSVJ66278972 = -214440496;    int LhgFqUSSVJ39163150 = -484237142;    int LhgFqUSSVJ36004325 = -625268592;    int LhgFqUSSVJ58115379 = -688347071;    int LhgFqUSSVJ55877423 = -315128562;    int LhgFqUSSVJ49287585 = -265220534;    int LhgFqUSSVJ55846188 = 63732073;    int LhgFqUSSVJ40247029 = -25399775;    int LhgFqUSSVJ38005820 = -533621161;    int LhgFqUSSVJ53456265 = -141633683;    int LhgFqUSSVJ45002014 = -560730923;    int LhgFqUSSVJ89617691 = 51665649;    int LhgFqUSSVJ64219355 = -366825555;    int LhgFqUSSVJ77905683 = -901325753;    int LhgFqUSSVJ50729021 = -741489761;    int LhgFqUSSVJ55845458 = -454173968;    int LhgFqUSSVJ74733410 = -650106053;    int LhgFqUSSVJ82946738 = -144747012;    int LhgFqUSSVJ92351181 = -151055375;    int LhgFqUSSVJ97206094 = 90863447;    int LhgFqUSSVJ14058162 = -949108505;    int LhgFqUSSVJ49807505 = 2817811;    int LhgFqUSSVJ78816022 = -591839437;    int LhgFqUSSVJ40828820 = -18533257;    int LhgFqUSSVJ57218647 = 27225268;    int LhgFqUSSVJ76029762 = -992480832;    int LhgFqUSSVJ79531380 = -424381773;    int LhgFqUSSVJ22126368 = 31893305;    int LhgFqUSSVJ27717277 = 60063120;    int LhgFqUSSVJ95354986 = -584505087;    int LhgFqUSSVJ74721778 = -407400198;    int LhgFqUSSVJ19228855 = -494889263;    int LhgFqUSSVJ95739890 = -676591378;    int LhgFqUSSVJ91423855 = -338100050;    int LhgFqUSSVJ52576451 = -774369696;    int LhgFqUSSVJ58846016 = -895948832;    int LhgFqUSSVJ25168702 = -53239193;    int LhgFqUSSVJ11650607 = -190628856;    int LhgFqUSSVJ84492958 = -202297158;    int LhgFqUSSVJ82869005 = 85435073;    int LhgFqUSSVJ46576825 = -88516167;    int LhgFqUSSVJ36357602 = -641986979;    int LhgFqUSSVJ73269590 = -336540848;    int LhgFqUSSVJ14074863 = -365776379;    int LhgFqUSSVJ3214628 = 57885740;    int LhgFqUSSVJ65292301 = -968177874;    int LhgFqUSSVJ19683033 = -203249287;    int LhgFqUSSVJ59395724 = -980381634;    int LhgFqUSSVJ20215089 = -107411964;    int LhgFqUSSVJ92937797 = -301585219;    int LhgFqUSSVJ29880937 = -108466895;    int LhgFqUSSVJ95156695 = -493146637;    int LhgFqUSSVJ98082196 = -412138300;    int LhgFqUSSVJ93027346 = -602119314;    int LhgFqUSSVJ55733861 = -199035336;    int LhgFqUSSVJ16471468 = -117258308;    int LhgFqUSSVJ60347128 = -892397706;    int LhgFqUSSVJ95175505 = -506735335;    int LhgFqUSSVJ896733 = -615572339;    int LhgFqUSSVJ79847660 = -322647730;    int LhgFqUSSVJ69756204 = -840838761;    int LhgFqUSSVJ33719820 = -968161232;    int LhgFqUSSVJ12529752 = 14537104;    int LhgFqUSSVJ42650833 = -949116075;    int LhgFqUSSVJ78734487 = -734233486;    int LhgFqUSSVJ25773159 = 34158339;    int LhgFqUSSVJ93877800 = -271742974;    int LhgFqUSSVJ72795500 = 71274494;    int LhgFqUSSVJ25329233 = -26956057;    int LhgFqUSSVJ91883004 = -845540929;    int LhgFqUSSVJ30676757 = -300934776;    int LhgFqUSSVJ63082804 = -359477198;    int LhgFqUSSVJ98453780 = -942449854;    int LhgFqUSSVJ9482176 = -136490448;    int LhgFqUSSVJ50629270 = -820620387;    int LhgFqUSSVJ77700559 = -207121526;    int LhgFqUSSVJ76537915 = -660641341;    int LhgFqUSSVJ64741160 = -126063058;    int LhgFqUSSVJ37614192 = 23581002;    int LhgFqUSSVJ91926346 = -4596859;    int LhgFqUSSVJ56346730 = -689231546;    int LhgFqUSSVJ20135656 = -444000139;    int LhgFqUSSVJ1911280 = -860694732;    int LhgFqUSSVJ34779480 = -279785461;     LhgFqUSSVJ32156591 = LhgFqUSSVJ2423014;     LhgFqUSSVJ2423014 = LhgFqUSSVJ76604630;     LhgFqUSSVJ76604630 = LhgFqUSSVJ11275410;     LhgFqUSSVJ11275410 = LhgFqUSSVJ67531128;     LhgFqUSSVJ67531128 = LhgFqUSSVJ48216641;     LhgFqUSSVJ48216641 = LhgFqUSSVJ54909992;     LhgFqUSSVJ54909992 = LhgFqUSSVJ83902388;     LhgFqUSSVJ83902388 = LhgFqUSSVJ37301408;     LhgFqUSSVJ37301408 = LhgFqUSSVJ70944109;     LhgFqUSSVJ70944109 = LhgFqUSSVJ48783255;     LhgFqUSSVJ48783255 = LhgFqUSSVJ4614348;     LhgFqUSSVJ4614348 = LhgFqUSSVJ78103434;     LhgFqUSSVJ78103434 = LhgFqUSSVJ90433378;     LhgFqUSSVJ90433378 = LhgFqUSSVJ90233440;     LhgFqUSSVJ90233440 = LhgFqUSSVJ69792022;     LhgFqUSSVJ69792022 = LhgFqUSSVJ66278972;     LhgFqUSSVJ66278972 = LhgFqUSSVJ39163150;     LhgFqUSSVJ39163150 = LhgFqUSSVJ36004325;     LhgFqUSSVJ36004325 = LhgFqUSSVJ58115379;     LhgFqUSSVJ58115379 = LhgFqUSSVJ55877423;     LhgFqUSSVJ55877423 = LhgFqUSSVJ49287585;     LhgFqUSSVJ49287585 = LhgFqUSSVJ55846188;     LhgFqUSSVJ55846188 = LhgFqUSSVJ40247029;     LhgFqUSSVJ40247029 = LhgFqUSSVJ38005820;     LhgFqUSSVJ38005820 = LhgFqUSSVJ53456265;     LhgFqUSSVJ53456265 = LhgFqUSSVJ45002014;     LhgFqUSSVJ45002014 = LhgFqUSSVJ89617691;     LhgFqUSSVJ89617691 = LhgFqUSSVJ64219355;     LhgFqUSSVJ64219355 = LhgFqUSSVJ77905683;     LhgFqUSSVJ77905683 = LhgFqUSSVJ50729021;     LhgFqUSSVJ50729021 = LhgFqUSSVJ55845458;     LhgFqUSSVJ55845458 = LhgFqUSSVJ74733410;     LhgFqUSSVJ74733410 = LhgFqUSSVJ82946738;     LhgFqUSSVJ82946738 = LhgFqUSSVJ92351181;     LhgFqUSSVJ92351181 = LhgFqUSSVJ97206094;     LhgFqUSSVJ97206094 = LhgFqUSSVJ14058162;     LhgFqUSSVJ14058162 = LhgFqUSSVJ49807505;     LhgFqUSSVJ49807505 = LhgFqUSSVJ78816022;     LhgFqUSSVJ78816022 = LhgFqUSSVJ40828820;     LhgFqUSSVJ40828820 = LhgFqUSSVJ57218647;     LhgFqUSSVJ57218647 = LhgFqUSSVJ76029762;     LhgFqUSSVJ76029762 = LhgFqUSSVJ79531380;     LhgFqUSSVJ79531380 = LhgFqUSSVJ22126368;     LhgFqUSSVJ22126368 = LhgFqUSSVJ27717277;     LhgFqUSSVJ27717277 = LhgFqUSSVJ95354986;     LhgFqUSSVJ95354986 = LhgFqUSSVJ74721778;     LhgFqUSSVJ74721778 = LhgFqUSSVJ19228855;     LhgFqUSSVJ19228855 = LhgFqUSSVJ95739890;     LhgFqUSSVJ95739890 = LhgFqUSSVJ91423855;     LhgFqUSSVJ91423855 = LhgFqUSSVJ52576451;     LhgFqUSSVJ52576451 = LhgFqUSSVJ58846016;     LhgFqUSSVJ58846016 = LhgFqUSSVJ25168702;     LhgFqUSSVJ25168702 = LhgFqUSSVJ11650607;     LhgFqUSSVJ11650607 = LhgFqUSSVJ84492958;     LhgFqUSSVJ84492958 = LhgFqUSSVJ82869005;     LhgFqUSSVJ82869005 = LhgFqUSSVJ46576825;     LhgFqUSSVJ46576825 = LhgFqUSSVJ36357602;     LhgFqUSSVJ36357602 = LhgFqUSSVJ73269590;     LhgFqUSSVJ73269590 = LhgFqUSSVJ14074863;     LhgFqUSSVJ14074863 = LhgFqUSSVJ3214628;     LhgFqUSSVJ3214628 = LhgFqUSSVJ65292301;     LhgFqUSSVJ65292301 = LhgFqUSSVJ19683033;     LhgFqUSSVJ19683033 = LhgFqUSSVJ59395724;     LhgFqUSSVJ59395724 = LhgFqUSSVJ20215089;     LhgFqUSSVJ20215089 = LhgFqUSSVJ92937797;     LhgFqUSSVJ92937797 = LhgFqUSSVJ29880937;     LhgFqUSSVJ29880937 = LhgFqUSSVJ95156695;     LhgFqUSSVJ95156695 = LhgFqUSSVJ98082196;     LhgFqUSSVJ98082196 = LhgFqUSSVJ93027346;     LhgFqUSSVJ93027346 = LhgFqUSSVJ55733861;     LhgFqUSSVJ55733861 = LhgFqUSSVJ16471468;     LhgFqUSSVJ16471468 = LhgFqUSSVJ60347128;     LhgFqUSSVJ60347128 = LhgFqUSSVJ95175505;     LhgFqUSSVJ95175505 = LhgFqUSSVJ896733;     LhgFqUSSVJ896733 = LhgFqUSSVJ79847660;     LhgFqUSSVJ79847660 = LhgFqUSSVJ69756204;     LhgFqUSSVJ69756204 = LhgFqUSSVJ33719820;     LhgFqUSSVJ33719820 = LhgFqUSSVJ12529752;     LhgFqUSSVJ12529752 = LhgFqUSSVJ42650833;     LhgFqUSSVJ42650833 = LhgFqUSSVJ78734487;     LhgFqUSSVJ78734487 = LhgFqUSSVJ25773159;     LhgFqUSSVJ25773159 = LhgFqUSSVJ93877800;     LhgFqUSSVJ93877800 = LhgFqUSSVJ72795500;     LhgFqUSSVJ72795500 = LhgFqUSSVJ25329233;     LhgFqUSSVJ25329233 = LhgFqUSSVJ91883004;     LhgFqUSSVJ91883004 = LhgFqUSSVJ30676757;     LhgFqUSSVJ30676757 = LhgFqUSSVJ63082804;     LhgFqUSSVJ63082804 = LhgFqUSSVJ98453780;     LhgFqUSSVJ98453780 = LhgFqUSSVJ9482176;     LhgFqUSSVJ9482176 = LhgFqUSSVJ50629270;     LhgFqUSSVJ50629270 = LhgFqUSSVJ77700559;     LhgFqUSSVJ77700559 = LhgFqUSSVJ76537915;     LhgFqUSSVJ76537915 = LhgFqUSSVJ64741160;     LhgFqUSSVJ64741160 = LhgFqUSSVJ37614192;     LhgFqUSSVJ37614192 = LhgFqUSSVJ91926346;     LhgFqUSSVJ91926346 = LhgFqUSSVJ56346730;     LhgFqUSSVJ56346730 = LhgFqUSSVJ20135656;     LhgFqUSSVJ20135656 = LhgFqUSSVJ1911280;     LhgFqUSSVJ1911280 = LhgFqUSSVJ34779480;     LhgFqUSSVJ34779480 = LhgFqUSSVJ32156591;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wuztSPeTNGEGzTAEUajoYj88796072() {     int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21094549 = -862916849;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73827662 = -105891304;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34950312 = -356361830;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52299742 = -373175327;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW66214135 = -92866064;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90699431 = -458956516;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2436915 = -51990567;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW47099342 = -381646444;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW87989961 = 65321373;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27641677 = -225872099;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52149631 = -81871769;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8030655 = -373308766;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW883525 = -756193583;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18804404 = -11476863;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49993336 = -116745237;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8582184 = -716328795;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64240009 = -53086217;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW6538520 = -161478673;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW55167016 = -675182546;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51319542 = -320413870;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW60872211 = 50063380;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34677685 = -336328989;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82972601 = -691677703;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW14777839 = -978257628;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW78302125 = -740547916;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33847669 = -86172638;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20302880 = -915832858;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82350159 = -673559162;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94539657 = -508130268;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW53296924 = -65345298;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1984022 = -925368638;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38823116 = -934916564;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW26322512 = -885035533;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW389044 = 40217009;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1622345 = -211632506;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW58630922 = -221332333;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72839721 = -52947310;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW65293033 = -152784150;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW54614273 = 32501267;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90424068 = -384237529;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW43218844 = -145361349;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3323614 = -321825264;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW31727023 = -730202804;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49089471 = -977010906;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW16769586 = -650867955;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94170248 = -881156761;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81777090 = -664466688;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW75694620 = -984273552;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48346476 = -538528890;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18209185 = 36631482;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48132747 = -592460806;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38106923 = -180118114;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20956907 = -257443613;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW4948096 = -321836165;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27923862 = -912189609;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW86416864 = -426587860;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90855060 = -414213601;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20172473 = -378104203;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73997616 = -632627411;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW32366466 = 93306574;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW70396551 = -543123659;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20086756 = -378431406;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52559685 = -873516176;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34693037 = -869333329;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW25657656 = -300503461;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW13326516 = -146955205;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81708143 = -488273234;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW494482 = -696410592;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17182059 = -799844358;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91362414 = -895412904;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW35742463 = -563381486;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98946975 = -900302067;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51924247 = -93979941;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64742947 = -190945018;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8100699 = -75052522;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW57548598 = -628111356;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2950662 = -606126185;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33883130 = -714666798;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98008252 = -227389674;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW84131877 = -859391155;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52070579 = -421705950;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW44608260 = -931559306;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34003684 = -35030273;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW76330473 = -444761750;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW5164178 = -472884493;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW63877098 = -645250525;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17866209 = -577472952;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21374416 = -463199368;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72465181 = -47593383;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW15205480 = -785044646;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW67775861 = -807118733;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52667248 = -674843108;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91295416 = -520156740;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW22247807 = 39194693;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20027517 = -841113871;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23132089 = -766929943;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW50763929 = -448309088;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW97033985 = -860869476;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23431815 = -576507445;    int yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3443071 = -862916849;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21094549 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73827662;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73827662 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34950312;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34950312 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52299742;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52299742 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW66214135;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW66214135 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90699431;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90699431 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2436915;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2436915 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW47099342;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW47099342 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW87989961;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW87989961 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27641677;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27641677 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52149631;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52149631 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8030655;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8030655 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW883525;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW883525 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18804404;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18804404 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49993336;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49993336 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8582184;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8582184 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64240009;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64240009 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW6538520;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW6538520 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW55167016;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW55167016 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51319542;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51319542 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW60872211;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW60872211 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34677685;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34677685 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82972601;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82972601 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW14777839;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW14777839 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW78302125;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW78302125 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33847669;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33847669 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20302880;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20302880 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82350159;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW82350159 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94539657;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94539657 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW53296924;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW53296924 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1984022;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1984022 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38823116;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38823116 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW26322512;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW26322512 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW389044;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW389044 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1622345;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW1622345 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW58630922;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW58630922 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72839721;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72839721 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW65293033;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW65293033 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW54614273;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW54614273 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90424068;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90424068 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW43218844;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW43218844 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3323614;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3323614 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW31727023;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW31727023 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49089471;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW49089471 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW16769586;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW16769586 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94170248;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW94170248 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81777090;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81777090 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW75694620;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW75694620 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48346476;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48346476 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18209185;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW18209185 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48132747;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW48132747 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38106923;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW38106923 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20956907;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20956907 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW4948096;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW4948096 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27923862;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW27923862 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW86416864;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW86416864 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90855060;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW90855060 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20172473;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20172473 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73997616;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW73997616 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW32366466;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW32366466 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW70396551;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW70396551 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20086756;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20086756 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52559685;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52559685 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34693037;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34693037 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW25657656;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW25657656 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW13326516;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW13326516 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81708143;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW81708143 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW494482;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW494482 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17182059;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17182059 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91362414;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91362414 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW35742463;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW35742463 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98946975;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98946975 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51924247;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW51924247 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64742947;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW64742947 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8100699;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW8100699 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW57548598;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW57548598 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2950662;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW2950662 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33883130;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW33883130 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98008252;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW98008252 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW84131877;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW84131877 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52070579;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52070579 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW44608260;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW44608260 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34003684;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW34003684 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW76330473;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW76330473 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW5164178;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW5164178 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW63877098;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW63877098 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17866209;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW17866209 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21374416;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21374416 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72465181;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW72465181 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW15205480;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW15205480 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW67775861;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW67775861 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52667248;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW52667248 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91295416;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW91295416 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW22247807;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW22247807 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20027517;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW20027517 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23132089;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23132089 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW50763929;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW50763929 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW97033985;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW97033985 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23431815;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW23431815 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3443071;     yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW3443071 = yJfXsRXGCoNjKkDQhoPanmJsmJnocICLkMwpOuW21094549;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void HKyrXzYbwNeJwQTdTsljJW49098730() {     int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11220858 = -921673050;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56952727 = -480817474;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs30443011 = -493156292;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25798317 = -559347149;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79270870 = -34189506;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71485836 = -351589624;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs97100353 = -789536040;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs99977905 = -18094182;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11801650 = 57428735;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs31897347 = -895746624;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs28301451 = -590291926;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42780163 = -952896902;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs39229657 = 31570557;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57223257 = -9637747;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48067708 = -601866179;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32761926 = -416708665;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8202190 = -314431458;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs27894233 = -604327965;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16081407 = -41592982;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18643791 = -968292180;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48794613 = -754361712;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32759267 = -669425625;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16211020 = 1862376;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs22698937 = -326282004;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25187314 = -284058860;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs52638634 = 37953627;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42270215 = -675361852;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5520535 = -733449220;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs55748655 = -170329316;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs1086005 = 60252311;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5447424 = -152035182;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38190030 = -335740984;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs35291552 = -85260692;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs24227688 = 48765851;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs37218879 = -961968166;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11861929 = -524361744;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs73073289 = -668763214;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89650317 = -18843394;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65147290 = -774960779;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs34936210 = -288945302;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56918517 = -951222624;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57968076 = -136318477;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91543864 = -105628400;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79751412 = -841094095;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8734004 = -763377911;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs14609242 = -264780667;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62200380 = -212949188;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs66081079 = 89070194;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76265129 = -974468236;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs47489590 = -420364856;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77498270 = -966842851;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81880029 = -144544947;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs70409362 = 30703392;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57855158 = -445391447;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs304117 = 59210119;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs78461591 = -152247426;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs40741707 = -382679850;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7744075 = -66874288;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs611004 = -175288289;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26632237 = 27856867;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29215621 = -676227773;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91579818 = 43913180;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs44229250 = -847764867;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10715645 = 97176424;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26449924 = -643711443;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90111421 = -154550943;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7488611 = -767636210;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs15001969 = 82804706;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs20004379 = -47669581;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36205779 = 22495564;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs59688636 = -747945451;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18551873 = -195588065;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62746942 = -829367187;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81145197 = -752647681;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs61725273 = 82930444;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90826537 = -518043236;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs41215403 = -463797225;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36459608 = -157043530;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13964933 = -562904093;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10578072 = 80721806;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90438253 = -749097185;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76189136 = -664432047;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29255406 = -758980985;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8259066 = -749964461;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23587734 = 27095161;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23567394 = 92509765;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs67780667 = -266444377;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77436394 = -639869246;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23923571 = 89555731;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs58757288 = -709720741;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71120221 = -41681894;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65329215 = -501888926;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89039313 = -843555106;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38515053 = -702817646;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5720590 = -612717530;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65338699 = -895135804;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13738827 = -288553610;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs80828219 = -102804825;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs53301489 = -97382653;    int UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18622583 = -921673050;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11220858 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56952727;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56952727 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs30443011;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs30443011 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25798317;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25798317 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79270870;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79270870 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71485836;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71485836 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs97100353;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs97100353 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs99977905;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs99977905 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11801650;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11801650 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs31897347;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs31897347 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs28301451;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs28301451 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42780163;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42780163 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs39229657;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs39229657 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57223257;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57223257 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48067708;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48067708 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32761926;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32761926 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8202190;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8202190 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs27894233;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs27894233 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16081407;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16081407 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18643791;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18643791 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48794613;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs48794613 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32759267;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs32759267 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16211020;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs16211020 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs22698937;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs22698937 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25187314;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs25187314 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs52638634;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs52638634 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42270215;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs42270215 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5520535;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5520535 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs55748655;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs55748655 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs1086005;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs1086005 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5447424;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5447424 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38190030;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38190030 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs35291552;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs35291552 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs24227688;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs24227688 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs37218879;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs37218879 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11861929;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11861929 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs73073289;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs73073289 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89650317;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89650317 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65147290;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65147290 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs34936210;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs34936210 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56918517;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs56918517 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57968076;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57968076 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91543864;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91543864 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79751412;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs79751412 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8734004;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8734004 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs14609242;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs14609242 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62200380;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62200380 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs66081079;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs66081079 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76265129;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76265129 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs47489590;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs47489590 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77498270;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77498270 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81880029;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81880029 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs70409362;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs70409362 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57855158;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs57855158 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs304117;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs304117 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs78461591;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs78461591 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs40741707;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs40741707 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7744075;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7744075 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs611004;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs611004 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26632237;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26632237 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29215621;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29215621 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91579818;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs91579818 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs44229250;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs44229250 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10715645;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10715645 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26449924;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs26449924 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90111421;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90111421 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7488611;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs7488611 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs15001969;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs15001969 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs20004379;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs20004379 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36205779;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36205779 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs59688636;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs59688636 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18551873;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18551873 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62746942;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs62746942 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81145197;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs81145197 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs61725273;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs61725273 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90826537;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90826537 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs41215403;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs41215403 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36459608;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs36459608 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13964933;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13964933 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10578072;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs10578072 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90438253;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs90438253 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76189136;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs76189136 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29255406;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs29255406 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8259066;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs8259066 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23587734;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23587734 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23567394;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23567394 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs67780667;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs67780667 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77436394;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs77436394 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23923571;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs23923571 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs58757288;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs58757288 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71120221;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs71120221 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65329215;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65329215 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89039313;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs89039313 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38515053;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs38515053 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5720590;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs5720590 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65338699;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs65338699 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13738827;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs13738827 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs80828219;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs80828219 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs53301489;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs53301489 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18622583;     UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs18622583 = UDvycfaOnqUXDtZtkFqewxNqDqYCUxvTylquvYWs11220858;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void efTFjhoARKxenkkbEtKyhA61643919() {     int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30689028 = -234804262;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9976591 = 73304530;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47280003 = -144784907;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44445466 = -375921412;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT79717386 = -660461921;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97077910 = -242074393;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41932232 = -132842270;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65228139 = -111902148;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT72488446 = -670762644;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9826071 = -901332670;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82524714 = 76717774;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46274776 = -952199606;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT29601316 = -392786720;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65639297 = -551923473;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8594170 = -899949971;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98977574 = -879900599;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT14164303 = -486206140;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51956984 = -355082683;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15716287 = -418797743;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99255092 = -585828636;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT61250685 = -260574037;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47741350 = -81228838;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84384025 = -295712242;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40420605 = 37174004;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36390803 = -578358970;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57406095 = -747841591;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT26198346 = -340512784;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56312210 = -897182499;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97493612 = -184240462;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85792858 = -31186384;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT35251509 = -17361275;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77769340 = -900090002;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46767656 = -640468459;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82984195 = -255837356;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77149215 = 75329028;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47927866 = -827930352;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41456740 = -95639289;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT31132791 = -96052209;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT32460615 = -139375604;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56217946 = -285476398;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98400574 = -361008920;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69827209 = -375214703;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT62677105 = -53430197;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT63136950 = -190166755;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88762414 = 59499126;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69070369 = -802112088;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44190260 = -126642511;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT66236909 = -94217120;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT17400721 = -988407475;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88387932 = -181377201;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51933839 = -273207782;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98328889 = -521897806;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40234508 = -745405569;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30785187 = -439985083;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT393234 = -815348516;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82947678 = -53575425;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT25592565 = -630983228;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT6859398 = -81958911;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8054664 = -797562442;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22311292 = -912620331;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT70879564 = -901561609;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85620022 = -235659771;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67734526 = -927661687;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT86695588 = -539576260;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT74574561 = -783971396;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT4755374 = -23192225;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99507120 = -211731148;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46617121 = -36949364;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88490082 = -527252501;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT60666303 = 27980381;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57520834 = -684261310;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT83031511 = -290153931;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT19496369 = -115707080;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59498340 = -33321345;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT854518 = -124819717;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT91423476 = -885359335;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85064244 = 72201359;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT21247075 = -5545488;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51658190 = 77674878;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67320433 = -776246882;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT13215835 = -521199080;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59961437 = -146295664;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT38911489 = -908775025;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9105680 = 97136738;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT33859019 = -757978602;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36922619 = -495463469;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT37534832 = -54684434;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15982469 = -100483376;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82590961 = -440488841;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT94201536 = -871095548;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22335301 = -96947124;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT34597343 = 86319622;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT23078128 = -298489767;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT10149324 = -226755273;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85338382 = -383914790;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT12780553 = -25349149;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT2092683 = -447553016;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT75981517 = -513853938;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88562389 = -406195360;    int RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84007040 = -234804262;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30689028 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9976591;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9976591 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47280003;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47280003 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44445466;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44445466 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT79717386;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT79717386 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97077910;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97077910 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41932232;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41932232 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65228139;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65228139 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT72488446;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT72488446 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9826071;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9826071 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82524714;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82524714 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46274776;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46274776 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT29601316;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT29601316 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65639297;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT65639297 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8594170;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8594170 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98977574;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98977574 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT14164303;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT14164303 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51956984;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51956984 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15716287;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15716287 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99255092;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99255092 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT61250685;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT61250685 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47741350;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47741350 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84384025;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84384025 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40420605;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40420605 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36390803;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36390803 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57406095;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57406095 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT26198346;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT26198346 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56312210;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56312210 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97493612;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT97493612 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85792858;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85792858 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT35251509;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT35251509 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77769340;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77769340 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46767656;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46767656 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82984195;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82984195 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77149215;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT77149215 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47927866;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT47927866 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41456740;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT41456740 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT31132791;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT31132791 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT32460615;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT32460615 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56217946;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT56217946 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98400574;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98400574 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69827209;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69827209 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT62677105;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT62677105 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT63136950;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT63136950 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88762414;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88762414 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69070369;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT69070369 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44190260;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT44190260 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT66236909;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT66236909 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT17400721;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT17400721 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88387932;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88387932 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51933839;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51933839 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98328889;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT98328889 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40234508;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT40234508 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30785187;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30785187 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT393234;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT393234 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82947678;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82947678 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT25592565;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT25592565 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT6859398;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT6859398 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8054664;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT8054664 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22311292;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22311292 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT70879564;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT70879564 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85620022;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85620022 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67734526;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67734526 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT86695588;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT86695588 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT74574561;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT74574561 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT4755374;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT4755374 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99507120;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT99507120 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46617121;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT46617121 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88490082;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88490082 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT60666303;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT60666303 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57520834;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT57520834 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT83031511;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT83031511 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT19496369;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT19496369 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59498340;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59498340 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT854518;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT854518 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT91423476;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT91423476 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85064244;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85064244 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT21247075;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT21247075 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51658190;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT51658190 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67320433;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT67320433 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT13215835;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT13215835 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59961437;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT59961437 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT38911489;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT38911489 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9105680;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT9105680 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT33859019;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT33859019 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36922619;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT36922619 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT37534832;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT37534832 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15982469;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT15982469 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82590961;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT82590961 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT94201536;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT94201536 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22335301;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT22335301 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT34597343;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT34597343 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT23078128;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT23078128 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT10149324;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT10149324 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85338382;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT85338382 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT12780553;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT12780553 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT2092683;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT2092683 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT75981517;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT75981517 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88562389;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT88562389 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84007040;     RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT84007040 = RngUJUJKOtkPNewHaxdlBiMjKLnalTYCieOfYPXT30689028;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bmrejtZfxXBfXNeQArUkVc57827079() {     int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ90285124 = -463560639;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ11482441 = -836850855;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ84281390 = -218925829;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ40321224 = -148532289;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91010612 = -560968949;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ94755030 = -100334066;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39290714 = -562559856;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16053423 = -466113524;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ86301890 = -103435143;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ92850585 = -842591523;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ7819646 = -324824666;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ80945977 = 52779144;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ355880 = -298965238;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24013136 = -456081820;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5901975 = -592476492;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95731829 = -685273490;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ50125406 = -414422420;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16625315 = -724418788;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ96158489 = -557917373;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79172201 = -148237289;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41711804 = -93594862;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16230948 = 26369285;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ76575850 = -60007321;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5150844 = -627164232;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12368808 = -34496560;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51821002 = -882459062;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39538416 = -789992781;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21423379 = -418564089;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ47277955 = 26166923;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24266325 = -78169626;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ60165827 = -662580603;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20534601 = -217307999;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95849694 = -620415331;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65508637 = -857721287;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ82086576 = -672880958;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26517763 = -39586934;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32088418 = -388417924;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29493129 = -40504599;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51478558 = -958082120;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29043601 = -559357347;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56618388 = -829670517;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39906391 = -380156121;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3556348 = -886875027;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ37376456 = -614081494;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ89750730 = -486818943;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ33863498 = 54943753;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49678983 = -18498178;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12933303 = -426970348;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56790368 = -172345094;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3555325 = -502629662;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2420090 = -59316006;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4914043 = -493141062;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15650023 = -985354022;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4059710 = -700154039;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16115275 = -779282603;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ74054176 = -389929924;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34906590 = -676843534;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79130546 = -591761597;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ27952417 = -14035730;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39189611 = -678509887;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55216614 = -310341285;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ17867336 = -43995767;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ68775467 = -392280447;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ62035565 = 74734483;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32684758 = -80010921;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ87285045 = -7516667;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ85096283 = -326805525;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34847242 = -441243951;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41926560 = -783200863;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79384212 = -452889559;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ63643411 = -196855567;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20632278 = -273917821;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65146757 = -766336668;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ67114888 = -998560027;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ22553814 = -318566773;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1805414 = -713438741;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12674601 = -86755689;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39199395 = -445925828;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15400114 = -40345290;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ78505309 = 10559687;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2142020 = -763960884;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26605114 = -263022433;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ64633010 = -146218996;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ43722630 = -471203416;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21846236 = 81146379;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55251784 = -69439542;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4884578 = -231953977;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91789984 = -920261293;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49393362 = 21561315;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ8032400 = -182951034;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91611172 = -362743400;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ52957871 = -796656327;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1540713 = 73531130;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12288947 = -179572234;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ73826986 = -149016062;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ38751052 = -685674750;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ71130923 = -987875674;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41520782 = -861609510;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4691698 = -434070573;    int cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2465686 = -463560639;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ90285124 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ11482441;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ11482441 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ84281390;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ84281390 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ40321224;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ40321224 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91010612;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91010612 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ94755030;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ94755030 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39290714;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39290714 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16053423;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16053423 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ86301890;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ86301890 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ92850585;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ92850585 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ7819646;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ7819646 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ80945977;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ80945977 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ355880;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ355880 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24013136;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24013136 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5901975;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5901975 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95731829;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95731829 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ50125406;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ50125406 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16625315;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16625315 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ96158489;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ96158489 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79172201;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79172201 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41711804;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41711804 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16230948;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16230948 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ76575850;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ76575850 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5150844;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ5150844 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12368808;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12368808 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51821002;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51821002 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39538416;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39538416 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21423379;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21423379 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ47277955;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ47277955 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24266325;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ24266325 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ60165827;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ60165827 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20534601;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20534601 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95849694;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ95849694 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65508637;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65508637 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ82086576;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ82086576 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26517763;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26517763 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32088418;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32088418 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29493129;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29493129 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51478558;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ51478558 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29043601;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ29043601 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56618388;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56618388 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39906391;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39906391 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3556348;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3556348 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ37376456;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ37376456 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ89750730;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ89750730 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ33863498;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ33863498 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49678983;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49678983 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12933303;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12933303 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56790368;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ56790368 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3555325;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ3555325 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2420090;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2420090 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4914043;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4914043 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15650023;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15650023 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4059710;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4059710 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16115275;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ16115275 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ74054176;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ74054176 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34906590;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34906590 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79130546;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79130546 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ27952417;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ27952417 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39189611;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39189611 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55216614;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55216614 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ17867336;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ17867336 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ68775467;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ68775467 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ62035565;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ62035565 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32684758;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ32684758 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ87285045;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ87285045 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ85096283;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ85096283 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34847242;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ34847242 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41926560;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41926560 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79384212;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ79384212 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ63643411;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ63643411 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20632278;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ20632278 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65146757;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ65146757 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ67114888;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ67114888 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ22553814;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ22553814 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1805414;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1805414 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12674601;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12674601 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39199395;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ39199395 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15400114;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ15400114 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ78505309;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ78505309 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2142020;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2142020 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26605114;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ26605114 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ64633010;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ64633010 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ43722630;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ43722630 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21846236;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ21846236 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55251784;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ55251784 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4884578;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4884578 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91789984;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91789984 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49393362;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ49393362 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ8032400;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ8032400 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91611172;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ91611172 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ52957871;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ52957871 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1540713;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ1540713 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12288947;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ12288947 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ73826986;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ73826986 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ38751052;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ38751052 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ71130923;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ71130923 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41520782;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ41520782 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4691698;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ4691698 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2465686;     cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ2465686 = cyMUJIpjpUmLoGDdoveDiYRMhpPZCEiTczKsRPkQ90285124;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XsBNCyVUPqYfWitVxCRTwd54010239() {     int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt49881221 = -692317017;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12988290 = -647006240;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21282778 = -293066752;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36196983 = 78856834;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt2303840 = -461475976;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92432151 = 41406261;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36649197 = -992277442;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt66878707 = -820324899;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt115334 = -636107642;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt75875100 = -783850377;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt33114577 = -726367105;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt15617180 = -42242105;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71110442 = -205143756;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt82386974 = -360240168;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt3209781 = -285003013;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92486083 = -490646381;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86086510 = -342638700;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt81293645 = 6245107;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt76600692 = -697037003;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59089311 = -810645942;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22172923 = 73384314;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt84720546 = -966032593;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt68767675 = -924302400;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69881082 = -191502469;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt88346812 = -590634150;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt46235909 = 82923467;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52878487 = -139472778;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86534547 = 60054320;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt97062298 = -863425692;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62739791 = -125152868;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt85080145 = -207799931;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt63299861 = -634525997;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44931733 = -600362204;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt48033080 = -359605218;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt87023937 = -321090944;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt5107659 = -351243516;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22720096 = -681196558;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt27853467 = 15043011;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70496500 = -676788637;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt1869256 = -833238295;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14836202 = -198332113;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9985572 = -385097540;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44435590 = -620319856;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11615961 = 62003767;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90739045 = 66862989;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98656626 = -188000406;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt55167705 = 89646155;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59629697 = -759723577;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt96180015 = -456282714;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt18722718 = -823882122;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52906340 = -945424230;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11499196 = -464384317;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91065537 = -125302476;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt77334233 = -960322994;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt31837317 = -743216690;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt65160675 = -726284424;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44220614 = -722703840;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt51401696 = -1564283;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt47850170 = -330509017;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt56067930 = -444399443;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt39553665 = -819120961;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt50114650 = -952331763;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69816408 = -956899207;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt37375542 = -410954774;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90794955 = -476050447;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69814716 = 8158891;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70685446 = -441879902;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt23077363 = -845538539;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt95363037 = 60850776;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98102121 = -933759498;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69765988 = -809449823;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt58233043 = -257681712;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt10797145 = -316966256;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt74731437 = -863798708;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44253109 = -512313829;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12187351 = -541518147;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40284957 = -245712737;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt57151715 = -886306168;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt79142037 = -158365458;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt89690185 = -302633745;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91068204 = 93277312;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt93248790 = -379749202;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90354531 = -483662966;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt78339580 = 60456430;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9833452 = -179728639;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt73580949 = -743415614;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt72234324 = -409223521;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt67597500 = -640039210;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt16195763 = -616388529;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21863263 = -594806520;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt60887044 = -628539676;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71318400 = -579632276;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt80003296 = -654447972;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14428571 = -132389194;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62315591 = 85882666;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt64721552 = -246000351;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40169163 = -428198333;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt7060048 = -109365082;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20821006 = -461945786;    int miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20924330 = -692317017;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt49881221 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12988290;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12988290 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21282778;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21282778 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36196983;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36196983 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt2303840;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt2303840 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92432151;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92432151 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36649197;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt36649197 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt66878707;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt66878707 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt115334;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt115334 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt75875100;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt75875100 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt33114577;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt33114577 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt15617180;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt15617180 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71110442;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71110442 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt82386974;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt82386974 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt3209781;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt3209781 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92486083;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt92486083 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86086510;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86086510 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt81293645;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt81293645 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt76600692;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt76600692 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59089311;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59089311 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22172923;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22172923 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt84720546;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt84720546 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt68767675;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt68767675 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69881082;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69881082 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt88346812;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt88346812 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt46235909;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt46235909 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52878487;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52878487 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86534547;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt86534547 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt97062298;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt97062298 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62739791;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62739791 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt85080145;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt85080145 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt63299861;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt63299861 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44931733;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44931733 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt48033080;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt48033080 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt87023937;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt87023937 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt5107659;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt5107659 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22720096;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt22720096 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt27853467;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt27853467 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70496500;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70496500 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt1869256;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt1869256 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14836202;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14836202 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9985572;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9985572 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44435590;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44435590 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11615961;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11615961 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90739045;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90739045 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98656626;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98656626 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt55167705;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt55167705 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59629697;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt59629697 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt96180015;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt96180015 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt18722718;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt18722718 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52906340;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt52906340 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11499196;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt11499196 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91065537;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91065537 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt77334233;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt77334233 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt31837317;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt31837317 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt65160675;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt65160675 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44220614;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44220614 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt51401696;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt51401696 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt47850170;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt47850170 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt56067930;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt56067930 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt39553665;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt39553665 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt50114650;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt50114650 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69816408;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69816408 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt37375542;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt37375542 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90794955;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90794955 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69814716;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69814716 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70685446;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt70685446 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt23077363;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt23077363 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt95363037;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt95363037 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98102121;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt98102121 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69765988;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt69765988 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt58233043;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt58233043 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt10797145;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt10797145 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt74731437;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt74731437 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44253109;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt44253109 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12187351;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt12187351 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40284957;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40284957 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt57151715;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt57151715 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt79142037;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt79142037 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt89690185;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt89690185 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91068204;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt91068204 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt93248790;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt93248790 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90354531;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt90354531 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt78339580;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt78339580 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9833452;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt9833452 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt73580949;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt73580949 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt72234324;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt72234324 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt67597500;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt67597500 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt16195763;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt16195763 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21863263;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt21863263 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt60887044;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt60887044 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71318400;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt71318400 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt80003296;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt80003296 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14428571;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt14428571 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62315591;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt62315591 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt64721552;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt64721552 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40169163;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt40169163 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt7060048;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt7060048 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20821006;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20821006 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20924330;     miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt20924330 = miJOPbArjMPgxPmOdfCqwJtqnWttHhxjruFTEojt49881221;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void AFcXCEzXMjPylYtzbCaELg14312897() {     int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40007530 = -751073217;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96113354 = 78067590;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16775477 = -429861213;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9695558 = -107314988;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy15360575 = -402799418;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy73218556 = -951226847;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy31312635 = -629822915;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19757270 = -456772638;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23927022 = -644000280;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy80130770 = -353724902;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9266396 = -134787263;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50366687 = -621830240;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9456575 = -517379617;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy20805829 = -358401052;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy1284153 = -770123956;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16665826 = -191026251;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30048691 = -603983942;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2649359 = -436604185;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37515083 = -63447439;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy26413559 = -358524252;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10095325 = -731040779;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82802128 = -199129229;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2006094 = -230762321;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77802180 = -639526845;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35232000 = -134145094;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65026874 = -892950268;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74845822 = -999001772;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9704923 = 164262;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58271296 = -525624740;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10528872 = 444740;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy88543548 = -534466474;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy62666775 = -35350416;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy53900774 = -900587364;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy71871724 = -351056376;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22620472 = 28573396;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58338665 = -654272926;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22953665 = -197012463;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy52210750 = -951016233;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy81029517 = -384250683;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46381397 = -737946068;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28535875 = 95806611;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64630035 = -199590753;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4252431 = 4254548;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42277902 = -902079422;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82703463 = -45646967;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19095621 = -671624311;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35590995 = -558836345;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50016156 = -786379830;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24098670 = -892222060;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48003123 = -180878460;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82271863 = -219806275;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy55272303 = -428811150;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40517992 = -937155471;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30241295 = 16121724;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4217572 = -871816961;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy57205401 = -451943989;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy94107261 = -691170089;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy38973297 = -790334369;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74463557 = -973169895;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50333701 = -509849150;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98372734 = -952225075;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21607713 = -529987177;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy61485974 = -931147898;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy13398150 = -544445021;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91587222 = -819258428;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46599621 = 563153;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96465912 = -721242877;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37584851 = -66323241;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98185357 = -286974448;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42945487 = -15851030;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy93712161 = -994013789;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77837940 = -652967710;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21619841 = 47646497;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91133686 = -325501371;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy97877684 = -354330864;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy45465290 = -431450027;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy78549698 = -103383777;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy59728192 = -328682900;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy95098716 = -493879878;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16136380 = -462520783;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy29435879 = -234113923;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24829666 = -112621943;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy85606252 = -107613678;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10268173 = -244746281;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28257008 = -779748985;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy33271245 = -5655325;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22148783 = -98194946;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23659479 = -816709088;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy67654152 = -479239415;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65415070 = -519482616;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64231404 = -963102837;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy83980367 = -406678095;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77747192 = -977846338;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30695817 = -874401533;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48008663 = -785720993;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy6928163 = -374206212;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy3144061 = -268442855;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy90854281 = -451300431;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50690679 = 17179006;    int ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy36103842 = -751073217;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40007530 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96113354;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96113354 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16775477;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16775477 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9695558;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9695558 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy15360575;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy15360575 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy73218556;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy73218556 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy31312635;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy31312635 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19757270;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19757270 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23927022;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23927022 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy80130770;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy80130770 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9266396;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9266396 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50366687;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50366687 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9456575;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9456575 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy20805829;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy20805829 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy1284153;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy1284153 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16665826;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16665826 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30048691;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30048691 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2649359;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2649359 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37515083;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37515083 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy26413559;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy26413559 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10095325;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10095325 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82802128;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82802128 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2006094;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy2006094 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77802180;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77802180 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35232000;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35232000 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65026874;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65026874 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74845822;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74845822 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9704923;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy9704923 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58271296;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58271296 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10528872;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10528872 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy88543548;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy88543548 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy62666775;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy62666775 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy53900774;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy53900774 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy71871724;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy71871724 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22620472;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22620472 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58338665;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy58338665 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22953665;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22953665 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy52210750;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy52210750 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy81029517;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy81029517 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46381397;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46381397 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28535875;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28535875 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64630035;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64630035 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4252431;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4252431 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42277902;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42277902 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82703463;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82703463 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19095621;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy19095621 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35590995;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy35590995 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50016156;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50016156 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24098670;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24098670 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48003123;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48003123 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82271863;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy82271863 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy55272303;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy55272303 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40517992;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40517992 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30241295;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30241295 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4217572;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy4217572 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy57205401;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy57205401 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy94107261;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy94107261 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy38973297;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy38973297 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74463557;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy74463557 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50333701;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50333701 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98372734;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98372734 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21607713;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21607713 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy61485974;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy61485974 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy13398150;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy13398150 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91587222;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91587222 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46599621;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy46599621 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96465912;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy96465912 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37584851;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy37584851 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98185357;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy98185357 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42945487;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy42945487 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy93712161;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy93712161 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77837940;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77837940 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21619841;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy21619841 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91133686;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy91133686 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy97877684;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy97877684 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy45465290;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy45465290 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy78549698;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy78549698 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy59728192;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy59728192 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy95098716;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy95098716 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16136380;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy16136380 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy29435879;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy29435879 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24829666;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy24829666 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy85606252;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy85606252 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10268173;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy10268173 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28257008;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy28257008 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy33271245;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy33271245 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22148783;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy22148783 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23659479;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy23659479 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy67654152;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy67654152 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65415070;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy65415070 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64231404;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy64231404 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy83980367;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy83980367 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77747192;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy77747192 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30695817;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy30695817 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48008663;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy48008663 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy6928163;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy6928163 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy3144061;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy3144061 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy90854281;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy90854281 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50690679;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy50690679 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy36103842;     ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy36103842 = ZRlYmAUqnCVZxBBxkafvnUGnSZZwtsSuFUfKmdRy40007530;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mqLNuAfHRsvhfrCNOFZDdd26858086() {     int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY59475700 = -64204429;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY49137219 = -467810406;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY33612469 = -81489828;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY28342706 = 76110749;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15807091 = 70928166;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY98810630 = -841711615;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76144513 = 26870856;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85007503 = -550580604;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84613818 = -272191659;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58059494 = -359310948;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY63489659 = -567777563;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53861300 = -621132945;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY99828234 = -941736893;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY29221869 = -900686778;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61810614 = 31792253;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY82881474 = -654218185;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY36010804 = -775758623;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26712110 = -187358903;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37149963 = -440652199;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY7024861 = 23939292;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22551397 = -237253104;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY97784211 = -710932442;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70179100 = -528336940;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95523848 = -276070837;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46435489 = -428445203;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69794335 = -578745486;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58773953 = -664152704;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY60496597 = -163569017;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY16253 = -539535886;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95235725 = -90993954;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY18347634 = -399792567;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2246086 = -599699434;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65376877 = -355795130;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY30628232 = -655659582;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62550807 = -34129410;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY94404602 = -957841534;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91337115 = -723888538;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY93693223 = 71774952;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY48342843 = -848665508;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67663133 = -734477164;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70017932 = -413979684;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76489167 = -438486979;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY75385672 = 56452751;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY25663441 = -251152082;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62731874 = -322769930;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY73556747 = -108955732;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY17580875 = -472529668;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY50171986 = -969667144;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65234261 = -906161299;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88901465 = 58109195;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY56707433 = -626171206;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY71721163 = -806164009;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY10343139 = -613264432;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY3171324 = 21528088;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY4306689 = -646375596;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61691488 = -353271988;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78958119 = -939473467;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38088621 = -805418992;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY81907216 = -495444049;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46012756 = -350326348;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY40036677 = -77558912;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15647917 = -809560128;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84991250 = 88955282;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY89378093 = -81197706;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY39711861 = -959518381;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61243574 = -968078129;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88484422 = -165337815;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69200003 = -186077311;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY66671061 = -766557368;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67406011 = -10366214;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91544359 = -930329648;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY42317580 = -747533575;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78369267 = -338693396;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69486829 = -706175035;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37006929 = -562081024;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46062229 = -798766126;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22398540 = -667385193;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY44515659 = -177184858;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY32791975 = -953300907;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY72878742 = -219489471;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY52213460 = -6215819;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY8601967 = -694485560;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95262336 = -257407718;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11114788 = -497645082;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38528293 = -464822749;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46626470 = -593628559;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91902947 = -986435003;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62205554 = -277323219;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26321543 = 90716013;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY859319 = -680857423;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15446484 = 81631932;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53248494 = -918469546;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11786008 = -432781000;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2330087 = -398339160;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY27626456 = -556918253;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY54370016 = -604419557;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91497917 = -427442261;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY86007579 = -862349544;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85951580 = -291633701;    int eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY1488301 = -64204429;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY59475700 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY49137219;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY49137219 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY33612469;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY33612469 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY28342706;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY28342706 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15807091;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15807091 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY98810630;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY98810630 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76144513;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76144513 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85007503;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85007503 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84613818;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84613818 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58059494;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58059494 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY63489659;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY63489659 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53861300;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53861300 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY99828234;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY99828234 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY29221869;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY29221869 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61810614;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61810614 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY82881474;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY82881474 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY36010804;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY36010804 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26712110;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26712110 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37149963;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37149963 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY7024861;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY7024861 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22551397;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22551397 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY97784211;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY97784211 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70179100;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70179100 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95523848;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95523848 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46435489;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46435489 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69794335;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69794335 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58773953;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY58773953 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY60496597;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY60496597 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY16253;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY16253 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95235725;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95235725 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY18347634;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY18347634 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2246086;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2246086 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65376877;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65376877 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY30628232;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY30628232 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62550807;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62550807 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY94404602;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY94404602 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91337115;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91337115 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY93693223;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY93693223 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY48342843;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY48342843 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67663133;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67663133 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70017932;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY70017932 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76489167;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY76489167 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY75385672;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY75385672 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY25663441;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY25663441 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62731874;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62731874 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY73556747;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY73556747 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY17580875;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY17580875 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY50171986;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY50171986 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65234261;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY65234261 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88901465;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88901465 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY56707433;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY56707433 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY71721163;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY71721163 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY10343139;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY10343139 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY3171324;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY3171324 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY4306689;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY4306689 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61691488;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61691488 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78958119;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78958119 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38088621;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38088621 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY81907216;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY81907216 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46012756;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46012756 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY40036677;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY40036677 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15647917;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15647917 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84991250;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY84991250 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY89378093;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY89378093 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY39711861;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY39711861 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61243574;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY61243574 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88484422;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY88484422 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69200003;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69200003 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY66671061;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY66671061 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67406011;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY67406011 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91544359;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91544359 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY42317580;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY42317580 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78369267;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY78369267 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69486829;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY69486829 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37006929;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY37006929 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46062229;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46062229 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22398540;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY22398540 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY44515659;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY44515659 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY32791975;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY32791975 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY72878742;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY72878742 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY52213460;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY52213460 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY8601967;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY8601967 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95262336;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY95262336 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11114788;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11114788 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38528293;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY38528293 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46626470;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY46626470 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91902947;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91902947 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62205554;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY62205554 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26321543;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY26321543 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY859319;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY859319 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15446484;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY15446484 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53248494;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY53248494 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11786008;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY11786008 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2330087;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY2330087 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY27626456;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY27626456 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY54370016;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY54370016 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91497917;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY91497917 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY86007579;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY86007579 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85951580;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY85951580 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY1488301;     eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY1488301 = eqTfKHEJlkradVbgcExtUbKHHoQdxdxuSJLUtOpY59475700;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pitxtJqPtpvBryUOpIrjrZ23041246() {     int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19071797 = -292960807;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50643068 = -277965791;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70613857 = -155630750;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24218465 = -796500129;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX27100317 = -929578861;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96487750 = -699971289;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX73502996 = -402846730;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX35832787 = -904791979;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX98427262 = -804864158;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41084009 = -300569802;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88784591 = -969320002;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88532502 = -716154195;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70582797 = -847915412;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX87595707 = -804845125;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59118419 = -760734269;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79635728 = -459591076;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71971907 = -703974903;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX91380440 = -556695008;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX17592166 = -579771829;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86941970 = -638469361;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX3012516 = -70273929;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX66273810 = -603334319;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62370925 = -292632019;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60254087 = -940409073;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX22413495 = -984582793;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64209242 = -713362957;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72114023 = -13632701;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX25607766 = -784950607;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX49800596 = -329128501;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX33709192 = -137977196;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43261952 = 54988105;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45011346 = 83082568;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14458917 = -335742003;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX13152674 = -157543514;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67488168 = -782339396;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72994499 = -169498116;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX81968792 = 83332828;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX92053561 = -972677438;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67360785 = -567372024;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX40488787 = 91641887;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX28235746 = -882641281;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX46568349 = -443428397;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16264915 = -776992079;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX99902945 = -675066821;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX63720189 = -869087999;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38349876 = -351899891;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX23069598 = -364385335;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96868379 = -202420373;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4623909 = -90098918;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4068858 = -263143266;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX7193684 = -412279430;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX78306316 = -777407264;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX85758652 = -853212886;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX76445846 = -238640867;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20028731 = -610309683;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX52797987 = -689626488;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88272143 = -985333773;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX10359770 = -215221678;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX1804971 = -811917336;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62891075 = -116215904;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24373728 = -586338588;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX47895230 = -617896124;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86032191 = -475663478;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64718070 = -566886963;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97822057 = -255557907;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43773245 = -952402571;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX74073586 = -280412192;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX57430124 = -590371899;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20107539 = 77494271;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86123920 = -491236153;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97666936 = -442923905;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79918345 = -731297466;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24019655 = -989322984;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX77103378 = -571413717;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX58706225 = -755828081;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX56444167 = -626845532;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50008896 = -826342241;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62467979 = -617565198;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96533897 = 28678925;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84063618 = -532682903;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41139645 = -248977623;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX75245643 = -811212329;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20983858 = -594851689;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45731738 = 34014764;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX26515509 = -725697767;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64955635 = -167604631;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59252693 = -63704547;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38013070 = 2898864;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX93123943 = -547233831;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14690182 = 7287091;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84722356 = -184164344;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71609023 = -701445495;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX90248591 = -60760102;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4469711 = -351156121;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16115060 = -322019525;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX80340515 = -164745158;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60536157 = -967764919;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX51546844 = -110105117;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX2080889 = -319508914;    int jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19946945 = -292960807;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19071797 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50643068;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50643068 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70613857;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70613857 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24218465;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24218465 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX27100317;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX27100317 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96487750;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96487750 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX73502996;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX73502996 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX35832787;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX35832787 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX98427262;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX98427262 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41084009;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41084009 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88784591;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88784591 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88532502;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88532502 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70582797;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX70582797 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX87595707;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX87595707 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59118419;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59118419 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79635728;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79635728 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71971907;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71971907 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX91380440;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX91380440 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX17592166;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX17592166 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86941970;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86941970 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX3012516;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX3012516 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX66273810;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX66273810 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62370925;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62370925 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60254087;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60254087 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX22413495;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX22413495 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64209242;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64209242 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72114023;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72114023 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX25607766;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX25607766 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX49800596;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX49800596 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX33709192;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX33709192 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43261952;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43261952 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45011346;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45011346 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14458917;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14458917 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX13152674;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX13152674 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67488168;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67488168 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72994499;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX72994499 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX81968792;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX81968792 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX92053561;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX92053561 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67360785;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX67360785 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX40488787;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX40488787 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX28235746;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX28235746 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX46568349;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX46568349 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16264915;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16264915 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX99902945;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX99902945 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX63720189;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX63720189 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38349876;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38349876 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX23069598;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX23069598 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96868379;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96868379 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4623909;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4623909 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4068858;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4068858 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX7193684;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX7193684 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX78306316;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX78306316 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX85758652;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX85758652 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX76445846;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX76445846 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20028731;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20028731 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX52797987;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX52797987 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88272143;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX88272143 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX10359770;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX10359770 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX1804971;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX1804971 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62891075;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62891075 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24373728;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24373728 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX47895230;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX47895230 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86032191;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86032191 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64718070;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64718070 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97822057;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97822057 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43773245;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX43773245 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX74073586;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX74073586 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX57430124;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX57430124 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20107539;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20107539 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86123920;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX86123920 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97666936;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX97666936 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79918345;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX79918345 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24019655;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX24019655 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX77103378;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX77103378 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX58706225;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX58706225 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX56444167;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX56444167 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50008896;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX50008896 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62467979;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX62467979 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96533897;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX96533897 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84063618;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84063618 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41139645;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX41139645 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX75245643;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX75245643 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20983858;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX20983858 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45731738;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX45731738 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX26515509;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX26515509 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64955635;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX64955635 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59252693;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX59252693 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38013070;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX38013070 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX93123943;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX93123943 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14690182;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX14690182 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84722356;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX84722356 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71609023;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX71609023 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX90248591;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX90248591 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4469711;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX4469711 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16115060;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX16115060 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX80340515;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX80340515 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60536157;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX60536157 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX51546844;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX51546844 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX2080889;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX2080889 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19946945;     jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19946945 = jvzzeTwYdFMHJKGuIVrtdvVMLxwNFoSaEQyyxtfX19071797;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void CXaBsBaTIyfPMOTXufqFTc83343903() {     int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9198106 = -351717008;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33768133 = -652891961;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC66106556 = -292425212;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97717039 = -982671951;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40157053 = -870902303;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77274155 = -592604397;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68166434 = -40392203;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88711350 = -541239718;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22238950 = -812756796;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC45339679 = -970444327;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64936410 = -377740160;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23282010 = -195742330;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC8928930 = -60151272;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26014561 = -803006009;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57192791 = -145855211;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3815471 = -159970947;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC15934088 = -965320145;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12736154 = -999544300;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC78506556 = 53817735;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC54266218 = -186347671;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC90934917 = -874699021;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64355392 = -936430955;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC95609343 = -699091940;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68175184 = -288433449;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC69298682 = -528093737;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83000207 = -589236692;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94081358 = -873161695;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC48778141 = -844840665;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC11009594 = 8672451;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC81498272 = -12379587;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC46725354 = -271678439;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44378260 = -417741851;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23427958 = -635967162;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36991319 = -148994672;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3084703 = -432675057;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26225506 = -472527526;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC82202361 = -532483076;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16410845 = -838736682;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77893802 = -274834070;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC85000929 = -913065886;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC41935419 = -588502556;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1212812 = -257921610;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC76081755 = -152417674;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30564887 = -539150010;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC55684607 = -981597955;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58788870 = -835523797;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3492888 = 87132165;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87254838 = -229076626;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC32542563 = -526038265;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33349264 = -720139603;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36559207 = -786661475;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22079424 = -741834097;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35211108 = -565065880;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC29352909 = -362196149;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC92408985 = -738909955;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44842713 = -415286053;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC38158790 = -953800022;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97931371 = 96008237;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC28418357 = -354578214;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57156846 = -181665611;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83192797 = -719442702;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC19388293 = -195551538;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77701757 = -449912169;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40740678 = -700377209;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC98614324 = -598765889;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20558151 = -959998309;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99854052 = -559775168;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC71937611 = -911156601;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22929858 = -270330953;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30967285 = -673327685;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC21613110 = -627487871;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99523242 = -26583464;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC34842351 = -624710231;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC93505627 = -33116380;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12330800 = -597845115;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC89722106 = -516777411;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88273636 = -684013281;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC65044456 = -59941930;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12490578 = -306835494;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC10509813 = -692569941;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC79507319 = -576368858;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC6826520 = -544085069;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16235579 = -218802401;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77660330 = -271187947;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44939065 = -225718113;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC24645931 = -529844342;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9167152 = -852675971;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94075048 = -173771014;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44582333 = -410084717;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58241990 = 82610996;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88066716 = -518727505;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC84270990 = -528491314;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87992487 = -384158468;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20736957 = 6831541;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1808132 = -93623184;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22547126 = -292951019;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23511055 = -808009442;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35341078 = -452040466;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC31950562 = -940384122;    int XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35126457 = -351717008;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9198106 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33768133;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33768133 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC66106556;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC66106556 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97717039;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97717039 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40157053;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40157053 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77274155;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77274155 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68166434;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68166434 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88711350;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88711350 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22238950;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22238950 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC45339679;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC45339679 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64936410;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64936410 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23282010;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23282010 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC8928930;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC8928930 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26014561;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26014561 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57192791;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57192791 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3815471;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3815471 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC15934088;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC15934088 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12736154;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12736154 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC78506556;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC78506556 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC54266218;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC54266218 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC90934917;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC90934917 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64355392;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC64355392 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC95609343;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC95609343 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68175184;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC68175184 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC69298682;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC69298682 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83000207;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83000207 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94081358;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94081358 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC48778141;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC48778141 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC11009594;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC11009594 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC81498272;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC81498272 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC46725354;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC46725354 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44378260;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44378260 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23427958;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23427958 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36991319;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36991319 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3084703;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3084703 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26225506;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC26225506 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC82202361;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC82202361 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16410845;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16410845 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77893802;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77893802 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC85000929;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC85000929 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC41935419;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC41935419 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1212812;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1212812 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC76081755;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC76081755 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30564887;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30564887 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC55684607;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC55684607 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58788870;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58788870 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3492888;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC3492888 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87254838;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87254838 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC32542563;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC32542563 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33349264;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC33349264 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36559207;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC36559207 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22079424;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22079424 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35211108;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35211108 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC29352909;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC29352909 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC92408985;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC92408985 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44842713;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44842713 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC38158790;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC38158790 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97931371;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC97931371 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC28418357;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC28418357 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57156846;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC57156846 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83192797;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC83192797 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC19388293;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC19388293 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77701757;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77701757 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40740678;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC40740678 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC98614324;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC98614324 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20558151;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20558151 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99854052;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99854052 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC71937611;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC71937611 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22929858;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22929858 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30967285;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC30967285 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC21613110;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC21613110 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99523242;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC99523242 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC34842351;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC34842351 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC93505627;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC93505627 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12330800;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12330800 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC89722106;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC89722106 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88273636;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88273636 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC65044456;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC65044456 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12490578;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC12490578 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC10509813;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC10509813 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC79507319;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC79507319 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC6826520;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC6826520 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16235579;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC16235579 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77660330;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC77660330 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44939065;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44939065 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC24645931;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC24645931 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9167152;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9167152 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94075048;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC94075048 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44582333;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC44582333 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58241990;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC58241990 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88066716;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC88066716 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC84270990;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC84270990 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87992487;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC87992487 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20736957;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC20736957 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1808132;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC1808132 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22547126;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC22547126 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23511055;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC23511055 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35341078;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35341078 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC31950562;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC31950562 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35126457;     XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC35126457 = XdhhCXvUGtggbyVZPAimTHuMjPrRkmKCBZzwTLzC9198106;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MYvzDIJOITzEsoaYFRllbX13668159() {     int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg4532384 = -516106671;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29272068 = -147868616;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg32672031 = -107015672;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg171855 = -387515993;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg81175561 = -368088876;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg24009265 = 62539019;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42023569 = -596438348;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30660836 = -72981790;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29259827 = 10215952;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56826842 = -331055082;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg21886175 = -231459713;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85527731 = -96405375;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg50854214 = -569513298;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52275515 = -144920271;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56019909 = -173481071;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69535893 = -837203771;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13844654 = -726045814;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10390499 = -805855171;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38035428 = -191839684;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg12760748 = -362024314;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96182022 = -349932024;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25121269 = -837472643;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23676706 = -90524742;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg93134505 = -931003547;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48320773 = -626894528;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45763895 = -974888282;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39979202 = -844716914;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57485310 = -252481034;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg43299199 = 83294275;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45220136 = -253626523;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53492013 = -950219074;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg86653400 = -141933406;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg55313821 = -707851926;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42830391 = -528066894;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg62707113 = -668611166;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13848296 = -89121986;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53395267 = -31449868;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg75789545 = -956517349;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38922948 = -865077947;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg11792097 = -846262737;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg64723436 = -904854220;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39509060 = 10474333;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15577453 = -740390301;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg226310 = -290158120;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg92732135 = -852284310;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74204212 = -712812356;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85490312 = -178051540;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg70748796 = -491756627;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg97851977 = -687894833;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg73587091 = -857413860;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg34649565 = -391917236;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8154975 = -620523174;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10517715 = -361244937;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39875126 = -572169404;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg17486137 = 82424990;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg79411114 = -678634029;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg5595362 = 42656125;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39537525 = -176012126;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg51851081 = -760621465;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35411666 = -393200595;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84030062 = -92744068;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84538258 = -243957314;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg87361637 = -56276066;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84039691 = -736157525;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3334829 = -380836009;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35232775 = 10473692;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30213910 = -388553450;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8023824 = 58553596;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg89568402 = -476309106;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42171613 = 15640914;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg16140626 = -705753903;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38055108 = -769528465;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg71467551 = -940777225;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg26243332 = -345576947;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48037312 = -457170094;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56672962 = -260406357;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg9543816 = 2917658;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23450396 = -800366623;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg402371 = 21280763;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74116560 = -914082173;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg60273582 = -696836742;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69230405 = -252960287;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg59633333 = -564586201;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69712107 = -59291866;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10570572 = -861709288;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45337039 = -229695900;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg76135685 = -780688469;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15438696 = -35682522;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25344255 = -510491885;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg83295998 = -989977137;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8252934 = -31778111;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13857742 = -855437743;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23938464 = -95895885;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3511282 = -371877353;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg27762034 = -653518670;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg80185177 = -560896907;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52147423 = -933249602;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg31537762 = 95767223;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96891480 = -909322112;    int rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57499361 = -516106671;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg4532384 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29272068;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29272068 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg32672031;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg32672031 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg171855;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg171855 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg81175561;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg81175561 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg24009265;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg24009265 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42023569;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42023569 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30660836;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30660836 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29259827;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg29259827 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56826842;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56826842 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg21886175;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg21886175 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85527731;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85527731 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg50854214;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg50854214 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52275515;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52275515 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56019909;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56019909 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69535893;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69535893 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13844654;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13844654 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10390499;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10390499 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38035428;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38035428 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg12760748;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg12760748 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96182022;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96182022 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25121269;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25121269 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23676706;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23676706 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg93134505;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg93134505 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48320773;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48320773 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45763895;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45763895 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39979202;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39979202 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57485310;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57485310 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg43299199;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg43299199 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45220136;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45220136 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53492013;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53492013 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg86653400;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg86653400 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg55313821;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg55313821 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42830391;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42830391 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg62707113;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg62707113 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13848296;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13848296 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53395267;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg53395267 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg75789545;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg75789545 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38922948;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38922948 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg11792097;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg11792097 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg64723436;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg64723436 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39509060;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39509060 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15577453;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15577453 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg226310;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg226310 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg92732135;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg92732135 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74204212;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74204212 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85490312;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg85490312 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg70748796;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg70748796 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg97851977;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg97851977 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg73587091;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg73587091 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg34649565;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg34649565 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8154975;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8154975 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10517715;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10517715 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39875126;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39875126 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg17486137;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg17486137 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg79411114;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg79411114 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg5595362;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg5595362 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39537525;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg39537525 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg51851081;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg51851081 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35411666;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35411666 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84030062;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84030062 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84538258;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84538258 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg87361637;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg87361637 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84039691;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg84039691 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3334829;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3334829 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35232775;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg35232775 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30213910;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg30213910 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8023824;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8023824 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg89568402;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg89568402 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42171613;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg42171613 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg16140626;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg16140626 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38055108;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg38055108 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg71467551;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg71467551 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg26243332;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg26243332 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48037312;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg48037312 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56672962;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg56672962 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg9543816;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg9543816 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23450396;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23450396 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg402371;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg402371 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74116560;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg74116560 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg60273582;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg60273582 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69230405;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69230405 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg59633333;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg59633333 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69712107;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg69712107 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10570572;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg10570572 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45337039;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg45337039 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg76135685;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg76135685 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15438696;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg15438696 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25344255;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg25344255 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg83295998;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg83295998 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8252934;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg8252934 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13857742;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg13857742 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23938464;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg23938464 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3511282;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg3511282 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg27762034;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg27762034 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg80185177;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg80185177 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52147423;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg52147423 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg31537762;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg31537762 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96891480;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg96891480 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57499361;     rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg57499361 = rwVUucWIdwErostJuUvGmjvHsTjaBorslohzejNg4532384;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RfThFMlmjlpEsNfCMoXypq9521122() {     int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd18789349 = -209866491;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39203220 = -494993690;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29092853 = -609412594;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82402693 = -345688451;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd58080355 = -572675821;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1055351 = -225438679;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91935419 = -523512139;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41447173 = -123584081;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd48107517 = -855663848;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd25843830 = -914308334;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd5471796 = -198886653;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd68671969 = -642372351;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53573178 = -257573646;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd49771565 = -416029145;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38379679 = -910416371;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd81493135 = 60059424;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93784761 = -208247352;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19654884 = -841684122;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd99269961 = 1211405;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38238650 = -757774662;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd31148105 = 59430374;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd66567190 = -386326745;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15459966 = 17394600;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15643005 = -313462077;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91608704 = -29251717;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd64845672 = -105008609;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85087615 = -448241477;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd40441954 = -272947497;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20302772 = -540472901;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd2039142 = -915936360;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd96699181 = -657217693;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd75686413 = -578826170;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd86599313 = 57627803;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19727889 = -933389902;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19790593 = -275370486;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36936545 = -569008418;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6790065 = -75001745;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd17209442 = -779636081;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd73396943 = -253051649;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36731253 = -69020598;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91044982 = -298122077;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60565239 = -408207090;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd87173517 = -855210194;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd24228316 = -630788081;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd69686462 = 42139425;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53902975 = -112501459;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79754954 = -715683969;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd65488918 = -193400872;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60926002 = -207798781;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13550724 = -731660729;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46989985 = -256685954;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd89575019 = -724686664;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd42212883 = -449054840;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60315135 = -196304993;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd78373017 = -520518500;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd52222159 = -823539747;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd23743255 = -412388291;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13449848 = -195950517;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd90793989 = -216436734;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93234683 = -367667213;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15967735 = -777197202;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd51493465 = -150564643;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd21144401 = -583111181;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46068375 = -939727488;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29144648 = -157090642;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29785382 = -620060484;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82072656 = -600000155;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33845290 = -324183745;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29980973 = -40658660;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1443135 = -241407954;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd74703070 = -864938831;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd76575319 = -428611272;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46257941 = -488632473;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd62538709 = -929767997;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd47193667 = -359652586;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd70582866 = -532362536;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79393672 = -531116551;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91231650 = -351817320;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd45956543 = -255601503;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd37705730 = -916750259;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85090717 = -389324641;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19598697 = -154840606;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79515951 = 34851283;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6752049 = -808812173;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd55049157 = -559250406;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd7124163 = -932531030;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33473530 = -29771330;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26284178 = -746067205;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41354872 = -312871402;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd67568434 = -451830740;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13193290 = -56620128;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93340216 = -879051228;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26415453 = -463199347;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd80162259 = -885384437;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20763518 = -291823397;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39551518 = -47557434;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39420838 = -825095910;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41105142 = -915482707;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd95083667 = -373697440;    int kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39901080 = -209866491;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd18789349 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39203220;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39203220 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29092853;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29092853 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82402693;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82402693 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd58080355;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd58080355 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1055351;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1055351 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91935419;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91935419 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41447173;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41447173 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd48107517;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd48107517 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd25843830;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd25843830 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd5471796;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd5471796 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd68671969;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd68671969 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53573178;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53573178 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd49771565;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd49771565 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38379679;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38379679 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd81493135;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd81493135 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93784761;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93784761 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19654884;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19654884 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd99269961;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd99269961 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38238650;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd38238650 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd31148105;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd31148105 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd66567190;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd66567190 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15459966;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15459966 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15643005;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15643005 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91608704;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91608704 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd64845672;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd64845672 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85087615;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85087615 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd40441954;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd40441954 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20302772;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20302772 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd2039142;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd2039142 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd96699181;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd96699181 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd75686413;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd75686413 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd86599313;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd86599313 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19727889;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19727889 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19790593;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19790593 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36936545;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36936545 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6790065;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6790065 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd17209442;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd17209442 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd73396943;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd73396943 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36731253;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd36731253 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91044982;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91044982 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60565239;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60565239 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd87173517;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd87173517 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd24228316;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd24228316 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd69686462;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd69686462 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53902975;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd53902975 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79754954;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79754954 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd65488918;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd65488918 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60926002;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60926002 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13550724;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13550724 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46989985;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46989985 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd89575019;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd89575019 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd42212883;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd42212883 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60315135;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd60315135 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd78373017;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd78373017 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd52222159;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd52222159 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd23743255;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd23743255 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13449848;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13449848 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd90793989;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd90793989 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93234683;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93234683 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15967735;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd15967735 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd51493465;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd51493465 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd21144401;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd21144401 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46068375;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46068375 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29144648;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29144648 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29785382;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29785382 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82072656;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd82072656 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33845290;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33845290 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29980973;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd29980973 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1443135;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd1443135 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd74703070;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd74703070 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd76575319;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd76575319 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46257941;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd46257941 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd62538709;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd62538709 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd47193667;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd47193667 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd70582866;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd70582866 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79393672;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79393672 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91231650;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd91231650 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd45956543;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd45956543 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd37705730;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd37705730 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85090717;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd85090717 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19598697;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd19598697 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79515951;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd79515951 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6752049;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd6752049 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd55049157;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd55049157 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd7124163;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd7124163 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33473530;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd33473530 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26284178;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26284178 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41354872;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41354872 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd67568434;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd67568434 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13193290;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd13193290 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93340216;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd93340216 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26415453;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd26415453 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd80162259;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd80162259 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20763518;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd20763518 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39551518;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39551518 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39420838;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39420838 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41105142;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd41105142 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd95083667;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd95083667 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39901080;     kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd39901080 = kQiGzHjeQxMZqutdsKeVxNqrcHREgPScWavCyzMd18789349;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YhWzTNvGMSrSfqJUGYlloj82368968() {     int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28383828 = -681753904;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75352148 = -315797857;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41422544 = -397835670;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy74548417 = -348434536;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71583607 = -40271679;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7433829 = -8556555;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31430736 = -604363842;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59575969 = -953839786;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy32606002 = -491747864;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy8028223 = -489768905;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy35846878 = -40297111;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy6916091 = -121263191;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy82290970 = -994166783;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96606458 = -956475755;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96980511 = -593621106;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71888526 = -103512380;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy43709055 = -641367275;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy65073348 = 64711868;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59819232 = -842403791;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86174199 = 76810572;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31526579 = -251207044;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79630855 = -131226594;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16871390 = -686639940;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41285771 = -398030445;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49697382 = -967062771;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy88404098 = -766677562;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90983080 = -972921402;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14404004 = -496570834;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy23256726 = -216583095;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34535075 = -881777446;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29966670 = -849210329;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14632638 = -543999607;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7044458 = -797805123;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2323041 = -129444267;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy95317463 = 11591047;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy26233489 = -75606436;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75407084 = -117693724;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83049199 = -722904140;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51243285 = -424928520;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2525131 = 29740532;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46226713 = -513769648;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy27068835 = -461596529;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy18123600 = -178437588;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy38275795 = -943943931;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41679290 = -347493494;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28803096 = -33456785;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy42168125 = -177859791;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy56031207 = -403344439;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29980247 = -657677366;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83729471 = -949669411;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50791077 = 62567070;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49796987 = 33533644;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61490485 = -937016796;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86152226 = -314453911;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50842389 = -423677407;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy48752972 = -450527311;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58480759 = -629157917;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy136773 = -999805226;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy24851036 = -381371766;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83179509 = -273594117;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16450748 = -35635153;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy17026732 = -7793008;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy36319243 = -637256692;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy98070926 = -609970419;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78061553 = -640558576;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy21214241 = -496297504;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99871632 = -323458068;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79967929 = -764722517;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy1288996 = -868066803;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy70747023 = -418014670;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96481442 = -985818656;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60659855 = -918463136;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy13830064 = -510359613;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy57294101 = -772144324;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39947487 = -409419780;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy4457744 = -789610515;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61507255 = -952789007;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78595594 = -742696010;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99606480 = 49463048;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20894286 = -833605986;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46235973 = -488817771;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34951873 = -469576964;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy84423756 = -838893469;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39527255 = -266913684;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83743998 = -844344516;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy80169683 = -782743974;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy53142153 = -606982812;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20892232 = -383351213;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51480651 = -705766860;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46564491 = -537881643;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy67752729 = -446448520;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75270311 = -117888498;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58198164 = -241532375;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy68063775 = -51334403;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86074382 = -934624315;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29199982 = -405976640;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90749592 = -824339838;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20052674 = -568467169;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60214242 = -203385355;    int wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20465050 = -681753904;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28383828 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75352148;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75352148 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41422544;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41422544 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy74548417;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy74548417 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71583607;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71583607 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7433829;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7433829 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31430736;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31430736 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59575969;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59575969 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy32606002;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy32606002 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy8028223;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy8028223 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy35846878;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy35846878 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy6916091;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy6916091 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy82290970;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy82290970 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96606458;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96606458 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96980511;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96980511 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71888526;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy71888526 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy43709055;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy43709055 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy65073348;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy65073348 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59819232;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy59819232 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86174199;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86174199 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31526579;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy31526579 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79630855;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79630855 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16871390;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16871390 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41285771;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41285771 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49697382;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49697382 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy88404098;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy88404098 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90983080;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90983080 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14404004;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14404004 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy23256726;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy23256726 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34535075;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34535075 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29966670;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29966670 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14632638;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy14632638 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7044458;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy7044458 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2323041;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2323041 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy95317463;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy95317463 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy26233489;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy26233489 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75407084;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75407084 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83049199;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83049199 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51243285;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51243285 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2525131;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy2525131 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46226713;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46226713 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy27068835;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy27068835 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy18123600;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy18123600 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy38275795;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy38275795 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41679290;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy41679290 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28803096;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28803096 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy42168125;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy42168125 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy56031207;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy56031207 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29980247;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29980247 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83729471;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83729471 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50791077;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50791077 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49796987;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy49796987 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61490485;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61490485 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86152226;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86152226 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50842389;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy50842389 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy48752972;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy48752972 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58480759;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58480759 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy136773;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy136773 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy24851036;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy24851036 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83179509;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83179509 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16450748;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy16450748 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy17026732;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy17026732 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy36319243;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy36319243 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy98070926;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy98070926 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78061553;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78061553 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy21214241;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy21214241 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99871632;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99871632 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79967929;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy79967929 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy1288996;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy1288996 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy70747023;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy70747023 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96481442;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy96481442 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60659855;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60659855 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy13830064;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy13830064 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy57294101;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy57294101 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39947487;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39947487 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy4457744;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy4457744 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61507255;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy61507255 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78595594;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy78595594 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99606480;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy99606480 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20894286;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20894286 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46235973;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46235973 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34951873;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy34951873 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy84423756;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy84423756 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39527255;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy39527255 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83743998;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy83743998 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy80169683;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy80169683 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy53142153;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy53142153 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20892232;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20892232 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51480651;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy51480651 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46564491;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy46564491 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy67752729;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy67752729 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75270311;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy75270311 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58198164;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy58198164 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy68063775;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy68063775 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86074382;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy86074382 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29199982;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy29199982 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90749592;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy90749592 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20052674;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20052674 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60214242;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy60214242 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20465050;     wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy20465050 = wWrXaxgqkODNDnVPlnVofTMLuTqIfYOWBokzIwmy28383828;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void yXFaaDJnWhcSSHvuCnJPXX78552128() {     int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf87979924 = -910510281;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76857998 = -125953242;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf78423931 = -471976593;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70424175 = -121045413;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82876833 = 59221294;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf5110950 = -966816228;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf28789219 = 65918572;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10401253 = -208051161;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf46419445 = 75579636;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf91052737 = -431027759;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61141809 = -441839550;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf41587292 = -216284440;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf53045533 = -900345302;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54980297 = -860634102;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf94288317 = -286147627;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68642781 = 91114729;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79670158 = -569583556;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf29741679 = -304624237;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf40261435 = -981523421;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66091309 = -585598081;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf11987698 = -84227868;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf48120454 = -23628471;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf9063215 = -450935019;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf6016010 = 37631318;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf25675387 = -423200361;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82819005 = -901295033;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4323152 = -322401400;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79515173 = -17952424;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73041069 = -6175710;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73008542 = -928760688;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54880988 = -394429657;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57397898 = -961217605;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56126496 = -777751995;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf84847482 = -731328198;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf254825 = -736618938;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4823386 = -387263018;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66038762 = -410472359;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf81409537 = -667356530;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70261227 = -143635036;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf75350785 = -244140416;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4444527 = -982431245;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf97148015 = -466537948;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59002842 = 88117583;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf12515301 = -267858669;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf42667606 = -893811562;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93596224 = -276400944;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf47656847 = -69715459;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2727602 = -736097668;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf69369895 = -941614985;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98896863 = -170921872;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1277328 = -823541154;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56382140 = 62290389;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36905999 = -76965250;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59426749 = -574622866;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66564431 = -387611494;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf39859471 = -786881810;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf67794783 = -675018223;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf72407922 = -409607912;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf44748789 = -697845053;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57829 = -39483673;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf787799 = -544414829;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf49274046 = -916129004;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37360184 = -101875452;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73410903 = 4340324;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36171750 = 63401898;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf3743912 = -480621946;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85460795 = -438532445;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68198050 = -69017105;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54725473 = -24015165;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89464932 = -898884609;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2604019 = -498412913;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98260621 = -902227027;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59480451 = -60989201;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf64910650 = -637383005;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61646782 = -603166837;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf14839682 = -617689921;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89117611 = -11746055;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96547914 = -83076350;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf63348404 = -68557120;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf32079162 = -46799417;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf35162158 = -731579575;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1595550 = -586303733;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10145278 = -76337439;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74144205 = -835253838;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf71731214 = -5219534;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98498848 = -356720046;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf20491900 = -784252355;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96699747 = -103129130;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf18283052 = -243716704;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf60395353 = -949737128;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37028602 = -712244795;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93630840 = 99135553;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36660748 = -969511477;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70203399 = -4151363;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74562987 = -699725588;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf55170481 = 33697759;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59787832 = -264662496;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85591939 = -916222741;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76343550 = -231260568;    int asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf38923695 = -910510281;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf87979924 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76857998;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76857998 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf78423931;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf78423931 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70424175;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70424175 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82876833;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82876833 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf5110950;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf5110950 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf28789219;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf28789219 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10401253;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10401253 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf46419445;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf46419445 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf91052737;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf91052737 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61141809;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61141809 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf41587292;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf41587292 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf53045533;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf53045533 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54980297;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54980297 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf94288317;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf94288317 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68642781;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68642781 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79670158;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79670158 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf29741679;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf29741679 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf40261435;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf40261435 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66091309;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66091309 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf11987698;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf11987698 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf48120454;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf48120454 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf9063215;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf9063215 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf6016010;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf6016010 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf25675387;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf25675387 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82819005;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf82819005 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4323152;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4323152 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79515173;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf79515173 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73041069;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73041069 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73008542;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73008542 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54880988;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54880988 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57397898;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57397898 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56126496;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56126496 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf84847482;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf84847482 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf254825;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf254825 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4823386;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4823386 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66038762;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66038762 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf81409537;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf81409537 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70261227;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70261227 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf75350785;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf75350785 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4444527;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf4444527 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf97148015;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf97148015 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59002842;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59002842 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf12515301;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf12515301 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf42667606;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf42667606 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93596224;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93596224 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf47656847;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf47656847 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2727602;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2727602 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf69369895;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf69369895 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98896863;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98896863 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1277328;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1277328 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56382140;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf56382140 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36905999;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36905999 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59426749;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59426749 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66564431;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf66564431 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf39859471;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf39859471 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf67794783;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf67794783 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf72407922;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf72407922 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf44748789;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf44748789 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57829;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf57829 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf787799;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf787799 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf49274046;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf49274046 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37360184;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37360184 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73410903;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf73410903 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36171750;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36171750 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf3743912;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf3743912 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85460795;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85460795 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68198050;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf68198050 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54725473;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf54725473 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89464932;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89464932 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2604019;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf2604019 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98260621;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98260621 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59480451;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59480451 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf64910650;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf64910650 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61646782;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf61646782 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf14839682;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf14839682 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89117611;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf89117611 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96547914;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96547914 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf63348404;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf63348404 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf32079162;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf32079162 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf35162158;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf35162158 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1595550;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf1595550 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10145278;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf10145278 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74144205;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74144205 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf71731214;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf71731214 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98498848;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf98498848 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf20491900;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf20491900 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96699747;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf96699747 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf18283052;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf18283052 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf60395353;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf60395353 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37028602;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf37028602 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93630840;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf93630840 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36660748;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf36660748 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70203399;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf70203399 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74562987;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf74562987 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf55170481;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf55170481 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59787832;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf59787832 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85591939;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf85591939 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76343550;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf76343550 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf38923695;     asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf38923695 = asxgbdsQkEFKbJRUUmUAvNRgjjRzJzLYxawMctcf87979924;}
// Junk Finished
