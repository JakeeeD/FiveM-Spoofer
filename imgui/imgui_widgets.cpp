// dear imgui, v1.83 WIP
// (widgets code)

/*

Index of this file:

// [SECTION] Forward Declarations
// [SECTION] Widgets: Text, etc.
// [SECTION] Widgets: Main (Button, Image, Checkbox, RadioButton, ProgressBar, Bullet, etc.)
// [SECTION] Widgets: Low-level Layout helpers (Spacing, Dummy, NewLine, Separator, etc.)
// [SECTION] Widgets: ComboBox
// [SECTION] Data Type and Data Formatting Helpers
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
// [SECTION] Widgets: InputText, InputTextMultiline
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
// [SECTION] Widgets: Selectable
// [SECTION] Widgets: ListBox
// [SECTION] Widgets: PlotLines, PlotHistogram
// [SECTION] Widgets: Value helpers
// [SECTION] Widgets: MenuItem, BeginMenu, EndMenu, etc.
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
// [SECTION] Widgets: Columns, BeginColumns, EndColumns, etc.

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DISABLE

#ifndef IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include "imgui_internal.h"

// System includes
#include <ctype.h>      // toupper
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

//-------------------------------------------------------------------------
// Warnings
//-------------------------------------------------------------------------

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127)     // condition expression is constant
#pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#if defined(_MSC_VER) && _MSC_VER >= 1922 // MSVC 2019 16.2 or later
#pragma warning (disable: 5054)     // operator '|': deprecated between enumerations of different types
#endif
#pragma warning (disable: 26451)    // [Static Analyzer] Arithmetic overflow : Using operator 'xxx' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator 'xxx' to avoid overflow(io.2).
#pragma warning (disable: 26812)    // [Static Analyzer] The enum type 'xxx' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#if __has_warning("-Wunknown-warning-option")
#pragma clang diagnostic ignored "-Wunknown-warning-option"         // warning: unknown warning group 'xxx'                      // not all warnings are known by all Clang versions and they tend to be rename-happy.. so ignoring warnings triggers new warnings on some configuration. Great!
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"                // warning: unknown warning group 'xxx'
#pragma clang diagnostic ignored "-Wold-style-cast"                 // warning: use of old-style cast                            // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"                    // warning: comparing floating point with == or != is unsafe // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"              // warning: format string is not a string literal            // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wsign-conversion"                // warning: implicit conversion changes signedness
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0
#pragma clang diagnostic ignored "-Wdouble-promotion"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#pragma clang diagnostic ignored "-Wenum-enum-conversion"           // warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_')
#pragma clang diagnostic ignored "-Wdeprecated-enum-enum-conversion"// warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_') is deprecated
#pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"  // warning: implicit conversion from 'xxx' to 'float' may lose precision
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                          // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wformat-nonliteral"                // warning: format not a string literal, format string not checked
#pragma GCC diagnostic ignored "-Wclass-memaccess"                  // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

//-------------------------------------------------------------------------
// Data
//-------------------------------------------------------------------------

// Widgets
static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    // Time for drag-hold to activate items accepting the ImGuiButtonFlags_PressedOnDragDropHold button behavior.
static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    // Multiplier for the default value of io.MouseDragThreshold to make DragFloat/DragInt react faster to mouse drags.

// Those MIN/MAX values are not define because we need to point to them
static const signed char    IM_S8_MIN  = -128;
static const signed char    IM_S8_MAX  = 127;
static const unsigned char  IM_U8_MIN  = 0;
static const unsigned char  IM_U8_MAX  = 0xFF;
static const signed short   IM_S16_MIN = -32768;
static const signed short   IM_S16_MAX = 32767;
static const unsigned short IM_U16_MIN = 0;
static const unsigned short IM_U16_MAX = 0xFFFF;
static const ImS32          IM_S32_MIN = INT_MIN;    // (-2147483647 - 1), (0x80000000);
static const ImS32          IM_S32_MAX = INT_MAX;    // (2147483647), (0x7FFFFFFF)
static const ImU32          IM_U32_MIN = 0;
static const ImU32          IM_U32_MAX = UINT_MAX;   // (0xFFFFFFFF)
#ifdef LLONG_MIN
static const ImS64          IM_S64_MIN = LLONG_MIN;  // (-9223372036854775807ll - 1ll);
static const ImS64          IM_S64_MAX = LLONG_MAX;  // (9223372036854775807ll);
#else
static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;
static const ImS64          IM_S64_MAX = 9223372036854775807LL;
#endif
static const ImU64          IM_U64_MIN = 0;
#ifdef ULLONG_MAX
static const ImU64          IM_U64_MAX = ULLONG_MAX; // (0xFFFFFFFFFFFFFFFFull);
#else
static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);
#endif

//-------------------------------------------------------------------------
// [SECTION] Forward Declarations
//-------------------------------------------------------------------------

// For InputTextEx()
static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data, ImGuiInputSource input_source);
static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);
static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);

//-------------------------------------------------------------------------
// [SECTION] Widgets: Text, etc.
//-------------------------------------------------------------------------
// - TextEx() [Internal]
// - TextUnformatted()
// - Text()
// - TextV()
// - TextColored()
// - TextColoredV()
// - TextDisabled()
// - TextDisabledV()
// - TextWrapped()
// - TextWrappedV()
// - LabelText()
// - LabelTextV()
// - BulletText()
// - BulletTextV()
//-------------------------------------------------------------------------

void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(text != NULL);
    const char* text_begin = text;
    if (text_end == NULL)
        text_end = text + strlen(text); // FIXME-OPT

    const ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrLineTextBaseOffset);
    const float wrap_pos_x = window->DC.TextWrapPos;
    const bool wrap_enabled = (wrap_pos_x >= 0.0f);
    if (text_end - text > 2000 && !wrap_enabled)
    {
        // Long text!
        // Perform manual coarse clipping to optimize for long multi-line text
        // - From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
        // - We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
        // - We use memchr(), pay attention that well optimized versions of those str/mem functions are much faster than a casually written loop.
        const char* line = text;
        const float line_height = GetTextLineHeight();
        ImVec2 text_size(0, 0);

        // Lines to skip (can't skip when logging text)
        ImVec2 pos = text_pos;
        if (!g.LogEnabled)
        {
            int lines_skippable = (int)((window->ClipRect.Min.y - text_pos.y) / line_height);
            if (lines_skippable > 0)
            {
                int lines_skipped = 0;
                while (line < text_end && lines_skipped < lines_skippable)
                {
                    const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                    if (!line_end)
                        line_end = text_end;
                    if ((flags & ImGuiTextFlags_NoWidthForLargeClippedText) == 0)
                        text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                    line = line_end + 1;
                    lines_skipped++;
                }
                pos.y += lines_skipped * line_height;
            }
        }

        // Lines to render
        if (line < text_end)
        {
            ImRect line_rect(pos, pos + ImVec2(FLT_MAX, line_height));
            while (line < text_end)
            {
                if (IsClippedEx(line_rect, 0, false))
                    break;

                const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                if (!line_end)
                    line_end = text_end;
                text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                RenderText(pos, line, line_end, false);
                line = line_end + 1;
                line_rect.Min.y += line_height;
                line_rect.Max.y += line_height;
                pos.y += line_height;
            }

            // Count remaining lines
            int lines_skipped = 0;
            while (line < text_end)
            {
                const char* line_end = (const char*)memchr(line, '\n', text_end - line);
                if (!line_end)
                    line_end = text_end;
                if ((flags & ImGuiTextFlags_NoWidthForLargeClippedText) == 0)
                    text_size.x = ImMax(text_size.x, CalcTextSize(line, line_end).x);
                line = line_end + 1;
                lines_skipped++;
            }
            pos.y += lines_skipped * line_height;
        }
        text_size.y = (pos - text_pos).y;

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size, 0.0f);
        ItemAdd(bb, 0);
    }
    else
    {
        const float wrap_width = wrap_enabled ? CalcWrapWidthForPos(window->DC.CursorPos, wrap_pos_x) : 0.0f;
        const ImVec2 text_size = CalcTextSize(text_begin, text_end, false, wrap_width);

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size, 0.0f);
        if (!ItemAdd(bb, 0))
            return;

        // Render (we don't hide text after ## in this end-user function)
        RenderTextWrapped(bb.Min, text_begin, text_end, wrap_width);
    }
}

void ImGui::TextUnformatted(const char* text, const char* text_end)
{
    TextEx(text, text_end, ImGuiTextFlags_NoWidthForLargeClippedText);
}

void ImGui::Text(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextV(fmt, args);
    va_end(args);
}

void ImGui::TextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    TextEx(g.TempBuffer, text_end, ImGuiTextFlags_NoWidthForLargeClippedText);
}

void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextColoredV(col, fmt, args);
    va_end(args);
}

void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, col);
    if (fmt[0] == '%' && fmt[1] == 's' && fmt[2] == 0)
        TextEx(va_arg(args, const char*), NULL, ImGuiTextFlags_NoWidthForLargeClippedText); // Skip formatting
    else
        TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextDisabled(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextDisabledV(fmt, args);
    va_end(args);
}

void ImGui::TextDisabledV(const char* fmt, va_list args)
{
    ImGuiContext& g = *GImGui;
    PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
    if (fmt[0] == '%' && fmt[1] == 's' && fmt[2] == 0)
        TextEx(va_arg(args, const char*), NULL, ImGuiTextFlags_NoWidthForLargeClippedText); // Skip formatting
    else
        TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextWrapped(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextWrappedV(fmt, args);
    va_end(args);
}

void ImGui::TextWrappedV(const char* fmt, va_list args)
{
    ImGuiContext& g = *GImGui;
    bool need_backup = (g.CurrentWindow->DC.TextWrapPos < 0.0f);  // Keep existing wrap position if one is already set
    if (need_backup)
        PushTextWrapPos(0.0f);
    if (fmt[0] == '%' && fmt[1] == 's' && fmt[2] == 0)
        TextEx(va_arg(args, const char*), NULL, ImGuiTextFlags_NoWidthForLargeClippedText); // Skip formatting
    else
        TextV(fmt, args);
    if (need_backup)
        PopTextWrapPos();
}

void ImGui::LabelText(const char* label, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    LabelTextV(label, fmt, args);
    va_end(args);
}

// Add a label+text combo aligned to other label+value widgets
void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float w = CalcItemWidth();

    const char* value_text_begin = &g.TempBuffer[0];
    const char* value_text_end = value_text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    const ImVec2 value_size = CalcTextSize(value_text_begin, value_text_end, false);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const ImVec2 pos = window->DC.CursorPos;
    const ImRect value_bb(pos, pos + ImVec2(w, value_size.y + style.FramePadding.y * 2));
    const ImRect total_bb(pos, pos + ImVec2(w + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), ImMax(value_size.y, label_size.y) + style.FramePadding.y * 2));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0))
        return;

    // Render
    RenderTextClipped(value_bb.Min + style.FramePadding, value_bb.Max, value_text_begin, value_text_end, &value_size, ImVec2(0.0f, 0.0f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(value_bb.Max.x + style.ItemInnerSpacing.x, value_bb.Min.y + style.FramePadding.y), label);
}

void ImGui::BulletText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    BulletTextV(fmt, args);
    va_end(args);
}

// Text with a little bullet aligned to the typical tree node.
void ImGui::BulletTextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const char* text_begin = g.TempBuffer;
    const char* text_end = text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    const ImVec2 label_size = CalcTextSize(text_begin, text_end, false);
    const ImVec2 total_size = ImVec2(g.FontSize + (label_size.x > 0.0f ? (label_size.x + style.FramePadding.x * 2) : 0.0f), label_size.y);  // Empty text doesn't add padding
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrLineTextBaseOffset;
    ItemSize(total_size, 0.0f);
    const ImRect bb(pos, pos + total_size);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderBullet(window->DrawList, bb.Min + ImVec2(style.FramePadding.x + g.FontSize * 0.5f, g.FontSize * 0.5f), text_col);
    RenderText(bb.Min + ImVec2(g.FontSize + style.FramePadding.x * 2, 0.0f), text_begin, text_end, false);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Main
//-------------------------------------------------------------------------
// - ButtonBehavior() [Internal]
// - Button()
// - SmallButton()
// - InvisibleButton()
// - ArrowButton()
// - CloseButton() [Internal]
// - CollapseButton() [Internal]
// - GetWindowScrollbarID() [Internal]
// - GetWindowScrollbarRect() [Internal]
// - Scrollbar() [Internal]
// - ScrollbarEx() [Internal]
// - Image()
// - ImageButton()
// - Checkbox()
// - CheckboxFlagsT() [Internal]
// - CheckboxFlags()
// - RadioButton()
// - ProgressBar()
// - Bullet()
//-------------------------------------------------------------------------

// The ButtonBehavior() function is key to many interactions and used by many/most widgets.
// Because we handle so many cases (keyboard/gamepad navigation, drag and drop) and many specific behavior (via ImGuiButtonFlags_),
// this code is a little complex.
// By far the most common path is interacting with the Mouse using the default ImGuiButtonFlags_PressedOnClickRelease button behavior.
// See the series of events below and the corresponding state reported by dear imgui:
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClickRelease:             return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse is outside bb)        -             -                -               -                  -                    -
//   Frame N+1 (mouse moves inside bb)      -             true             -               -                  -                    -
//   Frame N+2 (mouse button is down)       -             true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+4 (mouse moves outside bb)     -             -                true            -                  -                    -
//   Frame N+5 (mouse moves inside bb)      -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+8 (mouse moves outside bb)     -             -                -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnClick:                    return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+3 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnRelease:                  return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+2 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+3 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+6 (mouse button is released)   true          true             -               -                  -                    -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// with PressedOnDoubleClick:              return-value  IsItemHovered()  IsItemActive()  IsItemActivated()  IsItemDeactivated()  IsItemClicked()
//   Frame N+0 (mouse button is down)       -             true             -               -                  -                    true
//   Frame N+1 (mouse button is down)       -             true             -               -                  -                    -
//   Frame N+2 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+3 (mouse button is released)   -             true             -               -                  -                    -
//   Frame N+4 (mouse button is down)       true          true             true            true               -                    true
//   Frame N+5 (mouse button is down)       -             true             true            -                  -                    -
//   Frame N+6 (mouse button is released)   -             true             -               -                  true                 -
//   Frame N+7 (mouse button is released)   -             true             -               -                  -                    -
//------------------------------------------------------------------------------------------------------------------------------------------------
// Note that some combinations are supported,
// - PressedOnDragDropHold can generally be associated with any flag.
// - PressedOnDoubleClick can be associated by PressedOnClickRelease/PressedOnRelease, in which case the second release event won't be reported.
//------------------------------------------------------------------------------------------------------------------------------------------------
// The behavior of the return-value changes when ImGuiButtonFlags_Repeat is set:
//                                         Repeat+                  Repeat+           Repeat+             Repeat+
//                                         PressedOnClickRelease    PressedOnClick    PressedOnRelease    PressedOnDoubleClick
//-------------------------------------------------------------------------------------------------------------------------------------------------
//   Frame N+0 (mouse button is down)       -                        true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay                  true                     true              -                   true
//   ...                                    -                        -                 -                   -
//   Frame N + RepeatDelay + RepeatRate*N   true                     true              -                   true
//-------------------------------------------------------------------------------------------------------------------------------------------------

bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    if (flags & ImGuiButtonFlags_Disabled)
    {
        if (out_hovered) *out_hovered = false;
        if (out_held) *out_held = false;
        if (g.ActiveId == id) ClearActiveID();
        return false;
    }

    // Default only reacts to left mouse button
    if ((flags & ImGuiButtonFlags_MouseButtonMask_) == 0)
        flags |= ImGuiButtonFlags_MouseButtonDefault_;

    // Default behavior requires click + release inside bounding box
    if ((flags & ImGuiButtonFlags_PressedOnMask_) == 0)
        flags |= ImGuiButtonFlags_PressedOnDefault_;

    ImGuiWindow* backup_hovered_window = g.HoveredWindow;
    const bool flatten_hovered_children = (flags & ImGuiButtonFlags_FlattenChildren) && g.HoveredWindow && g.HoveredWindow->RootWindowDockTree == window->RootWindowDockTree;
    if (flatten_hovered_children)
        g.HoveredWindow = window;

#ifdef IMGUI_ENABLE_TEST_ENGINE
    if (id != 0 && window->DC.LastItemId != id)
        IMGUI_TEST_ENGINE_ITEM_ADD(bb, id);
#endif

    bool pressed = false;
    bool hovered = ItemHoverable(bb, id);

    // Drag source doesn't report as hovered
    if (hovered && g.DragDropActive && g.DragDropPayload.SourceId == id && !(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoDisableHover))
        hovered = false;

    // Special mode for Drag and Drop where holding button pressed for a long time while dragging another item triggers the button
    if (g.DragDropActive && (flags & ImGuiButtonFlags_PressedOnDragDropHold) && !(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoHoldToOpenOthers))
        if (IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        {
            hovered = true;
            SetHoveredID(id);
            if (CalcTypematicRepeatAmount(g.HoveredIdTimer + 0.0001f - g.IO.DeltaTime, g.HoveredIdTimer + 0.0001f, DRAGDROP_HOLD_TO_OPEN_TIMER, 0.00f))
            {
                pressed = true;
                g.DragDropHoldJustPressedId = id;
                FocusWindow(window);
            }
        }

    if (flatten_hovered_children)
        g.HoveredWindow = backup_hovered_window;

    // AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
    if (hovered && (flags & ImGuiButtonFlags_AllowItemOverlap) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))
        hovered = false;

    // Mouse handling
    if (hovered)
    {
        if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))
        {
            // Poll buttons
            int mouse_button_clicked = -1;
            int mouse_button_released = -1;
            if ((flags & ImGuiButtonFlags_MouseButtonLeft) && g.IO.MouseClicked[0])         { mouse_button_clicked = 0; }
            else if ((flags & ImGuiButtonFlags_MouseButtonRight) && g.IO.MouseClicked[1])   { mouse_button_clicked = 1; }
            else if ((flags & ImGuiButtonFlags_MouseButtonMiddle) && g.IO.MouseClicked[2])  { mouse_button_clicked = 2; }
            if ((flags & ImGuiButtonFlags_MouseButtonLeft) && g.IO.MouseReleased[0])        { mouse_button_released = 0; }
            else if ((flags & ImGuiButtonFlags_MouseButtonRight) && g.IO.MouseReleased[1])  { mouse_button_released = 1; }
            else if ((flags & ImGuiButtonFlags_MouseButtonMiddle) && g.IO.MouseReleased[2]) { mouse_button_released = 2; }

            if (mouse_button_clicked != -1 && g.ActiveId != id)
            {
                if (flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClickReleaseAnywhere))
                {
                    SetActiveID(id, window);
                    g.ActiveIdMouseButton = mouse_button_clicked;
                    if (!(flags & ImGuiButtonFlags_NoNavFocus))
                        SetFocusID(id, window);
                    FocusWindow(window);
                }
                if ((flags & ImGuiButtonFlags_PressedOnClick) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[mouse_button_clicked]))
                {
                    pressed = true;
                    if (flags & ImGuiButtonFlags_NoHoldingActiveId)
                        ClearActiveID();
                    else
                        SetActiveID(id, window); // Hold on ID
                    g.ActiveIdMouseButton = mouse_button_clicked;
                    FocusWindow(window);
                }
            }
            if ((flags & ImGuiButtonFlags_PressedOnRelease) && mouse_button_released != -1)
            {
                // Repeat mode trumps on release behavior
                const bool has_repeated_at_least_once = (flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[mouse_button_released] >= g.IO.KeyRepeatDelay;
                if (!has_repeated_at_least_once)
                    pressed = true;
                ClearActiveID();
            }

            // 'Repeat' mode acts when held regardless of _PressedOn flags (see table above).
            // Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
            if (g.ActiveId == id && (flags & ImGuiButtonFlags_Repeat))
                if (g.IO.MouseDownDuration[g.ActiveIdMouseButton] > 0.0f && IsMouseClicked(g.ActiveIdMouseButton, true))
                    pressed = true;
        }

        if (pressed)
            g.NavDisableHighlight = true;
    }

    // Gamepad/Keyboard navigation
    // We report navigated item as hovered but we don't set g.HoveredId to not interfere with mouse.
    if (g.NavId == id && !g.NavDisableHighlight && g.NavDisableMouseHover && (g.ActiveId == 0 || g.ActiveId == id || g.ActiveId == window->MoveId))
        if (!(flags & ImGuiButtonFlags_NoHoveredOnFocus))
            hovered = true;
    if (g.NavActivateDownId == id)
    {
        bool nav_activated_by_code = (g.NavActivateId == id);
        bool nav_activated_by_inputs = IsNavInputTest(ImGuiNavInput_Activate, (flags & ImGuiButtonFlags_Repeat) ? ImGuiInputReadMode_Repeat : ImGuiInputReadMode_Pressed);
        if (nav_activated_by_code || nav_activated_by_inputs)
            pressed = true;
        if (nav_activated_by_code || nav_activated_by_inputs || g.ActiveId == id)
        {
            // Set active id so it can be queried by user via IsItemActive(), equivalent of holding the mouse button.
            g.NavActivateId = id; // This is so SetActiveId assign a Nav source
            SetActiveID(id, window);
            if ((nav_activated_by_code || nav_activated_by_inputs) && !(flags & ImGuiButtonFlags_NoNavFocus))
                SetFocusID(id, window);
        }
    }

    // Process while held
    bool held = false;
    if (g.ActiveId == id)
    {
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (g.ActiveIdIsJustActivated)
                g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;

            const int mouse_button = g.ActiveIdMouseButton;
            IM_ASSERT(mouse_button >= 0 && mouse_button < ImGuiMouseButton_COUNT);
            if (g.IO.MouseDown[mouse_button])
            {
                held = true;
            }
            else
            {
                bool release_in = hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease) != 0;
                bool release_anywhere = (flags & ImGuiButtonFlags_PressedOnClickReleaseAnywhere) != 0;
                if ((release_in || release_anywhere) && !g.DragDropActive)
                {
                    // Report as pressed when releasing the mouse (this is the most common path)
                    bool is_double_click_release = (flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDownWasDoubleClick[mouse_button];
                    bool is_repeating_already = (flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[mouse_button] >= g.IO.KeyRepeatDelay; // Repeat mode trumps <on release>
                    if (!is_double_click_release && !is_repeating_already)
                        pressed = true;
                }
                ClearActiveID();
            }
            if (!(flags & ImGuiButtonFlags_NoNavFocus))
                g.NavDisableHighlight = true;
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            // When activated using Nav, we hold on the ActiveID until activation button is released
            if (g.NavActivateDownId != id)
                ClearActiveID();
        }
        if (pressed)
            g.ActiveIdHasBeenPressedBefore = true;
    }

    if (out_hovered) *out_hovered = hovered;
    if (out_held) *out_held = held;

    return pressed;
}

bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    ImVec2 pos = window->DC.CursorPos;
    if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
        pos.y += window->DC.CurrLineTextBaseOffset - style.FramePadding.y;
    ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);

    const ImRect bb(pos, pos + size);
    ItemSize(size, style.FramePadding.y);
    if (!ItemAdd(bb, id))
        return false;

    if (g.CurrentItemFlags & ImGuiItemFlags_ButtonRepeat)
        flags |= ImGuiButtonFlags_Repeat;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);

    if (g.LogEnabled)
        LogSetNextTextDecoration("[", "]");
    RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);

    // Automatically close popups
    //if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
    //    CloseCurrentPopup();

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return pressed;
}

bool ImGui::Button(const char* label, const ImVec2& size_arg)
{
    return ButtonEx(label, size_arg, ImGuiButtonFlags_None);
}

// Small buttons fits within text without additional vertical spacing.
bool ImGui::SmallButton(const char* label)
{
    ImGuiContext& g = *GImGui;
    float backup_padding_y = g.Style.FramePadding.y;
    g.Style.FramePadding.y = 0.0f;
    bool pressed = ButtonEx(label, ImVec2(0, 0), ImGuiButtonFlags_AlignTextBaseLine);
    g.Style.FramePadding.y = backup_padding_y;
    return pressed;
}

// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    // Cannot use zero-size for InvisibleButton(). Unlike Button() there is not way to fallback using the label size.
    IM_ASSERT(size_arg.x != 0.0f && size_arg.y != 0.0f);

    const ImGuiID id = window->GetID(str_id);
    ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(size);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    return pressed;
}

bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(str_id);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const float default_size = GetFrameHeight();
    ItemSize(size, (size.y >= default_size) ? g.Style.FramePadding.y : -1.0f);
    if (!ItemAdd(bb, id))
        return false;

    if (g.CurrentItemFlags & ImGuiItemFlags_ButtonRepeat)
        flags |= ImGuiButtonFlags_Repeat;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    const ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, bg_col, true, g.Style.FrameRounding);
    RenderArrow(window->DrawList, bb.Min + ImVec2(ImMax(0.0f, (size.x - g.FontSize) * 0.5f), ImMax(0.0f, (size.y - g.FontSize) * 0.5f)), text_col, dir);

    return pressed;
}

bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)
{
    float sz = GetFrameHeight();
    return ArrowButtonEx(str_id, dir, ImVec2(sz, sz), ImGuiButtonFlags_None);
}

// Button to close a window
bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Tweak 1: Shrink hit-testing area if button covers an abnormally large proportion of the visible region. That's in order to facilitate moving the window away. (#3825)
    // This may better be applied as a general hit-rect reduction mechanism for all widgets to ensure the area to move window is always accessible?
    const ImRect bb(pos, pos + ImVec2(g.FontSize, g.FontSize) + g.Style.FramePadding * 2.0f);
    ImRect bb_interact = bb;
    const float area_to_visible_ratio = window->OuterRectClipped.GetArea() / bb.GetArea();
    if (area_to_visible_ratio < 1.5f)
        bb_interact.Expand(ImFloor(bb_interact.GetSize() * -0.25f));

    // Tweak 2: We intentionally allow interaction when clipped so that a mechanical Alt,Right,Activate sequence can always close a window.
    // (this isn't the regular behavior of buttons, but it doesn't affect the user much because navigation tends to keep items visible).
    bool is_clipped = !ItemAdd(bb_interact, id);

    bool hovered, held;
    bool pressed = ButtonBehavior(bb_interact, id, &hovered, &held);
    if (is_clipped)
        return pressed;

    // Render
    // FIXME: Clarify this mess
    ImU32 col = GetColorU32(held ? ImGuiCol_ButtonActive : ImGuiCol_ButtonHovered);
    ImVec2 center = bb.GetCenter();
    if (hovered)
        window->DrawList->AddCircleFilled(center, ImMax(2.0f, g.FontSize * 0.5f + 1.0f), col, 12);

    float cross_extent = g.FontSize * 0.5f * 0.7071f - 1.0f;
    ImU32 cross_col = GetColorU32(ImGuiCol_Text);
    center -= ImVec2(0.5f, 0.5f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent, +cross_extent), center + ImVec2(-cross_extent, -cross_extent), cross_col, 1.0f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent, -cross_extent), center + ImVec2(-cross_extent, +cross_extent), cross_col, 1.0f);

    return pressed;
}

// The Collapse button also functions as a Dock Menu button.
bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos, ImGuiDockNode* dock_node)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    ImRect bb(pos, pos + ImVec2(g.FontSize, g.FontSize) + g.Style.FramePadding * 2.0f);
    ItemAdd(bb, id);
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_None);

    // Render
    //bool is_dock_menu = (window->DockNodeAsHost && !window->Collapsed);
    ImVec2 off = dock_node ? ImVec2(IM_FLOOR(-g.Style.ItemInnerSpacing.x * 0.5f) + 0.5f, 0.0f) : ImVec2(0.0f, 0.0f);
    ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    ImVec2 center = bb.GetCenter();
    if (hovered || held)
        window->DrawList->AddCircleFilled(center + off + ImVec2(0,-0.5f), g.FontSize * 0.5f + 1.0f, bg_col, 12);

    if (dock_node)
        RenderArrowDockMenu(window->DrawList, bb.Min + g.Style.FramePadding, g.FontSize, text_col);
    else
        RenderArrow(window->DrawList, bb.Min + g.Style.FramePadding, text_col, window->Collapsed ? ImGuiDir_Right : ImGuiDir_Down, 1.0f);

    // Switch to moving the window after mouse is moved beyond the initial drag threshold
    if (IsItemActive() && IsMouseDragging(0))
        StartMouseMovingWindowOrNode(window, dock_node, true);

    return pressed;
}

ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)
{
    return window->GetIDNoKeepAlive(axis == ImGuiAxis_X ? "#SCROLLX" : "#SCROLLY");
}

// Return scrollbar rectangle, must only be called for corresponding axis if window->ScrollbarX/Y is set.
ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)
{
    const ImRect outer_rect = window->Rect();
    const ImRect inner_rect = window->InnerRect;
    const float border_size = window->WindowBorderSize;
    const float scrollbar_size = window->ScrollbarSizes[axis ^ 1]; // (ScrollbarSizes.x = width of Y scrollbar; ScrollbarSizes.y = height of X scrollbar)
    IM_ASSERT(scrollbar_size > 0.0f);
    if (axis == ImGuiAxis_X)
        return ImRect(inner_rect.Min.x, ImMax(outer_rect.Min.y, outer_rect.Max.y - border_size - scrollbar_size), inner_rect.Max.x, outer_rect.Max.y);
    else
        return ImRect(ImMax(outer_rect.Min.x, outer_rect.Max.x - border_size - scrollbar_size), inner_rect.Min.y, outer_rect.Max.x, inner_rect.Max.y);
}

void ImGui::Scrollbar(ImGuiAxis axis)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImGuiID id = GetWindowScrollbarID(window, axis);
    KeepAliveID(id);

    // Calculate scrollbar bounding box
    ImRect bb = GetWindowScrollbarRect(window, axis);
    ImDrawFlags rounding_corners = ImDrawFlags_RoundCornersNone;
    if (axis == ImGuiAxis_X)
    {
        rounding_corners |= ImDrawFlags_RoundCornersBottomLeft;
        if (!window->ScrollbarY)
            rounding_corners |= ImDrawFlags_RoundCornersBottomRight;
    }
    else
    {
        if ((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar))
            rounding_corners |= ImDrawFlags_RoundCornersTopRight;
        if (!window->ScrollbarX)
            rounding_corners |= ImDrawFlags_RoundCornersBottomRight;
    }
    float size_avail = window->InnerRect.Max[axis] - window->InnerRect.Min[axis];
    float size_contents = window->ContentSize[axis] + window->WindowPadding[axis] * 2.0f;
    ScrollbarEx(bb, id, axis, &window->Scroll[axis], size_avail, size_contents, rounding_corners);
}

// Vertical/Horizontal scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
// Still, the code should probably be made simpler..
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, float* p_scroll_v, float size_avail_v, float size_contents_v, ImDrawFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    const float bb_frame_width = bb_frame.GetWidth();
    const float bb_frame_height = bb_frame.GetHeight();
    if (bb_frame_width <= 0.0f || bb_frame_height <= 0.0f)
        return false;

    // When we are too small, start hiding and disabling the grab (this reduce visual noise on very small window and facilitate using the window resize grab)
    float alpha = 1.0f;
    if ((axis == ImGuiAxis_Y) && bb_frame_height < g.FontSize + g.Style.FramePadding.y * 2.0f)
        alpha = ImSaturate((bb_frame_height - g.FontSize) / (g.Style.FramePadding.y * 2.0f));
    if (alpha <= 0.0f)
        return false;

    const ImGuiStyle& style = g.Style;
    const bool allow_interaction = (alpha >= 1.0f);

    ImRect bb = bb_frame;
    bb.Expand(ImVec2(-ImClamp(IM_FLOOR((bb_frame_width - 2.0f) * 0.5f), 0.0f, 3.0f), -ImClamp(IM_FLOOR((bb_frame_height - 2.0f) * 0.5f), 0.0f, 3.0f)));

    // V denote the main, longer axis of the scrollbar (= height for a vertical scrollbar)
    const float scrollbar_size_v = (axis == ImGuiAxis_X) ? bb.GetWidth() : bb.GetHeight();

    // Calculate the height of our grabbable box. It generally represent the amount visible (vs the total scrollable amount)
    // But we maintain a minimum size in pixel to allow for the user to still aim inside.
    IM_ASSERT(ImMax(size_contents_v, size_avail_v) > 0.0f); // Adding this assert to check if the ImMax(XXX,1.0f) is still needed. PLEASE CONTACT ME if this triggers.
    const float win_size_v = ImMax(ImMax(size_contents_v, size_avail_v), 1.0f);
    const float grab_h_pixels = ImClamp(scrollbar_size_v * (size_avail_v / win_size_v), style.GrabMinSize, scrollbar_size_v);
    const float grab_h_norm = grab_h_pixels / scrollbar_size_v;

    // Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
    bool held = false;
    bool hovered = false;
    ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_NoNavFocus);

    float scroll_max = ImMax(1.0f, size_contents_v - size_avail_v);
    float scroll_ratio = ImSaturate(*p_scroll_v / scroll_max);
    float grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v; // Grab position in normalized space
    if (held && allow_interaction && grab_h_norm < 1.0f)
    {
        float scrollbar_pos_v = bb.Min[axis];
        float mouse_pos_v = g.IO.MousePos[axis];

        // Click position in scrollbar normalized space (0.0f->1.0f)
        const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);
        SetHoveredID(id);

        bool seek_absolute = false;
        if (g.ActiveIdIsJustActivated)
        {
            // On initial click calculate the distance between mouse and the center of the grab
            seek_absolute = (clicked_v_norm < grab_v_norm || clicked_v_norm > grab_v_norm + grab_h_norm);
            if (seek_absolute)
                g.ScrollbarClickDeltaToGrabCenter = 0.0f;
            else
                g.ScrollbarClickDeltaToGrabCenter = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
        }

        // Apply scroll (p_scroll_v will generally point on one member of window->Scroll)
        // It is ok to modify Scroll here because we are being called in Begin() after the calculation of ContentSize and before setting up our starting position
        const float scroll_v_norm = ImSaturate((clicked_v_norm - g.ScrollbarClickDeltaToGrabCenter - grab_h_norm * 0.5f) / (1.0f - grab_h_norm));
        *p_scroll_v = IM_ROUND(scroll_v_norm * scroll_max);//(win_size_contents_v - win_size_v));

        // Update values for rendering
        scroll_ratio = ImSaturate(*p_scroll_v / scroll_max);
        grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;

        // Update distance to grab now that we have seeked and saturated
        if (seek_absolute)
            g.ScrollbarClickDeltaToGrabCenter = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
    }

    // Render
    const ImU32 bg_col = GetColorU32(ImGuiCol_ScrollbarBg);
    const ImU32 grab_col = GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab, alpha);
    window->DrawList->AddRectFilled(bb_frame.Min, bb_frame.Max, bg_col, window->WindowRounding, flags);
    ImRect grab_rect;
    if (axis == ImGuiAxis_X)
        grab_rect = ImRect(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y, ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, bb.Max.y);
    else
        grab_rect = ImRect(bb.Min.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm), bb.Max.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm) + grab_h_pixels);
    window->DrawList->AddRectFilled(grab_rect.Min, grab_rect.Max, grab_col, style.ScrollbarRounding);

    return held;
}

void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    if (border_col.w > 0.0f)
        bb.Max += ImVec2(2, 2);
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
        return;

    if (border_col.w > 0.0f)
    {
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(border_col), 0.0f);
        window->DrawList->AddImage(user_texture_id, bb.Min + ImVec2(1, 1), bb.Max - ImVec2(1, 1), uv0, uv1, GetColorU32(tint_col));
    }
    else
    {
        window->DrawList->AddImage(user_texture_id, bb.Min, bb.Max, uv0, uv1, GetColorU32(tint_col));
    }
}

// ImageButton() is flawed as 'id' is always derived from 'texture_id' (see #2464 #1390)
// We provide this internal helper to write your own variant while we figure out how to redesign the public ImageButton() API.
bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec2& padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size + padding * 2);
    ItemSize(bb);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, g.Style.FrameRounding));
    if (bg_col.w > 0.0f)
        window->DrawList->AddRectFilled(bb.Min + padding, bb.Max - padding, GetColorU32(bg_col));
    window->DrawList->AddImage(texture_id, bb.Min + padding, bb.Max - padding, uv0, uv1, GetColorU32(tint_col));

    return pressed;
}

// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    // Default to using texture ID as ID. User can still push string/integer prefixes.
    PushID((void*)(intptr_t)user_texture_id);
    const ImGuiID id = window->GetID("#image");
    PopID();

    const ImVec2 padding = (frame_padding >= 0) ? ImVec2((float)frame_padding, (float)frame_padding) : g.Style.FramePadding;
    return ImageButtonEx(id, user_texture_id, size, uv0, uv1, padding, bg_col, tint_col);
}

bool ImGui::Checkbox(const char* label, bool* v)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const float square_sz = GetFrameHeight();
    const ImVec2 pos = window->DC.CursorPos;
    const ImRect total_bb(pos, pos + ImVec2(square_sz + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), label_size.y + style.FramePadding.y * 2.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id))
    {
        IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags | ImGuiItemStatusFlags_Checkable | (*v ? ImGuiItemStatusFlags_Checked : 0));
        return false;
    }

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
    if (pressed)
    {
        *v = !(*v);
        MarkItemEdited(id);
    }

    const ImRect check_bb(pos, pos + ImVec2(square_sz, square_sz));
    RenderNavHighlight(total_bb, id);
    RenderFrame(check_bb.Min, check_bb.Max, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), true, style.FrameRounding);
    ImU32 check_col = GetColorU32(ImGuiCol_CheckMark);
    bool mixed_value = (g.CurrentItemFlags & ImGuiItemFlags_MixedValue) != 0;
    if (mixed_value)
    {
        // Undocumented tristate/mixed/indeterminate checkbox (#2644)
        // This may seem awkwardly designed because the aim is to make ImGuiItemFlags_MixedValue supported by all widgets (not just checkbox)
        ImVec2 pad(ImMax(1.0f, IM_FLOOR(square_sz / 3.6f)), ImMax(1.0f, IM_FLOOR(square_sz / 3.6f)));
        window->DrawList->AddRectFilled(check_bb.Min + pad, check_bb.Max - pad, check_col, style.FrameRounding);
    }
    else if (*v)
    {
        const float pad = ImMax(1.0f, IM_FLOOR(square_sz / 6.0f));
        RenderCheckMark(window->DrawList, check_bb.Min + ImVec2(pad, pad), check_col, square_sz - pad * 2.0f);
    }

    ImVec2 label_pos = ImVec2(check_bb.Max.x + style.ItemInnerSpacing.x, check_bb.Min.y + style.FramePadding.y);
    if (g.LogEnabled)
        LogRenderedText(&label_pos, mixed_value ? "[~]" : *v ? "[x]" : "[ ]");
    if (label_size.x > 0.0f)
        RenderText(label_pos, label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags | ImGuiItemStatusFlags_Checkable | (*v ? ImGuiItemStatusFlags_Checked : 0));
    return pressed;
}

template<typename T>
bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)
{
    bool all_on = (*flags & flags_value) == flags_value;
    bool any_on = (*flags & flags_value) != 0;
    bool pressed;
    if (!all_on && any_on)
    {
        ImGuiContext& g = *GImGui;
        ImGuiItemFlags backup_item_flags = g.CurrentItemFlags;
        g.CurrentItemFlags |= ImGuiItemFlags_MixedValue;
        pressed = Checkbox(label, &all_on);
        g.CurrentItemFlags = backup_item_flags;
    }
    else
    {
        pressed = Checkbox(label, &all_on);

    }
    if (pressed)
    {
        if (all_on)
            *flags |= flags_value;
        else
            *flags &= ~flags_value;
    }
    return pressed;
}

bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)
{
    return CheckboxFlagsT(label, flags, flags_value);
}

bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
{
    return CheckboxFlagsT(label, flags, flags_value);
}

bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)
{
    return CheckboxFlagsT(label, flags, flags_value);
}

bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)
{
    return CheckboxFlagsT(label, flags, flags_value);
}

bool ImGui::RadioButton(const char* label, bool active)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const float square_sz = GetFrameHeight();
    const ImVec2 pos = window->DC.CursorPos;
    const ImRect check_bb(pos, pos + ImVec2(square_sz, square_sz));
    const ImRect total_bb(pos, pos + ImVec2(square_sz + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), label_size.y + style.FramePadding.y * 2.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id))
        return false;

    ImVec2 center = check_bb.GetCenter();
    center.x = IM_ROUND(center.x);
    center.y = IM_ROUND(center.y);
    const float radius = (square_sz - 1.0f) * 0.5f;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
    if (pressed)
        MarkItemEdited(id);

    RenderNavHighlight(total_bb, id);
    window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);
    if (active)
    {
        const float pad = ImMax(1.0f, IM_FLOOR(square_sz / 6.0f));
        window->DrawList->AddCircleFilled(center, radius - pad, GetColorU32(ImGuiCol_CheckMark), 16);
    }

    if (style.FrameBorderSize > 0.0f)
    {
        window->DrawList->AddCircle(center + ImVec2(1, 1), radius, GetColorU32(ImGuiCol_BorderShadow), 16, style.FrameBorderSize);
        window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16, style.FrameBorderSize);
    }

    ImVec2 label_pos = ImVec2(check_bb.Max.x + style.ItemInnerSpacing.x, check_bb.Min.y + style.FramePadding.y);
    if (g.LogEnabled)
        LogRenderedText(&label_pos, active ? "(x)" : "( )");
    if (label_size.x > 0.0f)
        RenderText(label_pos, label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return pressed;
}

// FIXME: This would work nicely if it was a public template, e.g. 'template<T> RadioButton(const char* label, T* v, T v_button)', but I'm not sure how we would expose it..
bool ImGui::RadioButton(const char* label, int* v, int v_button)
{
    const bool pressed = RadioButton(label, *v == v_button);
    if (pressed)
        *v = v_button;
    return pressed;
}

// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    ImVec2 pos = window->DC.CursorPos;
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), g.FontSize + style.FramePadding.y * 2.0f);
    ImRect bb(pos, pos + size);
    ItemSize(size, style.FramePadding.y);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    fraction = ImSaturate(fraction);
    RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    bb.Expand(ImVec2(-style.FrameBorderSize, -style.FrameBorderSize));
    const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);
    RenderRectFilledRangeH(window->DrawList, bb, GetColorU32(ImGuiCol_PlotHistogram), 0.0f, fraction, style.FrameRounding);

    // Default displaying the fraction as percentage string, but user can override it
    char overlay_buf[32];
    if (!overlay)
    {
        ImFormatString(overlay_buf, IM_ARRAYSIZE(overlay_buf), "%.0f%%", fraction * 100 + 0.01f);
        overlay = overlay_buf;
    }

    ImVec2 overlay_size = CalcTextSize(overlay, NULL);
    if (overlay_size.x > 0.0f)
        RenderTextClipped(ImVec2(ImClamp(fill_br.x + style.ItemSpacing.x, bb.Min.x, bb.Max.x - overlay_size.x - style.ItemInnerSpacing.x), bb.Min.y), bb.Max, overlay, NULL, &overlay_size, ImVec2(0.0f, 0.5f), &bb);
}

void ImGui::Bullet()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float line_height = ImMax(ImMin(window->DC.CurrLineSize.y, g.FontSize + g.Style.FramePadding.y * 2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
    {
        SameLine(0, style.FramePadding.x * 2);
        return;
    }

    // Render and stay on same line
    ImU32 text_col = GetColorU32(ImGuiCol_Text);
    RenderBullet(window->DrawList, bb.Min + ImVec2(style.FramePadding.x + g.FontSize * 0.5f, line_height * 0.5f), text_col);
    SameLine(0, style.FramePadding.x * 2.0f);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Low-level Layout helpers
//-------------------------------------------------------------------------
// - Spacing()
// - Dummy()
// - NewLine()
// - AlignTextToFramePadding()
// - SeparatorEx() [Internal]
// - Separator()
// - SplitterBehavior() [Internal]
// - ShrinkWidths() [Internal]
//-------------------------------------------------------------------------

void ImGui::Spacing()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ItemSize(ImVec2(0, 0));
}

void ImGui::Dummy(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(size);
    ItemAdd(bb, 0);
}

void ImGui::NewLine()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiLayoutType backup_layout_type = window->DC.LayoutType;
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    if (window->DC.CurrLineSize.y > 0.0f)     // In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
        ItemSize(ImVec2(0, 0));
    else
        ItemSize(ImVec2(0.0f, g.FontSize));
    window->DC.LayoutType = backup_layout_type;
}

void ImGui::AlignTextToFramePadding()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    window->DC.CurrLineSize.y = ImMax(window->DC.CurrLineSize.y, g.FontSize + g.Style.FramePadding.y * 2);
    window->DC.CurrLineTextBaseOffset = ImMax(window->DC.CurrLineTextBaseOffset, g.Style.FramePadding.y);
}

// Horizontal/vertical separating line
void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(ImIsPowerOfTwo(flags & (ImGuiSeparatorFlags_Horizontal | ImGuiSeparatorFlags_Vertical)));   // Check that only 1 option is selected

    float thickness_draw = 1.0f;
    float thickness_layout = 0.0f;
    if (flags & ImGuiSeparatorFlags_Vertical)
    {
        // Vertical separator, for menu bars (use current line height). Not exposed because it is misleading and it doesn't have an effect on regular layout.
        float y1 = window->DC.CursorPos.y;
        float y2 = window->DC.CursorPos.y + window->DC.CurrLineSize.y;
        const ImRect bb(ImVec2(window->DC.CursorPos.x, y1), ImVec2(window->DC.CursorPos.x + thickness_draw, y2));
        ItemSize(ImVec2(thickness_layout, 0.0f));
        if (!ItemAdd(bb, 0))
            return;

        // Draw
        window->DrawList->AddLine(ImVec2(bb.Min.x, bb.Min.y), ImVec2(bb.Min.x, bb.Max.y), GetColorU32(ImGuiCol_Separator));
        if (g.LogEnabled)
            LogText(" |");
    }
    else if (flags & ImGuiSeparatorFlags_Horizontal)
    {
        // Horizontal Separator
        float x1 = window->Pos.x;
        float x2 = window->Pos.x + window->Size.x;

        // FIXME-WORKRECT: old hack (#205) until we decide of consistent behavior with WorkRect/Indent and Separator
        if (g.GroupStack.Size > 0 && g.GroupStack.back().WindowID == window->ID)
            x1 += window->DC.Indent.x;

        ImGuiOldColumns* columns = (flags & ImGuiSeparatorFlags_SpanAllColumns) ? window->DC.CurrentColumns : NULL;
        if (columns)
            PushColumnsBackground();

        // We don't provide our width to the layout so that it doesn't get feed back into AutoFit
        const ImRect bb(ImVec2(x1, window->DC.CursorPos.y), ImVec2(x2, window->DC.CursorPos.y + thickness_draw));
        ItemSize(ImVec2(0.0f, thickness_layout));
        const bool item_visible = ItemAdd(bb, 0);
        if (item_visible)
        {
            // Draw
            window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x, bb.Min.y), GetColorU32(ImGuiCol_Separator));
            if (g.LogEnabled)
                LogRenderedText(&bb.Min, "--------------------------------\n");

        }
        if (columns)
        {
            PopColumnsBackground();
            columns->LineMinY = window->DC.CursorPos.y;
        }
    }
}

void ImGui::Separator()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    // Those flags should eventually be overridable by the user
    ImGuiSeparatorFlags flags = (window->DC.LayoutType == ImGuiLayoutType_Horizontal) ? ImGuiSeparatorFlags_Vertical : ImGuiSeparatorFlags_Horizontal;
    flags |= ImGuiSeparatorFlags_SpanAllColumns;
    SeparatorEx(flags);
}

// Using 'hover_visibility_delay' allows us to hide the highlight and mouse cursor for a short time, which can be convenient to reduce visual noise.
bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImGuiItemFlags item_flags_backup = g.CurrentItemFlags;
    g.CurrentItemFlags |= ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus;
    bool item_add = ItemAdd(bb, id);
    g.CurrentItemFlags = item_flags_backup;
    if (!item_add)
        return false;

    bool hovered, held;
    ImRect bb_interact = bb;
    bb_interact.Expand(axis == ImGuiAxis_Y ? ImVec2(0.0f, hover_extend) : ImVec2(hover_extend, 0.0f));
    ButtonBehavior(bb_interact, id, &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_AllowItemOverlap);
    if (g.ActiveId != id)
        SetItemAllowOverlap();

    if (held || (g.HoveredId == id && g.HoveredIdPreviousFrame == id && g.HoveredIdTimer >= hover_visibility_delay))
        SetMouseCursor(axis == ImGuiAxis_Y ? ImGuiMouseCursor_ResizeNS : ImGuiMouseCursor_ResizeEW);

    ImRect bb_render = bb;
    if (held)
    {
        ImVec2 mouse_delta_2d = g.IO.MousePos - g.ActiveIdClickOffset - bb_interact.Min;
        float mouse_delta = (axis == ImGuiAxis_Y) ? mouse_delta_2d.y : mouse_delta_2d.x;

        // Minimum pane size
        float size_1_maximum_delta = ImMax(0.0f, *size1 - min_size1);
        float size_2_maximum_delta = ImMax(0.0f, *size2 - min_size2);
        if (mouse_delta < -size_1_maximum_delta)
            mouse_delta = -size_1_maximum_delta;
        if (mouse_delta > size_2_maximum_delta)
            mouse_delta = size_2_maximum_delta;

        // Apply resize
        if (mouse_delta != 0.0f)
        {
            if (mouse_delta < 0.0f)
                IM_ASSERT(*size1 + mouse_delta >= min_size1);
            if (mouse_delta > 0.0f)
                IM_ASSERT(*size2 - mouse_delta >= min_size2);
            *size1 += mouse_delta;
            *size2 -= mouse_delta;
            bb_render.Translate((axis == ImGuiAxis_X) ? ImVec2(mouse_delta, 0.0f) : ImVec2(0.0f, mouse_delta));
            MarkItemEdited(id);
        }
    }

    // Render
    const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : (hovered && g.HoveredIdTimer >= hover_visibility_delay) ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
    window->DrawList->AddRectFilled(bb_render.Min, bb_render.Max, col, 0.0f);

    return held;
}

static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)
{
    const ImGuiShrinkWidthItem* a = (const ImGuiShrinkWidthItem*)lhs;
    const ImGuiShrinkWidthItem* b = (const ImGuiShrinkWidthItem*)rhs;
    if (int d = (int)(b->Width - a->Width))
        return d;
    return (b->Index - a->Index);
}

// Shrink excess width from a set of item, by removing width from the larger items first.
// Set items Width to -1.0f to disable shrinking this item.
void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)
{
    if (count == 1)
    {
        if (items[0].Width >= 0.0f)
            items[0].Width = ImMax(items[0].Width - width_excess, 1.0f);
        return;
    }
    ImQsort(items, (size_t)count, sizeof(ImGuiShrinkWidthItem), ShrinkWidthItemComparer);
    int count_same_width = 1;
    while (width_excess > 0.0f && count_same_width < count)
    {
        while (count_same_width < count && items[0].Width <= items[count_same_width].Width)
            count_same_width++;
        float max_width_to_remove_per_item = (count_same_width < count && items[count_same_width].Width >= 0.0f) ? (items[0].Width - items[count_same_width].Width) : (items[0].Width - 1.0f);
        if (max_width_to_remove_per_item <= 0.0f)
            break;
        float width_to_remove_per_item = ImMin(width_excess / count_same_width, max_width_to_remove_per_item);
        for (int item_n = 0; item_n < count_same_width; item_n++)
            items[item_n].Width -= width_to_remove_per_item;
        width_excess -= width_to_remove_per_item * count_same_width;
    }

    // Round width and redistribute remainder left-to-right (could make it an option of the function?)
    // Ensure that e.g. the right-most tab of a shrunk tab-bar always reaches exactly at the same distance from the right-most edge of the tab bar separator.
    width_excess = 0.0f;
    for (int n = 0; n < count; n++)
    {
        float width_rounded = ImFloor(items[n].Width);
        width_excess += items[n].Width - width_rounded;
        items[n].Width = width_rounded;
    }
    if (width_excess > 0.0f)
        for (int n = 0; n < count; n++)
            if (items[n].Index < (int)(width_excess + 0.01f))
                items[n].Width += 1.0f;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ComboBox
//-------------------------------------------------------------------------
// - BeginCombo()
// - EndCombo()
// - Combo()
//-------------------------------------------------------------------------

static float CalcMaxPopupHeightFromItemCount(int items_count)
{
    ImGuiContext& g = *GImGui;
    if (items_count <= 0)
        return FLT_MAX;
    return (g.FontSize + g.Style.ItemSpacing.y) * items_count - g.Style.ItemSpacing.y + (g.Style.WindowPadding.y * 2);
}

bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)
{
    // Always consume the SetNextWindowSizeConstraint() call in our early return paths
    ImGuiContext& g = *GImGui;
    bool has_window_size_constraint = (g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSizeConstraint) != 0;
    g.NextWindowData.Flags &= ~ImGuiNextWindowDataFlags_HasSizeConstraint;

    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT((flags & (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)) != (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)); // Can't use both flags together

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const float arrow_size = (flags & ImGuiComboFlags_NoArrowButton) ? 0.0f : GetFrameHeight();
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const float expected_w = CalcItemWidth();
    const float w = (flags & ImGuiComboFlags_NoPreview) ? arrow_size : expected_w;
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(frame_bb, id, &hovered, &held);
    bool popup_open = IsPopupOpen(id, ImGuiPopupFlags_None);

    const ImU32 frame_col = GetColorU32(hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    const float value_x2 = ImMax(frame_bb.Min.x, frame_bb.Max.x - arrow_size);
    RenderNavHighlight(frame_bb, id);
    if (!(flags & ImGuiComboFlags_NoPreview))
        window->DrawList->AddRectFilled(frame_bb.Min, ImVec2(value_x2, frame_bb.Max.y), frame_col, style.FrameRounding, (flags & ImGuiComboFlags_NoArrowButton) ? ImDrawFlags_RoundCornersAll : ImDrawFlags_RoundCornersLeft);
    if (!(flags & ImGuiComboFlags_NoArrowButton))
    {
        ImU32 bg_col = GetColorU32((popup_open || hovered) ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
        ImU32 text_col = GetColorU32(ImGuiCol_Text);
        window->DrawList->AddRectFilled(ImVec2(value_x2, frame_bb.Min.y), frame_bb.Max, bg_col, style.FrameRounding, (w <= arrow_size) ? ImDrawFlags_RoundCornersAll : ImDrawFlags_RoundCornersRight);
        if (value_x2 + arrow_size - style.FramePadding.x <= frame_bb.Max.x)
            RenderArrow(window->DrawList, ImVec2(value_x2 + style.FramePadding.y, frame_bb.Min.y + style.FramePadding.y), text_col, ImGuiDir_Down, 1.0f);
    }
    RenderFrameBorder(frame_bb.Min, frame_bb.Max, style.FrameRounding);
    if (preview_value != NULL && !(flags & ImGuiComboFlags_NoPreview))
    {
        ImVec2 preview_pos = frame_bb.Min + style.FramePadding;
        if (g.LogEnabled)
            LogSetNextTextDecoration("{", "}");
        RenderTextClipped(preview_pos, ImVec2(value_x2, frame_bb.Max.y), preview_value, NULL, NULL, ImVec2(0.0f, 0.0f));
    }
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if ((pressed || g.NavActivateId == id) && !popup_open)
    {
        if (window->DC.NavLayerCurrent == 0)
            window->NavLastIds[0] = id;
        OpenPopupEx(id, ImGuiPopupFlags_None);
        popup_open = true;
    }

    if (!popup_open)
        return false;

    if (has_window_size_constraint)
    {
        g.NextWindowData.Flags |= ImGuiNextWindowDataFlags_HasSizeConstraint;
        g.NextWindowData.SizeConstraintRect.Min.x = ImMax(g.NextWindowData.SizeConstraintRect.Min.x, w);
    }
    else
    {
        if ((flags & ImGuiComboFlags_HeightMask_) == 0)
            flags |= ImGuiComboFlags_HeightRegular;
        IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiComboFlags_HeightMask_));    // Only one
        int popup_max_height_in_items = -1;
        if (flags & ImGuiComboFlags_HeightRegular)     popup_max_height_in_items = 8;
        else if (flags & ImGuiComboFlags_HeightSmall)  popup_max_height_in_items = 4;
        else if (flags & ImGuiComboFlags_HeightLarge)  popup_max_height_in_items = 20;
        SetNextWindowSizeConstraints(ImVec2(w, 0.0f), ImVec2(FLT_MAX, CalcMaxPopupHeightFromItemCount(popup_max_height_in_items)));
    }

    char name[16];
    ImFormatString(name, IM_ARRAYSIZE(name), "##Combo_%02d", g.BeginPopupStack.Size); // Recycle windows based on depth

    // Position the window given a custom constraint (peak into expected window size so we can position it)
    // This might be easier to express with an hypothetical SetNextWindowPosConstraints() function.
    if (ImGuiWindow* popup_window = FindWindowByName(name))
        if (popup_window->WasActive)
        {
            // Always override 'AutoPosLastDirection' to not leave a chance for a past value to affect us.
            ImVec2 size_expected = CalcWindowNextAutoFitSize(popup_window);
            if (flags & ImGuiComboFlags_PopupAlignLeft)
                popup_window->AutoPosLastDirection = ImGuiDir_Left; // "Below, Toward Left"
            else
                popup_window->AutoPosLastDirection = ImGuiDir_Down; // "Below, Toward Right (default)"
            ImRect r_outer = GetWindowAllowedExtentRect(popup_window);
            ImVec2 pos = FindBestWindowPosForPopupEx(frame_bb.GetBL(), size_expected, &popup_window->AutoPosLastDirection, r_outer, frame_bb, ImGuiPopupPositionPolicy_ComboBox);
            SetNextWindowPos(pos);
        }

    // We don't use BeginPopupEx() solely because we have a custom name string, which we could make an argument to BeginPopupEx()
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_Popup | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoMove;

    // Horizontally align ourselves with the framed text
    PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(style.FramePadding.x, style.WindowPadding.y));
    bool ret = Begin(name, NULL, window_flags);
    PopStyleVar();
    if (!ret)
    {
        EndPopup();
        IM_ASSERT(0);   // This should never happen as we tested for IsPopupOpen() above
        return false;
    }
    return true;
}

void ImGui::EndCombo()
{
    EndPopup();
}

// Getter for the old Combo() API: const char*[]
static bool Items_ArrayGetter(void* data, int idx, const char** out_text)
{
    const char* const* items = (const char* const*)data;
    if (out_text)
        *out_text = items[idx];
    return true;
}

// Getter for the old Combo() API: "item1\0item2\0item3\0"
static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)
{
    // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
    const char* items_separated_by_zeros = (const char*)data;
    int items_count = 0;
    const char* p = items_separated_by_zeros;
    while (*p)
    {
        if (idx == items_count)
            break;
        p += strlen(p) + 1;
        items_count++;
    }
    if (!*p)
        return false;
    if (out_text)
        *out_text = p;
    return true;
}

// Old API, prefer using BeginCombo() nowadays if you can.
bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items)
{
    ImGuiContext& g = *GImGui;

    // Call the getter to obtain the preview string which is a parameter to BeginCombo()
    const char* preview_value = NULL;
    if (*current_item >= 0 && *current_item < items_count)
        items_getter(data, *current_item, &preview_value);

    // The old Combo() API exposed "popup_max_height_in_items". The new more general BeginCombo() API doesn't have/need it, but we emulate it here.
    if (popup_max_height_in_items != -1 && !(g.NextWindowData.Flags & ImGuiNextWindowDataFlags_HasSizeConstraint))
        SetNextWindowSizeConstraints(ImVec2(0, 0), ImVec2(FLT_MAX, CalcMaxPopupHeightFromItemCount(popup_max_height_in_items)));

    if (!BeginCombo(label, preview_value, ImGuiComboFlags_None))
        return false;

    // Display items
    // FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)
    bool value_changed = false;
    for (int i = 0; i < items_count; i++)
    {
        PushID((void*)(intptr_t)i);
        const bool item_selected = (i == *current_item);
        const char* item_text;
        if (!items_getter(data, i, &item_text))
            item_text = "*Unknown item*";
        if (Selectable(item_text, item_selected))
        {
            value_changed = true;
            *current_item = i;
        }
        if (item_selected)
            SetItemDefaultFocus();
        PopID();
    }

    EndCombo();
    if (value_changed)
        MarkItemEdited(g.CurrentWindow->DC.LastItemId);

    return value_changed;
}

// Combo box helper allowing to pass an array of strings.
bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)
{
    const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);
    return value_changed;
}

// Combo box helper allowing to pass all items in a single string literal holding multiple zero-terminated items "item1\0item2\0"
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
{
    int items_count = 0;
    const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open
    while (*p)
    {
        p += strlen(p) + 1;
        items_count++;
    }
    bool value_changed = Combo(label, current_item, Items_SingleStringGetter, (void*)items_separated_by_zeros, items_count, height_in_items);
    return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Data Type and Data Formatting Helpers [Internal]
//-------------------------------------------------------------------------
// - PatchFormatStringFloatToInt()
// - DataTypeGetInfo()
// - DataTypeFormatString()
// - DataTypeApplyOp()
// - DataTypeApplyOpFromText()
// - DataTypeClamp()
// - GetMinimumStepAtDecimalPrecision
// - RoundScalarWithFormat<>()
//-------------------------------------------------------------------------

static const ImGuiDataTypeInfo GDataTypeInfo[] =
{
    { sizeof(char),             "S8",   "%d",   "%d"    },  // ImGuiDataType_S8
    { sizeof(unsigned char),    "U8",   "%u",   "%u"    },
    { sizeof(short),            "S16",  "%d",   "%d"    },  // ImGuiDataType_S16
    { sizeof(unsigned short),   "U16",  "%u",   "%u"    },
    { sizeof(int),              "S32",  "%d",   "%d"    },  // ImGuiDataType_S32
    { sizeof(unsigned int),     "U32",  "%u",   "%u"    },
#ifdef _MSC_VER
    { sizeof(ImS64),            "S64",  "%I64d","%I64d" },  // ImGuiDataType_S64
    { sizeof(ImU64),            "U64",  "%I64u","%I64u" },
#else
    { sizeof(ImS64),            "S64",  "%lld", "%lld"  },  // ImGuiDataType_S64
    { sizeof(ImU64),            "U64",  "%llu", "%llu"  },
#endif
    { sizeof(float),            "float", "%.3f","%f"    },  // ImGuiDataType_Float (float are promoted to double in va_arg)
    { sizeof(double),           "double","%f",  "%lf"   },  // ImGuiDataType_Double
};
IM_STATIC_ASSERT(IM_ARRAYSIZE(GDataTypeInfo) == ImGuiDataType_COUNT);

// FIXME-LEGACY: Prior to 1.61 our DragInt() function internally used floats and because of this the compile-time default value for format was "%.0f".
// Even though we changed the compile-time default, we expect users to have carried %f around, which would break the display of DragInt() calls.
// To honor backward compatibility we are rewriting the format string, unless IMGUI_DISABLE_OBSOLETE_FUNCTIONS is enabled. What could possibly go wrong?!
static const char* PatchFormatStringFloatToInt(const char* fmt)
{
    if (fmt[0] == '%' && fmt[1] == '.' && fmt[2] == '0' && fmt[3] == 'f' && fmt[4] == 0) // Fast legacy path for "%.0f" which is expected to be the most common case.
        return "%d";
    const char* fmt_start = ImParseFormatFindStart(fmt);    // Find % (if any, and ignore %%)
    const char* fmt_end = ImParseFormatFindEnd(fmt_start);  // Find end of format specifier, which itself is an exercise of confidence/recklessness (because snprintf is dependent on libc or user).
    if (fmt_end > fmt_start && fmt_end[-1] == 'f')
    {
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
        if (fmt_start == fmt && fmt_end[0] == 0)
            return "%d";
        ImGuiContext& g = *GImGui;
        ImFormatString(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), "%.*s%%d%s", (int)(fmt_start - fmt), fmt, fmt_end); // Honor leading and trailing decorations, but lose alignment/precision.
        return g.TempBuffer;
#else
        IM_ASSERT(0 && "DragInt(): Invalid format string!"); // Old versions used a default parameter of "%.0f", please replace with e.g. "%d"
#endif
    }
    return fmt;
}

const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)
{
    IM_ASSERT(data_type >= 0 && data_type < ImGuiDataType_COUNT);
    return &GDataTypeInfo[data_type];
}

int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_data, const char* format)
{
    // Signedness doesn't matter when pushing integer arguments
    if (data_type == ImGuiDataType_S32 || data_type == ImGuiDataType_U32)
        return ImFormatString(buf, buf_size, format, *(const ImU32*)p_data);
    if (data_type == ImGuiDataType_S64 || data_type == ImGuiDataType_U64)
        return ImFormatString(buf, buf_size, format, *(const ImU64*)p_data);
    if (data_type == ImGuiDataType_Float)
        return ImFormatString(buf, buf_size, format, *(const float*)p_data);
    if (data_type == ImGuiDataType_Double)
        return ImFormatString(buf, buf_size, format, *(const double*)p_data);
    if (data_type == ImGuiDataType_S8)
        return ImFormatString(buf, buf_size, format, *(const ImS8*)p_data);
    if (data_type == ImGuiDataType_U8)
        return ImFormatString(buf, buf_size, format, *(const ImU8*)p_data);
    if (data_type == ImGuiDataType_S16)
        return ImFormatString(buf, buf_size, format, *(const ImS16*)p_data);
    if (data_type == ImGuiDataType_U16)
        return ImFormatString(buf, buf_size, format, *(const ImU16*)p_data);
    IM_ASSERT(0);
    return 0;
}

void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, const void* arg2)
{
    IM_ASSERT(op == '+' || op == '-');
    switch (data_type)
    {
        case ImGuiDataType_S8:
            if (op == '+') { *(ImS8*)output  = ImAddClampOverflow(*(const ImS8*)arg1,  *(const ImS8*)arg2,  IM_S8_MIN,  IM_S8_MAX); }
            if (op == '-') { *(ImS8*)output  = ImSubClampOverflow(*(const ImS8*)arg1,  *(const ImS8*)arg2,  IM_S8_MIN,  IM_S8_MAX); }
            return;
        case ImGuiDataType_U8:
            if (op == '+') { *(ImU8*)output  = ImAddClampOverflow(*(const ImU8*)arg1,  *(const ImU8*)arg2,  IM_U8_MIN,  IM_U8_MAX); }
            if (op == '-') { *(ImU8*)output  = ImSubClampOverflow(*(const ImU8*)arg1,  *(const ImU8*)arg2,  IM_U8_MIN,  IM_U8_MAX); }
            return;
        case ImGuiDataType_S16:
            if (op == '+') { *(ImS16*)output = ImAddClampOverflow(*(const ImS16*)arg1, *(const ImS16*)arg2, IM_S16_MIN, IM_S16_MAX); }
            if (op == '-') { *(ImS16*)output = ImSubClampOverflow(*(const ImS16*)arg1, *(const ImS16*)arg2, IM_S16_MIN, IM_S16_MAX); }
            return;
        case ImGuiDataType_U16:
            if (op == '+') { *(ImU16*)output = ImAddClampOverflow(*(const ImU16*)arg1, *(const ImU16*)arg2, IM_U16_MIN, IM_U16_MAX); }
            if (op == '-') { *(ImU16*)output = ImSubClampOverflow(*(const ImU16*)arg1, *(const ImU16*)arg2, IM_U16_MIN, IM_U16_MAX); }
            return;
        case ImGuiDataType_S32:
            if (op == '+') { *(ImS32*)output = ImAddClampOverflow(*(const ImS32*)arg1, *(const ImS32*)arg2, IM_S32_MIN, IM_S32_MAX); }
            if (op == '-') { *(ImS32*)output = ImSubClampOverflow(*(const ImS32*)arg1, *(const ImS32*)arg2, IM_S32_MIN, IM_S32_MAX); }
            return;
        case ImGuiDataType_U32:
            if (op == '+') { *(ImU32*)output = ImAddClampOverflow(*(const ImU32*)arg1, *(const ImU32*)arg2, IM_U32_MIN, IM_U32_MAX); }
            if (op == '-') { *(ImU32*)output = ImSubClampOverflow(*(const ImU32*)arg1, *(const ImU32*)arg2, IM_U32_MIN, IM_U32_MAX); }
            return;
        case ImGuiDataType_S64:
            if (op == '+') { *(ImS64*)output = ImAddClampOverflow(*(const ImS64*)arg1, *(const ImS64*)arg2, IM_S64_MIN, IM_S64_MAX); }
            if (op == '-') { *(ImS64*)output = ImSubClampOverflow(*(const ImS64*)arg1, *(const ImS64*)arg2, IM_S64_MIN, IM_S64_MAX); }
            return;
        case ImGuiDataType_U64:
            if (op == '+') { *(ImU64*)output = ImAddClampOverflow(*(const ImU64*)arg1, *(const ImU64*)arg2, IM_U64_MIN, IM_U64_MAX); }
            if (op == '-') { *(ImU64*)output = ImSubClampOverflow(*(const ImU64*)arg1, *(const ImU64*)arg2, IM_U64_MIN, IM_U64_MAX); }
            return;
        case ImGuiDataType_Float:
            if (op == '+') { *(float*)output = *(const float*)arg1 + *(const float*)arg2; }
            if (op == '-') { *(float*)output = *(const float*)arg1 - *(const float*)arg2; }
            return;
        case ImGuiDataType_Double:
            if (op == '+') { *(double*)output = *(const double*)arg1 + *(const double*)arg2; }
            if (op == '-') { *(double*)output = *(const double*)arg1 - *(const double*)arg2; }
            return;
        case ImGuiDataType_COUNT: break;
    }
    IM_ASSERT(0);
}

// User can input math operators (e.g. +100) to edit a numerical values.
// NB: This is _not_ a full expression evaluator. We should probably add one and replace this dumb mess..
bool ImGui::DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* p_data, const char* format)
{
    while (ImCharIsBlankA(*buf))
        buf++;

    // We don't support '-' op because it would conflict with inputing negative value.
    // Instead you can use +-100 to subtract from an existing value
    char op = buf[0];
    if (op == '+' || op == '*' || op == '/')
    {
        buf++;
        while (ImCharIsBlankA(*buf))
            buf++;
    }
    else
    {
        op = 0;
    }
    if (!buf[0])
        return false;

    // Copy the value in an opaque buffer so we can compare at the end of the function if it changed at all.
    const ImGuiDataTypeInfo* type_info = DataTypeGetInfo(data_type);
    ImGuiDataTypeTempStorage data_backup;
    memcpy(&data_backup, p_data, type_info->Size);

    if (format == NULL)
        format = type_info->ScanFmt;

    // FIXME-LEGACY: The aim is to remove those operators and write a proper expression evaluator at some point..
    int arg1i = 0;
    if (data_type == ImGuiDataType_S32)
    {
        int* v = (int*)p_data;
        int arg0i = *v;
        float arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, format, &arg0i) < 1)
            return false;
        // Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
        if (op == '+')      { if (sscanf(buf, "%d", &arg1i)) *v = (int)(arg0i + arg1i); }                   // Add (use "+-" to subtract)
        else if (op == '*') { if (sscanf(buf, "%f", &arg1f)) *v = (int)(arg0i * arg1f); }                   // Multiply
        else if (op == '/') { if (sscanf(buf, "%f", &arg1f) && arg1f != 0.0f) *v = (int)(arg0i / arg1f); }  // Divide
        else                { if (sscanf(buf, format, &arg1i) == 1) *v = arg1i; }                           // Assign constant
    }
    else if (data_type == ImGuiDataType_Float)
    {
        // For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
        format = "%f";
        float* v = (float*)p_data;
        float arg0f = *v, arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, format, &arg0f) < 1)
            return false;
        if (sscanf(buf, format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    else if (data_type == ImGuiDataType_Double)
    {
        format = "%lf"; // scanf differentiate float/double unlike printf which forces everything to double because of ellipsis
        double* v = (double*)p_data;
        double arg0f = *v, arg1f = 0.0;
        if (op && sscanf(initial_value_buf, format, &arg0f) < 1)
            return false;
        if (sscanf(buf, format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    else if (data_type == ImGuiDataType_U32 || data_type == ImGuiDataType_S64 || data_type == ImGuiDataType_U64)
    {
        // All other types assign constant
        // We don't bother handling support for legacy operators since they are a little too crappy. Instead we will later implement a proper expression evaluator in the future.
        if (sscanf(buf, format, p_data) < 1)
            return false;
    }
    else
    {
        // Small types need a 32-bit buffer to receive the result from scanf()
        int v32;
        if (sscanf(buf, format, &v32) < 1)
            return false;
        if (data_type == ImGuiDataType_S8)
            *(ImS8*)p_data = (ImS8)ImClamp(v32, (int)IM_S8_MIN, (int)IM_S8_MAX);
        else if (data_type == ImGuiDataType_U8)
            *(ImU8*)p_data = (ImU8)ImClamp(v32, (int)IM_U8_MIN, (int)IM_U8_MAX);
        else if (data_type == ImGuiDataType_S16)
            *(ImS16*)p_data = (ImS16)ImClamp(v32, (int)IM_S16_MIN, (int)IM_S16_MAX);
        else if (data_type == ImGuiDataType_U16)
            *(ImU16*)p_data = (ImU16)ImClamp(v32, (int)IM_U16_MIN, (int)IM_U16_MAX);
        else
            IM_ASSERT(0);
    }

    return memcmp(&data_backup, p_data, type_info->Size) != 0;
}

template<typename T>
static int DataTypeCompareT(const T* lhs, const T* rhs)
{
    if (*lhs < *rhs) return -1;
    if (*lhs > *rhs) return +1;
    return 0;
}

int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)
{
    switch (data_type)
    {
    case ImGuiDataType_S8:     return DataTypeCompareT<ImS8  >((const ImS8*  )arg_1, (const ImS8*  )arg_2);
    case ImGuiDataType_U8:     return DataTypeCompareT<ImU8  >((const ImU8*  )arg_1, (const ImU8*  )arg_2);
    case ImGuiDataType_S16:    return DataTypeCompareT<ImS16 >((const ImS16* )arg_1, (const ImS16* )arg_2);
    case ImGuiDataType_U16:    return DataTypeCompareT<ImU16 >((const ImU16* )arg_1, (const ImU16* )arg_2);
    case ImGuiDataType_S32:    return DataTypeCompareT<ImS32 >((const ImS32* )arg_1, (const ImS32* )arg_2);
    case ImGuiDataType_U32:    return DataTypeCompareT<ImU32 >((const ImU32* )arg_1, (const ImU32* )arg_2);
    case ImGuiDataType_S64:    return DataTypeCompareT<ImS64 >((const ImS64* )arg_1, (const ImS64* )arg_2);
    case ImGuiDataType_U64:    return DataTypeCompareT<ImU64 >((const ImU64* )arg_1, (const ImU64* )arg_2);
    case ImGuiDataType_Float:  return DataTypeCompareT<float >((const float* )arg_1, (const float* )arg_2);
    case ImGuiDataType_Double: return DataTypeCompareT<double>((const double*)arg_1, (const double*)arg_2);
    case ImGuiDataType_COUNT:  break;
    }
    IM_ASSERT(0);
    return 0;
}

template<typename T>
static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)
{
    // Clamp, both sides are optional, return true if modified
    if (v_min && *v < *v_min) { *v = *v_min; return true; }
    if (v_max && *v > *v_max) { *v = *v_max; return true; }
    return false;
}

bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max)
{
    switch (data_type)
    {
    case ImGuiDataType_S8:     return DataTypeClampT<ImS8  >((ImS8*  )p_data, (const ImS8*  )p_min, (const ImS8*  )p_max);
    case ImGuiDataType_U8:     return DataTypeClampT<ImU8  >((ImU8*  )p_data, (const ImU8*  )p_min, (const ImU8*  )p_max);
    case ImGuiDataType_S16:    return DataTypeClampT<ImS16 >((ImS16* )p_data, (const ImS16* )p_min, (const ImS16* )p_max);
    case ImGuiDataType_U16:    return DataTypeClampT<ImU16 >((ImU16* )p_data, (const ImU16* )p_min, (const ImU16* )p_max);
    case ImGuiDataType_S32:    return DataTypeClampT<ImS32 >((ImS32* )p_data, (const ImS32* )p_min, (const ImS32* )p_max);
    case ImGuiDataType_U32:    return DataTypeClampT<ImU32 >((ImU32* )p_data, (const ImU32* )p_min, (const ImU32* )p_max);
    case ImGuiDataType_S64:    return DataTypeClampT<ImS64 >((ImS64* )p_data, (const ImS64* )p_min, (const ImS64* )p_max);
    case ImGuiDataType_U64:    return DataTypeClampT<ImU64 >((ImU64* )p_data, (const ImU64* )p_min, (const ImU64* )p_max);
    case ImGuiDataType_Float:  return DataTypeClampT<float >((float* )p_data, (const float* )p_min, (const float* )p_max);
    case ImGuiDataType_Double: return DataTypeClampT<double>((double*)p_data, (const double*)p_min, (const double*)p_max);
    case ImGuiDataType_COUNT:  break;
    }
    IM_ASSERT(0);
    return false;
}

static float GetMinimumStepAtDecimalPrecision(int decimal_precision)
{
    static const float min_steps[10] = { 1.0f, 0.1f, 0.01f, 0.001f, 0.0001f, 0.00001f, 0.000001f, 0.0000001f, 0.00000001f, 0.000000001f };
    if (decimal_precision < 0)
        return FLT_MIN;
    return (decimal_precision < IM_ARRAYSIZE(min_steps)) ? min_steps[decimal_precision] : ImPow(10.0f, (float)-decimal_precision);
}

template<typename TYPE>
static const char* ImAtoi(const char* src, TYPE* output)
{
    int negative = 0;
    if (*src == '-') { negative = 1; src++; }
    if (*src == '+') { src++; }
    TYPE v = 0;
    while (*src >= '0' && *src <= '9')
        v = (v * 10) + (*src++ - '0');
    *output = negative ? -v : v;
    return src;
}

// Sanitize format
// - Zero terminate so extra characters after format (e.g. "%f123") don't confuse atof/atoi
// - stb_sprintf.h supports several new modifiers which format numbers in a way that also makes them incompatible atof/atoi.
static void SanitizeFormatString(const char* fmt, char* fmt_out, size_t fmt_out_size)
{
    IM_UNUSED(fmt_out_size);
    const char* fmt_end = ImParseFormatFindEnd(fmt);
    IM_ASSERT((size_t)(fmt_end - fmt + 1) < fmt_out_size); // Format is too long, let us know if this happens to you!
    while (fmt < fmt_end)
    {
        char c = *(fmt++);
        if (c != '\'' && c != '$' && c != '_') // Custom flags provided by stb_sprintf.h. POSIX 2008 also supports '.
            *(fmt_out++) = c;
    }
    *fmt_out = 0; // Zero-terminate
}

template<typename TYPE, typename SIGNEDTYPE>
TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)
{
    const char* fmt_start = ImParseFormatFindStart(format);
    if (fmt_start[0] != '%' || fmt_start[1] == '%') // Don't apply if the value is not visible in the format string
        return v;

    // Sanitize format
    char fmt_sanitized[32];
    SanitizeFormatString(fmt_start, fmt_sanitized, IM_ARRAYSIZE(fmt_sanitized));
    fmt_start = fmt_sanitized;

    // Format value with our rounding, and read back
    char v_str[64];
    ImFormatString(v_str, IM_ARRAYSIZE(v_str), fmt_start, v);
    const char* p = v_str;
    while (*p == ' ')
        p++;
    if (data_type == ImGuiDataType_Float || data_type == ImGuiDataType_Double)
        v = (TYPE)ImAtof(p);
    else
        ImAtoi(p, (SIGNEDTYPE*)&v);
    return v;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: DragScalar, DragFloat, DragInt, etc.
//-------------------------------------------------------------------------
// - DragBehaviorT<>() [Internal]
// - DragBehavior() [Internal]
// - DragScalar()
// - DragScalarN()
// - DragFloat()
// - DragFloat2()
// - DragFloat3()
// - DragFloat4()
// - DragFloatRange2()
// - DragInt()
// - DragInt2()
// - DragInt3()
// - DragInt4()
// - DragIntRange2()
//-------------------------------------------------------------------------

// This is called by DragBehavior() when the widget is active (held by mouse or being manipulated with Nav controls)
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, const TYPE v_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiAxis axis = (flags & ImGuiSliderFlags_Vertical) ? ImGuiAxis_Y : ImGuiAxis_X;
    const bool is_clamped = (v_min < v_max);
    const bool is_logarithmic = (flags & ImGuiSliderFlags_Logarithmic) != 0;
    const bool is_floating_point = (data_type == ImGuiDataType_Float) || (data_type == ImGuiDataType_Double);

    // Default tweak speed
    if (v_speed == 0.0f && is_clamped && (v_max - v_min < FLT_MAX))
        v_speed = (float)((v_max - v_min) * g.DragSpeedDefaultRatio);

    // Inputs accumulates into g.DragCurrentAccum, which is flushed into the current value as soon as it makes a difference with our precision settings
    float adjust_delta = 0.0f;
    if (g.ActiveIdSource == ImGuiInputSource_Mouse && IsMousePosValid() && IsMouseDragPastThreshold(0, g.IO.MouseDragThreshold * DRAG_MOUSE_THRESHOLD_FACTOR))
    {
        adjust_delta = g.IO.MouseDelta[axis];
        if (g.IO.KeyAlt)
            adjust_delta *= 1.0f / 100.0f;
        if (g.IO.KeyShift)
            adjust_delta *= 10.0f;
    }
    else if (g.ActiveIdSource == ImGuiInputSource_Nav)
    {
        const int decimal_precision = is_floating_point ? ImParseFormatPrecision(format, 3) : 0;
        adjust_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard | ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 1.0f / 10.0f, 10.0f)[axis];
        v_speed = ImMax(v_speed, GetMinimumStepAtDecimalPrecision(decimal_precision));
    }
    adjust_delta *= v_speed;

    // For vertical drag we currently assume that Up=higher value (like we do with vertical sliders). This may become a parameter.
    if (axis == ImGuiAxis_Y)
        adjust_delta = -adjust_delta;

    // For logarithmic use our range is effectively 0..1 so scale the delta into that range
    if (is_logarithmic && (v_max - v_min < FLT_MAX) && ((v_max - v_min) > 0.000001f)) // Epsilon to avoid /0
        adjust_delta /= (float)(v_max - v_min);

    // Clear current value on activation
    // Avoid altering values and clamping when we are _already_ past the limits and heading in the same direction, so e.g. if range is 0..255, current value is 300 and we are pushing to the right side, keep the 300.
    bool is_just_activated = g.ActiveIdIsJustActivated;
    bool is_already_past_limits_and_pushing_outward = is_clamped && ((*v >= v_max && adjust_delta > 0.0f) || (*v <= v_min && adjust_delta < 0.0f));
    if (is_just_activated || is_already_past_limits_and_pushing_outward)
    {
        g.DragCurrentAccum = 0.0f;
        g.DragCurrentAccumDirty = false;
    }
    else if (adjust_delta != 0.0f)
    {
        g.DragCurrentAccum += adjust_delta;
        g.DragCurrentAccumDirty = true;
    }

    if (!g.DragCurrentAccumDirty)
        return false;

    TYPE v_cur = *v;
    FLOATTYPE v_old_ref_for_accum_remainder = (FLOATTYPE)0.0f;

    float logarithmic_zero_epsilon = 0.0f; // Only valid when is_logarithmic is true
    const float zero_deadzone_halfsize = 0.0f; // Drag widgets have no deadzone (as it doesn't make sense)
    if (is_logarithmic)
    {
        // When using logarithmic sliders, we need to clamp to avoid hitting zero, but our choice of clamp value greatly affects slider precision. We attempt to use the specified precision to estimate a good lower bound.
        const int decimal_precision = is_floating_point ? ImParseFormatPrecision(format, 3) : 1;
        logarithmic_zero_epsilon = ImPow(0.1f, (float)decimal_precision);

        // Convert to parametric space, apply delta, convert back
        float v_old_parametric = ScaleRatioFromValueT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, v_cur, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);
        float v_new_parametric = v_old_parametric + g.DragCurrentAccum;
        v_cur = ScaleValueFromRatioT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, v_new_parametric, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);
        v_old_ref_for_accum_remainder = v_old_parametric;
    }
    else
    {
        v_cur += (SIGNEDTYPE)g.DragCurrentAccum;
    }

    // Round to user desired precision based on format string
    if (!(flags & ImGuiSliderFlags_NoRoundToFormat))
        v_cur = RoundScalarWithFormatT<TYPE, SIGNEDTYPE>(format, data_type, v_cur);

    // Preserve remainder after rounding has been applied. This also allow slow tweaking of values.
    g.DragCurrentAccumDirty = false;
    if (is_logarithmic)
    {
        // Convert to parametric space, apply delta, convert back
        float v_new_parametric = ScaleRatioFromValueT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, v_cur, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);
        g.DragCurrentAccum -= (float)(v_new_parametric - v_old_ref_for_accum_remainder);
    }
    else
    {
        g.DragCurrentAccum -= (float)((SIGNEDTYPE)v_cur - (SIGNEDTYPE)*v);
    }

    // Lose zero sign for float/double
    if (v_cur == (TYPE)-0)
        v_cur = (TYPE)0;

    // Clamp values (+ handle overflow/wrap-around for integer types)
    if (*v != v_cur && is_clamped)
    {
        if (v_cur < v_min || (v_cur > *v && adjust_delta < 0.0f && !is_floating_point))
            v_cur = v_min;
        if (v_cur > v_max || (v_cur < *v && adjust_delta > 0.0f && !is_floating_point))
            v_cur = v_max;
    }

    // Apply result
    if (*v == v_cur)
        return false;
    *v = v_cur;
    return true;
}

bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    // Read imgui.cpp "API BREAKING CHANGES" section for 1.78 if you hit this assert.
    IM_ASSERT((flags == 1 || (flags & ImGuiSliderFlags_InvalidMask_) == 0) && "Invalid ImGuiSliderFlags flags! Has the 'float power' argument been mistakenly cast to flags? Call function with ImGuiSliderFlags_Logarithmic flags instead.");

    ImGuiContext& g = *GImGui;
    if (g.ActiveId == id)
    {
        if (g.ActiveIdSource == ImGuiInputSource_Mouse && !g.IO.MouseDown[0])
            ClearActiveID();
        else if (g.ActiveIdSource == ImGuiInputSource_Nav && g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            ClearActiveID();
    }
    if (g.ActiveId != id)
        return false;
    if ((g.CurrentItemFlags & ImGuiItemFlags_ReadOnly) || (flags & ImGuiSliderFlags_ReadOnly))
        return false;

    switch (data_type)
    {
    case ImGuiDataType_S8:     { ImS32 v32 = (ImS32)*(ImS8*)p_v;  bool r = DragBehaviorT<ImS32, ImS32, float>(ImGuiDataType_S32, &v32, v_speed, p_min ? *(const ImS8*) p_min : IM_S8_MIN,  p_max ? *(const ImS8*)p_max  : IM_S8_MAX,  format, flags); if (r) *(ImS8*)p_v = (ImS8)v32; return r; }
    case ImGuiDataType_U8:     { ImU32 v32 = (ImU32)*(ImU8*)p_v;  bool r = DragBehaviorT<ImU32, ImS32, float>(ImGuiDataType_U32, &v32, v_speed, p_min ? *(const ImU8*) p_min : IM_U8_MIN,  p_max ? *(const ImU8*)p_max  : IM_U8_MAX,  format, flags); if (r) *(ImU8*)p_v = (ImU8)v32; return r; }
    case ImGuiDataType_S16:    { ImS32 v32 = (ImS32)*(ImS16*)p_v; bool r = DragBehaviorT<ImS32, ImS32, float>(ImGuiDataType_S32, &v32, v_speed, p_min ? *(const ImS16*)p_min : IM_S16_MIN, p_max ? *(const ImS16*)p_max : IM_S16_MAX, format, flags); if (r) *(ImS16*)p_v = (ImS16)v32; return r; }
    case ImGuiDataType_U16:    { ImU32 v32 = (ImU32)*(ImU16*)p_v; bool r = DragBehaviorT<ImU32, ImS32, float>(ImGuiDataType_U32, &v32, v_speed, p_min ? *(const ImU16*)p_min : IM_U16_MIN, p_max ? *(const ImU16*)p_max : IM_U16_MAX, format, flags); if (r) *(ImU16*)p_v = (ImU16)v32; return r; }
    case ImGuiDataType_S32:    return DragBehaviorT<ImS32, ImS32, float >(data_type, (ImS32*)p_v,  v_speed, p_min ? *(const ImS32* )p_min : IM_S32_MIN, p_max ? *(const ImS32* )p_max : IM_S32_MAX, format, flags);
    case ImGuiDataType_U32:    return DragBehaviorT<ImU32, ImS32, float >(data_type, (ImU32*)p_v,  v_speed, p_min ? *(const ImU32* )p_min : IM_U32_MIN, p_max ? *(const ImU32* )p_max : IM_U32_MAX, format, flags);
    case ImGuiDataType_S64:    return DragBehaviorT<ImS64, ImS64, double>(data_type, (ImS64*)p_v,  v_speed, p_min ? *(const ImS64* )p_min : IM_S64_MIN, p_max ? *(const ImS64* )p_max : IM_S64_MAX, format, flags);
    case ImGuiDataType_U64:    return DragBehaviorT<ImU64, ImS64, double>(data_type, (ImU64*)p_v,  v_speed, p_min ? *(const ImU64* )p_min : IM_U64_MIN, p_max ? *(const ImU64* )p_max : IM_U64_MAX, format, flags);
    case ImGuiDataType_Float:  return DragBehaviorT<float, float, float >(data_type, (float*)p_v,  v_speed, p_min ? *(const float* )p_min : -FLT_MAX,   p_max ? *(const float* )p_max : FLT_MAX,    format, flags);
    case ImGuiDataType_Double: return DragBehaviorT<double,double,double>(data_type, (double*)p_v, v_speed, p_min ? *(const double*)p_min : -DBL_MAX,   p_max ? *(const double*)p_max : DBL_MAX,    format, flags);
    case ImGuiDataType_COUNT:  break;
    }
    IM_ASSERT(0);
    return false;
}

// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a Drag widget, p_min and p_max are optional.
// Read code of e.g. DragFloat(), DragInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    const bool temp_input_allowed = (flags & ImGuiSliderFlags_NoInput) == 0;
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb, temp_input_allowed ? ImGuiItemAddFlags_Focusable : 0))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    // Tabbing or CTRL-clicking on Drag turns it into an InputText
    const bool hovered = ItemHoverable(frame_bb, id);
    bool temp_input_is_active = temp_input_allowed && TempInputIsActive(id);
    if (!temp_input_is_active)
    {
        const bool focus_requested = temp_input_allowed && (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_Focused) != 0;
        const bool clicked = (hovered && g.IO.MouseClicked[0]);
        const bool double_clicked = (hovered && g.IO.MouseDoubleClicked[0]);
        if (focus_requested || clicked || double_clicked || g.NavActivateId == id || g.NavInputId == id)
        {
            SetActiveID(id, window);
            SetFocusID(id, window);
            FocusWindow(window);
            g.ActiveIdUsingNavDirMask = (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
            if (temp_input_allowed && (focus_requested || (clicked && g.IO.KeyCtrl) || double_clicked || g.NavInputId == id))
                temp_input_is_active = true;
        }
        // Experimental: simple click (without moving) turns Drag into an InputText
        // FIXME: Currently polling ImGuiConfigFlags_IsTouchScreen, may either poll an hypothetical ImGuiBackendFlags_HasKeyboard and/or an explicit drag settings.
        if (g.IO.ConfigDragClickToInputText && temp_input_allowed && !temp_input_is_active)
            if (g.ActiveId == id && hovered && g.IO.MouseReleased[0] && !IsMouseDragPastThreshold(0, g.IO.MouseDragThreshold * DRAG_MOUSE_THRESHOLD_FACTOR))
            {
                g.NavInputId = id;
                temp_input_is_active = true;
            }
    }

    if (temp_input_is_active)
    {
        // Only clamp CTRL+Click input when ImGuiSliderFlags_AlwaysClamp is set
        const bool is_clamp_input = (flags & ImGuiSliderFlags_AlwaysClamp) != 0 && (p_min == NULL || p_max == NULL || DataTypeCompare(data_type, p_min, p_max) < 0);
        return TempInputScalar(frame_bb, id, label, data_type, p_data, format, is_clamp_input ? p_min : NULL, is_clamp_input ? p_max : NULL);
    }

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

    // Drag behavior
    const bool value_changed = DragBehavior(id, data_type, p_data, v_speed, p_min, p_max, format, flags);
    if (value_changed)
        MarkItemEdited(id);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    if (g.LogEnabled)
        LogSetNextTextDecoration("{", "}");
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return value_changed;
}

bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= DragScalar("", data_type, p_data, v_speed, p_min, p_max, format, flags);
        PopID();
        PopItemWidth();
        p_data = (void*)((char*)p_data + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalar(label, ImGuiDataType_Float, v, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 2, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 3, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_Float, v, 4, v_speed, &v_min, &v_max, format, flags);
}

// NB: You likely want to specify the ImGuiSliderFlags_AlwaysClamp when using this.
bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* format, const char* format_max, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2, CalcItemWidth());

    float min_min = (v_min >= v_max) ? -FLT_MAX : v_min;
    float min_max = (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max);
    ImGuiSliderFlags min_flags = flags | ((min_min == min_max) ? ImGuiSliderFlags_ReadOnly : 0);
    bool value_changed = DragScalar("##min", ImGuiDataType_Float, v_current_min, v_speed, &min_min, &min_max, format, min_flags);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    float max_min = (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min);
    float max_max = (v_min >= v_max) ? FLT_MAX : v_max;
    ImGuiSliderFlags max_flags = flags | ((max_min == max_max) ? ImGuiSliderFlags_ReadOnly : 0);
    value_changed |= DragScalar("##max", ImGuiDataType_Float, v_current_max, v_speed, &max_min, &max_max, format_max ? format_max : format, max_flags);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextEx(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();
    return value_changed;
}

// NB: v_speed is float to allow adjusting the drag speed with more precision
bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalar(label, ImGuiDataType_S32, v, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 2, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 3, v_speed, &v_min, &v_max, format, flags);
}

bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return DragScalarN(label, ImGuiDataType_S32, v, 4, v_speed, &v_min, &v_max, format, flags);
}

// NB: You likely want to specify the ImGuiSliderFlags_AlwaysClamp when using this.
bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* format, const char* format_max, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2, CalcItemWidth());

    int min_min = (v_min >= v_max) ? INT_MIN : v_min;
    int min_max = (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max);
    ImGuiSliderFlags min_flags = flags | ((min_min == min_max) ? ImGuiSliderFlags_ReadOnly : 0);
    bool value_changed = DragInt("##min", v_current_min, v_speed, min_min, min_max, format, min_flags);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    int max_min = (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min);
    int max_max = (v_min >= v_max) ? INT_MAX : v_max;
    ImGuiSliderFlags max_flags = flags | ((max_min == max_max) ? ImGuiSliderFlags_ReadOnly : 0);
    value_changed |= DragInt("##max", v_current_max, v_speed, max_min, max_max, format_max ? format_max : format, max_flags);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextEx(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Obsolete versions with power parameter. See https://github.com/ocornut/imgui/issues/3361 for details.
bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiSliderFlags drag_flags = ImGuiSliderFlags_None;
    if (power != 1.0f)
    {
        IM_ASSERT(power == 1.0f && "Call function with ImGuiSliderFlags_Logarithmic flags instead of using the old 'float power' function!");
        IM_ASSERT(p_min != NULL && p_max != NULL);  // When using a power curve the drag needs to have known bounds
        drag_flags |= ImGuiSliderFlags_Logarithmic;   // Fallback for non-asserting paths
    }
    return DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, drag_flags);
}

bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiSliderFlags drag_flags = ImGuiSliderFlags_None;
    if (power != 1.0f)
    {
        IM_ASSERT(power == 1.0f && "Call function with ImGuiSliderFlags_Logarithmic flags instead of using the old 'float power' function!");
        IM_ASSERT(p_min != NULL && p_max != NULL);  // When using a power curve the drag needs to have known bounds
        drag_flags |= ImGuiSliderFlags_Logarithmic;   // Fallback for non-asserting paths
    }
    return DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, drag_flags);
}

#endif // IMGUI_DISABLE_OBSOLETE_FUNCTIONS

//-------------------------------------------------------------------------
// [SECTION] Widgets: SliderScalar, SliderFloat, SliderInt, etc.
//-------------------------------------------------------------------------
// - ScaleRatioFromValueT<> [Internal]
// - ScaleValueFromRatioT<> [Internal]
// - SliderBehaviorT<>() [Internal]
// - SliderBehavior() [Internal]
// - SliderScalar()
// - SliderScalarN()
// - SliderFloat()
// - SliderFloat2()
// - SliderFloat3()
// - SliderFloat4()
// - SliderAngle()
// - SliderInt()
// - SliderInt2()
// - SliderInt3()
// - SliderInt4()
// - VSliderScalar()
// - VSliderFloat()
// - VSliderInt()
//-------------------------------------------------------------------------

// Convert a value v in the output space of a slider into a parametric position on the slider itself (the logical opposite of ScaleValueFromRatioT)
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_halfsize)
{
    if (v_min == v_max)
        return 0.0f;
    IM_UNUSED(data_type);

    const TYPE v_clamped = (v_min < v_max) ? ImClamp(v, v_min, v_max) : ImClamp(v, v_max, v_min);
    if (is_logarithmic)
    {
        bool flipped = v_max < v_min;

        if (flipped) // Handle the case where the range is backwards
            ImSwap(v_min, v_max);

        // Fudge min/max to avoid getting close to log(0)
        FLOATTYPE v_min_fudged = (ImAbs((FLOATTYPE)v_min) < logarithmic_zero_epsilon) ? ((v_min < 0.0f) ? -logarithmic_zero_epsilon : logarithmic_zero_epsilon) : (FLOATTYPE)v_min;
        FLOATTYPE v_max_fudged = (ImAbs((FLOATTYPE)v_max) < logarithmic_zero_epsilon) ? ((v_max < 0.0f) ? -logarithmic_zero_epsilon : logarithmic_zero_epsilon) : (FLOATTYPE)v_max;

        // Awkward special cases - we need ranges of the form (-100 .. 0) to convert to (-100 .. -epsilon), not (-100 .. epsilon)
        if ((v_min == 0.0f) && (v_max < 0.0f))
            v_min_fudged = -logarithmic_zero_epsilon;
        else if ((v_max == 0.0f) && (v_min < 0.0f))
            v_max_fudged = -logarithmic_zero_epsilon;

        float result;

        if (v_clamped <= v_min_fudged)
            result = 0.0f; // Workaround for values that are in-range but below our fudge
        else if (v_clamped >= v_max_fudged)
            result = 1.0f; // Workaround for values that are in-range but above our fudge
        else if ((v_min * v_max) < 0.0f) // Range crosses zero, so split into two portions
        {
            float zero_point_center = (-(float)v_min) / ((float)v_max - (float)v_min); // The zero point in parametric space.  There's an argument we should take the logarithmic nature into account when calculating this, but for now this should do (and the most common case of a symmetrical range works fine)
            float zero_point_snap_L = zero_point_center - zero_deadzone_halfsize;
            float zero_point_snap_R = zero_point_center + zero_deadzone_halfsize;
            if (v == 0.0f)
                result = zero_point_center; // Special case for exactly zero
            else if (v < 0.0f)
                result = (1.0f - (float)(ImLog(-(FLOATTYPE)v_clamped / logarithmic_zero_epsilon) / ImLog(-v_min_fudged / logarithmic_zero_epsilon))) * zero_point_snap_L;
            else
                result = zero_point_snap_R + ((float)(ImLog((FLOATTYPE)v_clamped / logarithmic_zero_epsilon) / ImLog(v_max_fudged / logarithmic_zero_epsilon)) * (1.0f - zero_point_snap_R));
        }
        else if ((v_min < 0.0f) || (v_max < 0.0f)) // Entirely negative slider
            result = 1.0f - (float)(ImLog(-(FLOATTYPE)v_clamped / -v_max_fudged) / ImLog(-v_min_fudged / -v_max_fudged));
        else
            result = (float)(ImLog((FLOATTYPE)v_clamped / v_min_fudged) / ImLog(v_max_fudged / v_min_fudged));

        return flipped ? (1.0f - result) : result;
    }

    // Linear slider
    return (float)((FLOATTYPE)(SIGNEDTYPE)(v_clamped - v_min) / (FLOATTYPE)(SIGNEDTYPE)(v_max - v_min));
}

// Convert a parametric position on a slider into a value v in the output space (the logical opposite of ScaleRatioFromValueT)
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
TYPE ImGui::ScaleValueFromRatioT(ImGuiDataType data_type, float t, TYPE v_min, TYPE v_max, bool is_logarithmic, float logarithmic_zero_epsilon, float zero_deadzone_halfsize)
{
    if (v_min == v_max)
        return v_min;
    const bool is_floating_point = (data_type == ImGuiDataType_Float) || (data_type == ImGuiDataType_Double);

    TYPE result;
    if (is_logarithmic)
    {
        // We special-case the extents because otherwise our fudging can lead to "mathematically correct" but non-intuitive behaviors like a fully-left slider not actually reaching the minimum value
        if (t <= 0.0f)
            result = v_min;
        else if (t >= 1.0f)
            result = v_max;
        else
        {
            bool flipped = v_max < v_min; // Check if range is "backwards"

            // Fudge min/max to avoid getting silly results close to zero
            FLOATTYPE v_min_fudged = (ImAbs((FLOATTYPE)v_min) < logarithmic_zero_epsilon) ? ((v_min < 0.0f) ? -logarithmic_zero_epsilon : logarithmic_zero_epsilon) : (FLOATTYPE)v_min;
            FLOATTYPE v_max_fudged = (ImAbs((FLOATTYPE)v_max) < logarithmic_zero_epsilon) ? ((v_max < 0.0f) ? -logarithmic_zero_epsilon : logarithmic_zero_epsilon) : (FLOATTYPE)v_max;

            if (flipped)
                ImSwap(v_min_fudged, v_max_fudged);

            // Awkward special case - we need ranges of the form (-100 .. 0) to convert to (-100 .. -epsilon), not (-100 .. epsilon)
            if ((v_max == 0.0f) && (v_min < 0.0f))
                v_max_fudged = -logarithmic_zero_epsilon;

            float t_with_flip = flipped ? (1.0f - t) : t; // t, but flipped if necessary to account for us flipping the range

            if ((v_min * v_max) < 0.0f) // Range crosses zero, so we have to do this in two parts
            {
                float zero_point_center = (-(float)ImMin(v_min, v_max)) / ImAbs((float)v_max - (float)v_min); // The zero point in parametric space
                float zero_point_snap_L = zero_point_center - zero_deadzone_halfsize;
                float zero_point_snap_R = zero_point_center + zero_deadzone_halfsize;
                if (t_with_flip >= zero_point_snap_L && t_with_flip <= zero_point_snap_R)
                    result = (TYPE)0.0f; // Special case to make getting exactly zero possible (the epsilon prevents it otherwise)
                else if (t_with_flip < zero_point_center)
                    result = (TYPE)-(logarithmic_zero_epsilon * ImPow(-v_min_fudged / logarithmic_zero_epsilon, (FLOATTYPE)(1.0f - (t_with_flip / zero_point_snap_L))));
                else
                    result = (TYPE)(logarithmic_zero_epsilon * ImPow(v_max_fudged / logarithmic_zero_epsilon, (FLOATTYPE)((t_with_flip - zero_point_snap_R) / (1.0f - zero_point_snap_R))));
            }
            else if ((v_min < 0.0f) || (v_max < 0.0f)) // Entirely negative slider
                result = (TYPE)-(-v_max_fudged * ImPow(-v_min_fudged / -v_max_fudged, (FLOATTYPE)(1.0f - t_with_flip)));
            else
                result = (TYPE)(v_min_fudged * ImPow(v_max_fudged / v_min_fudged, (FLOATTYPE)t_with_flip));
        }
    }
    else
    {
        // Linear slider
        if (is_floating_point)
        {
            result = ImLerp(v_min, v_max, t);
        }
        else
        {
            // - For integer values we want the clicking position to match the grab box so we round above
            //   This code is carefully tuned to work with large values (e.g. high ranges of U64) while preserving this property..
            // - Not doing a *1.0 multiply at the end of a range as it tends to be lossy. While absolute aiming at a large s64/u64
            //   range is going to be imprecise anyway, with this check we at least make the edge values matches expected limits.
            if (t < 1.0)
            {
                FLOATTYPE v_new_off_f = (SIGNEDTYPE)(v_max - v_min) * t;
                result = (TYPE)((SIGNEDTYPE)v_min + (SIGNEDTYPE)(v_new_off_f + (FLOATTYPE)(v_min > v_max ? -0.5 : 0.5)));
            }
            else
            {
                result = v_max;
            }
        }
    }

    return result;
}

// FIXME: Move more of the code into SliderBehavior()
template<typename TYPE, typename SIGNEDTYPE, typename FLOATTYPE>
bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, const TYPE v_min, const TYPE v_max, const char* format, ImGuiSliderFlags flags, ImRect* out_grab_bb)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const ImGuiAxis axis = (flags & ImGuiSliderFlags_Vertical) ? ImGuiAxis_Y : ImGuiAxis_X;
    const bool is_logarithmic = (flags & ImGuiSliderFlags_Logarithmic) != 0;
    const bool is_floating_point = (data_type == ImGuiDataType_Float) || (data_type == ImGuiDataType_Double);

    const float grab_padding = 2.0f;
    const float slider_sz = (bb.Max[axis] - bb.Min[axis]) - grab_padding * 2.0f;
    float grab_sz = style.GrabMinSize;
    SIGNEDTYPE v_range = (v_min < v_max ? v_max - v_min : v_min - v_max);
    if (!is_floating_point && v_range >= 0)                                             // v_range < 0 may happen on integer overflows
        grab_sz = ImMax((float)(slider_sz / (v_range + 1)), style.GrabMinSize);  // For integer sliders: if possible have the grab size represent 1 unit
    grab_sz = ImMin(grab_sz, slider_sz);
    const float slider_usable_sz = slider_sz - grab_sz;
    const float slider_usable_pos_min = bb.Min[axis] + grab_padding + grab_sz * 0.5f;
    const float slider_usable_pos_max = bb.Max[axis] - grab_padding - grab_sz * 0.5f;

    float logarithmic_zero_epsilon = 0.0f; // Only valid when is_logarithmic is true
    float zero_deadzone_halfsize = 0.0f; // Only valid when is_logarithmic is true
    if (is_logarithmic)
    {
        // When using logarithmic sliders, we need to clamp to avoid hitting zero, but our choice of clamp value greatly affects slider precision. We attempt to use the specified precision to estimate a good lower bound.
        const int decimal_precision = is_floating_point ? ImParseFormatPrecision(format, 3) : 1;
        logarithmic_zero_epsilon = ImPow(0.1f, (float)decimal_precision);
        zero_deadzone_halfsize = (style.LogSliderDeadzone * 0.5f) / ImMax(slider_usable_sz, 1.0f);
    }

    // Process interacting with the slider
    bool value_changed = false;
    if (g.ActiveId == id)
    {
        bool set_new_value = false;
        float clicked_t = 0.0f;
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (!g.IO.MouseDown[0])
            {
                ClearActiveID();
            }
            else
            {
                const float mouse_abs_pos = g.IO.MousePos[axis];
                clicked_t = (slider_usable_sz > 0.0f) ? ImClamp((mouse_abs_pos - slider_usable_pos_min) / slider_usable_sz, 0.0f, 1.0f) : 0.0f;
                if (axis == ImGuiAxis_Y)
                    clicked_t = 1.0f - clicked_t;
                set_new_value = true;
            }
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            if (g.ActiveIdIsJustActivated)
            {
                g.SliderCurrentAccum = 0.0f; // Reset any stored nav delta upon activation
                g.SliderCurrentAccumDirty = false;
            }

            const ImVec2 input_delta2 = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard | ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 0.0f, 0.0f);
            float input_delta = (axis == ImGuiAxis_X) ? input_delta2.x : -input_delta2.y;
            if (input_delta != 0.0f)
            {
                const int decimal_precision = is_floating_point ? ImParseFormatPrecision(format, 3) : 0;
                if (decimal_precision > 0)
                {
                    input_delta /= 100.0f;    // Gamepad/keyboard tweak speeds in % of slider bounds
                    if (IsNavInputDown(ImGuiNavInput_TweakSlow))
                        input_delta /= 10.0f;
                }
                else
                {
                    if ((v_range >= -100.0f && v_range <= 100.0f) || IsNavInputDown(ImGuiNavInput_TweakSlow))
                        input_delta = ((input_delta < 0.0f) ? -1.0f : +1.0f) / (float)v_range; // Gamepad/keyboard tweak speeds in integer steps
                    else
                        input_delta /= 100.0f;
                }
                if (IsNavInputDown(ImGuiNavInput_TweakFast))
                    input_delta *= 10.0f;

                g.SliderCurrentAccum += input_delta;
                g.SliderCurrentAccumDirty = true;
            }

            float delta = g.SliderCurrentAccum;
            if (g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            {
                ClearActiveID();
            }
            else if (g.SliderCurrentAccumDirty)
            {
                clicked_t = ScaleRatioFromValueT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, *v, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);

                if ((clicked_t >= 1.0f && delta > 0.0f) || (clicked_t <= 0.0f && delta < 0.0f)) // This is to avoid applying the saturation when already past the limits
                {
                    set_new_value = false;
                    g.SliderCurrentAccum = 0.0f; // If pushing up against the limits, don't continue to accumulate
                }
                else
                {
                    set_new_value = true;
                    float old_clicked_t = clicked_t;
                    clicked_t = ImSaturate(clicked_t + delta);

                    // Calculate what our "new" clicked_t will be, and thus how far we actually moved the slider, and subtract this from the accumulator
                    TYPE v_new = ScaleValueFromRatioT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, clicked_t, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);
                    if (!(flags & ImGuiSliderFlags_NoRoundToFormat))
                        v_new = RoundScalarWithFormatT<TYPE, SIGNEDTYPE>(format, data_type, v_new);
                    float new_clicked_t = ScaleRatioFromValueT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, v_new, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);

                    if (delta > 0)
                        g.SliderCurrentAccum -= ImMin(new_clicked_t - old_clicked_t, delta);
                    else
                        g.SliderCurrentAccum -= ImMax(new_clicked_t - old_clicked_t, delta);
                }

                g.SliderCurrentAccumDirty = false;
            }
        }

        if (set_new_value)
        {
            TYPE v_new = ScaleValueFromRatioT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, clicked_t, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);

            // Round to user desired precision based on format string
            if (!(flags & ImGuiSliderFlags_NoRoundToFormat))
                v_new = RoundScalarWithFormatT<TYPE, SIGNEDTYPE>(format, data_type, v_new);

            // Apply result
            if (*v != v_new)
            {
                *v = v_new;
                value_changed = true;
            }
        }
    }

    if (slider_sz < 1.0f)
    {
        *out_grab_bb = ImRect(bb.Min, bb.Min);
    }
    else
    {
        // Output grab position so it can be displayed by the caller
        float grab_t = ScaleRatioFromValueT<TYPE, SIGNEDTYPE, FLOATTYPE>(data_type, *v, v_min, v_max, is_logarithmic, logarithmic_zero_epsilon, zero_deadzone_halfsize);
        if (axis == ImGuiAxis_Y)
            grab_t = 1.0f - grab_t;
        const float grab_pos = ImLerp(slider_usable_pos_min, slider_usable_pos_max, grab_t);
        if (axis == ImGuiAxis_X)
            *out_grab_bb = ImRect(grab_pos - grab_sz * 0.5f, bb.Min.y + grab_padding, grab_pos + grab_sz * 0.5f, bb.Max.y - grab_padding);
        else
            *out_grab_bb = ImRect(bb.Min.x + grab_padding, grab_pos - grab_sz * 0.5f, bb.Max.x - grab_padding, grab_pos + grab_sz * 0.5f);
    }

    return value_changed;
}

// For 32-bit and larger types, slider bounds are limited to half the natural type range.
// So e.g. an integer Slider between INT_MAX-10 and INT_MAX will fail, but an integer Slider between INT_MAX/2-10 and INT_MAX/2 will be ok.
// It would be possible to lift that limitation with some work but it doesn't seem to be worth it for sliders.
bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags, ImRect* out_grab_bb)
{
    // Read imgui.cpp "API BREAKING CHANGES" section for 1.78 if you hit this assert.
    IM_ASSERT((flags == 1 || (flags & ImGuiSliderFlags_InvalidMask_) == 0) && "Invalid ImGuiSliderFlags flag!  Has the 'float power' argument been mistakenly cast to flags? Call function with ImGuiSliderFlags_Logarithmic flags instead.");

    ImGuiContext& g = *GImGui;
    if ((g.CurrentItemFlags & ImGuiItemFlags_ReadOnly) || (flags & ImGuiSliderFlags_ReadOnly))
        return false;

    switch (data_type)
    {
    case ImGuiDataType_S8:  { ImS32 v32 = (ImS32)*(ImS8*)p_v;  bool r = SliderBehaviorT<ImS32, ImS32, float>(bb, id, ImGuiDataType_S32, &v32, *(const ImS8*)p_min,  *(const ImS8*)p_max,  format, flags, out_grab_bb); if (r) *(ImS8*)p_v  = (ImS8)v32;  return r; }
    case ImGuiDataType_U8:  { ImU32 v32 = (ImU32)*(ImU8*)p_v;  bool r = SliderBehaviorT<ImU32, ImS32, float>(bb, id, ImGuiDataType_U32, &v32, *(const ImU8*)p_min,  *(const ImU8*)p_max,  format, flags, out_grab_bb); if (r) *(ImU8*)p_v  = (ImU8)v32;  return r; }
    case ImGuiDataType_S16: { ImS32 v32 = (ImS32)*(ImS16*)p_v; bool r = SliderBehaviorT<ImS32, ImS32, float>(bb, id, ImGuiDataType_S32, &v32, *(const ImS16*)p_min, *(const ImS16*)p_max, format, flags, out_grab_bb); if (r) *(ImS16*)p_v = (ImS16)v32; return r; }
    case ImGuiDataType_U16: { ImU32 v32 = (ImU32)*(ImU16*)p_v; bool r = SliderBehaviorT<ImU32, ImS32, float>(bb, id, ImGuiDataType_U32, &v32, *(const ImU16*)p_min, *(const ImU16*)p_max, format, flags, out_grab_bb); if (r) *(ImU16*)p_v = (ImU16)v32; return r; }
    case ImGuiDataType_S32:
        IM_ASSERT(*(const ImS32*)p_min >= IM_S32_MIN / 2 && *(const ImS32*)p_max <= IM_S32_MAX / 2);
        return SliderBehaviorT<ImS32, ImS32, float >(bb, id, data_type, (ImS32*)p_v,  *(const ImS32*)p_min,  *(const ImS32*)p_max,  format, flags, out_grab_bb);
    case ImGuiDataType_U32:
        IM_ASSERT(*(const ImU32*)p_max <= IM_U32_MAX / 2);
        return SliderBehaviorT<ImU32, ImS32, float >(bb, id, data_type, (ImU32*)p_v,  *(const ImU32*)p_min,  *(const ImU32*)p_max,  format, flags, out_grab_bb);
    case ImGuiDataType_S64:
        IM_ASSERT(*(const ImS64*)p_min >= IM_S64_MIN / 2 && *(const ImS64*)p_max <= IM_S64_MAX / 2);
        return SliderBehaviorT<ImS64, ImS64, double>(bb, id, data_type, (ImS64*)p_v,  *(const ImS64*)p_min,  *(const ImS64*)p_max,  format, flags, out_grab_bb);
    case ImGuiDataType_U64:
        IM_ASSERT(*(const ImU64*)p_max <= IM_U64_MAX / 2);
        return SliderBehaviorT<ImU64, ImS64, double>(bb, id, data_type, (ImU64*)p_v,  *(const ImU64*)p_min,  *(const ImU64*)p_max,  format, flags, out_grab_bb);
    case ImGuiDataType_Float:
        IM_ASSERT(*(const float*)p_min >= -FLT_MAX / 2.0f && *(const float*)p_max <= FLT_MAX / 2.0f);
        return SliderBehaviorT<float, float, float >(bb, id, data_type, (float*)p_v,  *(const float*)p_min,  *(const float*)p_max,  format, flags, out_grab_bb);
    case ImGuiDataType_Double:
        IM_ASSERT(*(const double*)p_min >= -DBL_MAX / 2.0f && *(const double*)p_max <= DBL_MAX / 2.0f);
        return SliderBehaviorT<double, double, double>(bb, id, data_type, (double*)p_v, *(const double*)p_min, *(const double*)p_max, format, flags, out_grab_bb);
    case ImGuiDataType_COUNT: break;
    }
    IM_ASSERT(0);
    return false;
}

// Note: p_data, p_min and p_max are _pointers_ to a memory address holding the data. For a slider, they are all required.
// Read code of e.g. SliderFloat(), SliderInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    const bool temp_input_allowed = (flags & ImGuiSliderFlags_NoInput) == 0;
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb, temp_input_allowed ? ImGuiItemAddFlags_Focusable : 0))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    // Tabbing or CTRL-clicking on Slider turns it into an input box
    const bool hovered = ItemHoverable(frame_bb, id);
    bool temp_input_is_active = temp_input_allowed && TempInputIsActive(id);
    if (!temp_input_is_active)
    {
        const bool focus_requested = temp_input_allowed && (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_Focused) != 0;
        const bool clicked = (hovered && g.IO.MouseClicked[0]);
        if (focus_requested || clicked || g.NavActivateId == id || g.NavInputId == id)
        {
            SetActiveID(id, window);
            SetFocusID(id, window);
            FocusWindow(window);
            g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
            if (temp_input_allowed && (focus_requested || (clicked && g.IO.KeyCtrl) || g.NavInputId == id))
                temp_input_is_active = true;
        }
    }

    if (temp_input_is_active)
    {
        // Only clamp CTRL+Click input when ImGuiSliderFlags_AlwaysClamp is set
        const bool is_clamp_input = (flags & ImGuiSliderFlags_AlwaysClamp) != 0;
        return TempInputScalar(frame_bb, id, label, data_type, p_data, format, is_clamp_input ? p_min : NULL, is_clamp_input ? p_max : NULL);
    }

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);

    // Slider behavior
    ImRect grab_bb;
    const bool value_changed = SliderBehavior(frame_bb, id, data_type, p_data, p_min, p_max, format, flags, &grab_bb);
    if (value_changed)
        MarkItemEdited(id);

    // Render grab
    if (grab_bb.Max.x > grab_bb.Min.x)
        window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    if (g.LogEnabled)
        LogSetNextTextDecoration("{", "}");
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return value_changed;
}

// Add multiple sliders on 1 line for compact edition of multiple components
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= SliderScalar("", data_type, v, v_min, v_max, format, flags);
        PopID();
        PopItemWidth();
        v = (void*)((char*)v + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalar(label, ImGuiDataType_Float, v, &v_min, &v_max, format, flags);
}

bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 2, &v_min, &v_max, format, flags);
}

bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 3, &v_min, &v_max, format, flags);
}

bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_Float, v, 4, &v_min, &v_max, format, flags);
}

bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max, const char* format, ImGuiSliderFlags flags)
{
    if (format == NULL)
        format = "%.0f deg";
    float v_deg = (*v_rad) * 360.0f / (2 * IM_PI);
    bool value_changed = SliderFloat(label, &v_deg, v_degrees_min, v_degrees_max, format, flags);
    *v_rad = v_deg * (2 * IM_PI) / 360.0f;
    return value_changed;
}

bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalar(label, ImGuiDataType_S32, v, &v_min, &v_max, format, flags);
}

bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 2, &v_min, &v_max, format, flags);
}

bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 3, &v_min, &v_max, format, flags);
}

bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return SliderScalarN(label, ImGuiDataType_S32, v, 4, &v_min, &v_max, format, flags);
}

bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(frame_bb, id))
        return false;

    // Default format string when passing NULL
    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;
    else if (data_type == ImGuiDataType_S32 && strcmp(format, "%d") != 0) // (FIXME-LEGACY: Patch old "%.0f" format string to use "%d", read function more details.)
        format = PatchFormatStringFloatToInt(format);

    const bool hovered = ItemHoverable(frame_bb, id);
    if ((hovered && g.IO.MouseClicked[0]) || g.NavActivateId == id || g.NavInputId == id)
    {
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
    }

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);

    // Slider behavior
    ImRect grab_bb;
    const bool value_changed = SliderBehavior(frame_bb, id, data_type, p_data, p_min, p_max, format, flags | ImGuiSliderFlags_Vertical, &grab_bb);
    if (value_changed)
        MarkItemEdited(id);

    // Render grab
    if (grab_bb.Max.y > grab_bb.Min.y)
        window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    // For the vertical slider we allow centered text to overlap the frame padding
    char value_buf[64];
    const char* value_buf_end = value_buf + DataTypeFormatString(value_buf, IM_ARRAYSIZE(value_buf), data_type, p_data, format);
    RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.0f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format, ImGuiSliderFlags flags)
{
    return VSliderScalar(label, size, ImGuiDataType_Float, v, &v_min, &v_max, format, flags);
}

bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format, ImGuiSliderFlags flags)
{
    return VSliderScalar(label, size, ImGuiDataType_S32, v, &v_min, &v_max, format, flags);
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS

// Obsolete versions with power parameter. See https://github.com/ocornut/imgui/issues/3361 for details.
bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, float power)
{
    ImGuiSliderFlags slider_flags = ImGuiSliderFlags_None;
    if (power != 1.0f)
    {
        IM_ASSERT(power == 1.0f && "Call function with ImGuiSliderFlags_Logarithmic flags instead of using the old 'float power' function!");
        slider_flags |= ImGuiSliderFlags_Logarithmic;   // Fallback for non-asserting paths
    }
    return SliderScalar(label, data_type, p_data, p_min, p_max, format, slider_flags);
}

bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
{
    ImGuiSliderFlags slider_flags = ImGuiSliderFlags_None;
    if (power != 1.0f)
    {
        IM_ASSERT(power == 1.0f && "Call function with ImGuiSliderFlags_Logarithmic flags instead of using the old 'float power' function!");
        slider_flags |= ImGuiSliderFlags_Logarithmic;   // Fallback for non-asserting paths
    }
    return SliderScalarN(label, data_type, v, components, v_min, v_max, format, slider_flags);
}

#endif // IMGUI_DISABLE_OBSOLETE_FUNCTIONS

//-------------------------------------------------------------------------
// [SECTION] Widgets: InputScalar, InputFloat, InputInt, etc.
//-------------------------------------------------------------------------
// - ImParseFormatFindStart() [Internal]
// - ImParseFormatFindEnd() [Internal]
// - ImParseFormatTrimDecorations() [Internal]
// - ImParseFormatPrecision() [Internal]
// - TempInputTextScalar() [Internal]
// - InputScalar()
// - InputScalarN()
// - InputFloat()
// - InputFloat2()
// - InputFloat3()
// - InputFloat4()
// - InputInt()
// - InputInt2()
// - InputInt3()
// - InputInt4()
// - InputDouble()
//-------------------------------------------------------------------------

// We don't use strchr() because our strings are usually very short and often start with '%'
const char* ImParseFormatFindStart(const char* fmt)
{
    while (char c = fmt[0])
    {
        if (c == '%' && fmt[1] != '%')
            return fmt;
        else if (c == '%')
            fmt++;
        fmt++;
    }
    return fmt;
}

const char* ImParseFormatFindEnd(const char* fmt)
{
    // Printf/scanf types modifiers: I/L/h/j/l/t/w/z. Other uppercase letters qualify as types aka end of the format.
    if (fmt[0] != '%')
        return fmt;
    const unsigned int ignored_uppercase_mask = (1 << ('I'-'A')) | (1 << ('L'-'A'));
    const unsigned int ignored_lowercase_mask = (1 << ('h'-'a')) | (1 << ('j'-'a')) | (1 << ('l'-'a')) | (1 << ('t'-'a')) | (1 << ('w'-'a')) | (1 << ('z'-'a'));
    for (char c; (c = *fmt) != 0; fmt++)
    {
        if (c >= 'A' && c <= 'Z' && ((1 << (c - 'A')) & ignored_uppercase_mask) == 0)
            return fmt + 1;
        if (c >= 'a' && c <= 'z' && ((1 << (c - 'a')) & ignored_lowercase_mask) == 0)
            return fmt + 1;
    }
    return fmt;
}

// Extract the format out of a format string with leading or trailing decorations
//  fmt = "blah blah"  -> return fmt
//  fmt = "%.3f"       -> return fmt
//  fmt = "hello %.3f" -> return fmt + 6
//  fmt = "%.3f hello" -> return buf written with "%.3f"
const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)
{
    const char* fmt_start = ImParseFormatFindStart(fmt);
    if (fmt_start[0] != '%')
        return fmt;
    const char* fmt_end = ImParseFormatFindEnd(fmt_start);
    if (fmt_end[0] == 0) // If we only have leading decoration, we don't need to copy the data.
        return fmt_start;
    ImStrncpy(buf, fmt_start, ImMin((size_t)(fmt_end - fmt_start) + 1, buf_size));
    return buf;
}

// Parse display precision back from the display format string
// FIXME: This is still used by some navigation code path to infer a minimum tweak step, but we should aim to rework widgets so it isn't needed.
int ImParseFormatPrecision(const char* fmt, int default_precision)
{
    fmt = ImParseFormatFindStart(fmt);
    if (fmt[0] != '%')
        return default_precision;
    fmt++;
    while (*fmt >= '0' && *fmt <= '9')
        fmt++;
    int precision = INT_MAX;
    if (*fmt == '.')
    {
        fmt = ImAtoi<int>(fmt + 1, &precision);
        if (precision < 0 || precision > 99)
            precision = default_precision;
    }
    if (*fmt == 'e' || *fmt == 'E') // Maximum precision with scientific notation
        precision = -1;
    if ((*fmt == 'g' || *fmt == 'G') && precision == INT_MAX)
        precision = -1;
    return (precision == INT_MAX) ? default_precision : precision;
}

// Create text input in place of another active widget (e.g. used when doing a CTRL+Click on drag/slider widgets)
// FIXME: Facilitate using this in variety of other situations.
bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_size, ImGuiInputTextFlags flags)
{
    // On the first frame, g.TempInputTextId == 0, then on subsequent frames it becomes == id.
    // We clear ActiveID on the first frame to allow the InputText() taking it back.
    ImGuiContext& g = *GImGui;
    const bool init = (g.TempInputId != id);
    if (init)
        ClearActiveID();

    g.CurrentWindow->DC.CursorPos = bb.Min;
    bool value_changed = InputTextEx(label, NULL, buf, buf_size, bb.GetSize(), flags | ImGuiInputTextFlags_MergedItem);
    if (init)
    {
        // First frame we started displaying the InputText widget, we expect it to take the active id.
        IM_ASSERT(g.ActiveId == id);
        g.TempInputId = g.ActiveId;
    }
    return value_changed;
}

// Note that Drag/Slider functions are only forwarding the min/max values clamping values if the ImGuiSliderFlags_AlwaysClamp flag is set!
// This is intended: this way we allow CTRL+Click manual input to set a value out of bounds, for maximum flexibility.
// However this may not be ideal for all uses, as some user code may break on out of bound values.
bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_type, void* p_data, const char* format, const void* p_clamp_min, const void* p_clamp_max)
{
    ImGuiContext& g = *GImGui;

    char fmt_buf[32];
    char data_buf[32];
    format = ImParseFormatTrimDecorations(format, fmt_buf, IM_ARRAYSIZE(fmt_buf));
    DataTypeFormatString(data_buf, IM_ARRAYSIZE(data_buf), data_type, p_data, format);
    ImStrTrimBlanks(data_buf);

    ImGuiInputTextFlags flags = ImGuiInputTextFlags_AutoSelectAll | ImGuiInputTextFlags_NoMarkEdited;
    flags |= ((data_type == ImGuiDataType_Float || data_type == ImGuiDataType_Double) ? ImGuiInputTextFlags_CharsScientific : ImGuiInputTextFlags_CharsDecimal);
    bool value_changed = false;
    if (TempInputText(bb, id, label, data_buf, IM_ARRAYSIZE(data_buf), flags))
    {
        // Backup old value
        size_t data_type_size = DataTypeGetInfo(data_type)->Size;
        ImGuiDataTypeTempStorage data_backup;
        memcpy(&data_backup, p_data, data_type_size);

        // Apply new value (or operations) then clamp
        DataTypeApplyOpFromText(data_buf, g.InputTextState.InitialTextA.Data, data_type, p_data, NULL);
        if (p_clamp_min || p_clamp_max)
        {
            if (p_clamp_min && p_clamp_max && DataTypeCompare(data_type, p_clamp_min, p_clamp_max) > 0)
                ImSwap(p_clamp_min, p_clamp_max);
            DataTypeClamp(data_type, p_data, p_clamp_min, p_clamp_max);
        }

        // Only mark as edited if new value is different
        value_changed = memcmp(&data_backup, p_data, data_type_size) != 0;
        if (value_changed)
            MarkItemEdited(id);
    }
    return value_changed;
}

// Note: p_data, p_step, p_step_fast are _pointers_ to a memory address holding the data. For an Input widget, p_step and p_step_fast are optional.
// Read code of e.g. InputFloat(), InputInt() etc. or examples in 'Demo->Widgets->Data Types' to understand how to use this function directly.
bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;

    if (format == NULL)
        format = DataTypeGetInfo(data_type)->PrintFmt;

    char buf[64];
    DataTypeFormatString(buf, IM_ARRAYSIZE(buf), data_type, p_data, format);

    bool value_changed = false;
    if ((flags & (ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsScientific)) == 0)
        flags |= ImGuiInputTextFlags_CharsDecimal;
    flags |= ImGuiInputTextFlags_AutoSelectAll;
    flags |= ImGuiInputTextFlags_NoMarkEdited;  // We call MarkItemEdited() ourselves by comparing the actual data rather than the string.

    if (p_step != NULL)
    {
        const float button_size = GetFrameHeight();

        BeginGroup(); // The only purpose of the group here is to allow the caller to query item data e.g. IsItemActive()
        PushID(label);
        SetNextItemWidth(ImMax(1.0f, CalcItemWidth() - (button_size + style.ItemInnerSpacing.x) * 2));
        if (InputText("", buf, IM_ARRAYSIZE(buf), flags)) // PushId(label) + "" gives us the expected ID from outside point of view
            value_changed = DataTypeApplyOpFromText(buf, g.InputTextState.InitialTextA.Data, data_type, p_data, format);

        // Step buttons
        const ImVec2 backup_frame_padding = style.FramePadding;
        style.FramePadding.x = style.FramePadding.y;
        ImGuiButtonFlags button_flags = ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups;
        if (flags & ImGuiInputTextFlags_ReadOnly)
            button_flags |= ImGuiButtonFlags_Disabled;
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("-", ImVec2(button_size, button_size), button_flags))
        {
            DataTypeApplyOp(data_type, '-', p_data, p_data, g.IO.KeyCtrl && p_step_fast ? p_step_fast : p_step);
            value_changed = true;
        }
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("+", ImVec2(button_size, button_size), button_flags))
        {
            DataTypeApplyOp(data_type, '+', p_data, p_data, g.IO.KeyCtrl && p_step_fast ? p_step_fast : p_step);
            value_changed = true;
        }

        const char* label_end = FindRenderedTextEnd(label);
        if (label != label_end)
        {
            SameLine(0, style.ItemInnerSpacing.x);
            TextEx(label, label_end);
        }
        style.FramePadding = backup_frame_padding;

        PopID();
        EndGroup();
    }
    else
    {
        if (InputText(label, buf, IM_ARRAYSIZE(buf), flags))
            value_changed = DataTypeApplyOpFromText(buf, g.InputTextState.InitialTextA.Data, data_type, p_data, format);
    }
    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    return value_changed;
}

bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step, const void* p_step_fast, const char* format, ImGuiInputTextFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components, CalcItemWidth());
    size_t type_size = GDataTypeInfo[data_type].Size;
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        if (i > 0)
            SameLine(0, g.Style.ItemInnerSpacing.x);
        value_changed |= InputScalar("", data_type, p_data, p_step, p_step_fast, format, flags);
        PopID();
        PopItemWidth();
        p_data = (void*)((char*)p_data + type_size);
    }
    PopID();

    const char* label_end = FindRenderedTextEnd(label);
    if (label != label_end)
    {
        SameLine(0.0f, g.Style.ItemInnerSpacing.x);
        TextEx(label, label_end);
    }

    EndGroup();
    return value_changed;
}

bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* format, ImGuiInputTextFlags flags)
{
    flags |= ImGuiInputTextFlags_CharsScientific;
    return InputScalar(label, ImGuiDataType_Float, (void*)v, (void*)(step > 0.0f ? &step : NULL), (void*)(step_fast > 0.0f ? &step_fast : NULL), format, flags);
}

bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 2, NULL, NULL, format, flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 3, NULL, NULL, format, flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_Float, v, 4, NULL, NULL, format, flags);
}

bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags flags)
{
    // Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
    const char* format = (flags & ImGuiInputTextFlags_CharsHexadecimal) ? "%08X" : "%d";
    return InputScalar(label, ImGuiDataType_S32, (void*)v, (void*)(step > 0 ? &step : NULL), (void*)(step_fast > 0 ? &step_fast : NULL), format, flags);
}

bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 2, NULL, NULL, "%d", flags);
}

bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 3, NULL, NULL, "%d", flags);
}

bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)
{
    return InputScalarN(label, ImGuiDataType_S32, v, 4, NULL, NULL, "%d", flags);
}

bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char* format, ImGuiInputTextFlags flags)
{
    flags |= ImGuiInputTextFlags_CharsScientific;
    return InputScalar(label, ImGuiDataType_Double, (void*)v, (void*)(step > 0.0 ? &step : NULL), (void*)(step_fast > 0.0 ? &step_fast : NULL), format, flags);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: InputText, InputTextMultiline, InputTextWithHint
//-------------------------------------------------------------------------
// - InputText()
// - InputTextWithHint()
// - InputTextMultiline()
// - InputTextEx() [Internal]
//-------------------------------------------------------------------------

bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, NULL, buf, (int)buf_size, ImVec2(0, 0), flags, callback, user_data);
}

bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    return InputTextEx(label, NULL, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);
}

bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, hint, buf, (int)buf_size, ImVec2(0, 0), flags, callback, user_data);
}

static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)
{
    int line_count = 0;
    const char* s = text_begin;
    while (char c = *s++) // We are only matching for \n so we can ignore UTF-8 decoding
        if (c == '\n')
            line_count++;
    s--;
    if (s[0] != '\n' && s[0] != '\r')
        line_count++;
    *out_text_end = s;
    return line_count;
}

static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)
{
    ImGuiContext& g = *GImGui;
    ImFont* font = g.Font;
    const float line_height = g.FontSize;
    const float scale = line_height / font->FontSize;

    ImVec2 text_size = ImVec2(0, 0);
    float line_width = 0.0f;

    const ImWchar* s = text_begin;
    while (s < text_end)
    {
        unsigned int c = (unsigned int)(*s++);
        if (c == '\n')
        {
            text_size.x = ImMax(text_size.x, line_width);
            text_size.y += line_height;
            line_width = 0.0f;
            if (stop_on_new_line)
                break;
            continue;
        }
        if (c == '\r')
            continue;

        const float char_width = font->GetCharAdvance((ImWchar)c) * scale;
        line_width += char_width;
    }

    if (text_size.x < line_width)
        text_size.x = line_width;

    if (out_offset)
        *out_offset = ImVec2(line_width, text_size.y + line_height);  // offset allow for the possibility of sitting after a trailing \n

    if (line_width > 0 || text_size.y == 0.0f)                        // whereas size.y will ignore the trailing \n
        text_size.y += line_height;

    if (remaining)
        *remaining = s;

    return text_size;
}

// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
namespace ImStb
{

static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }
static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->TextW[idx]; }
static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->TextW[line_start_idx + char_idx]; if (c == '\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; ImGuiContext& g = *GImGui; return g.Font->GetCharAdvance(c) * (g.FontSize / g.Font->FontSize); }
static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x200000 ? 0 : key; }
static ImWchar STB_TEXTEDIT_NEWLINE = '\n';
static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)
{
    const ImWchar* text = obj->TextW.Data;
    const ImWchar* text_remaining = NULL;
    const ImVec2 size = InputTextCalcTextSizeW(text + line_start_idx, text + obj->CurLenW, &text_remaining, NULL, true);
    r->x0 = 0.0f;
    r->x1 = size.x;
    r->baseline_y_delta = size.y;
    r->ymin = 0.0f;
    r->ymax = size.y;
    r->num_chars = (int)(text_remaining - (text + line_start_idx));
}

static bool is_separator(unsigned int c)                                        { return ImCharIsBlankW(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }
static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator(obj->TextW[idx - 1]) && !is_separator(obj->TextW[idx]) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }
#ifdef __APPLE__    // FIXME: Move setting to IO structure
static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator(obj->TextW[idx - 1]) && is_separator(obj->TextW[idx]) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }
#else
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }
#endif
#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_IMPL    // They need to be #define for stb_textedit.h
#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL

static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)
{
    ImWchar* dst = obj->TextW.Data + pos;

    // We maintain our buffer length in both UTF-8 and wchar formats
    obj->Edited = true;
    obj->CurLenA -= ImTextCountUtf8BytesFromStr(dst, dst + n);
    obj->CurLenW -= n;

    // Offset remaining text (FIXME-OPT: Use memmove)
    const ImWchar* src = obj->TextW.Data + pos + n;
    while (ImWchar c = *src++)
        *dst++ = c;
    *dst = '\0';
}

static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)
{
    const bool is_resizable = (obj->UserFlags & ImGuiInputTextFlags_CallbackResize) != 0;
    const int text_len = obj->CurLenW;
    IM_ASSERT(pos <= text_len);

    const int new_text_len_utf8 = ImTextCountUtf8BytesFromStr(new_text, new_text + new_text_len);
    if (!is_resizable && (new_text_len_utf8 + obj->CurLenA + 1 > obj->BufCapacityA))
        return false;

    // Grow internal buffer if needed
    if (new_text_len + text_len + 1 > obj->TextW.Size)
    {
        if (!is_resizable)
            return false;
        IM_ASSERT(text_len < obj->TextW.Size);
        obj->TextW.resize(text_len + ImClamp(new_text_len * 4, 32, ImMax(256, new_text_len)) + 1);
    }

    ImWchar* text = obj->TextW.Data;
    if (pos != text_len)
        memmove(text + pos + new_text_len, text + pos, (size_t)(text_len - pos) * sizeof(ImWchar));
    memcpy(text + pos, new_text, (size_t)new_text_len * sizeof(ImWchar));

    obj->Edited = true;
    obj->CurLenW += new_text_len;
    obj->CurLenA += new_text_len_utf8;
    obj->TextW[obj->CurLenW] = '\0';

    return true;
}

// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
#define STB_TEXTEDIT_K_LEFT         0x200000 // keyboard input to move cursor left
#define STB_TEXTEDIT_K_RIGHT        0x200001 // keyboard input to move cursor right
#define STB_TEXTEDIT_K_UP           0x200002 // keyboard input to move cursor up
#define STB_TEXTEDIT_K_DOWN         0x200003 // keyboard input to move cursor down
#define STB_TEXTEDIT_K_LINESTART    0x200004 // keyboard input to move cursor to start of line
#define STB_TEXTEDIT_K_LINEEND      0x200005 // keyboard input to move cursor to end of line
#define STB_TEXTEDIT_K_TEXTSTART    0x200006 // keyboard input to move cursor to start of text
#define STB_TEXTEDIT_K_TEXTEND      0x200007 // keyboard input to move cursor to end of text
#define STB_TEXTEDIT_K_DELETE       0x200008 // keyboard input to delete selection or character under cursor
#define STB_TEXTEDIT_K_BACKSPACE    0x200009 // keyboard input to delete selection or character left of cursor
#define STB_TEXTEDIT_K_UNDO         0x20000A // keyboard input to perform undo
#define STB_TEXTEDIT_K_REDO         0x20000B // keyboard input to perform redo
#define STB_TEXTEDIT_K_WORDLEFT     0x20000C // keyboard input to move cursor left one word
#define STB_TEXTEDIT_K_WORDRIGHT    0x20000D // keyboard input to move cursor right one word
#define STB_TEXTEDIT_K_PGUP         0x20000E // keyboard input to move cursor up a page
#define STB_TEXTEDIT_K_PGDOWN       0x20000F // keyboard input to move cursor down a page
#define STB_TEXTEDIT_K_SHIFT        0x400000

#define STB_TEXTEDIT_IMPLEMENTATION
#include "imstb_textedit.h"

// stb_textedit internally allows for a single undo record to do addition and deletion, but somehow, calling
// the stb_textedit_paste() function creates two separate records, so we perform it manually. (FIXME: Report to nothings/stb?)
static void stb_textedit_replace(STB_TEXTEDIT_STRING* str, STB_TexteditState* state, const STB_TEXTEDIT_CHARTYPE* text, int text_len)
{
    stb_text_makeundo_replace(str, state, 0, str->CurLenW, text_len);
    ImStb::STB_TEXTEDIT_DELETECHARS(str, 0, str->CurLenW);
    if (text_len <= 0)
        return;
    if (ImStb::STB_TEXTEDIT_INSERTCHARS(str, 0, text, text_len))
    {
        state->cursor = text_len;
        state->has_preferred_x = 0;
        return;
    }
    IM_ASSERT(0); // Failed to insert character, normally shouldn't happen because of how we currently use stb_textedit_replace()
}

} // namespace ImStb

void ImGuiInputTextState::OnKeyPressed(int key)
{
    stb_textedit_key(this, &Stb, key);
    CursorFollow = true;
    CursorAnimReset();
}

ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()
{
    memset(this, 0, sizeof(*this));
}

// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)
{
    IM_ASSERT(pos + bytes_count <= BufTextLen);
    char* dst = Buf + pos;
    const char* src = Buf + pos + bytes_count;
    while (char c = *src++)
        *dst++ = c;
    *dst = '\0';

    if (CursorPos >= pos + bytes_count)
        CursorPos -= bytes_count;
    else if (CursorPos >= pos)
        CursorPos = pos;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen -= bytes_count;
}

void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
{
    const bool is_resizable = (Flags & ImGuiInputTextFlags_CallbackResize) != 0;
    const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);
    if (new_text_len + BufTextLen >= BufSize)
    {
        if (!is_resizable)
            return;

        // Contrary to STB_TEXTEDIT_INSERTCHARS() this is working in the UTF8 buffer, hence the mildly similar code (until we remove the U16 buffer altogether!)
        ImGuiContext& g = *GImGui;
        ImGuiInputTextState* edit_state = &g.InputTextState;
        IM_ASSERT(edit_state->ID != 0 && g.ActiveId == edit_state->ID);
        IM_ASSERT(Buf == edit_state->TextA.Data);
        int new_buf_size = BufTextLen + ImClamp(new_text_len * 4, 32, ImMax(256, new_text_len)) + 1;
        edit_state->TextA.reserve(new_buf_size + 1);
        Buf = edit_state->TextA.Data;
        BufSize = edit_state->BufCapacityA = new_buf_size;
    }

    if (BufTextLen != pos)
        memmove(Buf + pos + new_text_len, Buf + pos, (size_t)(BufTextLen - pos));
    memcpy(Buf + pos, new_text, (size_t)new_text_len * sizeof(char));
    Buf[BufTextLen + new_text_len] = '\0';

    if (CursorPos >= pos)
        CursorPos += new_text_len;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen += new_text_len;
}

// Return false to discard a character.
static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* user_data, ImGuiInputSource input_source)
{
    IM_ASSERT(input_source == ImGuiInputSource_Keyboard || input_source == ImGuiInputSource_Clipboard);
    unsigned int c = *p_char;

    // Filter non-printable (NB: isprint is unreliable! see #2467)
    if (c < 0x20)
    {
        bool pass = false;
        pass |= (c == '\n' && (flags & ImGuiInputTextFlags_Multiline));
        pass |= (c == '\t' && (flags & ImGuiInputTextFlags_AllowTabInput));
        if (!pass)
            return false;
    }

    if (input_source != ImGuiInputSource_Clipboard)
    {
        // We ignore Ascii representation of delete (emitted from Backspace on OSX, see #2578, #2817)
        if (c == 127)
            return false;

        // Filter private Unicode range. GLFW on OSX seems to send private characters for special keys like arrow keys (FIXME)
        if (c >= 0xE000 && c <= 0xF8FF)
            return false;
    }

    // Filter Unicode ranges we are not handling in this build
    if (c > IM_UNICODE_CODEPOINT_MAX)
        return false;

    // Generic named filters
    if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank | ImGuiInputTextFlags_CharsScientific))
    {
        // The libc allows overriding locale, with e.g. 'setlocale(LC_NUMERIC, "de_DE.UTF-8");' which affect the output/input of printf/scanf.
        // The standard mandate that programs starts in the "C" locale where the decimal point is '.'.
        // We don't really intend to provide widespread support for it, but out of empathy for people stuck with using odd API, we support the bare minimum aka overriding the decimal point.
        // Change the default decimal_point with:
        //   ImGui::GetCurrentContext()->PlatformLocaleDecimalPoint = *localeconv()->decimal_point;
        ImGuiContext& g = *GImGui;
        const unsigned c_decimal_point = (unsigned int)g.PlatformLocaleDecimalPoint;

        // Allow 0-9 . - + * /
        if (flags & ImGuiInputTextFlags_CharsDecimal)
            if (!(c >= '0' && c <= '9') && (c != c_decimal_point) && (c != '-') && (c != '+') && (c != '*') && (c != '/'))
                return false;

        // Allow 0-9 . - + * / e E
        if (flags & ImGuiInputTextFlags_CharsScientific)
            if (!(c >= '0' && c <= '9') && (c != c_decimal_point) && (c != '-') && (c != '+') && (c != '*') && (c != '/') && (c != 'e') && (c != 'E'))
                return false;

        // Allow 0-9 a-F A-F
        if (flags & ImGuiInputTextFlags_CharsHexadecimal)
            if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
                return false;

        // Turn a-z into A-Z
        if (flags & ImGuiInputTextFlags_CharsUppercase)
            if (c >= 'a' && c <= 'z')
                *p_char = (c += (unsigned int)('A' - 'a'));

        if (flags & ImGuiInputTextFlags_CharsNoBlank)
            if (ImCharIsBlankW(c))
                return false;
    }

    // Custom callback filter
    if (flags & ImGuiInputTextFlags_CallbackCharFilter)
    {
        ImGuiInputTextCallbackData callback_data;
        memset(&callback_data, 0, sizeof(ImGuiInputTextCallbackData));
        callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;
        callback_data.EventChar = (ImWchar)c;
        callback_data.Flags = flags;
        callback_data.UserData = user_data;
        if (callback(&callback_data) != 0)
            return false;
        *p_char = callback_data.EventChar;
        if (!callback_data.EventChar)
            return false;
    }

    return true;
}

// Edit a string of text
// - buf_size account for the zero-terminator, so a buf_size of 6 can hold "Hello" but not "Hello!".
//   This is so we can easily call InputText() on static arrays using ARRAYSIZE() and to match
//   Note that in std::string world, capacity() would omit 1 byte used by the zero-terminator.
// - When active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while the InputText is active has no effect.
// - If you want to use ImGui::InputText() with std::string, see misc/cpp/imgui_stdlib.h
// (FIXME: Rather confusing and messy function, among the worse part of our codebase, expecting to rewrite a V2 at some point.. Partly because we are
//  doing UTF8 > U16 > UTF8 conversions on the go to easily interface with stb_textedit. Ideally should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188)
bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT(buf != NULL && buf_size >= 0);
    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline)));        // Can't use both together (they both use up/down keys)
    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)

    ImGuiContext& g = *GImGui;
    ImGuiIO& io = g.IO;
    const ImGuiStyle& style = g.Style;

    const bool RENDER_SELECTION_WHEN_INACTIVE = false;
    const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;
    const bool is_readonly = (flags & ImGuiInputTextFlags_ReadOnly) != 0;
    const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;
    const bool is_undoable = (flags & ImGuiInputTextFlags_NoUndoRedo) == 0;
    const bool is_resizable = (flags & ImGuiInputTextFlags_CallbackResize) != 0;
    if (is_resizable)
        IM_ASSERT(callback != NULL); // Must provide a callback if you set the ImGuiInputTextFlags_CallbackResize flag!

    if (is_multiline) // Open group before calling GetID() because groups tracks id created within their scope,
        BeginGroup();
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImVec2 frame_size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? g.FontSize * 8.0f : label_size.y) + style.FramePadding.y * 2.0f); // Arbitrary default of 8 lines high for multi-line
    const ImVec2 total_size = ImVec2(frame_size.x + (label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f), frame_size.y);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    const ImRect total_bb(frame_bb.Min, frame_bb.Min + total_size);

    ImGuiWindow* draw_window = window;
    ImVec2 inner_size = frame_size;
    if (is_multiline)
    {
        if (!ItemAdd(total_bb, id, &frame_bb, ImGuiItemAddFlags_Focusable))
        {
            ItemSize(total_bb, style.FramePadding.y);
            EndGroup();
            return false;
        }

        // We reproduce the contents of BeginChildFrame() in order to provide 'label' so our window internal data are easier to read/debug.
        PushStyleColor(ImGuiCol_ChildBg, style.Colors[ImGuiCol_FrameBg]);
        PushStyleVar(ImGuiStyleVar_ChildRounding, style.FrameRounding);
        PushStyleVar(ImGuiStyleVar_ChildBorderSize, style.FrameBorderSize);
        bool child_visible = BeginChildEx(label, id, frame_bb.GetSize(), true, ImGuiWindowFlags_NoMove);
        PopStyleVar(2);
        PopStyleColor();
        if (!child_visible)
        {
            EndChild();
            EndGroup();
            return false;
        }
        draw_window = g.CurrentWindow; // Child window
        draw_window->DC.NavLayersActiveMaskNext |= (1 << draw_window->DC.NavLayerCurrent); // This is to ensure that EndChild() will display a navigation highlight so we can "enter" into it.
        draw_window->DC.CursorPos += style.FramePadding;
        inner_size.x -= draw_window->ScrollbarSizes.x;
    }
    else
    {
        // Support for internal ImGuiInputTextFlags_MergedItem flag, which could be redesigned as an ItemFlags if needed (with test performed in ItemAdd)
        ItemSize(total_bb, style.FramePadding.y);
        if (!(flags & ImGuiInputTextFlags_MergedItem))
            if (!ItemAdd(total_bb, id, &frame_bb, ImGuiItemAddFlags_Focusable))
                return false;
    }
    const bool hovered = ItemHoverable(frame_bb, id);
    if (hovered)
        g.MouseCursor = ImGuiMouseCursor_TextInput;

    // We are only allowed to access the state if we are already the active widget.
    ImGuiInputTextState* state = GetInputTextState(id);

    const bool focus_requested_by_code = (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_FocusedByCode) != 0;
    const bool focus_requested_by_tabbing = (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_FocusedByTabbing) != 0;

    const bool user_clicked = hovered && io.MouseClicked[0];
    const bool user_nav_input_start = (g.ActiveId != id) && ((g.NavInputId == id) || (g.NavActivateId == id && g.NavInputSource == ImGuiInputSource_Keyboard));
    const bool user_scroll_finish = is_multiline && state != NULL && g.ActiveId == 0 && g.ActiveIdPreviousFrame == GetWindowScrollbarID(draw_window, ImGuiAxis_Y);
    const bool user_scroll_active = is_multiline && state != NULL && g.ActiveId == GetWindowScrollbarID(draw_window, ImGuiAxis_Y);

    bool clear_active_id = false;
    bool select_all = (g.ActiveId != id) && ((flags & ImGuiInputTextFlags_AutoSelectAll) != 0 || user_nav_input_start) && (!is_multiline);

    float scroll_y = is_multiline ? draw_window->Scroll.y : FLT_MAX;

    const bool init_changed_specs = (state != NULL && state->Stb.single_line != !is_multiline);
    const bool init_make_active = (user_clicked || user_scroll_finish || user_nav_input_start || focus_requested_by_code || focus_requested_by_tabbing);
    const bool init_state = (init_make_active || user_scroll_active);
    if ((init_state && g.ActiveId != id) || init_changed_specs)
    {
        // Access state even if we don't own it yet.
        state = &g.InputTextState;
        state->CursorAnimReset();

        // Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
        // From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
        const int buf_len = (int)strlen(buf);
        state->InitialTextA.resize(buf_len + 1);    // UTF-8. we use +1 to make sure that .Data is always pointing to at least an empty string.
        memcpy(state->InitialTextA.Data, buf, buf_len + 1);

        // Start edition
        const char* buf_end = NULL;
        state->TextW.resize(buf_size + 1);          // wchar count <= UTF-8 count. we use +1 to make sure that .Data is always pointing to at least an empty string.
        state->TextA.resize(0);
        state->TextAIsValid = false;                // TextA is not valid yet (we will display buf until then)
        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, buf_size, buf, NULL, &buf_end);
        state->CurLenA = (int)(buf_end - buf);      // We can't get the result from ImStrncpy() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.

        // Preserve cursor position and undo/redo stack if we come back to same widget
        // FIXME: For non-readonly widgets we might be able to require that TextAIsValid && TextA == buf ? (untested) and discard undo stack if user buffer has changed.
        const bool recycle_state = (state->ID == id && !init_changed_specs);
        if (recycle_state)
        {
            // Recycle existing cursor/selection/undo stack but clamp position
            // Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
            state->CursorClamp();
        }
        else
        {
            state->ID = id;
            state->ScrollX = 0.0f;
            stb_textedit_initialize_state(&state->Stb, !is_multiline);
            if (!is_multiline && focus_requested_by_code)
                select_all = true;
        }
        if (flags & ImGuiInputTextFlags_AlwaysOverwrite)
            state->Stb.insert_mode = 1; // stb field name is indeed incorrect (see #2863)
        if (!is_multiline && (focus_requested_by_tabbing || (user_clicked && io.KeyCtrl)))
            select_all = true;
    }

    if (g.ActiveId != id && init_make_active)
    {
        IM_ASSERT(state && state->ID == id);
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);

        // Declare our inputs
        IM_ASSERT(ImGuiNavInput_COUNT < 32);
        g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
        if (is_multiline || (flags & ImGuiInputTextFlags_CallbackHistory))
            g.ActiveIdUsingNavDirMask |= (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
        g.ActiveIdUsingNavInputMask |= (1 << ImGuiNavInput_Cancel);
        g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_Home) | ((ImU64)1 << ImGuiKey_End);
        if (is_multiline)
            g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_PageUp) | ((ImU64)1 << ImGuiKey_PageDown);
        if (flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_AllowTabInput))  // Disable keyboard tabbing out as we will use the \t character.
            g.ActiveIdUsingKeyInputMask |= ((ImU64)1 << ImGuiKey_Tab);
    }

    // We have an edge case if ActiveId was set through another widget (e.g. widget being swapped), clear id immediately (don't wait until the end of the function)
    if (g.ActiveId == id && state == NULL)
        ClearActiveID();

    // Release focus when we click outside
    if (g.ActiveId == id && io.MouseClicked[0] && !init_state && !init_make_active) //-V560
        clear_active_id = true;

    // Lock the decision of whether we are going to take the path displaying the cursor or selection
    const bool render_cursor = (g.ActiveId == id) || (state && user_scroll_active);
    bool render_selection = state && state->HasSelection() && (RENDER_SELECTION_WHEN_INACTIVE || render_cursor);
    bool value_changed = false;
    bool enter_pressed = false;

    // When read-only we always use the live data passed to the function
    // FIXME-OPT: Because our selection/cursor code currently needs the wide text we need to convert it when active, which is not ideal :(
    if (is_readonly && state != NULL && (render_cursor || render_selection))
    {
        const char* buf_end = NULL;
        state->TextW.resize(buf_size + 1);
        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, state->TextW.Size, buf, NULL, &buf_end);
        state->CurLenA = (int)(buf_end - buf);
        state->CursorClamp();
        render_selection &= state->HasSelection();
    }

    // Select the buffer to render.
    const bool buf_display_from_state = (render_cursor || render_selection || g.ActiveId == id) && !is_readonly && state && state->TextAIsValid;
    const bool is_displaying_hint = (hint != NULL && (buf_display_from_state ? state->TextA.Data : buf)[0] == 0);

    // Password pushes a temporary font with only a fallback glyph
    if (is_password && !is_displaying_hint)
    {
        const ImFontGlyph* glyph = g.Font->FindGlyph('*');
        ImFont* password_font = &g.InputTextPasswordFont;
        password_font->FontSize = g.Font->FontSize;
        password_font->Scale = g.Font->Scale;
        password_font->Ascent = g.Font->Ascent;
        password_font->Descent = g.Font->Descent;
        password_font->ContainerAtlas = g.Font->ContainerAtlas;
        password_font->FallbackGlyph = glyph;
        password_font->FallbackAdvanceX = glyph->AdvanceX;
        IM_ASSERT(password_font->Glyphs.empty() && password_font->IndexAdvanceX.empty() && password_font->IndexLookup.empty());
        PushFont(password_font);
    }

    // Process mouse inputs and character inputs
    int backup_current_text_length = 0;
    if (g.ActiveId == id)
    {
        IM_ASSERT(state != NULL);
        backup_current_text_length = state->CurLenA;
        state->Edited = false;
        state->BufCapacityA = buf_size;
        state->UserFlags = flags;
        state->UserCallback = callback;
        state->UserCallbackData = callback_user_data;

        // Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
        // Down the line we should have a cleaner library-wide concept of Selected vs Active.
        g.ActiveIdAllowOverlap = !io.MouseDown[0];
        g.WantTextInputNextFrame = 1;

        // Edit in progress
        const float mouse_x = (io.MousePos.x - frame_bb.Min.x - style.FramePadding.x) + state->ScrollX;
        const float mouse_y = (is_multiline ? (io.MousePos.y - draw_window->DC.CursorPos.y) : (g.FontSize * 0.5f));

        const bool is_osx = io.ConfigMacOSXBehaviors;
        if (select_all || (hovered && !is_osx && io.MouseDoubleClicked[0]))
        {
            state->SelectAll();
            state->SelectedAllMouseLock = true;
        }
        else if (hovered && is_osx && io.MouseDoubleClicked[0])
        {
            // Double-click select a word only, OS X style (by simulating keystrokes)
            state->OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT);
            state->OnKeyPressed(STB_TEXTEDIT_K_WORDRIGHT | STB_TEXTEDIT_K_SHIFT);
        }
        else if (io.MouseClicked[0] && !state->SelectedAllMouseLock)
        {
            if (hovered)
            {
                stb_textedit_click(state, &state->Stb, mouse_x, mouse_y);
                state->CursorAnimReset();
            }
        }
        else if (io.MouseDown[0] && !state->SelectedAllMouseLock && (io.MouseDelta.x != 0.0f || io.MouseDelta.y != 0.0f))
        {
            stb_textedit_drag(state, &state->Stb, mouse_x, mouse_y);
            state->CursorAnimReset();
            state->CursorFollow = true;
        }
        if (state->SelectedAllMouseLock && !io.MouseDown[0])
            state->SelectedAllMouseLock = false;

        // It is ill-defined whether the backend needs to send a \t character when pressing the TAB keys.
        // Win32 and GLFW naturally do it but not SDL.
        const bool ignore_char_inputs = (io.KeyCtrl && !io.KeyAlt) || (is_osx && io.KeySuper);
        if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !ignore_char_inputs && !io.KeyShift && !is_readonly)
            if (!io.InputQueueCharacters.contains('\t'))
            {
                unsigned int c = '\t'; // Insert TAB
                if (InputTextFilterCharacter(&c, flags, callback, callback_user_data, ImGuiInputSource_Keyboard))
                    state->OnKeyPressed((int)c);
            }

        // Process regular text input (before we check for Return because using some IME will effectively send a Return?)
        // We ignore CTRL inputs, but need to allow ALT+CTRL as some keyboards (e.g. German) use AltGR (which _is_ Alt+Ctrl) to input certain characters.
        if (io.InputQueueCharacters.Size > 0)
        {
            if (!ignore_char_inputs && !is_readonly && !user_nav_input_start)
                for (int n = 0; n < io.InputQueueCharacters.Size; n++)
                {
                    // Insert character if they pass filtering
                    unsigned int c = (unsigned int)io.InputQueueCharacters[n];
                    if (c == '\t' && io.KeyShift)
                        continue;
                    if (InputTextFilterCharacter(&c, flags, callback, callback_user_data, ImGuiInputSource_Keyboard))
                        state->OnKeyPressed((int)c);
                }

            // Consume characters
            io.InputQueueCharacters.resize(0);
        }
    }

    // Process other shortcuts/key-presses
    bool cancel_edit = false;
    if (g.ActiveId == id && !g.ActiveIdIsJustActivated && !clear_active_id)
    {
        IM_ASSERT(state != NULL);
        IM_ASSERT(io.KeyMods == GetMergedKeyModFlags() && "Mismatching io.KeyCtrl/io.KeyShift/io.KeyAlt/io.KeySuper vs io.KeyMods"); // We rarely do this check, but if anything let's do it here.

        const int row_count_per_page = ImMax((int)((inner_size.y - style.FramePadding.y) / g.FontSize), 1);
        state->Stb.row_count_per_page = row_count_per_page;

        const int k_mask = (io.KeyShift ? STB_TEXTEDIT_K_SHIFT : 0);
        const bool is_osx = io.ConfigMacOSXBehaviors;
        const bool is_osx_shift_shortcut = is_osx && (io.KeyMods == (ImGuiKeyModFlags_Super | ImGuiKeyModFlags_Shift));
        const bool is_wordmove_key_down = is_osx ? io.KeyAlt : io.KeyCtrl;                     // OS X style: Text editing cursor movement using Alt instead of Ctrl
        const bool is_startend_key_down = is_osx && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End
        const bool is_ctrl_key_only = (io.KeyMods == ImGuiKeyModFlags_Ctrl);
        const bool is_shift_key_only = (io.KeyMods == ImGuiKeyModFlags_Shift);
        const bool is_shortcut_key = g.IO.ConfigMacOSXBehaviors ? (io.KeyMods == ImGuiKeyModFlags_Super) : (io.KeyMods == ImGuiKeyModFlags_Ctrl);

        const bool is_cut   = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_X)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Delete))) && !is_readonly && !is_password && (!is_multiline || state->HasSelection());
        const bool is_copy  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_C)) || (is_ctrl_key_only  && IsKeyPressedMap(ImGuiKey_Insert))) && !is_password && (!is_multiline || state->HasSelection());
        const bool is_paste = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_V)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Insert))) && !is_readonly;
        const bool is_undo  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_Z)) && !is_readonly && is_undoable);
        const bool is_redo  = ((is_shortcut_key && IsKeyPressedMap(ImGuiKey_Y)) || (is_osx_shift_shortcut && IsKeyPressedMap(ImGuiKey_Z))) && !is_readonly && is_undoable;

        if (IsKeyPressedMap(ImGuiKey_LeftArrow))                        { state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_RightArrow))                  { state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline)     { if (io.KeyCtrl) SetScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline)   { if (io.KeyCtrl) SetScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else state->OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_PageUp) && is_multiline)      { state->OnKeyPressed(STB_TEXTEDIT_K_PGUP | k_mask); scroll_y -= row_count_per_page * g.FontSize; }
        else if (IsKeyPressedMap(ImGuiKey_PageDown) && is_multiline)    { state->OnKeyPressed(STB_TEXTEDIT_K_PGDOWN | k_mask); scroll_y += row_count_per_page * g.FontSize; }
        else if (IsKeyPressedMap(ImGuiKey_Home))                        { state->OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_End))                         { state->OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Delete) && !is_readonly)      { state->OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Backspace) && !is_readonly)
        {
            if (!state->HasSelection())
            {
                if (is_wordmove_key_down)
                    state->OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT | STB_TEXTEDIT_K_SHIFT);
                else if (is_osx && io.KeySuper && !io.KeyAlt && !io.KeyCtrl)
                    state->OnKeyPressed(STB_TEXTEDIT_K_LINESTART | STB_TEXTEDIT_K_SHIFT);
            }
            state->OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);
        }
        else if (IsKeyPressedMap(ImGuiKey_Enter) || IsKeyPressedMap(ImGuiKey_KeyPadEnter))
        {
            bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;
            if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))
            {
                enter_pressed = clear_active_id = true;
            }
            else if (!is_readonly)
            {
                unsigned int c = '\n'; // Insert new line
                if (InputTextFilterCharacter(&c, flags, callback, callback_user_data, ImGuiInputSource_Keyboard))
                    state->OnKeyPressed((int)c);
            }
        }
        else if (IsKeyPressedMap(ImGuiKey_Escape))
        {
            clear_active_id = cancel_edit = true;
        }
        else if (is_undo || is_redo)
        {
            state->OnKeyPressed(is_undo ? STB_TEXTEDIT_K_UNDO : STB_TEXTEDIT_K_REDO);
            state->ClearSelection();
        }
        else if (is_shortcut_key && IsKeyPressedMap(ImGuiKey_A))
        {
            state->SelectAll();
            state->CursorFollow = true;
        }
        else if (is_cut || is_copy)
        {
            // Cut, Copy
            if (io.SetClipboardTextFn)
            {
                const int ib = state->HasSelection() ? ImMin(state->Stb.select_start, state->Stb.select_end) : 0;
                const int ie = state->HasSelection() ? ImMax(state->Stb.select_start, state->Stb.select_end) : state->CurLenW;
                const int clipboard_data_len = ImTextCountUtf8BytesFromStr(state->TextW.Data + ib, state->TextW.Data + ie) + 1;
                char* clipboard_data = (char*)IM_ALLOC(clipboard_data_len * sizeof(char));
                ImTextStrToUtf8(clipboard_data, clipboard_data_len, state->TextW.Data + ib, state->TextW.Data + ie);
                SetClipboardText(clipboard_data);
                MemFree(clipboard_data);
            }
            if (is_cut)
            {
                if (!state->HasSelection())
                    state->SelectAll();
                state->CursorFollow = true;
                stb_textedit_cut(state, &state->Stb);
            }
        }
        else if (is_paste)
        {
            if (const char* clipboard = GetClipboardText())
            {
                // Filter pasted buffer
                const int clipboard_len = (int)strlen(clipboard);
                ImWchar* clipboard_filtered = (ImWchar*)IM_ALLOC((clipboard_len + 1) * sizeof(ImWchar));
                int clipboard_filtered_len = 0;
                for (const char* s = clipboard; *s; )
                {
                    unsigned int c;
                    s += ImTextCharFromUtf8(&c, s, NULL);
                    if (c == 0)
                        break;
                    if (!InputTextFilterCharacter(&c, flags, callback, callback_user_data, ImGuiInputSource_Clipboard))
                        continue;
                    clipboard_filtered[clipboard_filtered_len++] = (ImWchar)c;
                }
                clipboard_filtered[clipboard_filtered_len] = 0;
                if (clipboard_filtered_len > 0) // If everything was filtered, ignore the pasting operation
                {
                    stb_textedit_paste(state, &state->Stb, clipboard_filtered, clipboard_filtered_len);
                    state->CursorFollow = true;
                }
                MemFree(clipboard_filtered);
            }
        }

        // Update render selection flag after events have been handled, so selection highlight can be displayed during the same frame.
        render_selection |= state->HasSelection() && (RENDER_SELECTION_WHEN_INACTIVE || render_cursor);
    }

    // Process callbacks and apply result back to user's buffer.
    if (g.ActiveId == id)
    {
        IM_ASSERT(state != NULL);
        const char* apply_new_text = NULL;
        int apply_new_text_length = 0;
        if (cancel_edit)
        {
            // Restore initial value. Only return true if restoring to the initial value changes the current buffer contents.
            if (!is_readonly && strcmp(buf, state->InitialTextA.Data) != 0)
            {
                // Push records into the undo stack so we can CTRL+Z the revert operation itself
                apply_new_text = state->InitialTextA.Data;
                apply_new_text_length = state->InitialTextA.Size - 1;
                ImVector<ImWchar> w_text;
                if (apply_new_text_length > 0)
                {
                    w_text.resize(ImTextCountCharsFromUtf8(apply_new_text, apply_new_text + apply_new_text_length) + 1);
                    ImTextStrFromUtf8(w_text.Data, w_text.Size, apply_new_text, apply_new_text + apply_new_text_length);
                }
                stb_textedit_replace(state, &state->Stb, w_text.Data, (apply_new_text_length > 0) ? (w_text.Size - 1) : 0);
            }
        }

        // When using 'ImGuiInputTextFlags_EnterReturnsTrue' as a special case we reapply the live buffer back to the input buffer before clearing ActiveId, even though strictly speaking it wasn't modified on this frame.
        // If we didn't do that, code like InputInt() with ImGuiInputTextFlags_EnterReturnsTrue would fail.
        // This also allows the user to use InputText() with ImGuiInputTextFlags_EnterReturnsTrue without maintaining any user-side storage (please note that if you use this property along ImGuiInputTextFlags_CallbackResize you can end up with your temporary string object unnecessarily allocating once a frame, either store your string data, either if you don't then don't use ImGuiInputTextFlags_CallbackResize).
        bool apply_edit_back_to_user_buffer = !cancel_edit || (enter_pressed && (flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0);
        if (apply_edit_back_to_user_buffer)
        {
            // Apply new value immediately - copy modified buffer back
            // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
            // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
            // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
            if (!is_readonly)
            {
                state->TextAIsValid = true;
                state->TextA.resize(state->TextW.Size * 4 + 1);
                ImTextStrToUtf8(state->TextA.Data, state->TextA.Size, state->TextW.Data, NULL);
            }

            // User callback
            if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackEdit | ImGuiInputTextFlags_CallbackAlways)) != 0)
            {
                IM_ASSERT(callback != NULL);

                // The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
                ImGuiInputTextFlags event_flag = 0;
                ImGuiKey event_key = ImGuiKey_COUNT;
                if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))
                {
                    event_flag = ImGuiInputTextFlags_CallbackCompletion;
                    event_key = ImGuiKey_Tab;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_UpArrow;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_DownArrow;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackEdit) && state->Edited)
                {
                    event_flag = ImGuiInputTextFlags_CallbackEdit;
                }
                else if (flags & ImGuiInputTextFlags_CallbackAlways)
                {
                    event_flag = ImGuiInputTextFlags_CallbackAlways;
                }

                if (event_flag)
                {
                    ImGuiInputTextCallbackData callback_data;
                    memset(&callback_data, 0, sizeof(ImGuiInputTextCallbackData));
                    callback_data.EventFlag = event_flag;
                    callback_data.Flags = flags;
                    callback_data.UserData = callback_user_data;

                    callback_data.EventKey = event_key;
                    callback_data.Buf = state->TextA.Data;
                    callback_data.BufTextLen = state->CurLenA;
                    callback_data.BufSize = state->BufCapacityA;
                    callback_data.BufDirty = false;

                    // We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
                    ImWchar* text = state->TextW.Data;
                    const int utf8_cursor_pos = callback_data.CursorPos = ImTextCountUtf8BytesFromStr(text, text + state->Stb.cursor);
                    const int utf8_selection_start = callback_data.SelectionStart = ImTextCountUtf8BytesFromStr(text, text + state->Stb.select_start);
                    const int utf8_selection_end = callback_data.SelectionEnd = ImTextCountUtf8BytesFromStr(text, text + state->Stb.select_end);

                    // Call user code
                    callback(&callback_data);

                    // Read back what user may have modified
                    IM_ASSERT(callback_data.Buf == state->TextA.Data);  // Invalid to modify those fields
                    IM_ASSERT(callback_data.BufSize == state->BufCapacityA);
                    IM_ASSERT(callback_data.Flags == flags);
                    const bool buf_dirty = callback_data.BufDirty;
                    if (callback_data.CursorPos != utf8_cursor_pos || buf_dirty)            { state->Stb.cursor = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.CursorPos); state->CursorFollow = true; }
                    if (callback_data.SelectionStart != utf8_selection_start || buf_dirty)  { state->Stb.select_start = (callback_data.SelectionStart == callback_data.CursorPos) ? state->Stb.cursor : ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart); }
                    if (callback_data.SelectionEnd != utf8_selection_end || buf_dirty)      { state->Stb.select_end = (callback_data.SelectionEnd == callback_data.SelectionStart) ? state->Stb.select_start : ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd); }
                    if (buf_dirty)
                    {
                        IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!
                        if (callback_data.BufTextLen > backup_current_text_length && is_resizable)
                            state->TextW.resize(state->TextW.Size + (callback_data.BufTextLen - backup_current_text_length));
                        state->CurLenW = ImTextStrFromUtf8(state->TextW.Data, state->TextW.Size, callback_data.Buf, NULL);
                        state->CurLenA = callback_data.BufTextLen;  // Assume correct length and valid UTF-8 from user, saves us an extra strlen()
                        state->CursorAnimReset();
                    }
                }
            }

            // Will copy result string if modified
            if (!is_readonly && strcmp(state->TextA.Data, buf) != 0)
            {
                apply_new_text = state->TextA.Data;
                apply_new_text_length = state->CurLenA;
            }
        }

        // Copy result to user buffer
        if (apply_new_text)
        {
            // We cannot test for 'backup_current_text_length != apply_new_text_length' here because we have no guarantee that the size
            // of our owned buffer matches the size of the string object held by the user, and by design we allow InputText() to be used
            // without any storage on user's side.
            IM_ASSERT(apply_new_text_length >= 0);
            if (is_resizable)
            {
                ImGuiInputTextCallbackData callback_data;
                callback_data.EventFlag = ImGuiInputTextFlags_CallbackResize;
                callback_data.Flags = flags;
                callback_data.Buf = buf;
                callback_data.BufTextLen = apply_new_text_length;
                callback_data.BufSize = ImMax(buf_size, apply_new_text_length + 1);
                callback_data.UserData = callback_user_data;
                callback(&callback_data);
                buf = callback_data.Buf;
                buf_size = callback_data.BufSize;
                apply_new_text_length = ImMin(callback_data.BufTextLen, buf_size - 1);
                IM_ASSERT(apply_new_text_length <= buf_size);
            }
            //IMGUI_DEBUG_LOG("InputText(\"%s\"): apply_new_text length %d\n", label, apply_new_text_length);

            // If the underlying buffer resize was denied or not carried to the next frame, apply_new_text_length+1 may be >= buf_size.
            ImStrncpy(buf, apply_new_text, ImMin(apply_new_text_length + 1, buf_size));
            value_changed = true;
        }

        // Clear temporary user storage
        state->UserFlags = 0;
        state->UserCallback = NULL;
        state->UserCallbackData = NULL;
    }

    // Release active ID at the end of the function (so e.g. pressing Return still does a final application of the value)
    if (clear_active_id && g.ActiveId == id)
        ClearActiveID();

    // Render frame
    if (!is_multiline)
    {
        RenderNavHighlight(frame_bb, id);
        RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    }

    const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + inner_size.x, frame_bb.Min.y + inner_size.y); // Not using frame_bb.Max because we have adjusted size
    ImVec2 draw_pos = is_multiline ? draw_window->DC.CursorPos : frame_bb.Min + style.FramePadding;
    ImVec2 text_size(0.0f, 0.0f);

    // Set upper limit of single-line InputTextEx() at 2 million characters strings. The current pathological worst case is a long line
    // without any carriage return, which would makes ImFont::RenderText() reserve too many vertices and probably crash. Avoid it altogether.
    // Note that we only use this limit on single-line InputText(), so a pathologically large line on a InputTextMultiline() would still crash.
    const int buf_display_max_length = 2 * 1024 * 1024;
    const char* buf_display = buf_display_from_state ? state->TextA.Data : buf; //-V595
    const char* buf_display_end = NULL; // We have specialized paths below for setting the length
    if (is_displaying_hint)
    {
        buf_display = hint;
        buf_display_end = hint + strlen(hint);
    }

    // Render text. We currently only render selection when the widget is active or while scrolling.
    // FIXME: We could remove the '&& render_cursor' to keep rendering selection when inactive.
    if (render_cursor || render_selection)
    {
        IM_ASSERT(state != NULL);
        if (!is_displaying_hint)
            buf_display_end = buf_display + state->CurLenA;

        // Render text (with cursor and selection)
        // This is going to be messy. We need to:
        // - Display the text (this alone can be more easily clipped)
        // - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
        // - Measure text height (for scrollbar)
        // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
        // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
        const ImWchar* text_begin = state->TextW.Data;
        ImVec2 cursor_offset, select_start_offset;

        {
            // Find lines numbers straddling 'cursor' (slot 0) and 'select_start' (slot 1) positions.
            const ImWchar* searches_input_ptr[2] = { NULL, NULL };
            int searches_result_line_no[2] = { -1000, -1000 };
            int searches_remaining = 0;
            if (render_cursor)
            {
                searches_input_ptr[0] = text_begin + state->Stb.cursor;
                searches_result_line_no[0] = -1;
                searches_remaining++;
            }
            if (render_selection)
            {
                searches_input_ptr[1] = text_begin + ImMin(state->Stb.select_start, state->Stb.select_end);
                searches_result_line_no[1] = -1;
                searches_remaining++;
            }

            // Iterate all lines to find our line numbers
            // In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
            searches_remaining += is_multiline ? 1 : 0;
            int line_count = 0;
            //for (const ImWchar* s = text_begin; (s = (const ImWchar*)wcschr((const wchar_t*)s, (wchar_t)'\n')) != NULL; s++)  // FIXME-OPT: Could use this when wchar_t are 16-bit
            for (const ImWchar* s = text_begin; *s != 0; s++)
                if (*s == '\n')
                {
                    line_count++;
                    if (searches_result_line_no[0] == -1 && s >= searches_input_ptr[0]) { searches_result_line_no[0] = line_count; if (--searches_remaining <= 0) break; }
                    if (searches_result_line_no[1] == -1 && s >= searches_input_ptr[1]) { searches_result_line_no[1] = line_count; if (--searches_remaining <= 0) break; }
                }
            line_count++;
            if (searches_result_line_no[0] == -1)
                searches_result_line_no[0] = line_count;
            if (searches_result_line_no[1] == -1)
                searches_result_line_no[1] = line_count;

            // Calculate 2d position by finding the beginning of the line and measuring distance
            cursor_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[0], text_begin), searches_input_ptr[0]).x;
            cursor_offset.y = searches_result_line_no[0] * g.FontSize;
            if (searches_result_line_no[1] >= 0)
            {
                select_start_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[1], text_begin), searches_input_ptr[1]).x;
                select_start_offset.y = searches_result_line_no[1] * g.FontSize;
            }

            // Store text height (note that we haven't calculated text width at all, see GitHub issues #383, #1224)
            if (is_multiline)
                text_size = ImVec2(inner_size.x, line_count * g.FontSize);
        }

        // Scroll
        if (render_cursor && state->CursorFollow)
        {
            // Horizontal scroll in chunks of quarter width
            if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))
            {
                const float scroll_increment_x = inner_size.x * 0.25f;
                const float visible_width = inner_size.x - style.FramePadding.x;
                if (cursor_offset.x < state->ScrollX)
                    state->ScrollX = IM_FLOOR(ImMax(0.0f, cursor_offset.x - scroll_increment_x));
                else if (cursor_offset.x - visible_width >= state->ScrollX)
                    state->ScrollX = IM_FLOOR(cursor_offset.x - visible_width + scroll_increment_x);
            }
            else
            {
                state->ScrollX = 0.0f;
            }

            // Vertical scroll
            if (is_multiline)
            {
                // Test if cursor is vertically visible
                if (cursor_offset.y - g.FontSize < scroll_y)
                    scroll_y = ImMax(0.0f, cursor_offset.y - g.FontSize);
                else if (cursor_offset.y - inner_size.y >= scroll_y)
                    scroll_y = cursor_offset.y - inner_size.y + style.FramePadding.y * 2.0f;
                const float scroll_max_y = ImMax((text_size.y + style.FramePadding.y * 2.0f) - inner_size.y, 0.0f);
                scroll_y = ImClamp(scroll_y, 0.0f, scroll_max_y);
                draw_pos.y += (draw_window->Scroll.y - scroll_y);   // Manipulate cursor pos immediately avoid a frame of lag
                draw_window->Scroll.y = scroll_y;
            }

            state->CursorFollow = false;
        }

        // Draw selection
        const ImVec2 draw_scroll = ImVec2(state->ScrollX, 0.0f);
        if (render_selection)
        {
            const ImWchar* text_selected_begin = text_begin + ImMin(state->Stb.select_start, state->Stb.select_end);
            const ImWchar* text_selected_end = text_begin + ImMax(state->Stb.select_start, state->Stb.select_end);

            ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg, render_cursor ? 1.0f : 0.6f); // FIXME: current code flow mandate that render_cursor is always true here, we are leaving the transparent one for tests.
            float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
            float bg_offy_dn = is_multiline ? 0.0f : 2.0f;
            ImVec2 rect_pos = draw_pos + select_start_offset - draw_scroll;
            for (const ImWchar* p = text_selected_begin; p < text_selected_end; )
            {
                if (rect_pos.y > clip_rect.w + g.FontSize)
                    break;
                if (rect_pos.y < clip_rect.y)
                {
                    //p = (const ImWchar*)wmemchr((const wchar_t*)p, '\n', text_selected_end - p);  // FIXME-OPT: Could use this when wchar_t are 16-bit
                    //p = p ? p + 1 : text_selected_end;
                    while (p < text_selected_end)
                        if (*p++ == '\n')
                            break;
                }
                else
                {
                    ImVec2 rect_size = InputTextCalcTextSizeW(p, text_selected_end, &p, NULL, true);
                    if (rect_size.x <= 0.0f) rect_size.x = IM_FLOOR(g.Font->GetCharAdvance((ImWchar)' ') * 0.50f); // So we can see selected empty lines
                    ImRect rect(rect_pos + ImVec2(0.0f, bg_offy_up - g.FontSize), rect_pos + ImVec2(rect_size.x, bg_offy_dn));
                    rect.ClipWith(clip_rect);
                    if (rect.Overlaps(clip_rect))
                        draw_window->DrawList->AddRectFilled(rect.Min, rect.Max, bg_color);
                }
                rect_pos.x = draw_pos.x - draw_scroll.x;
                rect_pos.y += g.FontSize;
            }
        }

        // We test for 'buf_display_max_length' as a way to avoid some pathological cases (e.g. single-line 1 MB string) which would make ImDrawList crash.
        if (is_multiline || (buf_display_end - buf_display) < buf_display_max_length)
        {
            ImU32 col = GetColorU32(is_displaying_hint ? ImGuiCol_TextDisabled : ImGuiCol_Text);
            draw_window->DrawList->AddText(g.Font, g.FontSize, draw_pos - draw_scroll, col, buf_display, buf_display_end, 0.0f, is_multiline ? NULL : &clip_rect);
        }

        // Draw blinking cursor
        if (render_cursor)
        {
            state->CursorAnim += io.DeltaTime;
            bool cursor_is_visible = (!g.IO.ConfigInputTextCursorBlink) || (state->CursorAnim <= 0.0f) || ImFmod(state->CursorAnim, 1.20f) <= 0.80f;
            ImVec2 cursor_screen_pos = ImFloor(draw_pos + cursor_offset - draw_scroll);
            ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y - g.FontSize + 0.5f, cursor_screen_pos.x + 1.0f, cursor_screen_pos.y - 1.5f);
            if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
                draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

            // Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
            if (!is_readonly)
            {
                g.PlatformImePos = ImVec2(cursor_screen_pos.x - 1, cursor_screen_pos.y - g.FontSize);
                g.PlatformImePosViewport = window->Viewport;
            }
        }
    }
    else
    {
        // Render text only (no selection, no cursor)
        if (is_multiline)
            text_size = ImVec2(inner_size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_display_end) * g.FontSize); // We don't need width
        else if (!is_displaying_hint && g.ActiveId == id)
            buf_display_end = buf_display + state->CurLenA;
        else if (!is_displaying_hint)
            buf_display_end = buf_display + strlen(buf_display);

        if (is_multiline || (buf_display_end - buf_display) < buf_display_max_length)
        {
            ImU32 col = GetColorU32(is_displaying_hint ? ImGuiCol_TextDisabled : ImGuiCol_Text);
            draw_window->DrawList->AddText(g.Font, g.FontSize, draw_pos, col, buf_display, buf_display_end, 0.0f, is_multiline ? NULL : &clip_rect);
        }
    }

    if (is_password && !is_displaying_hint)
        PopFont();

    if (is_multiline)
    {
        Dummy(ImVec2(text_size.x, text_size.y + style.FramePadding.y));
        EndChild();
        EndGroup();
    }

    // Log as text
    if (g.LogEnabled && (!is_password || is_displaying_hint))
    {
        LogSetNextTextDecoration("{", "}");
        LogRenderedText(&draw_pos, buf_display, buf_display_end);
    }

    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if (value_changed && !(flags & ImGuiInputTextFlags_NoMarkEdited))
        MarkItemEdited(id);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)
        return enter_pressed;
    else
        return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ColorEdit, ColorPicker, ColorButton, etc.
//-------------------------------------------------------------------------
// - ColorEdit3()
// - ColorEdit4()
// - ColorPicker3()
// - RenderColorRectWithAlphaCheckerboard() [Internal]
// - ColorPicker4()
// - ColorButton()
// - SetColorEditOptions()
// - ColorTooltip() [Internal]
// - ColorEditOptionsPopup() [Internal]
// - ColorPickerOptionsPopup() [Internal]
//-------------------------------------------------------------------------

bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    return ColorEdit4(label, col, flags | ImGuiColorEditFlags_NoAlpha);
}

// Edit colors components (each component in 0.0f..1.0f range).
// See enum ImGuiColorEditFlags_ for available options. e.g. Only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// With typical options: Left-click on color square to open color picker. Right-click to open option menu. CTRL-Click over input fields to edit them and TAB to go to next item.
bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float square_sz = GetFrameHeight();
    const float w_full = CalcItemWidth();
    const float w_button = (flags & ImGuiColorEditFlags_NoSmallPreview) ? 0.0f : (square_sz + style.ItemInnerSpacing.x);
    const float w_inputs = w_full - w_button;
    const char* label_display_end = FindRenderedTextEnd(label);
    g.NextItemData.ClearFlags();

    BeginGroup();
    PushID(label);

    // If we're not showing any slider there's no point in doing any HSV conversions
    const ImGuiColorEditFlags flags_untouched = flags;
    if (flags & ImGuiColorEditFlags_NoInputs)
        flags = (flags & (~ImGuiColorEditFlags__DisplayMask)) | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_NoOptions;

    // Context menu: display and modify options (before defaults are applied)
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorEditOptionsPopup(col, flags);

    // Read stored options
    if (!(flags & ImGuiColorEditFlags__DisplayMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__DisplayMask);
    if (!(flags & ImGuiColorEditFlags__DataTypeMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__DataTypeMask);
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__PickerMask);
    if (!(flags & ImGuiColorEditFlags__InputMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__InputMask);
    flags |= (g.ColorEditOptions & ~(ImGuiColorEditFlags__DisplayMask | ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask | ImGuiColorEditFlags__InputMask));
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DisplayMask)); // Check that only 1 is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));   // Check that only 1 is selected

    const bool alpha = (flags & ImGuiColorEditFlags_NoAlpha) == 0;
    const bool hdr = (flags & ImGuiColorEditFlags_HDR) != 0;
    const int components = alpha ? 4 : 3;

    // Convert to the formats we need
    float f[4] = { col[0], col[1], col[2], alpha ? col[3] : 1.0f };
    if ((flags & ImGuiColorEditFlags_InputHSV) && (flags & ImGuiColorEditFlags_DisplayRGB))
        ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);
    else if ((flags & ImGuiColorEditFlags_InputRGB) && (flags & ImGuiColorEditFlags_DisplayHSV))
    {
        // Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
        ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);
        if (memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0)
        {
            if (f[1] == 0)
                f[0] = g.ColorEditLastHue;
            if (f[2] == 0)
                f[1] = g.ColorEditLastSat;
        }
    }
    int i[4] = { IM_F32_TO_INT8_UNBOUND(f[0]), IM_F32_TO_INT8_UNBOUND(f[1]), IM_F32_TO_INT8_UNBOUND(f[2]), IM_F32_TO_INT8_UNBOUND(f[3]) };

    bool value_changed = false;
    bool value_changed_as_float = false;

    const ImVec2 pos = window->DC.CursorPos;
    const float inputs_offset_x = (style.ColorButtonPosition == ImGuiDir_Left) ? w_button : 0.0f;
    window->DC.CursorPos.x = pos.x + inputs_offset_x;

    if ((flags & (ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV)) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB/HSV 0..255 Sliders
        const float w_item_one  = ImMax(1.0f, IM_FLOOR((w_inputs - (style.ItemInnerSpacing.x) * (components - 1)) / (float)components));
        const float w_item_last = ImMax(1.0f, IM_FLOOR(w_inputs - (w_item_one + style.ItemInnerSpacing.x) * (components - 1)));

        const bool hide_prefix = (w_item_one <= CalcTextSize((flags & ImGuiColorEditFlags_Float) ? "M:0.000" : "M:000").x);
        static const char* ids[4] = { "##X", "##Y", "##Z", "##W" };
        static const char* fmt_table_int[3][4] =
        {
            {   "%3d",   "%3d",   "%3d",   "%3d" }, // Short display
            { "R:%3d", "G:%3d", "B:%3d", "A:%3d" }, // Long display for RGBA
            { "H:%3d", "S:%3d", "V:%3d", "A:%3d" }  // Long display for HSVA
        };
        static const char* fmt_table_float[3][4] =
        {
            {   "%0.3f",   "%0.3f",   "%0.3f",   "%0.3f" }, // Short display
            { "R:%0.3f", "G:%0.3f", "B:%0.3f", "A:%0.3f" }, // Long display for RGBA
            { "H:%0.3f", "S:%0.3f", "V:%0.3f", "A:%0.3f" }  // Long display for HSVA
        };
        const int fmt_idx = hide_prefix ? 0 : (flags & ImGuiColorEditFlags_DisplayHSV) ? 2 : 1;

        for (int n = 0; n < components; n++)
        {
            if (n > 0)
                SameLine(0, style.ItemInnerSpacing.x);
            SetNextItemWidth((n + 1 < components) ? w_item_one : w_item_last);

            // FIXME: When ImGuiColorEditFlags_HDR flag is passed HS values snap in weird ways when SV values go below 0.
            if (flags & ImGuiColorEditFlags_Float)
            {
                value_changed |= DragFloat(ids[n], &f[n], 1.0f / 255.0f, 0.0f, hdr ? 0.0f : 1.0f, fmt_table_float[fmt_idx][n]);
                value_changed_as_float |= value_changed;
            }
            else
            {
                value_changed |= DragInt(ids[n], &i[n], 1.0f, 0, hdr ? 0 : 255, fmt_table_int[fmt_idx][n]);
            }
            if (!(flags & ImGuiColorEditFlags_NoOptions))
                OpenPopupOnItemClick("context");
        }
    }
    else if ((flags & ImGuiColorEditFlags_DisplayHex) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB Hexadecimal Input
        char buf[64];
        if (alpha)
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", ImClamp(i[0], 0, 255), ImClamp(i[1], 0, 255), ImClamp(i[2], 0, 255), ImClamp(i[3], 0, 255));
        else
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", ImClamp(i[0], 0, 255), ImClamp(i[1], 0, 255), ImClamp(i[2], 0, 255));
        SetNextItemWidth(w_inputs);
        if (InputText("##Text", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))
        {
            value_changed = true;
            char* p = buf;
            while (*p == '#' || ImCharIsBlankA(*p))
                p++;
            i[0] = i[1] = i[2] = 0;
            i[3] = 0xFF; // alpha default to 255 is not parsed by scanf (e.g. inputting #FFFFFF omitting alpha)
            int r;
            if (alpha)
                r = sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]); // Treat at unsigned (%X is unsigned)
            else
                r = sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);
            IM_UNUSED(r); // Fixes C6031: Return value ignored: 'sscanf'.
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
    }

    ImGuiWindow* picker_active_window = NULL;
    if (!(flags & ImGuiColorEditFlags_NoSmallPreview))
    {
        const float button_offset_x = ((flags & ImGuiColorEditFlags_NoInputs) || (style.ColorButtonPosition == ImGuiDir_Left)) ? 0.0f : w_inputs + style.ItemInnerSpacing.x;
        window->DC.CursorPos = ImVec2(pos.x + button_offset_x, pos.y);

        const ImVec4 col_v4(col[0], col[1], col[2], alpha ? col[3] : 1.0f);
        if (ColorButton("##ColorButton", col_v4, flags))
        {
            if (!(flags & ImGuiColorEditFlags_NoPicker))
            {
                // Store current color and open a picker
                g.ColorPickerRef = col_v4;
                OpenPopup("picker");
                SetNextWindowPos(window->DC.LastItemRect.GetBL() + ImVec2(-1, style.ItemSpacing.y));
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");

        if (BeginPopup("picker"))
        {
            picker_active_window = g.CurrentWindow;
            if (label != label_display_end)
            {
                TextEx(label, label_display_end);
                Spacing();
            }
            ImGuiColorEditFlags picker_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask | ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaBar;
            ImGuiColorEditFlags picker_flags = (flags_untouched & picker_flags_to_forward) | ImGuiColorEditFlags__DisplayMask | ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_AlphaPreviewHalf;
            SetNextItemWidth(square_sz * 12.0f); // Use 256 + bar sizes?
            value_changed |= ColorPicker4("##picker", col, picker_flags, &g.ColorPickerRef.x);
            EndPopup();
        }
    }

    if (label != label_display_end && !(flags & ImGuiColorEditFlags_NoLabel))
    {
        const float text_offset_x = (flags & ImGuiColorEditFlags_NoInputs) ? w_button : w_full + style.ItemInnerSpacing.x;
        window->DC.CursorPos = ImVec2(pos.x + text_offset_x, pos.y + style.FramePadding.y);
        TextEx(label, label_display_end);
    }

    // Convert back
    if (value_changed && picker_active_window == NULL)
    {
        if (!value_changed_as_float)
            for (int n = 0; n < 4; n++)
                f[n] = i[n] / 255.0f;
        if ((flags & ImGuiColorEditFlags_DisplayHSV) && (flags & ImGuiColorEditFlags_InputRGB))
        {
            g.ColorEditLastHue = f[0];
            g.ColorEditLastSat = f[1];
            ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);
            memcpy(g.ColorEditLastColor, f, sizeof(float) * 3);
        }
        if ((flags & ImGuiColorEditFlags_DisplayRGB) && (flags & ImGuiColorEditFlags_InputHSV))
            ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);

        col[0] = f[0];
        col[1] = f[1];
        col[2] = f[2];
        if (alpha)
            col[3] = f[3];
    }

    PopID();
    EndGroup();

    // Drag and Drop Target
    // NB: The flag test is merely an optional micro-optimization, BeginDragDropTarget() does the same test.
    if ((window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect) && !(flags & ImGuiColorEditFlags_NoDragDrop) && BeginDragDropTarget())
    {
        bool accepted_drag_drop = false;
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * 3); // Preserve alpha if any //-V512
            value_changed = accepted_drag_drop = true;
        }
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * components);
            value_changed = accepted_drag_drop = true;
        }

        // Drag-drop payloads are always RGB
        if (accepted_drag_drop && (flags & ImGuiColorEditFlags_InputHSV))
            ColorConvertRGBtoHSV(col[0], col[1], col[2], col[0], col[1], col[2]);
        EndDragDropTarget();
    }

    // When picker is being actively used, use its active id so IsItemActive() will function on ColorEdit4().
    if (picker_active_window && g.ActiveId != 0 && g.ActiveIdWindow == picker_active_window)
        window->DC.LastItemId = g.ActiveId;

    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    return value_changed;
}

bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    float col4[4] = { col[0], col[1], col[2], 1.0f };
    if (!ColorPicker4(label, col4, flags | ImGuiColorEditFlags_NoAlpha))
        return false;
    col[0] = col4[0]; col[1] = col4[1]; col[2] = col4[2];
    return true;
}

// Helper for ColorPicker4()
static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float bar_w, float alpha)
{
    ImU32 alpha8 = IM_F32_TO_INT8_SAT(alpha);
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + half_sz.x + 1,         pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Right, IM_COL32(0,0,0,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + half_sz.x,             pos.y), half_sz,                              ImGuiDir_Right, IM_COL32(255,255,255,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + bar_w - half_sz.x - 1, pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Left,  IM_COL32(0,0,0,alpha8));
    ImGui::RenderArrowPointingAt(draw_list, ImVec2(pos.x + bar_w - half_sz.x,     pos.y), half_sz,                              ImGuiDir_Left,  IM_COL32(255,255,255,alpha8));
}

// Note: ColorPicker4() only accesses 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// (In C++ the 'float col[4]' notation for a function argument is equivalent to 'float* col', we only specify a size to facilitate understanding of the code.)
// FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..)
// FIXME: this is trying to be aware of style.Alpha but not fully correct. Also, the color wheel will have overlapping glitches with (style.Alpha < 1.0)
bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImDrawList* draw_list = window->DrawList;
    ImGuiStyle& style = g.Style;
    ImGuiIO& io = g.IO;

    const float width = CalcItemWidth();
    g.NextItemData.ClearFlags();

    PushID(label);
    BeginGroup();

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
        flags |= ImGuiColorEditFlags_NoSmallPreview;

    // Context menu: display and store options.
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorPickerOptionsPopup(col, flags);

    // Read stored options
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= ((g.ColorEditOptions & ImGuiColorEditFlags__PickerMask) ? g.ColorEditOptions : ImGuiColorEditFlags__OptionsDefault) & ImGuiColorEditFlags__PickerMask;
    if (!(flags & ImGuiColorEditFlags__InputMask))
        flags |= ((g.ColorEditOptions & ImGuiColorEditFlags__InputMask) ? g.ColorEditOptions : ImGuiColorEditFlags__OptionsDefault) & ImGuiColorEditFlags__InputMask;
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__PickerMask)); // Check that only 1 is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));  // Check that only 1 is selected
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags_AlphaBar);

    // Setup
    int components = (flags & ImGuiColorEditFlags_NoAlpha) ? 3 : 4;
    bool alpha_bar = (flags & ImGuiColorEditFlags_AlphaBar) && !(flags & ImGuiColorEditFlags_NoAlpha);
    ImVec2 picker_pos = window->DC.CursorPos;
    float square_sz = GetFrameHeight();
    float bars_width = square_sz; // Arbitrary smallish width of Hue/Alpha picking bars
    float sv_picker_size = ImMax(bars_width * 1, width - (alpha_bar ? 2 : 1) * (bars_width + style.ItemInnerSpacing.x)); // Saturation/Value picking box
    float bar0_pos_x = picker_pos.x + sv_picker_size + style.ItemInnerSpacing.x;
    float bar1_pos_x = bar0_pos_x + bars_width + style.ItemInnerSpacing.x;
    float bars_triangles_half_sz = IM_FLOOR(bars_width * 0.20f);

    float backup_initial_col[4];
    memcpy(backup_initial_col, col, components * sizeof(float));

    float wheel_thickness = sv_picker_size * 0.08f;
    float wheel_r_outer = sv_picker_size * 0.50f;
    float wheel_r_inner = wheel_r_outer - wheel_thickness;
    ImVec2 wheel_center(picker_pos.x + (sv_picker_size + bars_width)*0.5f, picker_pos.y + sv_picker_size * 0.5f);

    // Note: the triangle is displayed rotated with triangle_pa pointing to Hue, but most coordinates stays unrotated for logic.
    float triangle_r = wheel_r_inner - (int)(sv_picker_size * 0.027f);
    ImVec2 triangle_pa = ImVec2(triangle_r, 0.0f); // Hue point.
    ImVec2 triangle_pb = ImVec2(triangle_r * -0.5f, triangle_r * -0.866025f); // Black point.
    ImVec2 triangle_pc = ImVec2(triangle_r * -0.5f, triangle_r * +0.866025f); // White point.

    float H = col[0], S = col[1], V = col[2];
    float R = col[0], G = col[1], B = col[2];
    if (flags & ImGuiColorEditFlags_InputRGB)
    {
        // Hue is lost when converting from greyscale rgb (saturation=0). Restore it.
        ColorConvertRGBtoHSV(R, G, B, H, S, V);
        if (memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0)
        {
            if (S == 0)
                H = g.ColorEditLastHue;
            if (V == 0)
                S = g.ColorEditLastSat;
        }
    }
    else if (flags & ImGuiColorEditFlags_InputHSV)
    {
        ColorConvertHSVtoRGB(H, S, V, R, G, B);
    }

    bool value_changed = false, value_changed_h = false, value_changed_sv = false;

    PushItemFlag(ImGuiItemFlags_NoNav, true);
    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Hue wheel + SV triangle logic
        InvisibleButton("hsv", ImVec2(sv_picker_size + style.ItemInnerSpacing.x + bars_width, sv_picker_size));
        if (IsItemActive())
        {
            ImVec2 initial_off = g.IO.MouseClickedPos[0] - wheel_center;
            ImVec2 current_off = g.IO.MousePos - wheel_center;
            float initial_dist2 = ImLengthSqr(initial_off);
            if (initial_dist2 >= (wheel_r_inner - 1) * (wheel_r_inner - 1) && initial_dist2 <= (wheel_r_outer + 1) * (wheel_r_outer + 1))
            {
                // Interactive with Hue wheel
                H = ImAtan2(current_off.y, current_off.x) / IM_PI * 0.5f;
                if (H < 0.0f)
                    H += 1.0f;
                value_changed = value_changed_h = true;
            }
            float cos_hue_angle = ImCos(-H * 2.0f * IM_PI);
            float sin_hue_angle = ImSin(-H * 2.0f * IM_PI);
            if (ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, ImRotate(initial_off, cos_hue_angle, sin_hue_angle)))
            {
                // Interacting with SV triangle
                ImVec2 current_off_unrotated = ImRotate(current_off, cos_hue_angle, sin_hue_angle);
                if (!ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated))
                    current_off_unrotated = ImTriangleClosestPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated);
                float uu, vv, ww;
                ImTriangleBarycentricCoords(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated, uu, vv, ww);
                V = ImClamp(1.0f - vv, 0.0001f, 1.0f);
                S = ImClamp(uu / V, 0.0001f, 1.0f);
                value_changed = value_changed_sv = true;
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // SV rectangle logic
        InvisibleButton("sv", ImVec2(sv_picker_size, sv_picker_size));
        if (IsItemActive())
        {
            S = ImSaturate((io.MousePos.x - picker_pos.x) / (sv_picker_size - 1));
            V = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size - 1));
            value_changed = value_changed_sv = true;
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");

        // Hue bar logic
        SetCursorScreenPos(ImVec2(bar0_pos_x, picker_pos.y));
        InvisibleButton("hue", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            H = ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size - 1));
            value_changed = value_changed_h = true;
        }
    }

    // Alpha bar logic
    if (alpha_bar)
    {
        SetCursorScreenPos(ImVec2(bar1_pos_x, picker_pos.y));
        InvisibleButton("alpha", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            col[3] = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size - 1));
            value_changed = true;
        }
    }
    PopItemFlag(); // ImGuiItemFlags_NoNav

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        SameLine(0, style.ItemInnerSpacing.x);
        BeginGroup();
    }

    if (!(flags & ImGuiColorEditFlags_NoLabel))
    {
        const char* label_display_end = FindRenderedTextEnd(label);
        if (label != label_display_end)
        {
            if ((flags & ImGuiColorEditFlags_NoSidePreview))
                SameLine(0, style.ItemInnerSpacing.x);
            TextEx(label, label_display_end);
        }
    }

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        PushItemFlag(ImGuiItemFlags_NoNavDefaultFocus, true);
        ImVec4 col_v4(col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if ((flags & ImGuiColorEditFlags_NoLabel))
            Text("Current");

        ImGuiColorEditFlags sub_flags_to_forward = ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf | ImGuiColorEditFlags_NoTooltip;
        ColorButton("##current", col_v4, (flags & sub_flags_to_forward), ImVec2(square_sz * 3, square_sz * 2));
        if (ref_col != NULL)
        {
            Text("Original");
            ImVec4 ref_col_v4(ref_col[0], ref_col[1], ref_col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : ref_col[3]);
            if (ColorButton("##original", ref_col_v4, (flags & sub_flags_to_forward), ImVec2(square_sz * 3, square_sz * 2)))
            {
                memcpy(col, ref_col, components * sizeof(float));
                value_changed = true;
            }
        }
        PopItemFlag();
        EndGroup();
    }

    // Convert back color to RGB
    if (value_changed_h || value_changed_sv)
    {
        if (flags & ImGuiColorEditFlags_InputRGB)
        {
            ColorConvertHSVtoRGB(H >= 1.0f ? H - 10 * 1e-6f : H, S > 0.0f ? S : 10 * 1e-6f, V > 0.0f ? V : 1e-6f, col[0], col[1], col[2]);
            g.ColorEditLastHue = H;
            g.ColorEditLastSat = S;
            memcpy(g.ColorEditLastColor, col, sizeof(float) * 3);
        }
        else if (flags & ImGuiColorEditFlags_InputHSV)
        {
            col[0] = H;
            col[1] = S;
            col[2] = V;
        }
    }

    // R,G,B and H,S,V slider color editor
    bool value_changed_fix_hue_wrap = false;
    if ((flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        PushItemWidth((alpha_bar ? bar1_pos_x : bar0_pos_x) + bars_width - picker_pos.x);
        ImGuiColorEditFlags sub_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoOptions | ImGuiColorEditFlags_NoSmallPreview | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf;
        ImGuiColorEditFlags sub_flags = (flags & sub_flags_to_forward) | ImGuiColorEditFlags_NoPicker;
        if (flags & ImGuiColorEditFlags_DisplayRGB || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            if (ColorEdit4("##rgb", col, sub_flags | ImGuiColorEditFlags_DisplayRGB))
            {
                // FIXME: Hackily differentiating using the DragInt (ActiveId != 0 && !ActiveIdAllowOverlap) vs. using the InputText or DropTarget.
                // For the later we don't want to run the hue-wrap canceling code. If you are well versed in HSV picker please provide your input! (See #2050)
                value_changed_fix_hue_wrap = (g.ActiveId != 0 && !g.ActiveIdAllowOverlap);
                value_changed = true;
            }
        if (flags & ImGuiColorEditFlags_DisplayHSV || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            value_changed |= ColorEdit4("##hsv", col, sub_flags | ImGuiColorEditFlags_DisplayHSV);
        if (flags & ImGuiColorEditFlags_DisplayHex || (flags & ImGuiColorEditFlags__DisplayMask) == 0)
            value_changed |= ColorEdit4("##hex", col, sub_flags | ImGuiColorEditFlags_DisplayHex);
        PopItemWidth();
    }

    // Try to cancel hue wrap (after ColorEdit4 call), if any
    if (value_changed_fix_hue_wrap && (flags & ImGuiColorEditFlags_InputRGB))
    {
        float new_H, new_S, new_V;
        ColorConvertRGBtoHSV(col[0], col[1], col[2], new_H, new_S, new_V);
        if (new_H <= 0 && H > 0)
        {
            if (new_V <= 0 && V != new_V)
                ColorConvertHSVtoRGB(H, S, new_V <= 0 ? V * 0.5f : new_V, col[0], col[1], col[2]);
            else if (new_S <= 0)
                ColorConvertHSVtoRGB(H, new_S <= 0 ? S * 0.5f : new_S, new_V, col[0], col[1], col[2]);
        }
    }

    if (value_changed)
    {
        if (flags & ImGuiColorEditFlags_InputRGB)
        {
            R = col[0];
            G = col[1];
            B = col[2];
            ColorConvertRGBtoHSV(R, G, B, H, S, V);
            if (memcmp(g.ColorEditLastColor, col, sizeof(float) * 3) == 0) // Fix local Hue as display below will use it immediately.
            {
                if (S == 0)
                    H = g.ColorEditLastHue;
                if (V == 0)
                    S = g.ColorEditLastSat;
            }
        }
        else if (flags & ImGuiColorEditFlags_InputHSV)
        {
            H = col[0];
            S = col[1];
            V = col[2];
            ColorConvertHSVtoRGB(H, S, V, R, G, B);
        }
    }

    const int style_alpha8 = IM_F32_TO_INT8_SAT(style.Alpha);
    const ImU32 col_black = IM_COL32(0,0,0,style_alpha8);
    const ImU32 col_white = IM_COL32(255,255,255,style_alpha8);
    const ImU32 col_midgrey = IM_COL32(128,128,128,style_alpha8);
    const ImU32 col_hues[6 + 1] = { IM_COL32(255,0,0,style_alpha8), IM_COL32(255,255,0,style_alpha8), IM_COL32(0,255,0,style_alpha8), IM_COL32(0,255,255,style_alpha8), IM_COL32(0,0,255,style_alpha8), IM_COL32(255,0,255,style_alpha8), IM_COL32(255,0,0,style_alpha8) };

    ImVec4 hue_color_f(1, 1, 1, style.Alpha); ColorConvertHSVtoRGB(H, 1, 1, hue_color_f.x, hue_color_f.y, hue_color_f.z);
    ImU32 hue_color32 = ColorConvertFloat4ToU32(hue_color_f);
    ImU32 user_col32_striped_of_alpha = ColorConvertFloat4ToU32(ImVec4(R, G, B, style.Alpha)); // Important: this is still including the main rendering/style alpha!!

    ImVec2 sv_cursor_pos;

    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Render Hue Wheel
        const float aeps = 0.5f / wheel_r_outer; // Half a pixel arc length in radians (2pi cancels out).
        const int segment_per_arc = ImMax(4, (int)wheel_r_outer / 12);
        for (int n = 0; n < 6; n++)
        {
            const float a0 = (n)     /6.0f * 2.0f * IM_PI - aeps;
            const float a1 = (n+1.0f)/6.0f * 2.0f * IM_PI + aeps;
            const int vert_start_idx = draw_list->VtxBuffer.Size;
            draw_list->PathArcTo(wheel_center, (wheel_r_inner + wheel_r_outer)*0.5f, a0, a1, segment_per_arc);
            draw_list->PathStroke(col_white, 0, wheel_thickness);
            const int vert_end_idx = draw_list->VtxBuffer.Size;

            // Paint colors over existing vertices
            ImVec2 gradient_p0(wheel_center.x + ImCos(a0) * wheel_r_inner, wheel_center.y + ImSin(a0) * wheel_r_inner);
            ImVec2 gradient_p1(wheel_center.x + ImCos(a1) * wheel_r_inner, wheel_center.y + ImSin(a1) * wheel_r_inner);
            ShadeVertsLinearColorGradientKeepAlpha(draw_list, vert_start_idx, vert_end_idx, gradient_p0, gradient_p1, col_hues[n], col_hues[n + 1]);
        }

        // Render Cursor + preview on Hue Wheel
        float cos_hue_angle = ImCos(H * 2.0f * IM_PI);
        float sin_hue_angle = ImSin(H * 2.0f * IM_PI);
        ImVec2 hue_cursor_pos(wheel_center.x + cos_hue_angle * (wheel_r_inner + wheel_r_outer) * 0.5f, wheel_center.y + sin_hue_angle * (wheel_r_inner + wheel_r_outer) * 0.5f);
        float hue_cursor_rad = value_changed_h ? wheel_thickness * 0.65f : wheel_thickness * 0.55f;
        int hue_cursor_segments = ImClamp((int)(hue_cursor_rad / 1.4f), 9, 32);
        draw_list->AddCircleFilled(hue_cursor_pos, hue_cursor_rad, hue_color32, hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad + 1, col_midgrey, hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad, col_white, hue_cursor_segments);

        // Render SV triangle (rotated according to hue)
        ImVec2 tra = wheel_center + ImRotate(triangle_pa, cos_hue_angle, sin_hue_angle);
        ImVec2 trb = wheel_center + ImRotate(triangle_pb, cos_hue_angle, sin_hue_angle);
        ImVec2 trc = wheel_center + ImRotate(triangle_pc, cos_hue_angle, sin_hue_angle);
        ImVec2 uv_white = GetFontTexUvWhitePixel();
        draw_list->PrimReserve(6, 6);
        draw_list->PrimVtx(tra, uv_white, hue_color32);
        draw_list->PrimVtx(trb, uv_white, hue_color32);
        draw_list->PrimVtx(trc, uv_white, col_white);
        draw_list->PrimVtx(tra, uv_white, 0);
        draw_list->PrimVtx(trb, uv_white, col_black);
        draw_list->PrimVtx(trc, uv_white, 0);
        draw_list->AddTriangle(tra, trb, trc, col_midgrey, 1.5f);
        sv_cursor_pos = ImLerp(ImLerp(trc, tra, ImSaturate(S)), trb, ImSaturate(1 - V));
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // Render SV Square
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), col_white, hue_color32, hue_color32, col_white);
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), 0, 0, col_black, col_black);
        RenderFrameBorder(picker_pos, picker_pos + ImVec2(sv_picker_size, sv_picker_size), 0.0f);
        sv_cursor_pos.x = ImClamp(IM_ROUND(picker_pos.x + ImSaturate(S)     * sv_picker_size), picker_pos.x + 2, picker_pos.x + sv_picker_size - 2); // Sneakily prevent the circle to stick out too much
        sv_cursor_pos.y = ImClamp(IM_ROUND(picker_pos.y + ImSaturate(1 - V) * sv_picker_size), picker_pos.y + 2, picker_pos.y + sv_picker_size - 2);

        // Render Hue Bar
        for (int i = 0; i < 6; ++i)
            draw_list->AddRectFilledMultiColor(ImVec2(bar0_pos_x, picker_pos.y + i * (sv_picker_size / 6)), ImVec2(bar0_pos_x + bars_width, picker_pos.y + (i + 1) * (sv_picker_size / 6)), col_hues[i], col_hues[i], col_hues[i + 1], col_hues[i + 1]);
        float bar0_line_y = IM_ROUND(picker_pos.y + H * sv_picker_size);
        RenderFrameBorder(ImVec2(bar0_pos_x, picker_pos.y), ImVec2(bar0_pos_x + bars_width, picker_pos.y + sv_picker_size), 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar0_pos_x - 1, bar0_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f, style.Alpha);
    }

    // Render cursor/preview circle (clamp S/V within 0..1 range because floating points colors may lead HSV values to be out of range)
    float sv_cursor_rad = value_changed_sv ? 10.0f : 6.0f;
    draw_list->AddCircleFilled(sv_cursor_pos, sv_cursor_rad, user_col32_striped_of_alpha, 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad + 1, col_midgrey, 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad, col_white, 12);

    // Render alpha bar
    if (alpha_bar)
    {
        float alpha = ImSaturate(col[3]);
        ImRect bar1_bb(bar1_pos_x, picker_pos.y, bar1_pos_x + bars_width, picker_pos.y + sv_picker_size);
        RenderColorRectWithAlphaCheckerboard(draw_list, bar1_bb.Min, bar1_bb.Max, 0, bar1_bb.GetWidth() / 2.0f, ImVec2(0.0f, 0.0f));
        draw_list->AddRectFilledMultiColor(bar1_bb.Min, bar1_bb.Max, user_col32_striped_of_alpha, user_col32_striped_of_alpha, user_col32_striped_of_alpha & ~IM_COL32_A_MASK, user_col32_striped_of_alpha & ~IM_COL32_A_MASK);
        float bar1_line_y = IM_ROUND(picker_pos.y + (1.0f - alpha) * sv_picker_size);
        RenderFrameBorder(bar1_bb.Min, bar1_bb.Max, 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar1_pos_x - 1, bar1_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f, style.Alpha);
    }

    EndGroup();

    if (value_changed && memcmp(backup_initial_col, col, components * sizeof(float)) == 0)
        value_changed = false;
    if (value_changed)
        MarkItemEdited(window->DC.LastItemId);

    PopID();

    return value_changed;
}

// A little color square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
// 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.
// Note that 'col' may be encoded in HSV if ImGuiColorEditFlags_InputHSV is set.
bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(desc_id);
    float default_size = GetFrameHeight();
    if (size.x == 0.0f)
        size.x = default_size;
    if (size.y == 0.0f)
        size.y = default_size;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb, (size.y >= default_size) ? g.Style.FramePadding.y : 0.0f);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    if (flags & ImGuiColorEditFlags_NoAlpha)
        flags &= ~(ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf);

    ImVec4 col_rgb = col;
    if (flags & ImGuiColorEditFlags_InputHSV)
        ColorConvertHSVtoRGB(col_rgb.x, col_rgb.y, col_rgb.z, col_rgb.x, col_rgb.y, col_rgb.z);

    ImVec4 col_rgb_without_alpha(col_rgb.x, col_rgb.y, col_rgb.z, 1.0f);
    float grid_step = ImMin(size.x, size.y) / 2.99f;
    float rounding = ImMin(g.Style.FrameRounding, grid_step * 0.5f);
    ImRect bb_inner = bb;
    float off = 0.0f;
    if ((flags & ImGuiColorEditFlags_NoBorder) == 0)
    {
        off = -0.75f; // The border (using Col_FrameBg) tends to look off when color is near-opaque and rounding is enabled. This offset seemed like a good middle ground to reduce those artifacts.
        bb_inner.Expand(off);
    }
    if ((flags & ImGuiColorEditFlags_AlphaPreviewHalf) && col_rgb.w < 1.0f)
    {
        float mid_x = IM_ROUND((bb_inner.Min.x + bb_inner.Max.x) * 0.5f);
        RenderColorRectWithAlphaCheckerboard(window->DrawList, ImVec2(bb_inner.Min.x + grid_step, bb_inner.Min.y), bb_inner.Max, GetColorU32(col_rgb), grid_step, ImVec2(-grid_step + off, off), rounding, ImDrawFlags_RoundCornersRight);
        window->DrawList->AddRectFilled(bb_inner.Min, ImVec2(mid_x, bb_inner.Max.y), GetColorU32(col_rgb_without_alpha), rounding, ImDrawFlags_RoundCornersLeft);
    }
    else
    {
        // Because GetColorU32() multiplies by the global style Alpha and we don't want to display a checkerboard if the source code had no alpha
        ImVec4 col_source = (flags & ImGuiColorEditFlags_AlphaPreview) ? col_rgb : col_rgb_without_alpha;
        if (col_source.w < 1.0f)
            RenderColorRectWithAlphaCheckerboard(window->DrawList, bb_inner.Min, bb_inner.Max, GetColorU32(col_source), grid_step, ImVec2(off, off), rounding);
        else
            window->DrawList->AddRectFilled(bb_inner.Min, bb_inner.Max, GetColorU32(col_source), rounding);
    }
    RenderNavHighlight(bb, id);
    if ((flags & ImGuiColorEditFlags_NoBorder) == 0)
    {
        if (g.Style.FrameBorderSize > 0.0f)
            RenderFrameBorder(bb.Min, bb.Max, rounding);
        else
            window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), rounding); // Color button are often in need of some sort of border
    }

    // Drag and Drop Source
    // NB: The ActiveId test is merely an optional micro-optimization, BeginDragDropSource() does the same test.
    if (g.ActiveId == id && !(flags & ImGuiColorEditFlags_NoDragDrop) && BeginDragDropSource())
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F, &col_rgb, sizeof(float) * 3, ImGuiCond_Once);
        else
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F, &col_rgb, sizeof(float) * 4, ImGuiCond_Once);
        ColorButton(desc_id, col, flags);
        SameLine();
        TextEx("Color");
        EndDragDropSource();
    }

    // Tooltip
    if (!(flags & ImGuiColorEditFlags_NoTooltip) && hovered)
        ColorTooltip(desc_id, &col.x, flags & (ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf));

    return pressed;
}

// Initialize/override default color options
void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;
    if ((flags & ImGuiColorEditFlags__DisplayMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__DisplayMask;
    if ((flags & ImGuiColorEditFlags__DataTypeMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__DataTypeMask;
    if ((flags & ImGuiColorEditFlags__PickerMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__PickerMask;
    if ((flags & ImGuiColorEditFlags__InputMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__InputMask;
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DisplayMask));    // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__DataTypeMask));   // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__PickerMask));     // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiColorEditFlags__InputMask));      // Check only 1 option is selected
    g.ColorEditOptions = flags;
}

// Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;

    BeginTooltipEx(0, ImGuiTooltipFlags_OverridePreviousTooltip);
    const char* text_end = text ? FindRenderedTextEnd(text, NULL) : text;
    if (text_end > text)
    {
        TextEx(text, text_end);
        Separator();
    }

    ImVec2 sz(g.FontSize * 3 + g.Style.FramePadding.y * 2, g.FontSize * 3 + g.Style.FramePadding.y * 2);
    ImVec4 cf(col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
    int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
    ColorButton("##preview", cf, (flags & (ImGuiColorEditFlags__InputMask | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf)) | ImGuiColorEditFlags_NoTooltip, sz);
    SameLine();
    if ((flags & ImGuiColorEditFlags_InputRGB) || !(flags & ImGuiColorEditFlags__InputMask))
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            Text("#%02X%02X%02X\nR: %d, G: %d, B: %d\n(%.3f, %.3f, %.3f)", cr, cg, cb, cr, cg, cb, col[0], col[1], col[2]);
        else
            Text("#%02X%02X%02X%02X\nR:%d, G:%d, B:%d, A:%d\n(%.3f, %.3f, %.3f, %.3f)", cr, cg, cb, ca, cr, cg, cb, ca, col[0], col[1], col[2], col[3]);
    }
    else if (flags & ImGuiColorEditFlags_InputHSV)
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            Text("H: %.3f, S: %.3f, V: %.3f", col[0], col[1], col[2]);
        else
            Text("H: %.3f, S: %.3f, V: %.3f, A: %.3f", col[0], col[1], col[2], col[3]);
    }
    EndTooltip();
}

void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)
{
    bool allow_opt_inputs = !(flags & ImGuiColorEditFlags__DisplayMask);
    bool allow_opt_datatype = !(flags & ImGuiColorEditFlags__DataTypeMask);
    if ((!allow_opt_inputs && !allow_opt_datatype) || !BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    ImGuiColorEditFlags opts = g.ColorEditOptions;
    if (allow_opt_inputs)
    {
        if (RadioButton("RGB", (opts & ImGuiColorEditFlags_DisplayRGB) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayRGB;
        if (RadioButton("HSV", (opts & ImGuiColorEditFlags_DisplayHSV) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayHSV;
        if (RadioButton("Hex", (opts & ImGuiColorEditFlags_DisplayHex) != 0)) opts = (opts & ~ImGuiColorEditFlags__DisplayMask) | ImGuiColorEditFlags_DisplayHex;
    }
    if (allow_opt_datatype)
    {
        if (allow_opt_inputs) Separator();
        if (RadioButton("0..255",     (opts & ImGuiColorEditFlags_Uint8) != 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Uint8;
        if (RadioButton("0.00..1.00", (opts & ImGuiColorEditFlags_Float) != 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Float;
    }

    if (allow_opt_inputs || allow_opt_datatype)
        Separator();
    if (Button("Copy as..", ImVec2(-1, 0)))
        OpenPopup("Copy");
    if (BeginPopup("Copy"))
    {
        int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
        char buf[64];
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%.3ff, %.3ff, %.3ff, %.3ff)", col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if (Selectable(buf))
            SetClipboardText(buf);
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%d,%d,%d,%d)", cr, cg, cb, ca);
        if (Selectable(buf))
            SetClipboardText(buf);
        ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", cr, cg, cb);
        if (Selectable(buf))
            SetClipboardText(buf);
        if (!(flags & ImGuiColorEditFlags_NoAlpha))
        {
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", cr, cg, cb, ca);
            if (Selectable(buf))
                SetClipboardText(buf);
        }
        EndPopup();
    }

    g.ColorEditOptions = opts;
    EndPopup();
}

void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)
{
    bool allow_opt_picker = !(flags & ImGuiColorEditFlags__PickerMask);
    bool allow_opt_alpha_bar = !(flags & ImGuiColorEditFlags_NoAlpha) && !(flags & ImGuiColorEditFlags_AlphaBar);
    if ((!allow_opt_picker && !allow_opt_alpha_bar) || !BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    if (allow_opt_picker)
    {
        ImVec2 picker_size(g.FontSize * 8, ImMax(g.FontSize * 8 - (GetFrameHeight() + g.Style.ItemInnerSpacing.x), 1.0f)); // FIXME: Picker size copied from main picker function
        PushItemWidth(picker_size.x);
        for (int picker_type = 0; picker_type < 2; picker_type++)
        {
            // Draw small/thumbnail version of each picker type (over an invisible button for selection)
            if (picker_type > 0) Separator();
            PushID(picker_type);
            ImGuiColorEditFlags picker_flags = ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoOptions | ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_NoSidePreview | (flags & ImGuiColorEditFlags_NoAlpha);
            if (picker_type == 0) picker_flags |= ImGuiColorEditFlags_PickerHueBar;
            if (picker_type == 1) picker_flags |= ImGuiColorEditFlags_PickerHueWheel;
            ImVec2 backup_pos = GetCursorScreenPos();
            if (Selectable("##selectable", false, 0, picker_size)) // By default, Selectable() is closing popup
                g.ColorEditOptions = (g.ColorEditOptions & ~ImGuiColorEditFlags__PickerMask) | (picker_flags & ImGuiColorEditFlags__PickerMask);
            SetCursorScreenPos(backup_pos);
            ImVec4 previewing_ref_col;
            memcpy(&previewing_ref_col, ref_col, sizeof(float) * ((picker_flags & ImGuiColorEditFlags_NoAlpha) ? 3 : 4));
            ColorPicker4("##previewing_picker", &previewing_ref_col.x, picker_flags);
            PopID();
        }
        PopItemWidth();
    }
    if (allow_opt_alpha_bar)
    {
        if (allow_opt_picker) Separator();
        CheckboxFlags("Alpha Bar", &g.ColorEditOptions, ImGuiColorEditFlags_AlphaBar);
    }
    EndPopup();
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: TreeNode, CollapsingHeader, etc.
//-------------------------------------------------------------------------
// - TreeNode()
// - TreeNodeV()
// - TreeNodeEx()
// - TreeNodeExV()
// - TreeNodeBehavior() [Internal]
// - TreePush()
// - TreePop()
// - GetTreeNodeToLabelSpacing()
// - SetNextItemOpen()
// - CollapsingHeader()
//-------------------------------------------------------------------------

bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* label)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    return TreeNodeBehavior(window->GetID(label), 0, label, NULL);
}

bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
    return TreeNodeExV(str_id, 0, fmt, args);
}

bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
{
    return TreeNodeExV(ptr_id, 0, fmt, args);
}

bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags, label, NULL);
}

bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)
{
    if (flags & ImGuiTreeNodeFlags_Leaf)
        return true;

    // We only write to the tree storage if the user clicks (or explicitly use the SetNextItemOpen function)
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiStorage* storage = window->DC.StateStorage;

    bool is_open;
    if (g.NextItemData.Flags & ImGuiNextItemDataFlags_HasOpen)
    {
        if (g.NextItemData.OpenCond & ImGuiCond_Always)
        {
            is_open = g.NextItemData.OpenVal;
            storage->SetInt(id, is_open);
        }
        else
        {
            // We treat ImGuiCond_Once and ImGuiCond_FirstUseEver the same because tree node state are not saved persistently.
            const int stored_value = storage->GetInt(id, -1);
            if (stored_value == -1)
            {
                is_open = g.NextItemData.OpenVal;
                storage->SetInt(id, is_open);
            }
            else
            {
                is_open = stored_value != 0;
            }
        }
    }
    else
    {
        is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;
    }

    // When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
    // NB- If we are above max depth we still allow manually opened nodes to be logged.
    if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && (window->DC.TreeDepth - g.LogDepthRef) < g.LogDepthToExpand)
        is_open = true;

    return is_open;
}

bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;
    const ImVec2 padding = (display_frame || (flags & ImGuiTreeNodeFlags_FramePadding)) ? style.FramePadding : ImVec2(style.FramePadding.x, ImMin(window->DC.CurrLineTextBaseOffset, style.FramePadding.y));

    if (!label_end)
        label_end = FindRenderedTextEnd(label);
    const ImVec2 label_size = CalcTextSize(label, label_end, false);

    // We vertically grow up to current line height up the typical widget height.
    const float frame_height = ImMax(ImMin(window->DC.CurrLineSize.y, g.FontSize + style.FramePadding.y * 2), label_size.y + padding.y * 2);
    ImRect frame_bb;
    frame_bb.Min.x = (flags & ImGuiTreeNodeFlags_SpanFullWidth) ? window->WorkRect.Min.x : window->DC.CursorPos.x;
    frame_bb.Min.y = window->DC.CursorPos.y;
    frame_bb.Max.x = window->WorkRect.Max.x;
    frame_bb.Max.y = window->DC.CursorPos.y + frame_height;
    if (display_frame)
    {
        // Framed header expand a little outside the default padding, to the edge of InnerClipRect
        // (FIXME: May remove this at some point and make InnerClipRect align with WindowPadding.x instead of WindowPadding.x*0.5f)
        frame_bb.Min.x -= IM_FLOOR(window->WindowPadding.x * 0.5f - 1.0f);
        frame_bb.Max.x += IM_FLOOR(window->WindowPadding.x * 0.5f);
    }

    const float text_offset_x = g.FontSize + (display_frame ? padding.x * 3 : padding.x * 2);           // Collapser arrow width + Spacing
    const float text_offset_y = ImMax(padding.y, window->DC.CurrLineTextBaseOffset);                    // Latch before ItemSize changes it
    const float text_width = g.FontSize + (label_size.x > 0.0f ? label_size.x + padding.x * 2 : 0.0f);  // Include collapser
    ImVec2 text_pos(window->DC.CursorPos.x + text_offset_x, window->DC.CursorPos.y + text_offset_y);
    ItemSize(ImVec2(text_width, frame_height), padding.y);

    // For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
    ImRect interact_bb = frame_bb;
    if (!display_frame && (flags & (ImGuiTreeNodeFlags_SpanAvailWidth | ImGuiTreeNodeFlags_SpanFullWidth)) == 0)
        interact_bb.Max.x = frame_bb.Min.x + text_width + style.ItemSpacing.x * 2.0f;

    // Store a flag for the current depth to tell if we will allow closing this node when navigating one of its child.
    // For this purpose we essentially compare if g.NavIdIsAlive went from 0 to 1 between TreeNode() and TreePop().
    // This is currently only support 32 level deep and we are fine with (1 << Depth) overflowing into a zero.
    const bool is_leaf = (flags & ImGuiTreeNodeFlags_Leaf) != 0;
    bool is_open = TreeNodeBehaviorIsOpen(id, flags);
    if (is_open && !g.NavIdIsAlive && (flags & ImGuiTreeNodeFlags_NavLeftJumpsBackHere) && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        window->DC.TreeJumpToParentOnPopMask |= (1 << window->DC.TreeDepth);

    bool item_add = ItemAdd(interact_bb, id);
    window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HasDisplayRect;
    window->DC.LastItemDisplayRect = frame_bb;

    if (!item_add)
    {
        if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
            TreePushOverrideID(id);
        IMGUI_TEST_ENGINE_ITEM_INFO(window->DC.LastItemId, label, window->DC.LastItemStatusFlags | (is_leaf ? 0 : ImGuiItemStatusFlags_Openable) | (is_open ? ImGuiItemStatusFlags_Opened : 0));
        return is_open;
    }

    ImGuiButtonFlags button_flags = ImGuiTreeNodeFlags_None;
    if (flags & ImGuiTreeNodeFlags_AllowItemOverlap)
        button_flags |= ImGuiButtonFlags_AllowItemOverlap;
    if (!is_leaf)
        button_flags |= ImGuiButtonFlags_PressedOnDragDropHold;

    // We allow clicking on the arrow section with keyboard modifiers held, in order to easily
    // allow browsing a tree while preserving selection with code implementing multi-selection patterns.
    // When clicking on the rest of the tree node we always disallow keyboard modifiers.
    const float arrow_hit_x1 = (text_pos.x - text_offset_x) - style.TouchExtraPadding.x;
    const float arrow_hit_x2 = (text_pos.x - text_offset_x) + (g.FontSize + padding.x * 2.0f) + style.TouchExtraPadding.x;
    const bool is_mouse_x_over_arrow = (g.IO.MousePos.x >= arrow_hit_x1 && g.IO.MousePos.x < arrow_hit_x2);
    if (window != g.HoveredWindow || !is_mouse_x_over_arrow)
        button_flags |= ImGuiButtonFlags_NoKeyModifiers;

    // Open behaviors can be altered with the _OpenOnArrow and _OnOnDoubleClick flags.
    // Some alteration have subtle effects (e.g. toggle on MouseUp vs MouseDown events) due to requirements for multi-selection and drag and drop support.
    // - Single-click on label = Toggle on MouseUp (default, when _OpenOnArrow=0)
    // - Single-click on arrow = Toggle on MouseDown (when _OpenOnArrow=0)
    // - Single-click on arrow = Toggle on MouseDown (when _OpenOnArrow=1)
    // - Double-click on label = Toggle on MouseDoubleClick (when _OpenOnDoubleClick=1)
    // - Double-click on arrow = Toggle on MouseDoubleClick (when _OpenOnDoubleClick=1 and _OpenOnArrow=0)
    // It is rather standard that arrow click react on Down rather than Up.
    // We set ImGuiButtonFlags_PressedOnClickRelease on OpenOnDoubleClick because we want the item to be active on the initial MouseDown in order for drag and drop to work.
    if (is_mouse_x_over_arrow)
        button_flags |= ImGuiButtonFlags_PressedOnClick;
    else if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
        button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;
    else
        button_flags |= ImGuiButtonFlags_PressedOnClickRelease;

    bool selected = (flags & ImGuiTreeNodeFlags_Selected) != 0;
    const bool was_selected = selected;

    bool hovered, held;
    bool pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);
    bool toggled = false;
    if (!is_leaf)
    {
        if (pressed && g.DragDropHoldJustPressedId != id)
        {
            if ((flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick)) == 0 || (g.NavActivateId == id))
                toggled = true;
            if (flags & ImGuiTreeNodeFlags_OpenOnArrow)
                toggled |= is_mouse_x_over_arrow && !g.NavDisableMouseHover; // Lightweight equivalent of IsMouseHoveringRect() since ButtonBehavior() already did the job
            if ((flags & ImGuiTreeNodeFlags_OpenOnDoubleClick) && g.IO.MouseDoubleClicked[0])
                toggled = true;
        }
        else if (pressed && g.DragDropHoldJustPressedId == id)
        {
            IM_ASSERT(button_flags & ImGuiButtonFlags_PressedOnDragDropHold);
            if (!is_open) // When using Drag and Drop "hold to open" we keep the node highlighted after opening, but never close it again.
                toggled = true;
        }

        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Left && is_open)
        {
            toggled = true;
            NavMoveRequestCancel();
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right && !is_open) // If there's something upcoming on the line we may want to give it the priority?
        {
            toggled = true;
            NavMoveRequestCancel();
        }

        if (toggled)
        {
            is_open = !is_open;
            window->DC.StateStorage->SetInt(id, is_open);
            window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledOpen;
        }
    }
    if (flags & ImGuiTreeNodeFlags_AllowItemOverlap)
        SetItemAllowOverlap();

    // In this branch, TreeNodeBehavior() cannot toggle the selection so this will never trigger.
    if (selected != was_selected) //-V547
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledSelection;

    // Render
    const ImU32 text_col = GetColorU32(ImGuiCol_Text);
    ImGuiNavHighlightFlags nav_highlight_flags = ImGuiNavHighlightFlags_TypeThin;
    if (display_frame)
    {
        // Framed type
        const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(frame_bb.Min, frame_bb.Max, bg_col, true, style.FrameRounding);
        RenderNavHighlight(frame_bb, id, nav_highlight_flags);
        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(window->DrawList, ImVec2(text_pos.x - text_offset_x * 0.60f, text_pos.y + g.FontSize * 0.5f), text_col);
        else if (!is_leaf)
            RenderArrow(window->DrawList, ImVec2(text_pos.x - text_offset_x + padding.x, text_pos.y), text_col, is_open ? ImGuiDir_Down : ImGuiDir_Right, 1.0f);
        else // Leaf without bullet, left-adjusted text
            text_pos.x -= text_offset_x;
        if (flags & ImGuiTreeNodeFlags_ClipLabelForTrailingButton)
            frame_bb.Max.x -= g.FontSize + style.FramePadding.x;

        if (g.LogEnabled)
            LogSetNextTextDecoration("###", "###");
        RenderTextClipped(text_pos, frame_bb.Max, label, label_end, &label_size);
    }
    else
    {
        // Unframed typed for tree nodes
        if (hovered || selected)
        {
            const ImU32 bg_col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
            RenderFrame(frame_bb.Min, frame_bb.Max, bg_col, false);
            RenderNavHighlight(frame_bb, id, nav_highlight_flags);
        }
        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(window->DrawList, ImVec2(text_pos.x - text_offset_x * 0.5f, text_pos.y + g.FontSize * 0.5f), text_col);
        else if (!is_leaf)
            RenderArrow(window->DrawList, ImVec2(text_pos.x - text_offset_x + padding.x, text_pos.y + g.FontSize * 0.15f), text_col, is_open ? ImGuiDir_Down : ImGuiDir_Right, 0.70f);
        if (g.LogEnabled)
            LogSetNextTextDecoration(">", NULL);
        RenderText(text_pos, label, label_end, false);
    }

    if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        TreePushOverrideID(id);
    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags | (is_leaf ? 0 : ImGuiItemStatusFlags_Openable) | (is_open ? ImGuiItemStatusFlags_Opened : 0));
    return is_open;
}

void ImGui::TreePush(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(str_id ? str_id : "#TreePush");
}

void ImGui::TreePush(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(ptr_id ? ptr_id : (const void*)"#TreePush");
}

void ImGui::TreePushOverrideID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    Indent();
    window->DC.TreeDepth++;
    window->IDStack.push_back(id);
}

void ImGui::TreePop()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    Unindent();

    window->DC.TreeDepth--;
    ImU32 tree_depth_mask = (1 << window->DC.TreeDepth);

    // Handle Left arrow to move to parent tree node (when ImGuiTreeNodeFlags_NavLeftJumpsBackHere is enabled)
    if (g.NavMoveDir == ImGuiDir_Left && g.NavWindow == window && NavMoveRequestButNoResultYet())
        if (g.NavIdIsAlive && (window->DC.TreeJumpToParentOnPopMask & tree_depth_mask))
        {
            SetNavID(window->IDStack.back(), g.NavLayer, 0, ImRect());
            NavMoveRequestCancel();
        }
    window->DC.TreeJumpToParentOnPopMask &= tree_depth_mask - 1;

    IM_ASSERT(window->IDStack.Size > 1); // There should always be 1 element in the IDStack (pushed during window creation). If this triggers you called TreePop/PopID too much.
    PopID();
}

// Horizontal distance preceding label when using TreeNode() or Bullet()
float ImGui::GetTreeNodeToLabelSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + (g.Style.FramePadding.x * 2.0f);
}

// Set next TreeNode/CollapsingHeader open state.
void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow->SkipItems)
        return;
    g.NextItemData.Flags |= ImGuiNextItemDataFlags_HasOpen;
    g.NextItemData.OpenVal = is_open;
    g.NextItemData.OpenCond = cond ? cond : ImGuiCond_Always;
}

// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader, label);
}

// p_visible == NULL                        : regular collapsing header
// p_visible != NULL && *p_visible == true  : show a small close button on the corner of the header, clicking the button will set *p_visible = false
// p_visible != NULL && *p_visible == false : do not show the header at all
// Do not mistake this with the Open state of the header itself, which you can adjust with SetNextItemOpen() or ImGuiTreeNodeFlags_DefaultOpen.
bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    if (p_visible && !*p_visible)
        return false;

    ImGuiID id = window->GetID(label);
    flags |= ImGuiTreeNodeFlags_CollapsingHeader;
    if (p_visible)
        flags |= ImGuiTreeNodeFlags_AllowItemOverlap | ImGuiTreeNodeFlags_ClipLabelForTrailingButton;
    bool is_open = TreeNodeBehavior(id, flags, label);
    if (p_visible != NULL)
    {
        // Create a small overlapping close button
        // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
        // FIXME: CloseButton can overlap into text, need find a way to clip the text somehow.
        ImGuiContext& g = *GImGui;
        ImGuiLastItemDataBackup last_item_backup;
        float button_size = g.FontSize;
        float button_x = ImMax(window->DC.LastItemRect.Min.x, window->DC.LastItemRect.Max.x - g.Style.FramePadding.x * 2.0f - button_size);
        float button_y = window->DC.LastItemRect.Min.y;
        ImGuiID close_button_id = GetIDWithSeed("#CLOSE", NULL, id);
        if (CloseButton(close_button_id, ImVec2(button_x, button_y)))
            *p_visible = false;
        last_item_backup.Restore();
    }

    return is_open;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Selectable
//-------------------------------------------------------------------------
// - Selectable()
//-------------------------------------------------------------------------

// Tip: pass a non-visible label (e.g. "##hello") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID or use ##unique_id.
// With this scheme, ImGuiSelectableFlags_SpanAllColumns and ImGuiSelectableFlags_AllowItemOverlap are also frequently used flags.
// FIXME: Selectable() with (size.x == 0.0f) and (SelectableTextAlign.x > 0.0f) followed by SameLine() is currently not supported.
bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Submit label or explicit size to ItemSize(), whereas ItemAdd() will submit a larger/spanning rectangle.
    ImGuiID id = window->GetID(label);
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrLineTextBaseOffset;
    ItemSize(size, 0.0f);

    // Fill horizontal space
    // We don't support (size < 0.0f) in Selectable() because the ItemSpacing extension would make explicitly right-aligned sizes not visibly match other widgets.
    const bool span_all_columns = (flags & ImGuiSelectableFlags_SpanAllColumns) != 0;
    const float min_x = span_all_columns ? window->ParentWorkRect.Min.x : pos.x;
    const float max_x = span_all_columns ? window->ParentWorkRect.Max.x : window->WorkRect.Max.x;
    if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_SpanAvailWidth))
        size.x = ImMax(label_size.x, max_x - min_x);

    // Text stays at the submission position, but bounding box may be extended on both sides
    const ImVec2 text_min = pos;
    const ImVec2 text_max(min_x + size.x, pos.y + size.y);

    // Selectables are meant to be tightly packed together with no click-gap, so we extend their box to cover spacing between selectable.
    ImRect bb(min_x, pos.y, text_max.x, text_max.y);
    if ((flags & ImGuiSelectableFlags_NoPadWithHalfSpacing) == 0)
    {
        const float spacing_x = span_all_columns ? 0.0f : style.ItemSpacing.x;
        const float spacing_y = style.ItemSpacing.y;
        const float spacing_L = IM_FLOOR(spacing_x * 0.50f);
        const float spacing_U = IM_FLOOR(spacing_y * 0.50f);
        bb.Min.x -= spacing_L;
        bb.Min.y -= spacing_U;
        bb.Max.x += (spacing_x - spacing_L);
        bb.Max.y += (spacing_y - spacing_U);
    }
    //if (g.IO.KeyCtrl) { GetForegroundDrawList()->AddRect(bb.Min, bb.Max, IM_COL32(0, 255, 0, 255)); }

    // Modify ClipRect for the ItemAdd(), faster than doing a PushColumnsBackground/PushTableBackground for every Selectable..
    const float backup_clip_rect_min_x = window->ClipRect.Min.x;
    const float backup_clip_rect_max_x = window->ClipRect.Max.x;
    if (span_all_columns)
    {
        window->ClipRect.Min.x = window->ParentWorkRect.Min.x;
        window->ClipRect.Max.x = window->ParentWorkRect.Max.x;
    }

    bool item_add;
    if (flags & ImGuiSelectableFlags_Disabled)
    {
        ImGuiItemFlags backup_item_flags = g.CurrentItemFlags;
        g.CurrentItemFlags |= ImGuiItemFlags_Disabled | ImGuiItemFlags_NoNavDefaultFocus;
        item_add = ItemAdd(bb, id);
        g.CurrentItemFlags = backup_item_flags;
    }
    else
    {
        item_add = ItemAdd(bb, id);
    }

    if (span_all_columns)
    {
        window->ClipRect.Min.x = backup_clip_rect_min_x;
        window->ClipRect.Max.x = backup_clip_rect_max_x;
    }

    if (!item_add)
        return false;

    // FIXME: We can standardize the behavior of those two, we could also keep the fast path of override ClipRect + full push on render only,
    // which would be advantageous since most selectable are not selected.
    if (span_all_columns && window->DC.CurrentColumns)
        PushColumnsBackground();
    else if (span_all_columns && g.CurrentTable)
        TablePushBackgroundChannel();

    // We use NoHoldingActiveID on menus so user can click and _hold_ on a menu then drag to browse child entries
    ImGuiButtonFlags button_flags = 0;
    if (flags & ImGuiSelectableFlags_NoHoldingActiveID) { button_flags |= ImGuiButtonFlags_NoHoldingActiveId; }
    if (flags & ImGuiSelectableFlags_SelectOnClick)     { button_flags |= ImGuiButtonFlags_PressedOnClick; }
    if (flags & ImGuiSelectableFlags_SelectOnRelease)   { button_flags |= ImGuiButtonFlags_PressedOnRelease; }
    if (flags & ImGuiSelectableFlags_Disabled)          { button_flags |= ImGuiButtonFlags_Disabled; }
    if (flags & ImGuiSelectableFlags_AllowDoubleClick)  { button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick; }
    if (flags & ImGuiSelectableFlags_AllowItemOverlap)  { button_flags |= ImGuiButtonFlags_AllowItemOverlap; }

    if (flags & ImGuiSelectableFlags_Disabled)
        selected = false;

    const bool was_selected = selected;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, button_flags);

    // Update NavId when clicking or when Hovering (this doesn't happen on most widgets), so navigation can be resumed with gamepad/keyboard
    if (pressed || (hovered && (flags & ImGuiSelectableFlags_SetNavIdOnHover)))
    {
        if (!g.NavDisableMouseHover && g.NavWindow == window && g.NavLayer == window->DC.NavLayerCurrent)
        {
            SetNavID(id, window->DC.NavLayerCurrent, window->DC.NavFocusScopeIdCurrent, ImRect(bb.Min - window->Pos, bb.Max - window->Pos));
            g.NavDisableHighlight = true;
        }
    }
    if (pressed)
        MarkItemEdited(id);

    if (flags & ImGuiSelectableFlags_AllowItemOverlap)
        SetItemAllowOverlap();

    // In this branch, Selectable() cannot toggle the selection so this will never trigger.
    if (selected != was_selected) //-V547
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_ToggledSelection;

    // Render
    if (held && (flags & ImGuiSelectableFlags_DrawHoveredWhenHeld))
        hovered = true;
    if (hovered || selected)
    {
        const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(bb.Min, bb.Max, col, false, 0.0f);
        RenderNavHighlight(bb, id, ImGuiNavHighlightFlags_TypeThin | ImGuiNavHighlightFlags_NoRounding);
    }

    if (span_all_columns && window->DC.CurrentColumns)
        PopColumnsBackground();
    else if (span_all_columns && g.CurrentTable)
        TablePopBackgroundChannel();

    if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]);
    RenderTextClipped(text_min, text_max, label, NULL, &label_size, style.SelectableTextAlign, &bb);
    if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();

    // Automatically close popups
    if (pressed && (window->Flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiSelectableFlags_DontClosePopups) && !(g.CurrentItemFlags & ImGuiItemFlags_SelectableDontClosePopup))
        CloseCurrentPopup();

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    return pressed;
}

bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    if (Selectable(label, *p_selected, flags, size_arg))
    {
        *p_selected = !*p_selected;
        return true;
    }
    return false;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: ListBox
//-------------------------------------------------------------------------
// - BeginListBox()
// - EndListBox()
// - ListBox()
//-------------------------------------------------------------------------

// Tip: To have a list filling the entire window width, use size.x = -FLT_MIN and pass an non-visible label e.g. "##empty"
// Tip: If your vertical size is calculated from an item count (e.g. 10 * item_height) consider adding a fractional part to facilitate seeing scrolling boundaries (e.g. 10.25 * item_height).
bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    // Size default to hold ~7.25 items.
    // Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    ImVec2 size = ImFloor(CalcItemSize(size_arg, CalcItemWidth(), GetTextLineHeightWithSpacing() * 7.25f + style.FramePadding.y * 2.0f));
    ImVec2 frame_size = ImVec2(size.x, ImMax(size.y, label_size.y));
    ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    g.NextItemData.ClearFlags();

    if (!IsRectVisible(bb.Min, bb.Max))
    {
        ItemSize(bb.GetSize(), style.FramePadding.y);
        ItemAdd(bb, 0, &frame_bb);
        return false;
    }

    // FIXME-OPT: We could omit the BeginGroup() if label_size.x but would need to omit the EndGroup() as well.
    BeginGroup();
    if (label_size.x > 0.0f)
    {
        ImVec2 label_pos = ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y);
        RenderText(label_pos, label);
        window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, label_pos + label_size);
    }

    BeginChildFrame(id, frame_bb.GetSize());
    return true;
}

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
// OBSOLETED in 1.81 (from February 2021)
bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)
{
    // If height_in_items == -1, default height is maximum 7.
    ImGuiContext& g = *GImGui;
    float height_in_items_f = (height_in_items < 0 ? ImMin(items_count, 7) : height_in_items) + 0.25f;
    ImVec2 size;
    size.x = 0.0f;
    size.y = GetTextLineHeightWithSpacing() * height_in_items_f + g.Style.FramePadding.y * 2.0f;
    return BeginListBox(label, size);
}
#endif

void ImGui::EndListBox()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT((window->Flags & ImGuiWindowFlags_ChildWindow) && "Mismatched BeginListBox/EndListBox calls. Did you test the return value of BeginListBox?");
    IM_UNUSED(window);

    EndChildFrame();
    EndGroup(); // This is only required to be able to do IsItemXXX query on the whole ListBox including label
}

bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)
{
    const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);
    return value_changed;
}

// This is merely a helper around BeginListBox(), EndListBox().
// Considering using those directly to submit custom data or store selection differently.
bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
    ImGuiContext& g = *GImGui;

    // Calculate size from "height_in_items"
    if (height_in_items < 0)
        height_in_items = ImMin(items_count, 7);
    float height_in_items_f = height_in_items + 0.25f;
    ImVec2 size(0.0f, ImFloor(GetTextLineHeightWithSpacing() * height_in_items_f + g.Style.FramePadding.y * 2.0f));

    if (!BeginListBox(label, size))
        return false;

    // Assume all items have even height (= 1 line of text). If you need items of different height,
    // you can create a custom version of ListBox() in your code without using the clipper.
    bool value_changed = false;
    ImGuiListClipper clipper;
    clipper.Begin(items_count, GetTextLineHeightWithSpacing()); // We know exactly our line height here so we pass it as a minor optimization, but generally you don't need to.
    while (clipper.Step())
        for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        {
            const char* item_text;
            if (!items_getter(data, i, &item_text))
                item_text = "*Unknown item*";

            PushID(i);
            const bool item_selected = (i == *current_item);
            if (Selectable(item_text, item_selected))
            {
                *current_item = i;
                value_changed = true;
            }
            if (item_selected)
                SetItemDefaultFocus();
            PopID();
        }
    EndListBox();
    if (value_changed)
        MarkItemEdited(g.CurrentWindow->DC.LastItemId);

    return value_changed;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: PlotLines, PlotHistogram
//-------------------------------------------------------------------------
// - PlotEx() [Internal]
// - PlotLines()
// - PlotHistogram()
//-------------------------------------------------------------------------
// Plot/Graph widgets are not very good.
// Consider writing your own, or using a third-party one, see:
// - ImPlot https://github.com/epezent/implot
// - others https://github.com/ocornut/imgui/wiki/Useful-Widgets
//-------------------------------------------------------------------------

int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 frame_size)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return -1;

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    if (frame_size.x == 0.0f)
        frame_size.x = CalcItemWidth();
    if (frame_size.y == 0.0f)
        frame_size.y = label_size.y + (style.FramePadding.y * 2);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0, &frame_bb))
        return -1;
    const bool hovered = ItemHoverable(frame_bb, id);

    // Determine scale from values if not specified
    if (scale_min == FLT_MAX || scale_max == FLT_MAX)
    {
        float v_min = FLT_MAX;
        float v_max = -FLT_MAX;
        for (int i = 0; i < values_count; i++)
        {
            const float v = values_getter(data, i);
            if (v != v) // Ignore NaN values
                continue;
            v_min = ImMin(v_min, v);
            v_max = ImMax(v_max, v);
        }
        if (scale_min == FLT_MAX)
            scale_min = v_min;
        if (scale_max == FLT_MAX)
            scale_max = v_max;
    }

    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    const int values_count_min = (plot_type == ImGuiPlotType_Lines) ? 2 : 1;
    int idx_hovered = -1;
    if (values_count >= values_count_min)
    {
        int res_w = ImMin((int)frame_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);
        int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);

        // Tooltip on hover
        if (hovered && inner_bb.Contains(g.IO.MousePos))
        {
            const float t = ImClamp((g.IO.MousePos.x - inner_bb.Min.x) / (inner_bb.Max.x - inner_bb.Min.x), 0.0f, 0.9999f);
            const int v_idx = (int)(t * item_count);
            IM_ASSERT(v_idx >= 0 && v_idx < values_count);

            const float v0 = values_getter(data, (v_idx + values_offset) % values_count);
            const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);
            if (plot_type == ImGuiPlotType_Lines)
                SetTooltip("%d: %8.4g\n%d: %8.4g", v_idx, v0, v_idx + 1, v1);
            else if (plot_type == ImGuiPlotType_Histogram)
                SetTooltip("%d: %8.4g", v_idx, v0);
            idx_hovered = v_idx;
        }

        const float t_step = 1.0f / (float)res_w;
        const float inv_scale = (scale_min == scale_max) ? 0.0f : (1.0f / (scale_max - scale_min));

        float v0 = values_getter(data, (0 + values_offset) % values_count);
        float t0 = 0.0f;
        ImVec2 tp0 = ImVec2( t0, 1.0f - ImSaturate((v0 - scale_min) * inv_scale) );                       // Point in the normalized space of our target rectangle
        float histogram_zero_line_t = (scale_min * scale_max < 0.0f) ? (-scale_min * inv_scale) : (scale_min < 0.0f ? 0.0f : 1.0f);   // Where does the zero line stands

        const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);
        const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);

        for (int n = 0; n < res_w; n++)
        {
            const float t1 = t0 + t_step;
            const int v1_idx = (int)(t0 * item_count + 0.5f);
            IM_ASSERT(v1_idx >= 0 && v1_idx < values_count);
            const float v1 = values_getter(data, (v1_idx + values_offset + 1) % values_count);
            const ImVec2 tp1 = ImVec2( t1, 1.0f - ImSaturate((v1 - scale_min) * inv_scale) );

            // NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
            ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);
            ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, histogram_zero_line_t));
            if (plot_type == ImGuiPlotType_Lines)
            {
                window->DrawList->AddLine(pos0, pos1, idx_hovered == v1_idx ? col_hovered : col_base);
            }
            else if (plot_type == ImGuiPlotType_Histogram)
            {
                if (pos1.x >= pos0.x + 2.0f)
                    pos1.x -= 1.0f;
                window->DrawList->AddRectFilled(pos0, pos1, idx_hovered == v1_idx ? col_hovered : col_base);
            }

            t0 = t1;
            tp0 = tp1;
        }
    }

    // Text overlay
    if (overlay_text)
        RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, overlay_text, NULL, NULL, ImVec2(0.5f, 0.0f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);

    // Return hovered index or -1 if none are hovered.
    // This is currently not exposed in the public API because we need a larger redesign of the whole thing, but in the short-term we are making it available in PlotEx().
    return idx_hovered;
}

struct ImGuiPlotArrayGetterData
{
    const float* Values;
    int Stride;

    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }
};

static float Plot_ArrayGetter(void* data, int idx)
{
    ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
    const float v = *(const float*)(const void*)((const unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
    return v;
}

void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: Value helpers
// Those is not very useful, legacy API.
//-------------------------------------------------------------------------
// - Value()
//-------------------------------------------------------------------------

void ImGui::Value(const char* prefix, bool b)
{
    Text("%s: %s", prefix, (b ? "true" : "false"));
}

void ImGui::Value(const char* prefix, int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, unsigned int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, float v, const char* float_format)
{
    if (float_format)
    {
        char fmt[64];
        ImFormatString(fmt, IM_ARRAYSIZE(fmt), "%%s: %s", float_format);
        Text(fmt, prefix, v);
    }
    else
    {
        Text("%s: %.3f", prefix, v);
    }
}

//-------------------------------------------------------------------------
// [SECTION] MenuItem, BeginMenu, EndMenu, etc.
//-------------------------------------------------------------------------
// - ImGuiMenuColumns [Internal]
// - BeginMenuBar()
// - EndMenuBar()
// - BeginMainMenuBar()
// - EndMainMenuBar()
// - BeginMenu()
// - EndMenu()
// - MenuItem()
//-------------------------------------------------------------------------

// Helpers for internal use
void ImGuiMenuColumns::Update(int count, float spacing, bool clear)
{
    IM_ASSERT(count == IM_ARRAYSIZE(Pos));
    IM_UNUSED(count);
    Width = NextWidth = 0.0f;
    Spacing = spacing;
    if (clear)
        memset(NextWidths, 0, sizeof(NextWidths));
    for (int i = 0; i < IM_ARRAYSIZE(Pos); i++)
    {
        if (i > 0 && NextWidths[i] > 0.0f)
            Width += Spacing;
        Pos[i] = IM_FLOOR(Width);
        Width += NextWidths[i];
        NextWidths[i] = 0.0f;
    }
}

float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double
{
    NextWidth = 0.0f;
    NextWidths[0] = ImMax(NextWidths[0], w0);
    NextWidths[1] = ImMax(NextWidths[1], w1);
    NextWidths[2] = ImMax(NextWidths[2], w2);
    for (int i = 0; i < IM_ARRAYSIZE(Pos); i++)
        NextWidth += NextWidths[i] + ((i > 0 && NextWidths[i] > 0.0f) ? Spacing : 0.0f);
    return ImMax(Width, NextWidth);
}

float ImGuiMenuColumns::CalcExtraSpace(float avail_w) const
{
    return ImMax(0.0f, avail_w - Width);
}

// FIXME: Provided a rectangle perhaps e.g. a BeginMenuBarEx() could be used anywhere..
// Currently the main responsibility of this function being to setup clip-rect + horizontal layout + menu navigation layer.
// Ideally we also want this to be responsible for claiming space out of the main window scrolling rectangle, in which case ImGuiWindowFlags_MenuBar will become unnecessary.
// Then later the same system could be used for multiple menu-bars, scrollbars, side-bars.
bool ImGui::BeginMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    if (!(window->Flags & ImGuiWindowFlags_MenuBar))
        return false;

    IM_ASSERT(!window->DC.MenuBarAppending);
    BeginGroup(); // Backup position on layer 0 // FIXME: Misleading to use a group for that backup/restore
    PushID("##menubar");

    // We don't clip with current window clipping rectangle as it is already set to the area below. However we clip with window full rect.
    // We remove 1 worth of rounding to Max.x to that text in long menus and small windows don't tend to display over the lower-right rounded area, which looks particularly glitchy.
    ImRect bar_rect = window->MenuBarRect();
    ImRect clip_rect(IM_ROUND(bar_rect.Min.x + window->WindowBorderSize), IM_ROUND(bar_rect.Min.y + window->WindowBorderSize), IM_ROUND(ImMax(bar_rect.Min.x, bar_rect.Max.x - ImMax(window->WindowRounding, window->WindowBorderSize))), IM_ROUND(bar_rect.Max.y));
    clip_rect.ClipWith(window->OuterRectClipped);
    PushClipRect(clip_rect.Min, clip_rect.Max, false);

    // We overwrite CursorMaxPos because BeginGroup sets it to CursorPos (essentially the .EmitItem hack in EndMenuBar() would need something analogous here, maybe a BeginGroupEx() with flags).
    window->DC.CursorPos = window->DC.CursorMaxPos = ImVec2(bar_rect.Min.x + window->DC.MenuBarOffset.x, bar_rect.Min.y + window->DC.MenuBarOffset.y);
    window->DC.LayoutType = ImGuiLayoutType_Horizontal;
    window->DC.NavLayerCurrent = ImGuiNavLayer_Menu;
    window->DC.MenuBarAppending = true;
    AlignTextToFramePadding();
    return true;
}

void ImGui::EndMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ImGuiContext& g = *GImGui;

    // Nav: When a move request within one of our child menu failed, capture the request to navigate among our siblings.
    if (NavMoveRequestButNoResultYet() && (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right) && (g.NavWindow->Flags & ImGuiWindowFlags_ChildMenu))
    {
        ImGuiWindow* nav_earliest_child = g.NavWindow;
        while (nav_earliest_child->ParentWindow && (nav_earliest_child->ParentWindow->Flags & ImGuiWindowFlags_ChildMenu))
            nav_earliest_child = nav_earliest_child->ParentWindow;
        if (nav_earliest_child->ParentWindow == window && nav_earliest_child->DC.ParentLayoutType == ImGuiLayoutType_Horizontal && g.NavMoveRequestForward == ImGuiNavForward_None)
        {
            // To do so we claim focus back, restore NavId and then process the movement request for yet another frame.
            // This involve a one-frame delay which isn't very problematic in this situation. We could remove it by scoring in advance for multiple window (probably not worth the hassle/cost)
            const ImGuiNavLayer layer = ImGuiNavLayer_Menu;
            IM_ASSERT(window->DC.NavLayersActiveMaskNext & (1 << layer)); // Sanity check
            FocusWindow(window);
            SetNavID(window->NavLastIds[layer], layer, 0, window->NavRectRel[layer]);
            g.NavDisableHighlight = true; // Hide highlight for the current frame so we don't see the intermediary selection.
            g.NavDisableMouseHover = g.NavMousePosDirty = true;
            g.NavMoveRequestForward = ImGuiNavForward_ForwardQueued;
            NavMoveRequestCancel();
        }
    }

    IM_MSVC_WARNING_SUPPRESS(6011); // Static Analysis false positive "warning C6011: Dereferencing NULL pointer 'window'"
    IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);
    IM_ASSERT(window->DC.MenuBarAppending);
    PopClipRect();
    PopID();
    window->DC.MenuBarOffset.x = window->DC.CursorPos.x - window->Pos.x; // Save horizontal position so next append can reuse it. This is kinda equivalent to a per-layer CursorPos.
    g.GroupStack.back().EmitItem = false;
    EndGroup(); // Restore position on layer 0
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    window->DC.NavLayerCurrent = ImGuiNavLayer_Main;
    window->DC.MenuBarAppending = false;
}

// Important: calling order matters!
// FIXME: Somehow overlapping with docking tech.
// FIXME: The "rect-cut" aspect of this could be formalized into a lower-level helper (rect-cut: https://halt.software/dead-simple-layouts)
bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, float axis_size, ImGuiWindowFlags window_flags)
{
    IM_ASSERT(dir != ImGuiDir_None);

    ImGuiWindow* bar_window = FindWindowByName(name);
    ImGuiViewportP* viewport = (ImGuiViewportP*)(void*)(viewport_p ? viewport_p : GetMainViewport());
    if (bar_window == NULL || bar_window->BeginCount == 0)
    {
        // Calculate and set window size/position
        ImRect avail_rect = viewport->GetBuildWorkRect();
        ImGuiAxis axis = (dir == ImGuiDir_Up || dir == ImGuiDir_Down) ? ImGuiAxis_Y : ImGuiAxis_X;
        ImVec2 pos = avail_rect.Min;
        if (dir == ImGuiDir_Right || dir == ImGuiDir_Down)
            pos[axis] = avail_rect.Max[axis] - axis_size;
        ImVec2 size = avail_rect.GetSize();
        size[axis] = axis_size;
        SetNextWindowPos(pos);
        SetNextWindowSize(size);

        // Report our size into work area (for next frame) using actual window size
        if (dir == ImGuiDir_Up || dir == ImGuiDir_Left)
            viewport->BuildWorkOffsetMin[axis] += axis_size;
        else if (dir == ImGuiDir_Down || dir == ImGuiDir_Right)
            viewport->BuildWorkOffsetMax[axis] -= axis_size;
    }

    window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoDocking;
    SetNextWindowViewport(viewport->ID); // Enforce viewport so we don't create our own viewport when ImGuiConfigFlags_ViewportsNoMerge is set.
    PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0, 0)); // Lift normal size constraint
    bool is_open = Begin(name, NULL, window_flags);
    PopStyleVar(2);

    return is_open;
}

bool ImGui::BeginMainMenuBar()
{
    ImGuiContext& g = *GImGui;
    ImGuiViewportP* viewport = (ImGuiViewportP*)(void*)GetMainViewport();

    // Notify of viewport change so GetFrameHeight() can be accurate in case of DPI change
    SetCurrentViewport(NULL, viewport);

    // For the main menu bar, which cannot be moved, we honor g.Style.DisplaySafeAreaPadding to ensure text can be visible on a TV set.
    // FIXME: This could be generalized as an opt-in way to clamp window->DC.CursorStartPos to avoid SafeArea?
    // FIXME: Consider removing support for safe area down the line... it's messy. Nowadays consoles have support for TV calibration in OS settings.
    g.NextWindowData.MenuBarOffsetMinVal = ImVec2(g.Style.DisplaySafeAreaPadding.x, ImMax(g.Style.DisplaySafeAreaPadding.y - g.Style.FramePadding.y, 0.0f));
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_MenuBar;
    float height = GetFrameHeight();
    bool is_open = BeginViewportSideBar("##MainMenuBar", viewport, ImGuiDir_Up, height, window_flags);
    g.NextWindowData.MenuBarOffsetMinVal = ImVec2(0.0f, 0.0f);

    if (is_open)
        BeginMenuBar();
    else
        End();
    return is_open;
}

void ImGui::EndMainMenuBar()
{
    EndMenuBar();

    // When the user has left the menu layer (typically: closed menus through activation of an item), we restore focus to the previous window
    // FIXME: With this strategy we won't be able to restore a NULL focus.
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow == g.NavWindow && g.NavLayer == ImGuiNavLayer_Main && !g.NavAnyRequest)
        FocusTopMostWindowUnderOne(g.NavWindow, NULL);

    End();
}

bool ImGui::BeginMenu(const char* label, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    bool menu_is_open = IsPopupOpen(id, ImGuiPopupFlags_None);

    // Sub-menus are ChildWindow so that mouse can be hovering across them (otherwise top-most popup menu would steal focus and not allow hovering on parent menu)
    ImGuiWindowFlags flags = ImGuiWindowFlags_ChildMenu | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoNavFocus;
    if (window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu))
        flags |= ImGuiWindowFlags_ChildWindow;

    // If a menu with same the ID was already submitted, we will append to it, matching the behavior of Begin().
    // We are relying on a O(N) search - so O(N log N) over the frame - which seems like the most efficient for the expected small amount of BeginMenu() calls per frame.
    // If somehow this is ever becoming a problem we can switch to use e.g. ImGuiStorage mapping key to last frame used.
    if (g.MenusIdSubmittedThisFrame.contains(id))
    {
        if (menu_is_open)
            menu_is_open = BeginPopupEx(id, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
        else
            g.NextWindowData.ClearFlags();          // we behave like Begin() and need to consume those values
        return menu_is_open;
    }

    // Tag menu as used. Next time BeginMenu() with same ID is called it will append to existing menu
    g.MenusIdSubmittedThisFrame.push_back(id);

    ImVec2 label_size = CalcTextSize(label, NULL, true);
    bool pressed;
    bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.BeginPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].OpenParentId == window->IDStack.back());
    ImGuiWindow* backed_nav_window = g.NavWindow;
    if (menuset_is_open)
        g.NavWindow = window;  // Odd hack to allow hovering across menus of a same menu-set (otherwise we wouldn't be able to hover parent)

    // The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu,
    // However the final position is going to be different! It is chosen by FindBestWindowPosForPopup().
    // e.g. Menus tend to overlap each other horizontally to amplify relative Z-ordering.
    ImVec2 popup_pos, pos = window->DC.CursorPos;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Menu inside an horizontal menu bar
        // Selectable extend their highlight by half ItemSpacing in each direction.
        // For ChildMenu, the popup position will be overwritten by the call to FindBestWindowPosForPopup() in Begin()
        popup_pos = ImVec2(pos.x - 1.0f - IM_FLOOR(style.ItemSpacing.x * 0.5f), pos.y - style.FramePadding.y + window->MenuBarHeight());
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x * 2.0f, style.ItemSpacing.y));
        float w = label_size.x;
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_NoHoldingActiveID | ImGuiSelectableFlags_SelectOnClick | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        // Menu inside a menu
        // (In a typical menu window where all items are BeginMenu() or MenuItem() calls, extra_w will always be 0.0f.
        //  Only when they are other items sticking out we're going to add spacing, yet only register minimum width into the layout system.
        popup_pos = ImVec2(pos.x, pos.y - style.WindowPadding.y);
        float min_w = window->DC.MenuColumns.DeclColumns(label_size.x, 0.0f, IM_FLOOR(g.FontSize * 1.20f)); // Feedback to next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - min_w);
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_NoHoldingActiveID | ImGuiSelectableFlags_SelectOnClick | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_SpanAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(min_w, 0.0f));
        ImU32 text_col = GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled);
        RenderArrow(window->DrawList, pos + ImVec2(window->DC.MenuColumns.Pos[2] + extra_w + g.FontSize * 0.30f, 0.0f), text_col, ImGuiDir_Right);
    }

    const bool hovered = enabled && ItemHoverable(window->DC.LastItemRect, id);
    if (menuset_is_open)
        g.NavWindow = backed_nav_window;

    bool want_open = false;
    bool want_close = false;
    if (window->DC.LayoutType == ImGuiLayoutType_Vertical) // (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
    {
        // Close menu when not hovering it anymore unless we are moving roughly in the direction of the menu
        // Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
        bool moving_toward_other_child_menu = false;

        ImGuiWindow* child_menu_window = (g.BeginPopupStack.Size < g.OpenPopupStack.Size && g.OpenPopupStack[g.BeginPopupStack.Size].SourceWindow == window) ? g.OpenPopupStack[g.BeginPopupStack.Size].Window : NULL;
        if (g.HoveredWindow == window && child_menu_window != NULL && !(window->Flags & ImGuiWindowFlags_MenuBar))
        {
            // FIXME-DPI: Values should be derived from a master "scale" factor.
            ImRect next_window_rect = child_menu_window->Rect();
            ImVec2 ta = g.IO.MousePos - g.IO.MouseDelta;
            ImVec2 tb = (window->Pos.x < child_menu_window->Pos.x) ? next_window_rect.GetTL() : next_window_rect.GetTR();
            ImVec2 tc = (window->Pos.x < child_menu_window->Pos.x) ? next_window_rect.GetBL() : next_window_rect.GetBR();
            float extra = ImClamp(ImFabs(ta.x - tb.x) * 0.30f, 5.0f, 30.0f);    // add a bit of extra slack.
            ta.x += (window->Pos.x < child_menu_window->Pos.x) ? -0.5f : +0.5f; // to avoid numerical issues
            tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);                // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
            tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);
            moving_toward_other_child_menu = ImTriangleContainsPoint(ta, tb, tc, g.IO.MousePos);
            //GetForegroundDrawList()->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); // [DEBUG]
        }
        if (menu_is_open && !hovered && g.HoveredWindow == window && g.HoveredIdPreviousFrame != 0 && g.HoveredIdPreviousFrame != id && !moving_toward_other_child_menu)
            want_close = true;

        if (!menu_is_open && hovered && pressed) // Click to open
            want_open = true;
        else if (!menu_is_open && hovered && !moving_toward_other_child_menu) // Hover to open
            want_open = true;

        if (g.NavActivateId == id)
        {
            want_close = menu_is_open;
            want_open = !menu_is_open;
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right) // Nav-Right to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }
    else
    {
        // Menu bar
        if (menu_is_open && pressed && menuset_is_open) // Click an open menu again to close it
        {
            want_close = true;
            want_open = menu_is_open = false;
        }
        else if (pressed || (hovered && menuset_is_open && !menu_is_open)) // First click to open, then hover to open others
        {
            want_open = true;
        }
        else if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Down) // Nav-Down to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }

    if (!enabled) // explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
        want_close = true;
    if (want_close && IsPopupOpen(id, ImGuiPopupFlags_None))
        ClosePopupToLevel(g.BeginPopupStack.Size, true);

    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags | ImGuiItemStatusFlags_Openable | (menu_is_open ? ImGuiItemStatusFlags_Opened : 0));

    if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.BeginPopupStack.Size)
    {
        // Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
        OpenPopup(label);
        return false;
    }

    menu_is_open |= want_open;
    if (want_open)
        OpenPopup(label);

    if (menu_is_open)
    {
        SetNextWindowPos(popup_pos, ImGuiCond_Always); // Note: this is super misleading! The value will serve as reference for FindBestWindowPosForPopup(), not actual pos.
        menu_is_open = BeginPopupEx(id, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    }
    else
    {
        g.NextWindowData.ClearFlags(); // We behave like Begin() and need to consume those values
    }

    return menu_is_open;
}

void ImGui::EndMenu()
{
    // Nav: When a left move request _within our child menu_ failed, close ourselves (the _parent_ menu).
    // A menu doesn't close itself because EndMenuBar() wants the catch the last Left<>Right inputs.
    // However, it means that with the current code, a BeginMenu() from outside another menu or a menu-bar won't be closable with the Left direction.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavWindow && g.NavWindow->ParentWindow == window && g.NavMoveDir == ImGuiDir_Left && NavMoveRequestButNoResultYet() && window->DC.LayoutType == ImGuiLayoutType_Vertical)
    {
        ClosePopupToLevel(g.BeginPopupStack.Size, true);
        NavMoveRequestCancel();
    }

    EndPopup();
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImVec2 pos = window->DC.CursorPos;
    ImVec2 label_size = CalcTextSize(label, NULL, true);

    // We've been using the equivalent of ImGuiSelectableFlags_SetNavIdOnHover on all Selectable() since early Nav system days (commit 43ee5d73),
    // but I am unsure whether this should be kept at all. For now moved it to be an opt-in feature used by menus only.
    ImGuiSelectableFlags flags = ImGuiSelectableFlags_SelectOnRelease | ImGuiSelectableFlags_SetNavIdOnHover | (enabled ? 0 : ImGuiSelectableFlags_Disabled);
    bool pressed;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Mimic the exact layout spacing of BeginMenu() to allow MenuItem() inside a menu bar, which is a little misleading but may be useful
        // Note that in this situation we render neither the shortcut neither the selected tick mark
        float w = label_size.x;
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(style.ItemSpacing.x * 2.0f, style.ItemSpacing.y));
        pressed = Selectable(label, false, flags, ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += IM_FLOOR(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        // Menu item inside a vertical menu
        // (In a typical menu window where all items are BeginMenu() or MenuItem() calls, extra_w will always be 0.0f.
        //  Only when they are other items sticking out we're going to add spacing, yet only register minimum width into the layout system.
        float shortcut_w = shortcut ? CalcTextSize(shortcut, NULL).x : 0.0f;
        float min_w = window->DC.MenuColumns.DeclColumns(label_size.x, shortcut_w, IM_FLOOR(g.FontSize * 1.20f)); // Feedback for next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - min_w);
        pressed = Selectable(label, false, flags | ImGuiSelectableFlags_SpanAvailWidth, ImVec2(min_w, 0.0f));
        if (shortcut_w > 0.0f)
        {
            PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
            RenderText(pos + ImVec2(window->DC.MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);
            PopStyleColor();
        }
        if (selected)
            RenderCheckMark(window->DrawList, pos + ImVec2(window->DC.MenuColumns.Pos[2] + extra_w + g.FontSize * 0.40f, g.FontSize * 0.134f * 0.5f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled), g.FontSize  * 0.866f);
    }

    IMGUI_TEST_ENGINE_ITEM_INFO(window->DC.LastItemId, label, window->DC.LastItemStatusFlags | ImGuiItemStatusFlags_Checkable | (selected ? ImGuiItemStatusFlags_Checked : 0));
    return pressed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
    if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))
    {
        if (p_selected)
            *p_selected = !*p_selected;
        return true;
    }
    return false;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabBar, EndTabBar, etc.
//-------------------------------------------------------------------------
// - BeginTabBar()
// - BeginTabBarEx() [Internal]
// - EndTabBar()
// - TabBarLayout() [Internal]
// - TabBarCalcTabID() [Internal]
// - TabBarCalcMaxTabWidth() [Internal]
// - TabBarFindTabById() [Internal]
// - TabBarAddTab() [Internal]
// - TabBarRemoveTab() [Internal]
// - TabBarCloseTab() [Internal]
// - TabBarScrollClamp() [Internal]
// - TabBarScrollToTab() [Internal]
// - TabBarQueueChangeTabOrder() [Internal]
// - TabBarScrollingButtons() [Internal]
// - TabBarTabListPopupButton() [Internal]
//-------------------------------------------------------------------------

struct ImGuiTabBarSection
{
    int                 TabCount;               // Number of tabs in this section.
    float               Width;                  // Sum of width of tabs in this section (after shrinking down)
    float               Spacing;                // Horizontal spacing at the end of the section.

    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }
};

namespace ImGui
{
    static void             TabBarLayout(ImGuiTabBar* tab_bar);
    static ImU32            TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* docked_window);
    static float            TabBarCalcMaxTabWidth();
    static float            TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling);
    static void             TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* sections);
    static ImGuiTabItem*    TabBarScrollingButtons(ImGuiTabBar* tab_bar);
    static ImGuiTabItem*    TabBarTabListPopupButton(ImGuiTabBar* tab_bar);
}

ImGuiTabBar::ImGuiTabBar()
{
    memset(this, 0, sizeof(*this));
    CurrFrameVisible = PrevFrameVisible = -1;
    LastTabItemIdx = -1;
}

static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)
{
    return (tab->Flags & ImGuiTabItemFlags_Leading) ? 0 : (tab->Flags & ImGuiTabItemFlags_Trailing) ? 2 : 1;
}

static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)
{
    const ImGuiTabItem* a = (const ImGuiTabItem*)lhs;
    const ImGuiTabItem* b = (const ImGuiTabItem*)rhs;
    const int a_section = TabItemGetSectionIdx(a);
    const int b_section = TabItemGetSectionIdx(b);
    if (a_section != b_section)
        return a_section - b_section;
    return (int)(a->IndexDuringLayout - b->IndexDuringLayout);
}

static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)
{
    const ImGuiTabItem* a = (const ImGuiTabItem*)lhs;
    const ImGuiTabItem* b = (const ImGuiTabItem*)rhs;
    return (int)(a->BeginOrder - b->BeginOrder);
}

static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)
{
    ImGuiContext& g = *GImGui;
    return ref.Ptr ? (ImGuiTabBar*)ref.Ptr : g.TabBars.GetByIndex(ref.Index);
}

static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    if (g.TabBars.Contains(tab_bar))
        return ImGuiPtrOrIndex(g.TabBars.GetIndex(tab_bar));
    return ImGuiPtrOrIndex(tab_bar);
}

bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    ImGuiID id = window->GetID(str_id);
    ImGuiTabBar* tab_bar = g.TabBars.GetOrAddByKey(id);
    ImRect tab_bar_bb = ImRect(window->DC.CursorPos.x, window->DC.CursorPos.y, window->WorkRect.Max.x, window->DC.CursorPos.y + g.FontSize + g.Style.FramePadding.y * 2);
    tab_bar->ID = id;
    return BeginTabBarEx(tab_bar, tab_bar_bb, flags | ImGuiTabBarFlags_IsFocused, NULL);
}

bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags, ImGuiDockNode* dock_node)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    if ((flags & ImGuiTabBarFlags_DockNode) == 0)
        PushOverrideID(tab_bar->ID);

    // Add to stack
    g.CurrentTabBarStack.push_back(GetTabBarRefFromTabBar(tab_bar));
    g.CurrentTabBar = tab_bar;

    // Append with multiple BeginTabBar()/EndTabBar() pairs.
    tab_bar->BackupCursorPos = window->DC.CursorPos;
    if (tab_bar->CurrFrameVisible == g.FrameCount)
    {
        window->DC.CursorPos = ImVec2(tab_bar->BarRect.Min.x, tab_bar->BarRect.Max.y + tab_bar->ItemSpacingY);
        tab_bar->BeginCount++;
        return true;
    }

    // Ensure correct ordering when toggling ImGuiTabBarFlags_Reorderable flag, or when a new tab was added while being not reorderable
    if ((flags & ImGuiTabBarFlags_Reorderable) != (tab_bar->Flags & ImGuiTabBarFlags_Reorderable) || (tab_bar->TabsAddedNew && !(flags & ImGuiTabBarFlags_Reorderable)))
        if (tab_bar->Tabs.Size > 1 && (flags & ImGuiTabBarFlags_DockNode) == 0) // FIXME: TabBar with DockNode can now be hybrid
            ImQsort(tab_bar->Tabs.Data, tab_bar->Tabs.Size, sizeof(ImGuiTabItem), TabItemComparerByBeginOrder);
    tab_bar->TabsAddedNew = false;

    // Flags
    if ((flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)
        flags |= ImGuiTabBarFlags_FittingPolicyDefault_;

    tab_bar->Flags = flags;
    tab_bar->BarRect = tab_bar_bb;
    tab_bar->WantLayout = true; // Layout will be done on the first call to ItemTab()
    tab_bar->PrevFrameVisible = tab_bar->CurrFrameVisible;
    tab_bar->CurrFrameVisible = g.FrameCount;
    tab_bar->PrevTabsContentsHeight = tab_bar->CurrTabsContentsHeight;
    tab_bar->CurrTabsContentsHeight = 0.0f;
    tab_bar->ItemSpacingY = g.Style.ItemSpacing.y;
    tab_bar->FramePadding = g.Style.FramePadding;
    tab_bar->TabsActiveCount = 0;
    tab_bar->BeginCount = 1;

    // Set cursor pos in a way which only be used in the off-chance the user erroneously submits item before BeginTabItem(): items will overlap
    window->DC.CursorPos = ImVec2(tab_bar->BarRect.Min.x, tab_bar->BarRect.Max.y + tab_bar->ItemSpacingY);

    // Draw separator
    const ImU32 col = GetColorU32((flags & ImGuiTabBarFlags_IsFocused) ? ImGuiCol_TabActive : ImGuiCol_TabUnfocusedActive);
    const float y = tab_bar->BarRect.Max.y - 1.0f;
    if (dock_node != NULL)
    {
        const float separator_min_x = dock_node->Pos.x + window->WindowBorderSize;
        const float separator_max_x = dock_node->Pos.x + dock_node->Size.x - window->WindowBorderSize;
        window->DrawList->AddLine(ImVec2(separator_min_x, y), ImVec2(separator_max_x, y), col, 1.0f);
    }
    else
    {
        const float separator_min_x = tab_bar->BarRect.Min.x - IM_FLOOR(window->WindowPadding.x * 0.5f);
        const float separator_max_x = tab_bar->BarRect.Max.x + IM_FLOOR(window->WindowPadding.x * 0.5f);
        window->DrawList->AddLine(ImVec2(separator_min_x, y), ImVec2(separator_max_x, y), col, 1.0f);
    }
    return true;
}

void    ImGui::EndTabBar()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar != NULL, "Mismatched BeginTabBar()/EndTabBar()!");
        return;
    }

    // Fallback in case no TabItem have been submitted
    if (tab_bar->WantLayout)
        TabBarLayout(tab_bar);

    // Restore the last visible height if no tab is visible, this reduce vertical flicker/movement when a tabs gets removed without calling SetTabItemClosed().
    const bool tab_bar_appearing = (tab_bar->PrevFrameVisible + 1 < g.FrameCount);
    if (tab_bar->VisibleTabWasSubmitted || tab_bar->VisibleTabId == 0 || tab_bar_appearing)
    {
        tab_bar->CurrTabsContentsHeight = ImMax(window->DC.CursorPos.y - tab_bar->BarRect.Max.y, tab_bar->CurrTabsContentsHeight);
        window->DC.CursorPos.y = tab_bar->BarRect.Max.y + tab_bar->CurrTabsContentsHeight;
    }
    else
    {
        window->DC.CursorPos.y = tab_bar->BarRect.Max.y + tab_bar->PrevTabsContentsHeight;
    }
    if (tab_bar->BeginCount > 1)
        window->DC.CursorPos = tab_bar->BackupCursorPos;

    if ((tab_bar->Flags & ImGuiTabBarFlags_DockNode) == 0)
        PopID();

    g.CurrentTabBarStack.pop_back();
    g.CurrentTabBar = g.CurrentTabBarStack.empty() ? NULL : GetTabBarFromTabBarRef(g.CurrentTabBarStack.back());
}

// This is called only once a frame before by the first call to ItemTab()
// The reason we're not calling it in BeginTabBar() is to leave a chance to the user to call the SetTabItemClosed() functions.
static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    tab_bar->WantLayout = false;

    // Garbage collect by compacting list
    // Detect if we need to sort out tab list (e.g. in rare case where a tab changed section)
    int tab_dst_n = 0;
    bool need_sort_by_section = false;
    ImGuiTabBarSection sections[3]; // Layout sections: Leading, Central, Trailing
    for (int tab_src_n = 0; tab_src_n < tab_bar->Tabs.Size; tab_src_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_src_n];
        if (tab->LastFrameVisible < tab_bar->PrevFrameVisible || tab->WantClose)
        {
            // Remove tab
            if (tab_bar->VisibleTabId == tab->ID) { tab_bar->VisibleTabId = 0; }
            if (tab_bar->SelectedTabId == tab->ID) { tab_bar->SelectedTabId = 0; }
            if (tab_bar->NextSelectedTabId == tab->ID) { tab_bar->NextSelectedTabId = 0; }
            continue;
        }
        if (tab_dst_n != tab_src_n)
            tab_bar->Tabs[tab_dst_n] = tab_bar->Tabs[tab_src_n];

        tab = &tab_bar->Tabs[tab_dst_n];
        tab->IndexDuringLayout = (ImS16)tab_dst_n;

        // We will need sorting if tabs have changed section (e.g. moved from one of Leading/Central/Trailing to another)
        int curr_tab_section_n = TabItemGetSectionIdx(tab);
        if (tab_dst_n > 0)
        {
            ImGuiTabItem* prev_tab = &tab_bar->Tabs[tab_dst_n - 1];
            int prev_tab_section_n = TabItemGetSectionIdx(prev_tab);
            if (curr_tab_section_n == 0 && prev_tab_section_n != 0)
                need_sort_by_section = true;
            if (prev_tab_section_n == 2 && curr_tab_section_n != 2)
                need_sort_by_section = true;
        }

        sections[curr_tab_section_n].TabCount++;
        tab_dst_n++;
    }
    if (tab_bar->Tabs.Size != tab_dst_n)
        tab_bar->Tabs.resize(tab_dst_n);

    if (need_sort_by_section)
        ImQsort(tab_bar->Tabs.Data, tab_bar->Tabs.Size, sizeof(ImGuiTabItem), TabItemComparerBySection);

    // Calculate spacing between sections
    sections[0].Spacing = sections[0].TabCount > 0 && (sections[1].TabCount + sections[2].TabCount) > 0 ? g.Style.ItemInnerSpacing.x : 0.0f;
    sections[1].Spacing = sections[1].TabCount > 0 && sections[2].TabCount > 0 ? g.Style.ItemInnerSpacing.x : 0.0f;

    // Setup next selected tab
    ImGuiID scroll_to_tab_id = 0;
    if (tab_bar->NextSelectedTabId)
    {
        tab_bar->SelectedTabId = tab_bar->NextSelectedTabId;
        tab_bar->NextSelectedTabId = 0;
        scroll_to_tab_id = tab_bar->SelectedTabId;
    }

    // Process order change request (we could probably process it when requested but it's just saner to do it in a single spot).
    if (tab_bar->ReorderRequestTabId != 0)
    {
        if (TabBarProcessReorder(tab_bar))
            if (tab_bar->ReorderRequestTabId == tab_bar->SelectedTabId)
                scroll_to_tab_id = tab_bar->ReorderRequestTabId;
        tab_bar->ReorderRequestTabId = 0;
    }

    // Tab List Popup (will alter tab_bar->BarRect and therefore the available width!)
    const bool tab_list_popup_button = (tab_bar->Flags & ImGuiTabBarFlags_TabListPopupButton) != 0;
    if (tab_list_popup_button)
        if (ImGuiTabItem* tab_to_select = TabBarTabListPopupButton(tab_bar)) // NB: Will alter BarRect.Min.x!
            scroll_to_tab_id = tab_bar->SelectedTabId = tab_to_select->ID;

    // Leading/Trailing tabs will be shrink only if central one aren't visible anymore, so layout the shrink data as: leading, trailing, central
    // (whereas our tabs are stored as: leading, central, trailing)
    int shrink_buffer_indexes[3] = { 0, sections[0].TabCount + sections[2].TabCount, sections[0].TabCount };
    g.ShrinkWidthBuffer.resize(tab_bar->Tabs.Size);

    // Compute ideal tabs widths + store them into shrink buffer
    ImGuiTabItem* most_recently_selected_tab = NULL;
    int curr_section_n = -1;
    bool found_selected_tab_id = false;
    for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
        IM_ASSERT(tab->LastFrameVisible >= tab_bar->PrevFrameVisible);

        if ((most_recently_selected_tab == NULL || most_recently_selected_tab->LastFrameSelected < tab->LastFrameSelected) && !(tab->Flags & ImGuiTabItemFlags_Button))
            most_recently_selected_tab = tab;
        if (tab->ID == tab_bar->SelectedTabId)
            found_selected_tab_id = true;
        if (scroll_to_tab_id == 0 && g.NavJustMovedToId == tab->ID)
            scroll_to_tab_id = tab->ID;

        // Refresh tab width immediately, otherwise changes of style e.g. style.FramePadding.x would noticeably lag in the tab bar.
        // Additionally, when using TabBarAddTab() to manipulate tab bar order we occasionally insert new tabs that don't have a width yet,
        // and we cannot wait for the next BeginTabItem() call. We cannot compute this width within TabBarAddTab() because font size depends on the active window.
        const char* tab_name = tab_bar->GetTabName(tab);
        const bool has_close_button = (tab->Flags & ImGuiTabItemFlags_NoCloseButton) == 0;
        tab->ContentWidth = TabItemCalcSize(tab_name, has_close_button).x;

        int section_n = TabItemGetSectionIdx(tab);
        ImGuiTabBarSection* section = &sections[section_n];
        section->Width += tab->ContentWidth + (section_n == curr_section_n ? g.Style.ItemInnerSpacing.x : 0.0f);
        curr_section_n = section_n;

        // Store data so we can build an array sorted by width if we need to shrink tabs down
        IM_MSVC_WARNING_SUPPRESS(6385);
        int shrink_buffer_index = shrink_buffer_indexes[section_n]++;
        g.ShrinkWidthBuffer[shrink_buffer_index].Index = tab_n;
        g.ShrinkWidthBuffer[shrink_buffer_index].Width = tab->ContentWidth;

        IM_ASSERT(tab->ContentWidth > 0.0f);
        tab->Width = tab->ContentWidth;
    }

    // Compute total ideal width (used for e.g. auto-resizing a window)
    tab_bar->WidthAllTabsIdeal = 0.0f;
    for (int section_n = 0; section_n < 3; section_n++)
        tab_bar->WidthAllTabsIdeal += sections[section_n].Width + sections[section_n].Spacing;

    // Horizontal scrolling buttons
    // (note that TabBarScrollButtons() will alter BarRect.Max.x)
    if ((tab_bar->WidthAllTabsIdeal > tab_bar->BarRect.GetWidth() && tab_bar->Tabs.Size > 1) && !(tab_bar->Flags & ImGuiTabBarFlags_NoTabListScrollingButtons) && (tab_bar->Flags & ImGuiTabBarFlags_FittingPolicyScroll))
        if (ImGuiTabItem* scroll_and_select_tab = TabBarScrollingButtons(tab_bar))
        {
            scroll_to_tab_id = scroll_and_select_tab->ID;
            if ((scroll_and_select_tab->Flags & ImGuiTabItemFlags_Button) == 0)
                tab_bar->SelectedTabId = scroll_to_tab_id;
        }

    // Shrink widths if full tabs don't fit in their allocated space
    float section_0_w = sections[0].Width + sections[0].Spacing;
    float section_1_w = sections[1].Width + sections[1].Spacing;
    float section_2_w = sections[2].Width + sections[2].Spacing;
    bool central_section_is_visible = (section_0_w + section_2_w) < tab_bar->BarRect.GetWidth();
    float width_excess;
    if (central_section_is_visible)
        width_excess = ImMax(section_1_w - (tab_bar->BarRect.GetWidth() - section_0_w - section_2_w), 0.0f); // Excess used to shrink central section
    else
        width_excess = (section_0_w + section_2_w) - tab_bar->BarRect.GetWidth(); // Excess used to shrink leading/trailing section

    // With ImGuiTabBarFlags_FittingPolicyScroll policy, we will only shrink leading/trailing if the central section is not visible anymore
    if (width_excess > 0.0f && ((tab_bar->Flags & ImGuiTabBarFlags_FittingPolicyResizeDown) || !central_section_is_visible))
    {
        int shrink_data_count = (central_section_is_visible ? sections[1].TabCount : sections[0].TabCount + sections[2].TabCount);
        int shrink_data_offset = (central_section_is_visible ? sections[0].TabCount + sections[2].TabCount : 0);
        ShrinkWidths(g.ShrinkWidthBuffer.Data + shrink_data_offset, shrink_data_count, width_excess);

        // Apply shrunk values into tabs and sections
        for (int tab_n = shrink_data_offset; tab_n < shrink_data_offset + shrink_data_count; tab_n++)
        {
            ImGuiTabItem* tab = &tab_bar->Tabs[g.ShrinkWidthBuffer[tab_n].Index];
            float shrinked_width = IM_FLOOR(g.ShrinkWidthBuffer[tab_n].Width);
            if (shrinked_width < 0.0f)
                continue;

            int section_n = TabItemGetSectionIdx(tab);
            sections[section_n].Width -= (tab->Width - shrinked_width);
            tab->Width = shrinked_width;
        }
    }

    // Layout all active tabs
    int section_tab_index = 0;
    float tab_offset = 0.0f;
    tab_bar->WidthAllTabs = 0.0f;
    for (int section_n = 0; section_n < 3; section_n++)
    {
        ImGuiTabBarSection* section = &sections[section_n];
        if (section_n == 2)
            tab_offset = ImMin(ImMax(0.0f, tab_bar->BarRect.GetWidth() - section->Width), tab_offset);

        for (int tab_n = 0; tab_n < section->TabCount; tab_n++)
        {
            ImGuiTabItem* tab = &tab_bar->Tabs[section_tab_index + tab_n];
            tab->Offset = tab_offset;
            tab->NameOffset = -1;
            tab_offset += tab->Width + (tab_n < section->TabCount - 1 ? g.Style.ItemInnerSpacing.x : 0.0f);
        }
        tab_bar->WidthAllTabs += ImMax(section->Width + section->Spacing, 0.0f);
        tab_offset += section->Spacing;
        section_tab_index += section->TabCount;
    }

    // Clear name buffers
    tab_bar->TabsNames.Buf.resize(0);

    // If we have lost the selected tab, select the next most recently active one
    if (found_selected_tab_id == false)
        tab_bar->SelectedTabId = 0;
    if (tab_bar->SelectedTabId == 0 && tab_bar->NextSelectedTabId == 0 && most_recently_selected_tab != NULL)
        scroll_to_tab_id = tab_bar->SelectedTabId = most_recently_selected_tab->ID;

    // Lock in visible tab
    tab_bar->VisibleTabId = tab_bar->SelectedTabId;
    tab_bar->VisibleTabWasSubmitted = false;

    // CTRL+TAB can override visible tab temporarily
    if (g.NavWindowingTarget != NULL && g.NavWindowingTarget->DockNode && g.NavWindowingTarget->DockNode->TabBar == tab_bar)
        tab_bar->VisibleTabId = scroll_to_tab_id = g.NavWindowingTarget->ID;

    // Update scrolling
    if (scroll_to_tab_id != 0)
        TabBarScrollToTab(tab_bar, scroll_to_tab_id, sections);
    tab_bar->ScrollingAnim = TabBarScrollClamp(tab_bar, tab_bar->ScrollingAnim);
    tab_bar->ScrollingTarget = TabBarScrollClamp(tab_bar, tab_bar->ScrollingTarget);
    if (tab_bar->ScrollingAnim != tab_bar->ScrollingTarget)
    {
        // Scrolling speed adjust itself so we can always reach our target in 1/3 seconds.
        // Teleport if we are aiming far off the visible line
        tab_bar->ScrollingSpeed = ImMax(tab_bar->ScrollingSpeed, 70.0f * g.FontSize);
        tab_bar->ScrollingSpeed = ImMax(tab_bar->ScrollingSpeed, ImFabs(tab_bar->ScrollingTarget - tab_bar->ScrollingAnim) / 0.3f);
        const bool teleport = (tab_bar->PrevFrameVisible + 1 < g.FrameCount) || (tab_bar->ScrollingTargetDistToVisibility > 10.0f * g.FontSize);
        tab_bar->ScrollingAnim = teleport ? tab_bar->ScrollingTarget : ImLinearSweep(tab_bar->ScrollingAnim, tab_bar->ScrollingTarget, g.IO.DeltaTime * tab_bar->ScrollingSpeed);
    }
    else
    {
        tab_bar->ScrollingSpeed = 0.0f;
    }
    tab_bar->ScrollingRectMinX = tab_bar->BarRect.Min.x + sections[0].Width + sections[0].Spacing;
    tab_bar->ScrollingRectMaxX = tab_bar->BarRect.Max.x - sections[2].Width - sections[1].Spacing;

    // Actual layout in host window (we don't do it in BeginTabBar() so as not to waste an extra frame)
    ImGuiWindow* window = g.CurrentWindow;
    window->DC.CursorPos = tab_bar->BarRect.Min;
    ItemSize(ImVec2(tab_bar->WidthAllTabs, tab_bar->BarRect.GetHeight()), tab_bar->FramePadding.y);
    window->DC.IdealMaxPos.x = ImMax(window->DC.IdealMaxPos.x, tab_bar->BarRect.Min.x + tab_bar->WidthAllTabsIdeal);
}

// Dockable uses Name/ID in the global namespace. Non-dockable items use the ID stack.
static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* docked_window)
{
    if (docked_window != NULL)
    {
        IM_UNUSED(tab_bar);
        IM_ASSERT(tab_bar->Flags & ImGuiTabBarFlags_DockNode);
        ImGuiID id = ImHashStr(label);
        KeepAliveID(id);
        return id;
    }
    else
    {
        ImGuiWindow* window = GImGui->CurrentWindow;
        return window->GetID(label);
    }
}

static float ImGui::TabBarCalcMaxTabWidth()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize * 20.0f;
}

ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)
{
    if (tab_id != 0)
        for (int n = 0; n < tab_bar->Tabs.Size; n++)
            if (tab_bar->Tabs[n].ID == tab_id)
                return &tab_bar->Tabs[n];
    return NULL;
}

// FIXME: See references to #2304 in TODO.txt
ImGuiTabItem* ImGui::TabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar* tab_bar)
{
    ImGuiTabItem* most_recently_selected_tab = NULL;
    for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
        if (most_recently_selected_tab == NULL || most_recently_selected_tab->LastFrameSelected < tab->LastFrameSelected)
            if (tab->Window && tab->Window->WasActive)
                most_recently_selected_tab = tab;
    }
    return most_recently_selected_tab;
}

// The purpose of this call is to register tab in advance so we can control their order at the time they appear.
// Otherwise calling this is unnecessary as tabs are appending as needed by the BeginTabItem() function.
void ImGui::TabBarAddTab(ImGuiTabBar* tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(TabBarFindTabByID(tab_bar, window->ID) == NULL);
    IM_ASSERT(g.CurrentTabBar != tab_bar);  // Can't work while the tab bar is active as our tab doesn't have an X offset yet, in theory we could/should test something like (tab_bar->CurrFrameVisible < g.FrameCount) but we'd need to solve why triggers the commented early-out assert in BeginTabBarEx() (probably dock node going from implicit to explicit in same frame)

    if (!window->HasCloseButton)
        tab_flags |= ImGuiTabItemFlags_NoCloseButton;       // Set _NoCloseButton immediately because it will be used for first-frame width calculation.

    ImGuiTabItem new_tab;
    new_tab.ID = window->ID;
    new_tab.Flags = tab_flags;
    new_tab.LastFrameVisible = tab_bar->CurrFrameVisible;   // Required so BeginTabBar() doesn't ditch the tab
    if (new_tab.LastFrameVisible == -1)
        new_tab.LastFrameVisible = g.FrameCount - 1;
    new_tab.Window = window;                                // Required so tab bar layout can compute the tab width before tab submission
    tab_bar->Tabs.push_back(new_tab);
}

// The *TabId fields be already set by the docking system _before_ the actual TabItem was created, so we clear them regardless.
void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)
{
    if (ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, tab_id))
        tab_bar->Tabs.erase(tab);
    if (tab_bar->VisibleTabId == tab_id)      { tab_bar->VisibleTabId = 0; }
    if (tab_bar->SelectedTabId == tab_id)     { tab_bar->SelectedTabId = 0; }
    if (tab_bar->NextSelectedTabId == tab_id) { tab_bar->NextSelectedTabId = 0; }
}

// Called on manual closure attempt
void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)
{
    IM_ASSERT(!(tab->Flags & ImGuiTabItemFlags_Button));
    if (!(tab->Flags & ImGuiTabItemFlags_UnsavedDocument))
    {
        // This will remove a frame of lag for selecting another tab on closure.
        // However we don't run it in the case where the 'Unsaved' flag is set, so user gets a chance to fully undo the closure
        tab->WantClose = true;
        if (tab_bar->VisibleTabId == tab->ID)
        {
            tab->LastFrameVisible = -1;
            tab_bar->SelectedTabId = tab_bar->NextSelectedTabId = 0;
        }
    }
    else
    {
        // Actually select before expecting closure attempt (on an UnsavedDocument tab user is expect to e.g. show a popup)
        if (tab_bar->VisibleTabId != tab->ID)
            tab_bar->NextSelectedTabId = tab->ID;
    }
}

static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)
{
    scrolling = ImMin(scrolling, tab_bar->WidthAllTabs - tab_bar->BarRect.GetWidth());
    return ImMax(scrolling, 0.0f);
}

// Note: we may scroll to tab that are not selected! e.g. using keyboard arrow keys
static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* sections)
{
    ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, tab_id);
    if (tab == NULL)
        return;
    if (tab->Flags & ImGuiTabItemFlags_SectionMask_)
        return;

    ImGuiContext& g = *GImGui;
    float margin = g.FontSize * 1.0f; // When to scroll to make Tab N+1 visible always make a bit of N visible to suggest more scrolling area (since we don't have a scrollbar)
    int order = tab_bar->GetTabOrder(tab);

    // Scrolling happens only in the central section (leading/trailing sections are not scrolling)
    // FIXME: This is all confusing.
    float scrollable_width = tab_bar->BarRect.GetWidth() - sections[0].Width - sections[2].Width - sections[1].Spacing;

    // We make all tabs positions all relative Sections[0].Width to make code simpler
    float tab_x1 = tab->Offset - sections[0].Width + (order > sections[0].TabCount - 1 ? -margin : 0.0f);
    float tab_x2 = tab->Offset - sections[0].Width + tab->Width + (order + 1 < tab_bar->Tabs.Size - sections[2].TabCount ? margin : 1.0f);
    tab_bar->ScrollingTargetDistToVisibility = 0.0f;
    if (tab_bar->ScrollingTarget > tab_x1 || (tab_x2 - tab_x1 >= scrollable_width))
    {
        // Scroll to the left
        tab_bar->ScrollingTargetDistToVisibility = ImMax(tab_bar->ScrollingAnim - tab_x2, 0.0f);
        tab_bar->ScrollingTarget = tab_x1;
    }
    else if (tab_bar->ScrollingTarget < tab_x2 - scrollable_width)
    {
        // Scroll to the right
        tab_bar->ScrollingTargetDistToVisibility = ImMax((tab_x1 - scrollable_width) - tab_bar->ScrollingAnim, 0.0f);
        tab_bar->ScrollingTarget = tab_x2 - scrollable_width;
    }
}

void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int offset)
{
    IM_ASSERT(offset != 0);
    IM_ASSERT(tab_bar->ReorderRequestTabId == 0);
    tab_bar->ReorderRequestTabId = tab->ID;
    tab_bar->ReorderRequestOffset = (ImS16)offset;
}

void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, const ImGuiTabItem* src_tab, ImVec2 mouse_pos)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(tab_bar->ReorderRequestTabId == 0);
    if ((tab_bar->Flags & ImGuiTabBarFlags_Reorderable) == 0)
        return;

    const bool is_central_section = (src_tab->Flags & ImGuiTabItemFlags_SectionMask_) == 0;
    const float bar_offset = tab_bar->BarRect.Min.x - (is_central_section ? tab_bar->ScrollingTarget : 0);

    // Count number of contiguous tabs we are crossing over
    const int dir = (bar_offset + src_tab->Offset) > mouse_pos.x ? -1 : +1;
    const int src_idx = tab_bar->Tabs.index_from_ptr(src_tab);
    int dst_idx = src_idx;
    for (int i = src_idx; i >= 0 && i < tab_bar->Tabs.Size; i += dir)
    {
        // Reordered tabs must share the same section
        const ImGuiTabItem* dst_tab = &tab_bar->Tabs[i];
        if (dst_tab->Flags & ImGuiTabItemFlags_NoReorder)
            break;
        if ((dst_tab->Flags & ImGuiTabItemFlags_SectionMask_) != (src_tab->Flags & ImGuiTabItemFlags_SectionMask_))
            break;
        dst_idx = i;

        // Include spacing after tab, so when mouse cursor is between tabs we would not continue checking further tabs that are not hovered.
        const float x1 = bar_offset + dst_tab->Offset - g.Style.ItemInnerSpacing.x;
        const float x2 = bar_offset + dst_tab->Offset + dst_tab->Width + g.Style.ItemInnerSpacing.x;
        //GetForegroundDrawList()->AddRect(ImVec2(x1, tab_bar->BarRect.Min.y), ImVec2(x2, tab_bar->BarRect.Max.y), IM_COL32(255, 0, 0, 255));
        if ((dir < 0 && mouse_pos.x > x1) || (dir > 0 && mouse_pos.x < x2))
            break;
    }

    if (dst_idx != src_idx)
        TabBarQueueReorder(tab_bar, src_tab, dst_idx - src_idx);
}

bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)
{
    ImGuiTabItem* tab1 = TabBarFindTabByID(tab_bar, tab_bar->ReorderRequestTabId);
    if (tab1 == NULL || (tab1->Flags & ImGuiTabItemFlags_NoReorder))
        return false;

    //IM_ASSERT(tab_bar->Flags & ImGuiTabBarFlags_Reorderable); // <- this may happen when using debug tools
    int tab2_order = tab_bar->GetTabOrder(tab1) + tab_bar->ReorderRequestOffset;
    if (tab2_order < 0 || tab2_order >= tab_bar->Tabs.Size)
        return false;

    // Reordered tabs must share the same section
    // (Note: TabBarQueueReorderFromMousePos() also has a similar test but since we allow direct calls to TabBarQueueReorder() we do it here too)
    ImGuiTabItem* tab2 = &tab_bar->Tabs[tab2_order];
    if (tab2->Flags & ImGuiTabItemFlags_NoReorder)
        return false;
    if ((tab1->Flags & ImGuiTabItemFlags_SectionMask_) != (tab2->Flags & ImGuiTabItemFlags_SectionMask_))
        return false;

    ImGuiTabItem item_tmp = *tab1;
    ImGuiTabItem* src_tab = (tab_bar->ReorderRequestOffset > 0) ? tab1 + 1 : tab2;
    ImGuiTabItem* dst_tab = (tab_bar->ReorderRequestOffset > 0) ? tab1 : tab2 + 1;
    const int move_count = (tab_bar->ReorderRequestOffset > 0) ? tab_bar->ReorderRequestOffset : -tab_bar->ReorderRequestOffset;
    memmove(dst_tab, src_tab, move_count * sizeof(ImGuiTabItem));
    *tab2 = item_tmp;

    if (tab_bar->Flags & ImGuiTabBarFlags_SaveSettings)
        MarkIniSettingsDirty();
    return true;
}

static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImVec2 arrow_button_size(g.FontSize - 2.0f, g.FontSize + g.Style.FramePadding.y * 2.0f);
    const float scrolling_buttons_width = arrow_button_size.x * 2.0f;

    const ImVec2 backup_cursor_pos = window->DC.CursorPos;
    //window->DrawList->AddRect(ImVec2(tab_bar->BarRect.Max.x - scrolling_buttons_width, tab_bar->BarRect.Min.y), ImVec2(tab_bar->BarRect.Max.x, tab_bar->BarRect.Max.y), IM_COL32(255,0,0,255));

    int select_dir = 0;
    ImVec4 arrow_col = g.Style.Colors[ImGuiCol_Text];
    arrow_col.w *= 0.5f;

    PushStyleColor(ImGuiCol_Text, arrow_col);
    PushStyleColor(ImGuiCol_Button, ImVec4(0, 0, 0, 0));
    const float backup_repeat_delay = g.IO.KeyRepeatDelay;
    const float backup_repeat_rate = g.IO.KeyRepeatRate;
    g.IO.KeyRepeatDelay = 0.250f;
    g.IO.KeyRepeatRate = 0.200f;
    float x = ImMax(tab_bar->BarRect.Min.x, tab_bar->BarRect.Max.x - scrolling_buttons_width);
    window->DC.CursorPos = ImVec2(x, tab_bar->BarRect.Min.y);
    if (ArrowButtonEx("##<", ImGuiDir_Left, arrow_button_size, ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_Repeat))
        select_dir = -1;
    window->DC.CursorPos = ImVec2(x + arrow_button_size.x, tab_bar->BarRect.Min.y);
    if (ArrowButtonEx("##>", ImGuiDir_Right, arrow_button_size, ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_Repeat))
        select_dir = +1;
    PopStyleColor(2);
    g.IO.KeyRepeatRate = backup_repeat_rate;
    g.IO.KeyRepeatDelay = backup_repeat_delay;

    ImGuiTabItem* tab_to_scroll_to = NULL;
    if (select_dir != 0)
        if (ImGuiTabItem* tab_item = TabBarFindTabByID(tab_bar, tab_bar->SelectedTabId))
        {
            int selected_order = tab_bar->GetTabOrder(tab_item);
            int target_order = selected_order + select_dir;

            // Skip tab item buttons until another tab item is found or end is reached
            while (tab_to_scroll_to == NULL)
            {
                // If we are at the end of the list, still scroll to make our tab visible
                tab_to_scroll_to = &tab_bar->Tabs[(target_order >= 0 && target_order < tab_bar->Tabs.Size) ? target_order : selected_order];

                // Cross through buttons
                // (even if first/last item is a button, return it so we can update the scroll)
                if (tab_to_scroll_to->Flags & ImGuiTabItemFlags_Button)
                {
                    target_order += select_dir;
                    selected_order += select_dir;
                    tab_to_scroll_to = (target_order < 0 || target_order >= tab_bar->Tabs.Size) ? tab_to_scroll_to : NULL;
                }
            }
        }
    window->DC.CursorPos = backup_cursor_pos;
    tab_bar->BarRect.Max.x -= scrolling_buttons_width + 1.0f;

    return tab_to_scroll_to;
}

static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // We use g.Style.FramePadding.y to match the square ArrowButton size
    const float tab_list_popup_button_width = g.FontSize + g.Style.FramePadding.y;
    const ImVec2 backup_cursor_pos = window->DC.CursorPos;
    window->DC.CursorPos = ImVec2(tab_bar->BarRect.Min.x - g.Style.FramePadding.y, tab_bar->BarRect.Min.y);
    tab_bar->BarRect.Min.x += tab_list_popup_button_width;

    ImVec4 arrow_col = g.Style.Colors[ImGuiCol_Text];
    arrow_col.w *= 0.5f;
    PushStyleColor(ImGuiCol_Text, arrow_col);
    PushStyleColor(ImGuiCol_Button, ImVec4(0, 0, 0, 0));
    bool open = BeginCombo("##v", NULL, ImGuiComboFlags_NoPreview | ImGuiComboFlags_HeightLargest);
    PopStyleColor(2);

    ImGuiTabItem* tab_to_select = NULL;
    if (open)
    {
        for (int tab_n = 0; tab_n < tab_bar->Tabs.Size; tab_n++)
        {
            ImGuiTabItem* tab = &tab_bar->Tabs[tab_n];
            if (tab->Flags & ImGuiTabItemFlags_Button)
                continue;

            const char* tab_name = tab_bar->GetTabName(tab);
            if (Selectable(tab_name, tab_bar->SelectedTabId == tab->ID))
                tab_to_select = tab;
        }
        EndCombo();
    }

    window->DC.CursorPos = backup_cursor_pos;
    return tab_to_select;
}

//-------------------------------------------------------------------------
// [SECTION] Widgets: BeginTabItem, EndTabItem, etc.
//-------------------------------------------------------------------------
// - BeginTabItem()
// - EndTabItem()
// - TabItemButton()
// - TabItemEx() [Internal]
// - SetTabItemClosed()
// - TabItemCalcSize() [Internal]
// - TabItemBackground() [Internal]
// - TabItemLabelAndCloseButton() [Internal]
//-------------------------------------------------------------------------

bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar, "Needs to be called between BeginTabBar() and EndTabBar()!");
        return false;
    }
    IM_ASSERT((flags & ImGuiTabItemFlags_Button) == 0);             // BeginTabItem() Can't be used with button flags, use TabItemButton() instead!

    bool ret = TabItemEx(tab_bar, label, p_open, flags, NULL);
    if (ret && !(flags & ImGuiTabItemFlags_NoPushId))
    {
        ImGuiTabItem* tab = &tab_bar->Tabs[tab_bar->LastTabItemIdx];
        PushOverrideID(tab->ID); // We already hashed 'label' so push into the ID stack directly instead of doing another hash through PushID(label)
    }
    return ret;
}

void    ImGui::EndTabItem()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar != NULL, "Needs to be called between BeginTabBar() and EndTabBar()!");
        return;
    }
    IM_ASSERT(tab_bar->LastTabItemIdx >= 0);
    ImGuiTabItem* tab = &tab_bar->Tabs[tab_bar->LastTabItemIdx];
    if (!(tab->Flags & ImGuiTabItemFlags_NoPushId))
        PopID();
}

bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    ImGuiTabBar* tab_bar = g.CurrentTabBar;
    if (tab_bar == NULL)
    {
        IM_ASSERT_USER_ERROR(tab_bar != NULL, "Needs to be called between BeginTabBar() and EndTabBar()!");
        return false;
    }
    return TabItemEx(tab_bar, label, NULL, flags | ImGuiTabItemFlags_Button | ImGuiTabItemFlags_NoReorder, NULL);
}

bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlags flags, ImGuiWindow* docked_window)
{
    // Layout whole tab bar if not already done
    if (tab_bar->WantLayout)
        TabBarLayout(tab_bar);

    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = TabBarCalcTabID(tab_bar, label, docked_window);

    // If the user called us with *p_open == false, we early out and don't render.
    // We make a call to ItemAdd() so that attempts to use a contextual popup menu with an implicit ID won't use an older ID.
    IMGUI_TEST_ENGINE_ITEM_INFO(id, label, window->DC.LastItemStatusFlags);
    if (p_open && !*p_open)
    {
        PushItemFlag(ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus, true);
        ItemAdd(ImRect(), id);
        PopItemFlag();
        return false;
    }

    IM_ASSERT(!p_open || !(flags & ImGuiTabItemFlags_Button));
    IM_ASSERT((flags & (ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_Trailing)) != (ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_Trailing)); // Can't use both Leading and Trailing

    // Store into ImGuiTabItemFlags_NoCloseButton, also honor ImGuiTabItemFlags_NoCloseButton passed by user (although not documented)
    if (flags & ImGuiTabItemFlags_NoCloseButton)
        p_open = NULL;
    else if (p_open == NULL)
        flags |= ImGuiTabItemFlags_NoCloseButton;

    // Calculate tab contents size
    ImVec2 size = TabItemCalcSize(label, p_open != NULL);

    // Acquire tab data
    ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, id);
    bool tab_is_new = false;
    if (tab == NULL)
    {
        tab_bar->Tabs.push_back(ImGuiTabItem());
        tab = &tab_bar->Tabs.back();
        tab->ID = id;
        tab->Width = size.x;
        tab_bar->TabsAddedNew = true;
        tab_is_new = true;
    }
    tab_bar->LastTabItemIdx = (ImS16)tab_bar->Tabs.index_from_ptr(tab);
    tab->ContentWidth = size.x;
    tab->BeginOrder = tab_bar->TabsActiveCount++;

    const bool tab_bar_appearing = (tab_bar->PrevFrameVisible + 1 < g.FrameCount);
    const bool tab_bar_focused = (tab_bar->Flags & ImGuiTabBarFlags_IsFocused) != 0;
    const bool tab_appearing = (tab->LastFrameVisible + 1 < g.FrameCount);
    const bool is_tab_button = (flags & ImGuiTabItemFlags_Button) != 0;
    tab->LastFrameVisible = g.FrameCount;
    tab->Flags = flags;
    tab->Window = docked_window;

    // Append name with zero-terminator
    // (regular tabs are permitted in a DockNode tab bar, but window tabs not permitted in a non-DockNode tab bar)
    if (tab->Window != NULL)
    {
        IM_ASSERT(tab_bar->Flags & ImGuiTabBarFlags_DockNode);
        tab->NameOffset = -1;
    }
    else
    {
        IM_ASSERT(tab->Window == NULL);
        tab->NameOffset = (ImS16)tab_bar->TabsNames.size();
        tab_bar->TabsNames.append(label, label + strlen(label) + 1); // Append name _with_ the zero-terminator.
    }

    // Update selected tab
    if (tab_appearing && (tab_bar->Flags & ImGuiTabBarFlags_AutoSelectNewTabs) && tab_bar->NextSelectedTabId == 0)
        if (!tab_bar_appearing || tab_bar->SelectedTabId == 0)
            if (!is_tab_button)
                tab_bar->NextSelectedTabId = id;  // New tabs gets activated
    if ((flags & ImGuiTabItemFlags_SetSelected) && (tab_bar->SelectedTabId != id)) // SetSelected can only be passed on explicit tab bar
        if (!is_tab_button)
            tab_bar->NextSelectedTabId = id;

    // Lock visibility
    // (Note: tab_contents_visible != tab_selected... because CTRL+TAB operations may preview some tabs without selecting them!)
    bool tab_contents_visible = (tab_bar->VisibleTabId == id);
    if (tab_contents_visible)
        tab_bar->VisibleTabWasSubmitted = true;

    // On the very first frame of a tab bar we let first tab contents be visible to minimize appearing glitches
    if (!tab_contents_visible && tab_bar->SelectedTabId == 0 && tab_bar_appearing && docked_window == NULL)
        if (tab_bar->Tabs.Size == 1 && !(tab_bar->Flags & ImGuiTabBarFlags_AutoSelectNewTabs))
            tab_contents_visible = true;

    // Note that tab_is_new is not necessarily the same as tab_appearing! When a tab bar stops being submitted
    // and then gets submitted again, the tabs will have 'tab_appearing=true' but 'tab_is_new=false'.
    if (tab_appearing && (!tab_bar_appearing || tab_is_new))
    {
        PushItemFlag(ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus, true);
        ItemAdd(ImRect(), id);
        PopItemFlag();
        if (is_tab_button)
            return false;
        return tab_contents_visible;
    }

    if (tab_bar->SelectedTabId == id)
        tab->LastFrameSelected = g.FrameCount;

    // Backup current layout position
    const ImVec2 backup_main_cursor_pos = window->DC.CursorPos;

    // Layout
    const bool is_central_section = (tab->Flags & ImGuiTabItemFlags_SectionMask_) == 0;
    size.x = tab->Width;
    if (is_central_section)
        window->DC.CursorPos = tab_bar->BarRect.Min + ImVec2(IM_FLOOR(tab->Offset - tab_bar->ScrollingAnim), 0.0f);
    else
        window->DC.CursorPos = tab_bar->BarRect.Min + ImVec2(tab->Offset, 0.0f);
    ImVec2 pos = window->DC.CursorPos;
    ImRect bb(pos, pos + size);

    // We don't have CPU clipping primitives to clip the CloseButton (until it becomes a texture), so need to add an extra draw call (temporary in the case of vertical animation)
    const bool want_clip_rect = is_central_section && (bb.Min.x < tab_bar->ScrollingRectMinX || bb.Max.x > tab_bar->ScrollingRectMaxX);
    if (want_clip_rect)
        PushClipRect(ImVec2(ImMax(bb.Min.x, tab_bar->ScrollingRectMinX), bb.Min.y - 1), ImVec2(tab_bar->ScrollingRectMaxX, bb.Max.y), true);

    ImVec2 backup_cursor_max_pos = window->DC.CursorMaxPos;
    ItemSize(bb.GetSize(), style.FramePadding.y);
    window->DC.CursorMaxPos = backup_cursor_max_pos;

    if (!ItemAdd(bb, id))
    {
        if (want_clip_rect)
            PopClipRect();
        window->DC.CursorPos = backup_main_cursor_pos;
        return tab_contents_visible;
    }

    // Click to Select a tab
    ImGuiButtonFlags button_flags = ((is_tab_button ? ImGuiButtonFlags_PressedOnClickRelease : ImGuiButtonFlags_PressedOnClick) | ImGuiButtonFlags_AllowItemOverlap);
    if (g.DragDropActive && !g.DragDropPayload.IsDataType(IMGUI_PAYLOAD_TYPE_WINDOW))
        button_flags |= ImGuiButtonFlags_PressedOnDragDropHold;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, button_flags);
    if (pressed && !is_tab_button)
        tab_bar->NextSelectedTabId = id;
    hovered |= (g.HoveredId == id);

    // Transfer active id window so the active id is not owned by the dock host (as StartMouseMovingWindow()
    // will only do it on the drag). This allows FocusWindow() to be more conservative in how it clears active id.
    if (held && docked_window && g.ActiveId == id && g.ActiveIdIsJustActivated)
        g.ActiveIdWindow = docked_window;

    // Allow the close button to overlap unless we are dragging (in which case we don't want any overlapping tabs to be hovered)
    if (g.ActiveId != id)
        SetItemAllowOverlap();

    // Drag and drop a single floating window node moves it
    ImGuiDockNode* node = docked_window ? docked_window->DockNode : NULL;
    const bool single_floating_window_node = node && node->IsFloatingNode() && (node->Windows.Size == 1);
    if (held && single_floating_window_node && IsMouseDragging(0, 0.0f))
    {
        // Move
        StartMouseMovingWindow(docked_window);
    }
    else if (held && !tab_appearing && IsMouseDragging(0))
    {
        // Drag and drop: re-order tabs
        int drag_dir = 0;
        float drag_distance_from_edge_x = 0.0f;
        if (!g.DragDropActive && ((tab_bar->Flags & ImGuiTabBarFlags_Reorderable) || (docked_window != NULL)))
        {
            // While moving a tab it will jump on the other side of the mouse, so we also test for MouseDelta.x
            if (g.IO.MouseDelta.x < 0.0f && g.IO.MousePos.x < bb.Min.x)
            {
                drag_dir = -1;
                drag_distance_from_edge_x = bb.Min.x - g.IO.MousePos.x;
                TabBarQueueReorderFromMousePos(tab_bar, tab, g.IO.MousePos);
            }
            else if (g.IO.MouseDelta.x > 0.0f && g.IO.MousePos.x > bb.Max.x)
            {
                drag_dir = +1;
                drag_distance_from_edge_x = g.IO.MousePos.x - bb.Max.x;
                TabBarQueueReorderFromMousePos(tab_bar, tab, g.IO.MousePos);
            }
        }

        // Extract a Dockable window out of it's tab bar
        if (docked_window != NULL && !(docked_window->Flags & ImGuiWindowFlags_NoMove))
        {
            // We use a variable threshold to distinguish dragging tabs within a tab bar and extracting them out of the tab bar
            bool undocking_tab = (g.DragDropActive && g.DragDropPayload.SourceId == id);
            if (!undocking_tab) //&& (!g.IO.ConfigDockingWithShift || g.IO.KeyShift)
            {
                float threshold_base = g.FontSize;
                float threshold_x = (threshold_base * 2.2f);
                float threshold_y = (threshold_base * 1.5f) + ImClamp((ImFabs(g.IO.MouseDragMaxDistanceAbs[0].x) - threshold_base * 2.0f) * 0.20f, 0.0f, threshold_base * 4.0f);
                //GetForegroundDrawList()->AddRect(ImVec2(bb.Min.x - threshold_x, bb.Min.y - threshold_y), ImVec2(bb.Max.x + threshold_x, bb.Max.y + threshold_y), IM_COL32_WHITE); // [DEBUG]

                float distance_from_edge_y = ImMax(bb.Min.y - g.IO.MousePos.y, g.IO.MousePos.y - bb.Max.y);
                if (distance_from_edge_y >= threshold_y)
                    undocking_tab = true;
                if (drag_distance_from_edge_x > threshold_x)
                    if ((drag_dir < 0 && tab_bar->GetTabOrder(tab) == 0) || (drag_dir > 0 && tab_bar->GetTabOrder(tab) == tab_bar->Tabs.Size - 1))
                        undocking_tab = true;
            }

            if (undocking_tab)
            {
                // Undock
                DockContextQueueUndockWindow(&g, docked_window);
                g.MovingWindow = docked_window;
                SetActiveID(g.MovingWindow->MoveId, g.MovingWindow);
                g.ActiveIdClickOffset -= g.MovingWindow->Pos - bb.Min;
                g.ActiveIdNoClearOnFocusLoss = true;
            }
        }
    }

#if 0
    if (hovered && g.HoveredIdNotActiveTimer > TOOLTIP_DELAY && bb.GetWidth() < tab->ContentWidth)
    {
        // Enlarge tab display when hovering
        bb.Max.x = bb.Min.x + IM_FLOOR(ImLerp(bb.GetWidth(), tab->ContentWidth, ImSaturate((g.HoveredIdNotActiveTimer - 0.40f) * 6.0f)));
        display_draw_list = GetForegroundDrawList(window);
        TabItemBackground(display_draw_list, bb, flags, GetColorU32(ImGuiCol_TitleBgActive));
    }
#endif

    // Render tab shape
    ImDrawList* display_draw_list = window->DrawList;
    const ImU32 tab_col = GetColorU32((held || hovered) ? ImGuiCol_TabHovered : tab_contents_visible ? (tab_bar_focused ? ImGuiCol_TabActive : ImGuiCol_TabUnfocusedActive) : (tab_bar_focused ? ImGuiCol_Tab : ImGuiCol_TabUnfocused));
    TabItemBackground(display_draw_list, bb, flags, tab_col);
    RenderNavHighlight(bb, id);

    // Select with right mouse button. This is so the common idiom for context menu automatically highlight the current widget.
    const bool hovered_unblocked = IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup);
    if (hovered_unblocked && (IsMouseClicked(1) || IsMouseReleased(1)))
        if (!is_tab_button)
            tab_bar->NextSelectedTabId = id;

    if (tab_bar->Flags & ImGuiTabBarFlags_NoCloseWithMiddleMouseButton)
        flags |= ImGuiTabItemFlags_NoCloseWithMiddleMouseButton;

    // Render tab label, process close button
    const ImGuiID close_button_id = p_open ? GetIDWithSeed("#CLOSE", NULL, id) : 0;
    bool just_closed;
    bool text_clipped;
    TabItemLabelAndCloseButton(display_draw_list, bb, flags, tab_bar->FramePadding, label, id, close_button_id, tab_contents_visible, &just_closed, &text_clipped);
    if (just_closed && p_open != NULL)
    {
        *p_open = false;
        TabBarCloseTab(tab_bar, tab);
    }

    // Restore main window position so user can draw there
    if (want_clip_rect)
        PopClipRect();
    window->DC.CursorPos = backup_main_cursor_pos;

    // Tooltip (FIXME: Won't work over the close button because ItemOverlap systems messes up with HoveredIdTimer)
    // We test IsItemHovered() to discard e.g. when another item is active or drag and drop over the tab bar (which g.HoveredId ignores)
    if (text_clipped && g.HoveredId == id && !held && g.HoveredIdNotActiveTimer > g.TooltipSlowDelay && IsItemHovered())
        if (!(tab_bar->Flags & ImGuiTabBarFlags_NoTooltip) && !(tab->Flags & ImGuiTabItemFlags_NoTooltip))
            SetTooltip("%.*s", (int)(FindRenderedTextEnd(label) - label), label);

    IM_ASSERT(!is_tab_button || !(tab_bar->SelectedTabId == tab->ID && is_tab_button)); // TabItemButton should not be selected
    if (is_tab_button)
        return pressed;
    return tab_contents_visible;
}

// [Public] This is call is 100% optional but it allows to remove some one-frame glitches when a tab has been unexpectedly removed.
// To use it to need to call the function SetTabItemClosed() between BeginTabBar() and EndTabBar().
// Tabs closed by the close button will automatically be flagged to avoid this issue.
void    ImGui::SetTabItemClosed(const char* label)
{
    ImGuiContext& g = *GImGui;
    bool is_within_manual_tab_bar = g.CurrentTabBar && !(g.CurrentTabBar->Flags & ImGuiTabBarFlags_DockNode);
    if (is_within_manual_tab_bar)
    {
        ImGuiTabBar* tab_bar = g.CurrentTabBar;
        ImGuiID tab_id = TabBarCalcTabID(tab_bar, label, NULL);
        if (ImGuiTabItem* tab = TabBarFindTabByID(tab_bar, tab_id))
            tab->WantClose = true; // Will be processed by next call to TabBarLayout()
    }
    else if (ImGuiWindow* window = FindWindowByName(label))
    {
        if (window->DockIsActive)
            if (ImGuiDockNode* node = window->DockNode)
            {
                ImGuiID tab_id = TabBarCalcTabID(node->TabBar, label, window);
                TabBarRemoveTab(node->TabBar, tab_id);
                window->DockTabWantClose = true;
            }
    }
}

ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)
{
    ImGuiContext& g = *GImGui;
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size = ImVec2(label_size.x + g.Style.FramePadding.x, label_size.y + g.Style.FramePadding.y * 2.0f);
    if (has_close_button)
        size.x += g.Style.FramePadding.x + (g.Style.ItemInnerSpacing.x + g.FontSize); // We use Y intentionally to fit the close button circle.
    else
        size.x += g.Style.FramePadding.x + 1.0f;
    return ImVec2(ImMin(size.x, TabBarCalcMaxTabWidth()), size.y);
}

void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImU32 col)
{
    // While rendering tabs, we trim 1 pixel off the top of our bounding box so they can fit within a regular frame height while looking "detached" from it.
    ImGuiContext& g = *GImGui;
    const float width = bb.GetWidth();
    IM_UNUSED(flags);
    IM_ASSERT(width > 0.0f);
    const float rounding = ImMax(0.0f, ImMin((flags & ImGuiTabItemFlags_Button) ? g.Style.FrameRounding : g.Style.TabRounding, width * 0.5f - 1.0f));
    const float y1 = bb.Min.y + 1.0f;
    const float y2 = bb.Max.y + ((flags & ImGuiTabItemFlags_Preview) ? 0.0f : -1.0f);
    draw_list->PathLineTo(ImVec2(bb.Min.x, y2));
    draw_list->PathArcToFast(ImVec2(bb.Min.x + rounding, y1 + rounding), rounding, 6, 9);
    draw_list->PathArcToFast(ImVec2(bb.Max.x - rounding, y1 + rounding), rounding, 9, 12);
    draw_list->PathLineTo(ImVec2(bb.Max.x, y2));
    draw_list->PathFillConvex(col);
    if (g.Style.TabBorderSize > 0.0f)
    {
        draw_list->PathLineTo(ImVec2(bb.Min.x + 0.5f, y2));
        draw_list->PathArcToFast(ImVec2(bb.Min.x + rounding + 0.5f, y1 + rounding + 0.5f), rounding, 6, 9);
        draw_list->PathArcToFast(ImVec2(bb.Max.x - rounding - 0.5f, y1 + rounding + 0.5f), rounding, 9, 12);
        draw_list->PathLineTo(ImVec2(bb.Max.x - 0.5f, y2));
        draw_list->PathStroke(GetColorU32(ImGuiCol_Border), 0, g.Style.TabBorderSize);
    }
}

// Render text label (with custom clipping) + Unsaved Document marker + Close Button logic
// We tend to lock style.FramePadding for a given tab-bar, hence the 'frame_padding' parameter.
void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char* label, ImGuiID tab_id, ImGuiID close_button_id, bool is_contents_visible, bool* out_just_closed, bool* out_text_clipped)
{
    ImGuiContext& g = *GImGui;
    ImVec2 label_size = CalcTextSize(label, NULL, true);

    if (out_just_closed)
        *out_just_closed = false;
    if (out_text_clipped)
        *out_text_clipped = false;

    if (bb.GetWidth() <= 1.0f)
        return;

    // In Style V2 we'll have full override of all colors per state (e.g. focused, selected)
    // But right now if you want to alter text color of tabs this is what you need to do.
#if 0
    const float backup_alpha = g.Style.Alpha;
    if (!is_contents_visible)
        g.Style.Alpha *= 0.7f;
#endif

    // Render text label (with clipping + alpha gradient) + unsaved marker
    const char* TAB_UNSAVED_MARKER = "*";
    ImRect text_pixel_clip_bb(bb.Min.x + frame_padding.x, bb.Min.y + frame_padding.y, bb.Max.x - frame_padding.x, bb.Max.y);
    if (flags & ImGuiTabItemFlags_UnsavedDocument)
    {
        text_pixel_clip_bb.Max.x -= CalcTextSize(TAB_UNSAVED_MARKER, NULL, false).x;
        ImVec2 unsaved_marker_pos(ImMin(bb.Min.x + frame_padding.x + label_size.x + 2, text_pixel_clip_bb.Max.x), bb.Min.y + frame_padding.y + IM_FLOOR(-g.FontSize * 0.25f));
        RenderTextClippedEx(draw_list, unsaved_marker_pos, bb.Max - frame_padding, TAB_UNSAVED_MARKER, NULL, NULL);
    }
    ImRect text_ellipsis_clip_bb = text_pixel_clip_bb;

    // Return clipped state ignoring the close button
    if (out_text_clipped)
    {
        *out_text_clipped = (text_ellipsis_clip_bb.Min.x + label_size.x) > text_pixel_clip_bb.Max.x;
        //draw_list->AddCircle(text_ellipsis_clip_bb.Min, 3.0f, *out_text_clipped ? IM_COL32(255, 0, 0, 255) : IM_COL32(0, 255, 0, 255));
    }

    // Close Button
    // We are relying on a subtle and confusing distinction between 'hovered' and 'g.HoveredId' which happens because we are using ImGuiButtonFlags_AllowOverlapMode + SetItemAllowOverlap()
    //  'hovered' will be true when hovering the Tab but NOT when hovering the close button
    //  'g.HoveredId==id' will be true when hovering the Tab including when hovering the close button
    //  'g.ActiveId==close_button_id' will be true when we are holding on the close button, in which case both hovered booleans are false
    bool close_button_pressed = false;
    bool close_button_visible = false;
    if (close_button_id != 0)
        if (is_contents_visible || bb.GetWidth() >= g.Style.TabMinWidthForCloseButton)
            if (g.HoveredId == tab_id || g.HoveredId == close_button_id || g.ActiveId == tab_id || g.ActiveId == close_button_id)
                close_button_visible = true;
    if (close_button_visible)
    {
        ImGuiLastItemDataBackup last_item_backup;
        const float close_button_sz = g.FontSize;
        PushStyleVar(ImGuiStyleVar_FramePadding, frame_padding);
        if (CloseButton(close_button_id, ImVec2(bb.Max.x - frame_padding.x * 2.0f - close_button_sz, bb.Min.y)))
            close_button_pressed = true;
        PopStyleVar();
        last_item_backup.Restore();

        // Close with middle mouse button
        if (!(flags & ImGuiTabItemFlags_NoCloseWithMiddleMouseButton) && IsMouseClicked(2))
            close_button_pressed = true;

        text_pixel_clip_bb.Max.x -= close_button_sz;
    }

    // FIXME: if FramePadding is noticeably large, ellipsis_max_x will be wrong here (e.g. #3497), maybe for consistency that parameter of RenderTextEllipsis() shouldn't exist..
    float ellipsis_max_x = close_button_visible ? text_pixel_clip_bb.Max.x : bb.Max.x - 1.0f;
    RenderTextEllipsis(draw_list, text_ellipsis_clip_bb.Min, text_ellipsis_clip_bb.Max, text_pixel_clip_bb.Max.x, ellipsis_max_x, label, NULL, &label_size);

#if 0
    if (!is_contents_visible)
        g.Style.Alpha = backup_alpha;
#endif

    if (out_just_closed)
        *out_just_closed = close_button_pressed;
}


#endif // #ifndef IMGUI_DISABLE

// Junk Code By Troll Face & Thaisen's Gen
void wpcgLfbCpcLPcwSVYKpjrdXdCGlNDnCNr30091912() {     float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67871806 = -123288419;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68312334 = -513401619;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf77883050 = -30682156;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34704075 = -959508815;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf10341966 = -799880059;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf49270741 = -304170295;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83532089 = -33161450;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82210161 = -274585750;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf3593788 = -492888599;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf31292048 = -167957555;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29140498 = -130265726;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf1693576 = -249358807;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf26555563 = -539386681;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf53426024 = -207994029;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87946639 = -673074535;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf85833972 = -486034783;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87785698 = -399280433;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28568117 = -781753773;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf84272623 = -340340370;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60980300 = -842447865;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47011606 = -898975862;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47069398 = -824947104;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70422377 = -278193848;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5454559 = -371190224;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51245390 = -564208285;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39702342 = -99617808;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf42780252 = -585545562;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48719646 = -298621888;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64095760 = -432952451;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88942160 = -158497390;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82854305 = -54187421;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf284596 = -438411061;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41607380 = -589534301;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72008563 = -70385041;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf58531954 = -650672023;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf23109584 = 63512010;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf38204769 = -211887692;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf16783353 = -158273878;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67723047 = -119107761;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf69606667 = 5678558;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf9646253 = -491575516;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39571523 = -409023464;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5333743 = 78783854;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40772528 = -853831609;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74900005 = -354709274;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39787249 = -373225297;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98783215 = -737074270;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83013874 = -325434617;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68518072 = -259007806;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65821926 = -819687250;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34259591 = -777547661;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48739484 = -982217889;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80612706 = -662156357;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97435083 = -141869500;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83080305 = -594539010;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf20802408 = -298341316;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97889957 = -135207771;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72428491 = -659491933;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83458684 = -295300530;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70639623 = -600262251;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf6490489 = -718624733;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34812443 = -734539562;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf18114401 = -841633299;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14651627 = -234391210;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48437743 = -13770135;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28855903 = -691854665;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60086196 = -659824507;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54546999 = -369001641;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf94894070 = -557322007;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64837055 = -636586546;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47629204 = -174147091;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf71002345 = -141006556;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60845070 = -562646013;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14665957 = -246018928;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51334047 = -250872349;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf7440084 = -389952399;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41735656 = -803730958;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29649849 = -424362239;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf30554554 = 83519050;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf11458142 = -90982988;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40919127 = -362543538;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf59766377 = -160110945;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80201573 = 60385917;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98273834 = -613265201;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54682569 = -380949729;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34114822 = -71969532;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf19671890 = -776254704;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf44172296 = -347664801;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88928258 = -475846032;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf37729546 = -252330707;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf25219627 = -801280219;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65776277 = -552395759;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf33324669 = -862973348;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97083423 = -518845510;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf63116179 = -275696709;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74833810 = -757035954;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf21457122 = -567390165;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf90682115 = -686824936;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf92334785 = -740061475;    float IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf46044103 = -123288419;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67871806 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68312334;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68312334 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf77883050;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf77883050 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34704075;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34704075 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf10341966;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf10341966 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf49270741;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf49270741 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83532089;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83532089 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82210161;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82210161 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf3593788;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf3593788 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf31292048;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf31292048 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29140498;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29140498 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf1693576;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf1693576 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf26555563;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf26555563 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf53426024;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf53426024 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87946639;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87946639 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf85833972;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf85833972 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87785698;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf87785698 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28568117;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28568117 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf84272623;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf84272623 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60980300;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60980300 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47011606;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47011606 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47069398;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47069398 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70422377;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70422377 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5454559;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5454559 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51245390;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51245390 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39702342;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39702342 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf42780252;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf42780252 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48719646;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48719646 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64095760;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64095760 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88942160;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88942160 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82854305;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf82854305 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf284596;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf284596 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41607380;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41607380 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72008563;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72008563 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf58531954;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf58531954 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf23109584;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf23109584 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf38204769;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf38204769 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf16783353;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf16783353 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67723047;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67723047 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf69606667;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf69606667 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf9646253;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf9646253 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39571523;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39571523 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5333743;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf5333743 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40772528;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40772528 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74900005;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74900005 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39787249;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf39787249 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98783215;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98783215 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83013874;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83013874 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68518072;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf68518072 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65821926;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65821926 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34259591;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34259591 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48739484;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48739484 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80612706;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80612706 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97435083;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97435083 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83080305;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83080305 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf20802408;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf20802408 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97889957;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97889957 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72428491;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf72428491 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83458684;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf83458684 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70639623;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf70639623 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf6490489;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf6490489 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34812443;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34812443 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf18114401;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf18114401 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14651627;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14651627 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48437743;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf48437743 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28855903;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf28855903 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60086196;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60086196 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54546999;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54546999 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf94894070;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf94894070 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64837055;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf64837055 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47629204;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf47629204 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf71002345;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf71002345 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60845070;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf60845070 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14665957;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf14665957 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51334047;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf51334047 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf7440084;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf7440084 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41735656;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf41735656 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29649849;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf29649849 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf30554554;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf30554554 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf11458142;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf11458142 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40919127;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf40919127 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf59766377;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf59766377 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80201573;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf80201573 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98273834;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf98273834 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54682569;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf54682569 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34114822;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf34114822 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf19671890;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf19671890 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf44172296;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf44172296 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88928258;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf88928258 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf37729546;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf37729546 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf25219627;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf25219627 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65776277;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf65776277 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf33324669;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf33324669 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97083423;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf97083423 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf63116179;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf63116179 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74833810;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf74833810 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf21457122;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf21457122 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf90682115;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf90682115 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf92334785;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf92334785 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf46044103;     IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf46044103 = IGKGxBjDIIzPudwhkWJurXTRyeEuNyCZyYUqHObJFf67871806;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mcDCWzsTWeojznerjszBCBAfqCyqmFZHZ26275072() {     float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27467903 = -352044797;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69818183 = -323557004;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14884438 = -104823079;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN30579833 = -732119692;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN21635192 = -700387086;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46947861 = -162429968;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80890572 = -462879036;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN33035445 = -628797125;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17407231 = 74438901;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14316564 = -109216408;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54435430 = -531808165;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN36364777 = -344380057;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN97310125 = -445565200;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11799864 = -112152377;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN85254445 = -365601056;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN82588227 = -291407674;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN23746802 = -327496713;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN93236448 = -51089878;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64714826 = -479459999;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN40897409 = -404856518;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27472725 = -731996687;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15558997 = -717348981;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN62614202 = -42488927;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70184797 = 64471540;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27223395 = -20345875;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN34117249 = -234235279;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56120323 = 64974441;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13830815 = -920003478;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13880104 = -222545066;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27415627 = -205480632;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7768624 = -699406749;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN43049856 = -855629059;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90689418 = -569481173;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54533006 = -672268972;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN63469315 = -298882008;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN1699481 = -248144572;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN28836447 = -504666326;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15143691 = -102726267;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN86740990 = -937814277;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42432322 = -268202390;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67864066 = -960237112;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN9650704 = -413964882;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46212985 = -754660976;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15012033 = -177746348;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN75888320 = -901027342;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4580378 = -616169456;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4271938 = -628929937;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29710269 = -658187846;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7907721 = -542945426;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80989318 = -40939711;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84745841 = -563655885;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55324637 = -953461145;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56028220 = -902104811;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70709606 = -402038455;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN98802347 = -558473097;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11908907 = -634695816;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7203982 = -181068077;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN44699641 = -69294619;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN3356439 = -611773817;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87517942 = -366151808;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90827538 = -127404409;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67059757 = -542875558;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19155342 = -306252060;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN89991604 = -720080467;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6547940 = -409809660;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11385574 = -676179107;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN45675359 = -774898884;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42777120 = -773296228;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN48330549 = -813270369;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN83554964 = -17456485;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN53751780 = -786741348;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8603111 = -124770446;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6495459 = -113275601;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22282505 = -111257610;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN73033343 = -444619406;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17822021 = -218031805;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69346012 = -962688006;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN47602169 = -864742580;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94296476 = -34501119;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22643018 = -404176419;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29845312 = -605305342;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN26410054 = -276837714;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN5923095 = -277058053;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN32890785 = -81605356;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42669786 = -641824748;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN52443987 = -745945604;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87021635 = -953524248;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19979812 = -67442718;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55730659 = -13795876;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51560408 = -664186193;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94495498 = 32923505;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84136805 = -335371708;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11787253 = -490952451;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN99223047 = -471662470;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51604783 = -40797981;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN804310 = -317361555;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90495361 = -7712823;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56221381 = 65419491;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8464094 = -767936688;    float WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64502747 = -352044797;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27467903 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69818183;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69818183 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14884438;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14884438 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN30579833;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN30579833 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN21635192;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN21635192 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46947861;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46947861 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80890572;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80890572 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN33035445;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN33035445 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17407231;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17407231 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14316564;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN14316564 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54435430;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54435430 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN36364777;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN36364777 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN97310125;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN97310125 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11799864;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11799864 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN85254445;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN85254445 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN82588227;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN82588227 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN23746802;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN23746802 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN93236448;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN93236448 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64714826;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64714826 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN40897409;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN40897409 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27472725;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27472725 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15558997;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15558997 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN62614202;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN62614202 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70184797;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70184797 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27223395;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27223395 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN34117249;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN34117249 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56120323;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56120323 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13830815;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13830815 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13880104;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN13880104 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27415627;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27415627 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7768624;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7768624 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN43049856;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN43049856 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90689418;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90689418 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54533006;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN54533006 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN63469315;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN63469315 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN1699481;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN1699481 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN28836447;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN28836447 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15143691;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15143691 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN86740990;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN86740990 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42432322;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42432322 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67864066;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67864066 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN9650704;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN9650704 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46212985;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN46212985 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15012033;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN15012033 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN75888320;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN75888320 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4580378;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4580378 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4271938;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN4271938 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29710269;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29710269 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7907721;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7907721 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80989318;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN80989318 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84745841;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84745841 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55324637;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55324637 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56028220;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56028220 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70709606;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN70709606 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN98802347;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN98802347 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11908907;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11908907 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7203982;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN7203982 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN44699641;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN44699641 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN3356439;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN3356439 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87517942;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87517942 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90827538;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90827538 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67059757;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN67059757 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19155342;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19155342 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN89991604;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN89991604 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6547940;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6547940 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11385574;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11385574 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN45675359;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN45675359 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42777120;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42777120 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN48330549;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN48330549 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN83554964;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN83554964 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN53751780;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN53751780 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8603111;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8603111 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6495459;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN6495459 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22282505;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22282505 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN73033343;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN73033343 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17822021;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN17822021 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69346012;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN69346012 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN47602169;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN47602169 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94296476;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94296476 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22643018;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN22643018 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29845312;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN29845312 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN26410054;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN26410054 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN5923095;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN5923095 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN32890785;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN32890785 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42669786;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN42669786 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN52443987;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN52443987 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87021635;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN87021635 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19979812;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN19979812 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55730659;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN55730659 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51560408;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51560408 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94495498;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN94495498 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84136805;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN84136805 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11787253;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN11787253 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN99223047;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN99223047 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51604783;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN51604783 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN804310;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN804310 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90495361;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN90495361 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56221381;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN56221381 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8464094;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN8464094 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64502747;     WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN64502747 = WHNGdZTosQYfAnKfUtUDHskcXLUBChREgJdgRkGSgN27467903;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bRwshdePjDQzzJmDMxrXVxukMhNgMfThI86577729() {     float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17594212 = -410800998;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52943248 = -698483174;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10377137 = -241617540;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs4078409 = -918291514;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs34691928 = -641710528;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs27734266 = -55063076;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75554010 = -100424508;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs85914008 = -265244864;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs41218918 = 66546264;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs18572234 = -779090934;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs30587249 = 59771677;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71114284 = -923968192;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35656258 = -757801060;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50218717 = -110313261;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs83328817 = -850721999;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6767969 = 8212456;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67708982 = -588841955;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14592161 = -493939170;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25629218 = -945870435;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs8221658 = 47265173;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15395127 = -436421779;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs13640579 = 49554383;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95852619 = -448948848;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78105894 = -383552836;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs74108583 = -663856819;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52908214 = -110109014;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78087657 = -794554553;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37001190 = -979893537;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75089101 = -984744114;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75204707 = -79883023;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs11232027 = 73926708;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs42416770 = -256453478;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99658459 = -869706333;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78371650 = -663720130;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99065849 = 50782331;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs54930487 = -551173982;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29070015 = -20482231;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs39500974 = 31214489;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97274006 = -645276323;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs86944463 = -172910163;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81563740 = -666098388;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64295167 = -228458096;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6029827 = -130086571;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs45673974 = -41829537;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67852738 = 86462702;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25019371 = 206638;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs84695228 = -177412437;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs20096728 = -684844099;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35826374 = -978884772;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10269724 = -497936048;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14111365 = -938037930;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99097744 = -917887978;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs5480676 = -613957806;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs23616669 = -525593737;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71182602 = -687073369;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs3953633 = -360355381;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57090628 = -149534326;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs32271242 = -858064705;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29969825 = -154434695;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81783713 = -431601515;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49646608 = -260508524;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38552820 = -120530972;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10824908 = -280500750;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs66014211 = -853570714;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7340208 = -753017642;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs88170478 = -683774845;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71455825 = 45738140;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57284607 = 5919070;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51152868 = -61095593;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28398330 = -199548018;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs77697953 = -971305314;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28208008 = -520056444;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17318154 = -848662848;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38684754 = -672960273;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs26657918 = -286636440;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51099960 = -107963684;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7610753 = -820359046;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50178646 = -307119312;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10253157 = -370015538;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49089212 = -564063458;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs68212986 = -932696577;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57990930 = -9710454;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs1174816 = 98991235;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64819377 = -386808066;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs61093342 = -141845094;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs12134283 = -8185315;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs36936095 = -642495673;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs76041790 = -244112596;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7189049 = -976646762;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95112216 = -588862288;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97839858 = -301639656;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs96798773 = -162417527;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs9531150 = -814350816;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15490294 = -113674809;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37297855 = -912401640;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs43010920 = -445567416;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs53470259 = -947957346;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs40015615 = -276515858;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38333767 = -288811895;    float wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs79682259 = -410800998;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17594212 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52943248;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52943248 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10377137;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10377137 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs4078409;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs4078409 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs34691928;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs34691928 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs27734266;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs27734266 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75554010;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75554010 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs85914008;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs85914008 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs41218918;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs41218918 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs18572234;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs18572234 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs30587249;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs30587249 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71114284;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71114284 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35656258;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35656258 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50218717;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50218717 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs83328817;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs83328817 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6767969;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6767969 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67708982;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67708982 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14592161;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14592161 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25629218;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25629218 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs8221658;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs8221658 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15395127;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15395127 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs13640579;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs13640579 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95852619;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95852619 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78105894;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78105894 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs74108583;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs74108583 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52908214;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs52908214 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78087657;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78087657 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37001190;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37001190 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75089101;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75089101 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75204707;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs75204707 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs11232027;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs11232027 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs42416770;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs42416770 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99658459;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99658459 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78371650;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs78371650 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99065849;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99065849 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs54930487;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs54930487 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29070015;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29070015 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs39500974;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs39500974 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97274006;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97274006 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs86944463;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs86944463 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81563740;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81563740 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64295167;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64295167 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6029827;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs6029827 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs45673974;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs45673974 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67852738;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs67852738 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25019371;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs25019371 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs84695228;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs84695228 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs20096728;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs20096728 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35826374;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs35826374 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10269724;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10269724 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14111365;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs14111365 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99097744;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs99097744 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs5480676;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs5480676 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs23616669;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs23616669 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71182602;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71182602 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs3953633;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs3953633 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57090628;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57090628 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs32271242;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs32271242 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29969825;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs29969825 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81783713;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs81783713 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49646608;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49646608 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38552820;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38552820 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10824908;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10824908 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs66014211;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs66014211 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7340208;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7340208 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs88170478;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs88170478 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71455825;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs71455825 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57284607;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57284607 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51152868;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51152868 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28398330;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28398330 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs77697953;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs77697953 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28208008;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs28208008 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17318154;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17318154 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38684754;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38684754 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs26657918;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs26657918 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51099960;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs51099960 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7610753;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7610753 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50178646;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs50178646 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10253157;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs10253157 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49089212;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs49089212 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs68212986;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs68212986 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57990930;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs57990930 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs1174816;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs1174816 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64819377;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs64819377 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs61093342;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs61093342 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs12134283;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs12134283 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs36936095;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs36936095 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs76041790;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs76041790 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7189049;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs7189049 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95112216;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs95112216 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97839858;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs97839858 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs96798773;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs96798773 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs9531150;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs9531150 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15490294;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs15490294 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37297855;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs37297855 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs43010920;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs43010920 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs53470259;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs53470259 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs40015615;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs40015615 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38333767;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs38333767 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs79682259;     wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs79682259 = wnHfnkcfWobHnbGMwPjSpNdWLgAPxDEjjqDVeXZMPs17594212;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JIPbOWnXEUQBEhpXzUZtLnUMYVXbAqhkq99122918() {     float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37062382 = -823932210;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5967113 = -144361170;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27214129 = -993246155;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj22725557 = -734865777;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35138444 = -167982944;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj53326340 = 54452156;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20385889 = -543730738;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51164242 = -359052830;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj1905716 = -661645116;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96500956 = -784676980;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj84810512 = -373218623;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74608898 = -923270897;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj26027918 = -82158337;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj58634757 = -652598987;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43855279 = -48805790;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj72983618 = -454979478;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73671095 = -760616636;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38654912 = -244693888;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25264097 = -223075196;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88832959 = -670271283;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27851199 = 57365895;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj28622662 = -462248830;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64025626 = -746523467;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj95827563 = -20096828;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj85312072 = -958156929;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj57675675 = -895904232;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj62015789 = -459705485;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87792865 = -43626816;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16834058 = -998655260;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj59911561 = -171321718;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41036112 = -891399385;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj81996081 = -820802496;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj11134563 = -324914100;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37128158 = -968323337;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38996185 = -11920475;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90996424 = -854742590;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj97453465 = -547358306;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj80983448 = -45994327;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64587332 = -9691148;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8226200 = -169441260;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj23045797 = -75884683;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76154299 = -467354321;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77163067 = -77888369;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj29059513 = -490902197;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47881149 = -190660261;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj79480498 = -537124783;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66685108 = -91105760;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20252558 = -868131413;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76961965 = -992824011;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51168066 = -258948394;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88546934 = -244402861;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj15546605 = -195240837;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75305822 = -290066767;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96546697 = -520187373;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71271719 = -461632004;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8439720 = -261683380;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41941486 = -397837704;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj31386566 = -873149328;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37413485 = -776708849;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77462768 = -272078712;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj91310551 = -485842360;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj32593024 = -400103923;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34330184 = -360397570;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41994155 = -390323398;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj55464845 = -893277595;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj2814432 = -552416127;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj63474335 = -498356798;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88899759 = -113835001;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj19638572 = -540678512;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj52858854 = -194063201;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75530152 = -907621173;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj92687647 = -614622310;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74067580 = -135002741;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj17037898 = 46366063;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65787162 = -494386600;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51696899 = -475279784;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51459595 = -284360462;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34966113 = -155621270;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47946414 = -829436567;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5831575 = -321032146;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90990567 = -704798473;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41763231 = -591574072;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj10830900 = -50802805;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65665992 = -639706867;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71364627 = -926918857;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25489507 = -596158549;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj6690259 = -430735730;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj14587866 = -804726727;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65856438 = -406691334;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj30556465 = -750237095;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj49054938 = -356904887;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66066900 = -674208978;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43569964 = -269285478;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87124563 = -737612436;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16915648 = -683598900;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90452773 = -675780761;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41824116 = -6956752;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35168913 = -687564971;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73594667 = -597624603;    float GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj45066718 = -823932210;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37062382 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5967113;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5967113 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27214129;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27214129 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj22725557;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj22725557 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35138444;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35138444 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj53326340;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj53326340 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20385889;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20385889 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51164242;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51164242 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj1905716;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj1905716 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96500956;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96500956 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj84810512;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj84810512 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74608898;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74608898 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj26027918;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj26027918 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj58634757;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj58634757 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43855279;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43855279 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj72983618;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj72983618 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73671095;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73671095 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38654912;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38654912 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25264097;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25264097 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88832959;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88832959 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27851199;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj27851199 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj28622662;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj28622662 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64025626;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64025626 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj95827563;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj95827563 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj85312072;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj85312072 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj57675675;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj57675675 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj62015789;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj62015789 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87792865;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87792865 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16834058;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16834058 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj59911561;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj59911561 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41036112;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41036112 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj81996081;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj81996081 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj11134563;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj11134563 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37128158;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37128158 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38996185;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj38996185 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90996424;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90996424 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj97453465;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj97453465 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj80983448;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj80983448 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64587332;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj64587332 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8226200;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8226200 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj23045797;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj23045797 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76154299;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76154299 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77163067;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77163067 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj29059513;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj29059513 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47881149;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47881149 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj79480498;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj79480498 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66685108;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66685108 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20252558;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj20252558 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76961965;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj76961965 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51168066;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51168066 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88546934;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88546934 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj15546605;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj15546605 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75305822;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75305822 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96546697;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj96546697 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71271719;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71271719 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8439720;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj8439720 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41941486;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41941486 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj31386566;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj31386566 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37413485;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37413485 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77462768;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj77462768 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj91310551;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj91310551 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj32593024;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj32593024 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34330184;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34330184 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41994155;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41994155 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj55464845;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj55464845 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj2814432;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj2814432 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj63474335;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj63474335 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88899759;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj88899759 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj19638572;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj19638572 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj52858854;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj52858854 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75530152;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj75530152 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj92687647;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj92687647 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74067580;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj74067580 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj17037898;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj17037898 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65787162;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65787162 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51696899;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51696899 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51459595;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj51459595 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34966113;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj34966113 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47946414;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj47946414 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5831575;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj5831575 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90990567;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90990567 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41763231;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41763231 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj10830900;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj10830900 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65665992;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65665992 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71364627;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj71364627 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25489507;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj25489507 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj6690259;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj6690259 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj14587866;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj14587866 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65856438;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj65856438 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj30556465;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj30556465 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj49054938;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj49054938 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66066900;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj66066900 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43569964;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj43569964 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87124563;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj87124563 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16915648;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj16915648 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90452773;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj90452773 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41824116;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj41824116 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35168913;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj35168913 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73594667;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj73594667 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj45066718;     GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj45066718 = GFUoPtEJnXdcpIZTbHJJvlWoCCszLXNngKybVijaUj37062382;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YKxTXCTEipsyBFZFrGYdwpUInytNNbTuQ59425575() {     float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY27188691 = -882688410;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89092177 = -519287340;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22706828 = -30040616;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY96224131 = -921037599;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY48195179 = -109306386;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY34112745 = -938180952;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15049327 = -181276211;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4042805 = 4499431;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25717403 = -669537753;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY756627 = -354551505;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60962331 = -881638780;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY9358406 = -402859032;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64374050 = -394394197;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97053610 = -650759871;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41929650 = -533926733;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97163359 = -155359348;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17633276 = 78038123;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60010625 = -687543181;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY86178487 = -689485632;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56157207 = -218149593;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15773602 = -747059197;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY26704244 = -795345465;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97264044 = -52983388;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3748661 = -468121203;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32197261 = -501667873;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY76466640 = -771777967;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY83983123 = -219234478;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10963241 = -103516874;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78043056 = -660854308;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY7700641 = -45724109;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44499514 = -118065929;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY81362995 = -221626916;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY20103604 = -625139259;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60966802 = -959774495;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74592719 = -762256136;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44227431 = -57772000;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97687034 = -63174210;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY5340732 = 87946429;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY75120349 = -817153194;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52738341 = -74149033;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36745470 = -881745959;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY30798763 = -281847535;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36979909 = -553313964;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59721454 = -354985386;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY39845566 = -303170217;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99919491 = 79251312;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY47108398 = -739588260;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10639017 = -894787667;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4880620 = -328763357;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY80448472 = -715944731;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17912458 = -618784905;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59319711 = -159667670;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY24758277 = -1919762;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY49453760 = -643742655;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY43651974 = -590232275;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY484447 = 12657054;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY91828133 = -366303953;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18958167 = -561919413;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64026871 = -319369727;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY71728539 = -337528419;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY50129621 = -618946474;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4086087 = 22240662;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25999749 = -334646261;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18016763 = -523813645;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56257113 = -136485577;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY79599336 = -560011865;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89254801 = -777719773;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3407248 = -434619703;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22460891 = -888503736;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97702218 = -376154733;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99476325 = 7814862;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY12292545 = 90091693;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84890276 = -870389987;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY33440147 = -515336600;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY19411738 = -336403634;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84974838 = -365211663;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89724335 = -142031502;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY37542591 = -697998002;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY63903094 = -64950986;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32277769 = -480919185;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY29358242 = 67810292;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY73344107 = -324446812;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY6082621 = -774753517;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97594583 = -944909578;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89788183 = -426939204;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY85179802 = -958398259;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56604718 = -119707155;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY70649844 = -981396605;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17314828 = -269542220;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74108273 = -674913191;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52399298 = -691468048;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78728867 = -501254797;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41313860 = -592683844;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3391811 = -379624775;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY2608721 = -455202559;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32659384 = -803986622;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4799014 = -947201274;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18963146 = 70499680;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3464342 = -118499810;    float vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60246230 = -882688410;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY27188691 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89092177;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89092177 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22706828;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22706828 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY96224131;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY96224131 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY48195179;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY48195179 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY34112745;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY34112745 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15049327;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15049327 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4042805;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4042805 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25717403;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25717403 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY756627;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY756627 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60962331;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60962331 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY9358406;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY9358406 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64374050;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64374050 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97053610;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97053610 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41929650;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41929650 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97163359;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97163359 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17633276;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17633276 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60010625;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60010625 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY86178487;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY86178487 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56157207;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56157207 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15773602;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY15773602 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY26704244;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY26704244 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97264044;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97264044 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3748661;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3748661 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32197261;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32197261 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY76466640;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY76466640 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY83983123;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY83983123 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10963241;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10963241 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78043056;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78043056 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY7700641;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY7700641 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44499514;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44499514 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY81362995;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY81362995 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY20103604;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY20103604 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60966802;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60966802 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74592719;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74592719 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44227431;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY44227431 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97687034;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97687034 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY5340732;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY5340732 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY75120349;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY75120349 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52738341;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52738341 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36745470;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36745470 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY30798763;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY30798763 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36979909;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY36979909 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59721454;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59721454 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY39845566;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY39845566 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99919491;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99919491 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY47108398;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY47108398 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10639017;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY10639017 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4880620;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4880620 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY80448472;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY80448472 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17912458;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17912458 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59319711;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY59319711 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY24758277;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY24758277 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY49453760;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY49453760 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY43651974;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY43651974 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY484447;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY484447 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY91828133;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY91828133 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18958167;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18958167 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64026871;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY64026871 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY71728539;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY71728539 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY50129621;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY50129621 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4086087;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4086087 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25999749;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY25999749 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18016763;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18016763 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56257113;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56257113 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY79599336;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY79599336 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89254801;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89254801 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3407248;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3407248 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22460891;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY22460891 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97702218;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97702218 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99476325;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY99476325 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY12292545;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY12292545 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84890276;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84890276 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY33440147;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY33440147 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY19411738;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY19411738 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84974838;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY84974838 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89724335;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89724335 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY37542591;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY37542591 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY63903094;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY63903094 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32277769;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32277769 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY29358242;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY29358242 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY73344107;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY73344107 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY6082621;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY6082621 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97594583;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY97594583 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89788183;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY89788183 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY85179802;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY85179802 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56604718;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY56604718 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY70649844;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY70649844 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17314828;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY17314828 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74108273;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY74108273 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52399298;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY52399298 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78728867;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY78728867 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41313860;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY41313860 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3391811;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3391811 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY2608721;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY2608721 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32659384;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY32659384 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4799014;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY4799014 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18963146;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY18963146 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3464342;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY3464342 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60246230;     vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY60246230 = vDLxImPFtRnebZMRbFeWoSjqogZIGqHWxiFBNIiUJY27188691;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DZakQNWDkFXLgTdsbaehelYeVBHLYKKpW7851268() {     float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh16126649 = -365819799;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60496826 = -500394551;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh81052508 = -719015693;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37248464 = -324050917;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46878186 = -694762387;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76595534 = -794292286;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62576250 = -316754554;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67239759 = -807072171;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76405956 = -822508994;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57454195 = -731521879;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64328707 = -107751362;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12774713 = 82405149;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87154140 = -412694132;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh25424636 = 956940;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1689546 = -39416103;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh35953521 = -723544303;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh15594313 = -860607598;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh27385995 = -364784711;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5341179 = -739399586;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49361371 = -950216393;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20768390 = -381867255;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12094344 = -866453921;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24390457 = -808393164;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78279470 = -320979056;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh72493566 = -708594628;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56858044 = -716316921;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh59283990 = -574336413;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3695709 = -828741685;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8363358 = -802159021;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83091881 = -309743654;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95754514 = -301944806;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64340652 = -702369512;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh71692705 = -860068739;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78409107 = -774810474;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83863882 = -822833267;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5652259 = -369967781;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56468594 = -267013015;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20826260 = -67655532;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh50918600 = -192812490;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2333590 = -439853304;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22745668 = 45667424;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58092614 = -711191966;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh89175550 = -859134996;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh86684556 = -263889597;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28897876 = 85898707;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh98734753 = -217400363;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh54163710 = -996654750;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67104781 = -284171956;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57487204 = -190700869;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh7233801 = -341213199;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh13468754 = -436876016;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh38580617 = -543836952;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20546483 = -206124182;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh42751249 = -774949965;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87082877 = -200124726;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh4032306 = -499365879;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh36106369 = -692001388;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2773038 = -298036637;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64754898 = -615456290;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh90020142 = -978445466;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh17311545 = -119955873;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58880541 = -488012870;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58876401 = 95086849;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh93314075 = -412765340;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh61699680 = -329577074;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99988055 = -405381851;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41082008 = -57526113;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8745033 = -637883658;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41560754 = -176209794;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh96037287 = -669448323;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79484927 = -356531288;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh94768052 = -692952066;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76467395 = -71972222;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3007589 = -199546283;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh26615703 = -895883817;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62675776 = -670675289;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22918793 = 92681074;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37705901 = -444503568;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49381595 = -306877764;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh73758812 = -391194265;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2694334 = -719662172;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh92179208 = -190164458;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46208505 = -538040816;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1129557 = -360945822;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69623128 = -872867639;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57173897 = -758107855;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh43794169 = -396245331;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28941456 = 14881226;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh91326229 = -474685749;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79831577 = -223467389;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69545890 = -677966393;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh53695556 = -968976379;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56071362 = -452199243;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60898457 = -214367024;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh85022045 = -219897432;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh63865126 = -466319707;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99216212 = -706278816;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95861475 = -346369656;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24984877 = -934312524;    float ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28909820 = -365819799;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh16126649 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60496826;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60496826 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh81052508;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh81052508 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37248464;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37248464 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46878186;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46878186 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76595534;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76595534 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62576250;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62576250 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67239759;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67239759 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76405956;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76405956 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57454195;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57454195 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64328707;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64328707 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12774713;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12774713 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87154140;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87154140 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh25424636;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh25424636 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1689546;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1689546 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh35953521;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh35953521 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh15594313;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh15594313 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh27385995;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh27385995 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5341179;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5341179 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49361371;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49361371 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20768390;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20768390 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12094344;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh12094344 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24390457;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24390457 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78279470;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78279470 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh72493566;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh72493566 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56858044;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56858044 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh59283990;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh59283990 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3695709;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3695709 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8363358;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8363358 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83091881;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83091881 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95754514;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95754514 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64340652;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64340652 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh71692705;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh71692705 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78409107;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh78409107 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83863882;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh83863882 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5652259;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh5652259 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56468594;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56468594 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20826260;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20826260 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh50918600;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh50918600 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2333590;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2333590 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22745668;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22745668 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58092614;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58092614 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh89175550;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh89175550 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh86684556;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh86684556 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28897876;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28897876 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh98734753;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh98734753 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh54163710;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh54163710 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67104781;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh67104781 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57487204;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57487204 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh7233801;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh7233801 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh13468754;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh13468754 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh38580617;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh38580617 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20546483;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh20546483 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh42751249;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh42751249 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87082877;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh87082877 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh4032306;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh4032306 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh36106369;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh36106369 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2773038;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2773038 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64754898;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh64754898 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh90020142;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh90020142 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh17311545;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh17311545 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58880541;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58880541 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58876401;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh58876401 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh93314075;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh93314075 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh61699680;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh61699680 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99988055;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99988055 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41082008;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41082008 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8745033;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh8745033 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41560754;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh41560754 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh96037287;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh96037287 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79484927;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79484927 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh94768052;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh94768052 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76467395;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh76467395 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3007589;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh3007589 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh26615703;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh26615703 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62675776;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh62675776 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22918793;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh22918793 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37705901;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh37705901 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49381595;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh49381595 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh73758812;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh73758812 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2694334;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh2694334 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh92179208;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh92179208 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46208505;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh46208505 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1129557;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh1129557 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69623128;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69623128 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57173897;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh57173897 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh43794169;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh43794169 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28941456;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28941456 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh91326229;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh91326229 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79831577;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh79831577 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69545890;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh69545890 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh53695556;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh53695556 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56071362;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh56071362 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60898457;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh60898457 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh85022045;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh85022045 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh63865126;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh63865126 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99216212;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh99216212 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95861475;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh95861475 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24984877;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh24984877 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28909820;     ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh28909820 = ndjMMYYAUokAkMAfGbPIutSBvOOFKeZuiptqtfOBFh16126649;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TmhfdXhecenuQkYCtbsDRoYhghSIIIATi68153924() {     float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6252958 = -424576000;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT43621891 = -875320721;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76545207 = -855810154;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10747039 = -510222739;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59934922 = -636085829;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57381939 = -686925394;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57239688 = 45699973;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20118323 = -443519910;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT217645 = -830401632;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61709865 = -301396404;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40480527 = -616171520;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT47524221 = -497182986;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT25500273 = -724929992;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63843489 = 2796056;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99763917 = -524537046;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT60133263 = -423924173;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59556493 = -21952839;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48741707 = -807634003;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66255570 = -105810022;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16685619 = -498094702;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT8690792 = -86292347;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10175926 = -99550556;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57628875 = -114853085;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT86200568 = -769003432;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19378755 = -252105572;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT75649008 = -592190656;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT81251325 = -333865407;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT26866084 = -888631743;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69572355 = -464358069;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30880962 = -184146046;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99217917 = -628611350;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63707566 = -103193931;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80661745 = -60293898;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT2247752 = -766261632;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19460417 = -473168927;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT58883265 = -672997191;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT56702163 = -882828919;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT45183544 = 66285224;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61451617 = 99725465;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT46845732 = -344561077;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36445341 = -760193851;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT12737077 = -525685179;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48992392 = -234560591;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT17346498 = -127972786;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20862293 = -26611249;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19173748 = -701024269;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT34587001 = -545137250;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57491241 = -310828209;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85405857 = -626640216;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36514207 = -798209537;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42834277 = -811258061;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT82353724 = -508263785;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69998937 = 82022824;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95658311 = -898505247;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59463133 = -328724997;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT96077032 = -225025444;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85993015 = -660467637;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT90344639 = 13193278;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT91368284 = -158117168;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT84285913 = 56104827;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76130614 = -253059987;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30373604 = -65668284;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT50545967 = -979161841;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69336682 = -546255587;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62491947 = -672785055;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76772960 = -412977589;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66862475 = -336889088;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23252521 = -958668361;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44383073 = -524035017;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40880652 = -851539856;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT3431101 = -541095254;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT14372950 = 11761936;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT87290090 = -807359468;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19409839 = -761248945;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80240278 = -737900851;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95953714 = -560607169;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61183534 = -864989966;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40282378 = -986880300;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT65338275 = -642392183;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT205007 = -551081304;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41062008 = 52946593;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23760085 = 76962801;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41460226 = -161991528;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT33058149 = -666148533;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT88046684 = -372887985;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16864193 = -20347566;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT93708628 = -85216756;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85003434 = -161788652;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42784619 = -337536635;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23383385 = -148143484;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT72890249 = 87470446;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66357523 = -796022198;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT53815259 = -775597608;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT77165703 = -956379363;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT70715117 = 8498909;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6071737 = -594525568;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62191110 = -546523338;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT79655709 = -688305005;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT54854550 = -455187731;    float PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44089332 = -424576000;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6252958 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT43621891;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT43621891 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76545207;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76545207 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10747039;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10747039 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59934922;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59934922 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57381939;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57381939 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57239688;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57239688 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20118323;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20118323 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT217645;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT217645 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61709865;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61709865 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40480527;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40480527 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT47524221;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT47524221 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT25500273;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT25500273 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63843489;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63843489 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99763917;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99763917 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT60133263;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT60133263 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59556493;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59556493 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48741707;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48741707 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66255570;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66255570 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16685619;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16685619 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT8690792;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT8690792 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10175926;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT10175926 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57628875;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57628875 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT86200568;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT86200568 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19378755;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19378755 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT75649008;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT75649008 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT81251325;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT81251325 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT26866084;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT26866084 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69572355;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69572355 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30880962;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30880962 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99217917;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT99217917 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63707566;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT63707566 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80661745;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80661745 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT2247752;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT2247752 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19460417;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19460417 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT58883265;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT58883265 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT56702163;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT56702163 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT45183544;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT45183544 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61451617;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61451617 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT46845732;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT46845732 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36445341;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36445341 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT12737077;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT12737077 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48992392;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT48992392 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT17346498;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT17346498 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20862293;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT20862293 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19173748;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19173748 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT34587001;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT34587001 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57491241;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT57491241 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85405857;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85405857 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36514207;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT36514207 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42834277;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42834277 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT82353724;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT82353724 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69998937;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69998937 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95658311;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95658311 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59463133;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT59463133 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT96077032;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT96077032 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85993015;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85993015 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT90344639;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT90344639 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT91368284;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT91368284 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT84285913;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT84285913 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76130614;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76130614 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30373604;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT30373604 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT50545967;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT50545967 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69336682;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT69336682 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62491947;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62491947 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76772960;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT76772960 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66862475;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66862475 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23252521;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23252521 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44383073;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44383073 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40880652;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40880652 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT3431101;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT3431101 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT14372950;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT14372950 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT87290090;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT87290090 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19409839;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT19409839 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80240278;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT80240278 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95953714;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT95953714 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61183534;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT61183534 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40282378;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT40282378 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT65338275;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT65338275 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT205007;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT205007 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41062008;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41062008 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23760085;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23760085 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41460226;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT41460226 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT33058149;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT33058149 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT88046684;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT88046684 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16864193;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT16864193 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT93708628;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT93708628 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85003434;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT85003434 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42784619;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT42784619 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23383385;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT23383385 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT72890249;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT72890249 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66357523;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT66357523 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT53815259;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT53815259 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT77165703;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT77165703 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT70715117;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT70715117 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6071737;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6071737 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62191110;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT62191110 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT79655709;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT79655709 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT54854550;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT54854550 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44089332;     PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT44089332 = PzyAAYikbZftbEPNJWtFRxeNAywEYVTeTLBlaCsDJT6252958;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void hQUZqkNKxkSzifOvDvspBeVoAKnCJrXda80699113() {     float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25721128 = -837707212;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96645754 = -321198717;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW93382199 = -507438769;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29394188 = -326797002;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60381438 = -162358245;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW82974013 = -577410162;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW2071567 = -397606257;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW85368555 = -537327876;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60904441 = -458593011;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39638588 = -306982450;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94703790 = 50838180;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51018834 = -496485691;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15871932 = -49287269;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72259530 = -539489670;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60290378 = -822620837;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26348913 = -887116107;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65518606 = -193727521;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72804458 = -558388721;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65890449 = -483014783;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97296920 = -115631158;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW21146864 = -692504673;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25158009 = -611353769;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25801882 = -412427703;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3922237 = -405547424;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30582244 = -546405681;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW80416470 = -277985875;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65179456 = 983661;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77657758 = 47634978;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW11317313 = -478269215;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15587816 = -275584740;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29022003 = -493937442;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3286877 = -667542950;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW92137849 = -615501665;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW61004259 = 29135162;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59390753 = -535871733;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94949202 = -976565799;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25085614 = -309704994;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW86666017 = -10923591;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW28764942 = -364689361;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68127467 = -341092174;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77927398 = -169980147;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24596210 = -764581405;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW20125633 = -182362389;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW732037 = -577045446;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW890705 = -303734212;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW73634874 = -138355690;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW16576881 = -458830572;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW57647071 = -494115523;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26541449 = -640579454;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77412549 = -559221882;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17269846 = -117622992;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98802584 = -885616644;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39824084 = -694086137;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68588340 = -893098883;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59552249 = -103283632;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW563120 = -126353443;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW70843873 = -908771015;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW89459962 = -1891345;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98811944 = -780391321;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW79964968 = -884372371;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17794558 = -478393824;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24413808 = -345241235;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74051243 = 40941339;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW45316626 = -83008271;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW10616586 = -813045008;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW91416913 = -281618871;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58880985 = -880984026;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW54867673 = 21577569;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW12868777 = 96382063;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65341176 = -846055039;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1263299 = -477411113;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW78852588 = -82803930;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW44039517 = -93699361;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97762981 = -41922609;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW19369523 = -945651012;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96550654 = -927923268;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW5032376 = -328991381;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25069845 = -835382257;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3031533 = -1813212;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW56947369 = -308049992;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63839589 = -819155303;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW7532386 = -504900816;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51116310 = -311785568;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW33904763 = -919047334;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98317969 = -57961749;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30219418 = -608320799;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63462793 = -973456813;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW23549510 = -722402783;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1452010 = -867581207;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58827633 = -309518291;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24105329 = 32205215;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW35625651 = -207813650;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW87854073 = -230532270;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW48799974 = -480316990;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50332910 = -862698351;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW53513590 = -824738912;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50544967 = -705522744;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74809007 = 645882;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW90115450 = -764000439;    float gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW9473791 = -837707212;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25721128 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96645754;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96645754 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW93382199;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW93382199 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29394188;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29394188 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60381438;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60381438 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW82974013;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW82974013 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW2071567;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW2071567 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW85368555;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW85368555 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60904441;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60904441 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39638588;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39638588 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94703790;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94703790 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51018834;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51018834 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15871932;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15871932 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72259530;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72259530 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60290378;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW60290378 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26348913;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26348913 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65518606;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65518606 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72804458;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW72804458 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65890449;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65890449 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97296920;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97296920 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW21146864;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW21146864 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25158009;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25158009 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25801882;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25801882 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3922237;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3922237 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30582244;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30582244 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW80416470;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW80416470 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65179456;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65179456 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77657758;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77657758 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW11317313;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW11317313 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15587816;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW15587816 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29022003;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW29022003 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3286877;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3286877 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW92137849;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW92137849 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW61004259;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW61004259 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59390753;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59390753 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94949202;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW94949202 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25085614;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25085614 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW86666017;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW86666017 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW28764942;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW28764942 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68127467;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68127467 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77927398;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77927398 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24596210;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24596210 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW20125633;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW20125633 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW732037;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW732037 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW890705;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW890705 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW73634874;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW73634874 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW16576881;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW16576881 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW57647071;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW57647071 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26541449;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW26541449 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77412549;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW77412549 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17269846;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17269846 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98802584;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98802584 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39824084;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW39824084 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68588340;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW68588340 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59552249;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW59552249 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW563120;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW563120 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW70843873;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW70843873 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW89459962;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW89459962 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98811944;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98811944 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW79964968;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW79964968 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17794558;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW17794558 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24413808;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24413808 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74051243;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74051243 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW45316626;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW45316626 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW10616586;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW10616586 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW91416913;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW91416913 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58880985;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58880985 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW54867673;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW54867673 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW12868777;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW12868777 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65341176;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW65341176 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1263299;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1263299 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW78852588;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW78852588 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW44039517;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW44039517 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97762981;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW97762981 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW19369523;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW19369523 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96550654;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW96550654 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW5032376;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW5032376 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25069845;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25069845 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3031533;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW3031533 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW56947369;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW56947369 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63839589;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63839589 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW7532386;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW7532386 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51116310;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW51116310 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW33904763;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW33904763 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98317969;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW98317969 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30219418;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW30219418 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63462793;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW63462793 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW23549510;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW23549510 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1452010;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW1452010 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58827633;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW58827633 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24105329;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW24105329 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW35625651;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW35625651 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW87854073;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW87854073 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW48799974;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW48799974 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50332910;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50332910 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW53513590;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW53513590 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50544967;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW50544967 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74809007;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW74809007 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW90115450;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW90115450 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW9473791;     gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW9473791 = gIujXIBSMqWEGwlHefBeZkDugYgxLAGNoYCXTLgnrW25721128;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void oiVFDwLNRElkPuSSRSgGdIEHxLXsKkFbB76882273() {     float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85317224 = 33536411;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT98151604 = -131354102;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30383587 = -581579691;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT25269946 = -99407880;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT71674664 = -62865272;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80651134 = -435669835;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99430049 = -827323842;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36193840 = -891539251;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74717885 = -991265510;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22663103 = -248241304;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19998722 = -350704259;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85690035 = -591506940;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86626495 = 44534213;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30633369 = -443648017;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT57598184 = -515147358;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT23103167 = -692488998;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1479710 = -121943801;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT37472790 = -927724826;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46332652 = -622134413;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT77214029 = -778039811;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1607983 = -525525497;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93647607 = -503755647;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT17993707 = -176722782;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68652475 = 30114340;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6560249 = -2543272;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74831377 = -412603346;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT78519526 = -448496336;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT42768928 = -573746612;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61101655 = -267861830;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT54061282 = -322567982;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53936321 = -39156770;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46052137 = 15239053;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41219888 = -595448537;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43528701 = -572748770;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT64328114 = -184081719;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73539099 = -188222381;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15717292 = -602483629;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85026355 = 44624019;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT47782884 = -83395877;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40953122 = -614973122;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36145211 = -638641743;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT94675391 = -769522823;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61004875 = 84192782;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74971541 = 99039815;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1879020 = -850052281;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38428004 = -381299849;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22065603 = -350686240;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT4343465 = -826868752;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT65931096 = -924517074;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT92579941 = -880474343;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT67756096 = 96268784;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5387738 = -856859899;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15239598 = -934034591;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41862863 = -53267838;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75274291 = -67217719;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT91669617 = -462707942;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80157897 = -954631321;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61731112 = -511694031;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT18709698 = 3135391;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT96843287 = -650261927;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT2131608 = -987173500;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT56661122 = -153577231;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75092184 = -523677422;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT20656603 = -568697528;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68726782 = -109084534;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73946584 = -265943313;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT44470148 = -996058403;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43097794 = -382717018;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66305255 = -159566299;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT84059085 = -226924978;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT7385876 = 9994631;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT16453355 = -66567821;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT89689905 = -744328950;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5379530 = 92838709;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41068819 = -39398068;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6932592 = -756002674;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT32642732 = -487948429;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43022165 = -175762598;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66773456 = -119833380;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68132245 = -621243423;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT52765774 = 38082893;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74176062 = -621627585;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT76837831 = -649229539;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68521714 = -387387488;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86305185 = -318836767;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT48548583 = -182296872;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30812539 = -50726356;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99357024 = -442180700;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68254410 = -405531051;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT72658496 = -721373777;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93381201 = -233591061;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53986179 = 9210402;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66316657 = -958511373;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT50939597 = -433133951;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38821515 = -627799623;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT79484089 = -385064513;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19583207 = -145845402;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40348273 = -347109691;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6244760 = -791875652;    float GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT27932435 = 33536411;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85317224 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT98151604;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT98151604 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30383587;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30383587 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT25269946;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT25269946 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT71674664;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT71674664 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80651134;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80651134 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99430049;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99430049 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36193840;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36193840 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74717885;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74717885 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22663103;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22663103 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19998722;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19998722 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85690035;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85690035 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86626495;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86626495 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30633369;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30633369 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT57598184;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT57598184 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT23103167;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT23103167 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1479710;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1479710 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT37472790;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT37472790 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46332652;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46332652 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT77214029;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT77214029 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1607983;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1607983 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93647607;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93647607 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT17993707;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT17993707 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68652475;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68652475 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6560249;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6560249 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74831377;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74831377 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT78519526;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT78519526 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT42768928;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT42768928 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61101655;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61101655 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT54061282;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT54061282 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53936321;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53936321 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46052137;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT46052137 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41219888;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41219888 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43528701;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43528701 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT64328114;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT64328114 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73539099;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73539099 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15717292;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15717292 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85026355;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85026355 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT47782884;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT47782884 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40953122;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40953122 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36145211;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT36145211 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT94675391;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT94675391 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61004875;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61004875 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74971541;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74971541 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1879020;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT1879020 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38428004;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38428004 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22065603;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT22065603 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT4343465;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT4343465 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT65931096;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT65931096 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT92579941;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT92579941 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT67756096;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT67756096 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5387738;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5387738 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15239598;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT15239598 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41862863;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41862863 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75274291;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75274291 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT91669617;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT91669617 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80157897;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT80157897 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61731112;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT61731112 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT18709698;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT18709698 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT96843287;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT96843287 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT2131608;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT2131608 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT56661122;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT56661122 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75092184;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT75092184 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT20656603;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT20656603 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68726782;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68726782 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73946584;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT73946584 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT44470148;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT44470148 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43097794;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43097794 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66305255;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66305255 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT84059085;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT84059085 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT7385876;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT7385876 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT16453355;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT16453355 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT89689905;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT89689905 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5379530;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT5379530 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41068819;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT41068819 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6932592;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6932592 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT32642732;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT32642732 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43022165;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT43022165 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66773456;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66773456 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68132245;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68132245 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT52765774;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT52765774 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74176062;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT74176062 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT76837831;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT76837831 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68521714;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68521714 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86305185;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT86305185 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT48548583;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT48548583 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30812539;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT30812539 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99357024;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT99357024 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68254410;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT68254410 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT72658496;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT72658496 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93381201;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT93381201 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53986179;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT53986179 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66316657;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT66316657 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT50939597;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT50939597 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38821515;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT38821515 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT79484089;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT79484089 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19583207;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT19583207 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40348273;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT40348273 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6244760;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT6244760 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT27932435;     GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT27932435 = GZmIMFpmBzuLLxXEZVcyMKgeOHrZSDhzKjJUfKENrT85317224;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DXRXAjeOyiVMDVQJwhLvCkNabtZwEwzyl37184931() {     float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA75443533 = -25219790;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA81276669 = -506280273;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA25876286 = -718374152;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98768520 = -285579702;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA84731399 = -4188714;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA61437538 = -328302943;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94093487 = -464869315;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89072402 = -527986990;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98529572 = -999158148;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26918774 = -918115829;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96150540 = -859124417;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20439544 = -71095075;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24972628 = -267701648;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69052222 = -441808901;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55672556 = 99731699;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47282909 = -392868868;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45441890 = -383289042;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58828502 = -270574119;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA7247044 = 11455151;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA44538278 = -325918121;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89530384 = -229950589;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91729189 = -836852282;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA51232125 = -583182703;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA76573572 = -417910036;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA53445436 = -646054216;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93622341 = -288477080;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA486862 = -208025330;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA65939303 = -633636670;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA22310653 = 69939122;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA1850363 = -196970373;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57399724 = -365823314;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45419051 = -485585366;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50188929 = -895673697;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67367346 = -564199928;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA99924648 = -934417380;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26770106 = -491251791;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA15950860 = -118299533;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA9383639 = -921435225;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58315901 = -890857923;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA85465263 = -519680895;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49844885 = -344503019;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49319854 = -584016036;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20821717 = -391232814;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5633483 = -865043374;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93843436 = -962562237;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58866997 = -864923754;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA2488893 = -999168739;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94729923 = -853525005;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93849750 = -260456420;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21860348 = -237470680;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA97121620 = -278113260;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49160845 = -821286732;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64692053 = -645887586;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94769925 = -176823120;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47654546 = -195817991;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA83714344 = -188367508;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA30044545 = -923097570;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49302713 = -200464117;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45323085 = -639525487;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91109057 = -715711634;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA60950677 = -20277614;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28154185 = -831232645;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66761749 = -497926112;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96679210 = -702187775;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69519049 = -452292516;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50731490 = -273539051;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70250614 = -175421379;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57605281 = -703501720;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69127574 = -507391522;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28902451 = -409016511;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA31332049 = -174569335;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36058251 = -461853818;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA512601 = -379716196;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21781780 = -468863954;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94693393 = -981415103;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA40210531 = -645934554;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70907473 = -345619469;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45598642 = -718139330;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82730135 = -455347800;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94578439 = -781130462;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91133448 = -289308341;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5756938 = -354500325;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA72089552 = -273180251;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA450306 = -692590199;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA4728742 = -918857114;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA8238879 = -544536583;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA80726997 = -839697781;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55419004 = -618850578;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA19712800 = -268381937;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA16210305 = -646049872;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96725561 = -568154222;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66648147 = -917835417;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64060554 = -181909738;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67206843 = -75146289;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24514587 = -399403282;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21690700 = -513270374;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82558104 = 13910075;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24142506 = -689045040;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36114433 = -312750859;    float oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA43111947 = -25219790;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA75443533 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA81276669;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA81276669 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA25876286;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA25876286 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98768520;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98768520 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA84731399;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA84731399 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA61437538;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA61437538 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94093487;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94093487 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89072402;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89072402 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98529572;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA98529572 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26918774;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26918774 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96150540;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96150540 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20439544;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20439544 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24972628;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24972628 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69052222;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69052222 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55672556;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55672556 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47282909;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47282909 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45441890;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45441890 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58828502;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58828502 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA7247044;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA7247044 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA44538278;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA44538278 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89530384;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA89530384 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91729189;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91729189 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA51232125;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA51232125 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA76573572;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA76573572 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA53445436;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA53445436 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93622341;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93622341 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA486862;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA486862 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA65939303;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA65939303 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA22310653;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA22310653 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA1850363;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA1850363 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57399724;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57399724 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45419051;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45419051 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50188929;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50188929 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67367346;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67367346 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA99924648;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA99924648 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26770106;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA26770106 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA15950860;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA15950860 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA9383639;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA9383639 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58315901;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58315901 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA85465263;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA85465263 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49844885;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49844885 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49319854;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49319854 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20821717;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA20821717 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5633483;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5633483 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93843436;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93843436 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58866997;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA58866997 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA2488893;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA2488893 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94729923;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94729923 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93849750;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA93849750 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21860348;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21860348 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA97121620;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA97121620 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49160845;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49160845 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64692053;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64692053 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94769925;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94769925 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47654546;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA47654546 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA83714344;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA83714344 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA30044545;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA30044545 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49302713;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA49302713 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45323085;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45323085 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91109057;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91109057 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA60950677;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA60950677 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28154185;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28154185 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66761749;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66761749 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96679210;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96679210 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69519049;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69519049 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50731490;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA50731490 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70250614;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70250614 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57605281;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA57605281 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69127574;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA69127574 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28902451;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA28902451 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA31332049;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA31332049 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36058251;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36058251 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA512601;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA512601 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21781780;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21781780 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94693393;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94693393 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA40210531;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA40210531 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70907473;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA70907473 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45598642;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA45598642 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82730135;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82730135 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94578439;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA94578439 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91133448;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA91133448 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5756938;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA5756938 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA72089552;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA72089552 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA450306;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA450306 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA4728742;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA4728742 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA8238879;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA8238879 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA80726997;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA80726997 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55419004;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA55419004 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA19712800;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA19712800 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA16210305;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA16210305 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96725561;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA96725561 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66648147;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA66648147 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64060554;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA64060554 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67206843;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA67206843 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24514587;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24514587 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21690700;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA21690700 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82558104;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA82558104 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24142506;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA24142506 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36114433;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA36114433 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA43111947;     oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA43111947 = oxAQPaSuowlIfGvwVsHABnTKrvGJhJBiXaOYQthHsA75443533;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XTsTxfYqzptxEaLrHgfmpLrdtMHAtwXuj49730120() {     float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94911703 = -438351002;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34300533 = 47841731;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy42713278 = -370002767;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17415670 = -102153965;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy85177916 = -630461130;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87029612 = -218787712;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38925366 = -908175545;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy54322636 = -621794956;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy59216370 = -627349527;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4847497 = -923701875;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50373804 = -192114717;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy23934157 = -70397780;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15344287 = -692058924;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy77468262 = -984094627;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16199018 = -198352093;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13498558 = -856060802;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51404003 = -555063724;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy82891253 = -21328837;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6881923 = -365749609;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25149580 = 56545423;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1986457 = -836162915;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6711273 = -248655496;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19405131 = -880757322;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94295241 = -54454028;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64648925 = -940354325;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98389803 = 25727701;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84414992 = -973176262;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16730978 = -797369949;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64055610 = 56027976;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86557216 = -288409068;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87203808 = -231149407;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84998361 = 50065615;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61665032 = -350881464;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy26123853 = -868803134;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy39854985 = -997120186;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62836043 = -794820399;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84334310 = -645175608;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50866113 = -998644040;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25629227 = -255272748;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6747000 = -516211992;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91326941 = -854289315;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61178987 = -822912262;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91954957 = -339034611;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89019021 = -214116035;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy73871848 = -139685200;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13328125 = -302255175;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84478773 = -912862062;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94885753 = 63187681;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34985342 = -274395659;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62758690 = 1516975;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71557189 = -684478191;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65609705 = -98639591;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34517200 = -321996547;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy67699954 = -171416756;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47743663 = 29623374;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy88200431 = -89695507;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14895403 = -71400947;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy48418037 = -215548740;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy52766744 = -161799640;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86788112 = -556188832;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy2614621 = -245611450;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy22194389 = -10805596;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy90267026 = -577822932;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy72659153 = -238940459;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17643688 = -592552469;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65375442 = -142180333;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62269124 = -719516317;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89220433 = -823255791;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy37613278 = -986974442;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy53362975 = -403531694;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy29164247 = -110885194;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy537891 = -556419684;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy57262027 = -766056089;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy134923 = -849537618;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy33822638 = -89165263;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy40807470 = 86749347;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14756315 = -909620885;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy30386110 = -566641288;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy20423394 = -914768829;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51320801 = -538099150;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13911031 = -61410237;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89529238 = -936363943;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy81745636 = -422974291;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1296921 = -945489000;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15000027 = -603930877;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy21594104 = -32509816;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50481162 = -627937838;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy93965078 = -79464708;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy78380190 = -798426509;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51654553 = -807424680;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47940641 = -623419453;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy35916274 = -329626869;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98099368 = -736844400;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38841114 = -699083917;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4132380 = -170600542;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy69132553 = -743483719;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy70911961 = -145089330;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19295804 = -94152;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71375333 = -621563567;    float UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy8496406 = -438351002;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94911703 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34300533;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34300533 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy42713278;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy42713278 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17415670;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17415670 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy85177916;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy85177916 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87029612;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87029612 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38925366;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38925366 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy54322636;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy54322636 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy59216370;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy59216370 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4847497;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4847497 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50373804;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50373804 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy23934157;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy23934157 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15344287;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15344287 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy77468262;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy77468262 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16199018;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16199018 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13498558;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13498558 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51404003;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51404003 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy82891253;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy82891253 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6881923;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6881923 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25149580;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25149580 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1986457;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1986457 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6711273;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6711273 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19405131;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19405131 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94295241;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94295241 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64648925;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64648925 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98389803;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98389803 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84414992;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84414992 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16730978;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy16730978 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64055610;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy64055610 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86557216;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86557216 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87203808;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy87203808 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84998361;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84998361 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61665032;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61665032 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy26123853;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy26123853 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy39854985;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy39854985 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62836043;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62836043 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84334310;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84334310 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50866113;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50866113 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25629227;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy25629227 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6747000;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy6747000 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91326941;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91326941 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61178987;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy61178987 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91954957;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy91954957 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89019021;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89019021 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy73871848;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy73871848 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13328125;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13328125 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84478773;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy84478773 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94885753;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94885753 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34985342;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34985342 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62758690;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62758690 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71557189;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71557189 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65609705;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65609705 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34517200;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy34517200 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy67699954;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy67699954 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47743663;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47743663 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy88200431;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy88200431 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14895403;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14895403 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy48418037;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy48418037 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy52766744;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy52766744 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86788112;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy86788112 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy2614621;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy2614621 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy22194389;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy22194389 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy90267026;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy90267026 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy72659153;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy72659153 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17643688;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy17643688 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65375442;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy65375442 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62269124;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy62269124 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89220433;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89220433 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy37613278;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy37613278 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy53362975;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy53362975 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy29164247;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy29164247 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy537891;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy537891 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy57262027;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy57262027 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy134923;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy134923 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy33822638;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy33822638 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy40807470;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy40807470 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14756315;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy14756315 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy30386110;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy30386110 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy20423394;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy20423394 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51320801;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51320801 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13911031;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy13911031 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89529238;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy89529238 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy81745636;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy81745636 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1296921;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy1296921 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15000027;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy15000027 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy21594104;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy21594104 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50481162;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy50481162 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy93965078;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy93965078 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy78380190;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy78380190 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51654553;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy51654553 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47940641;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy47940641 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy35916274;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy35916274 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98099368;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy98099368 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38841114;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy38841114 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4132380;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy4132380 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy69132553;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy69132553 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy70911961;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy70911961 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19295804;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy19295804 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71375333;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy71375333 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy8496406;     UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy8496406 = UgSsvBRobjgrejOHwHFnMlMcOZkXXwCRzNktszLeNy94911703;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dqffzCmTsPdOIxBxvwIazydryzGxtdDXE45913280() {     float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54507800 = -667107379;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35806383 = -862313654;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79714666 = -444143690;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13291429 = -974764842;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF96471142 = -530968157;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84706733 = -77047385;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF36283849 = -237893131;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5147920 = -976006331;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF73029813 = -60022026;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87872011 = -864960729;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75668735 = -593657156;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF58605358 = -165419030;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86098849 = -598237443;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35842101 = -888252974;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13506823 = -990878614;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10252812 = -661433693;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87365106 = -483280004;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47559585 = -390664941;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87324125 = -504869239;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5066689 = -605863230;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF82447575 = -669183740;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75200871 = -141057373;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF11596956 = -645052401;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF59025480 = -718792265;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40626930 = -396491915;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92804710 = -108889770;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF97755062 = -322656259;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF81842146 = -318751540;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13839953 = -833564639;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF25030683 = -335392310;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF12118127 = -876368735;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF27763622 = -367152382;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10747071 = -330828336;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF8648296 = -370687065;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44792346 = -645330171;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41425939 = -6476981;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74965988 = -937954243;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49226450 = -943096430;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44647169 = 26020735;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79572654 = -790092940;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49544755 = -222950911;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF31258168 = -827853681;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF32834200 = -72479441;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63258526 = -638030773;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74860163 = -686003268;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF78121253 = -545199334;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF89967495 = -804717729;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41582148 = -269565548;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74374989 = -558333278;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77926082 = -319735486;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF22043440 = -470586415;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72194858 = -69882847;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF9932714 = -561945001;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40974477 = -431585711;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63465704 = 65689287;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79306929 = -426050006;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF24209427 = -117261253;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF20689186 = -725351426;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72664498 = -478272928;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF3666433 = -322078388;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86951670 = -754391126;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54441702 = -919141592;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91307967 = -42441693;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47999131 = -724629716;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75753884 = -988591994;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47905114 = -126504775;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47858287 = -834590694;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77450554 = -127550378;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91049755 = -142922804;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72080884 = -884401633;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35286824 = -723479451;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF38138657 = -540183575;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2912416 = -316685677;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7751472 = -714776300;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF55521934 = -282912320;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF51189407 = -841330059;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF42366671 = 31422067;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF48338429 = 92978372;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84165316 = 67211003;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF62505677 = -851292581;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2837216 = -304172041;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF56172915 = 46909288;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7467158 = -760418262;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35913871 = -413829154;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2987244 = -864805895;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39923269 = -706485889;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17830908 = -805207382;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF69772594 = -899242625;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF45182591 = -336376353;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF65485416 = -119280166;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17216513 = -889215728;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54276803 = -112602818;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF76561952 = -364823503;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40980737 = -651900877;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92620983 = 64298186;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF95103052 = -303809320;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39950201 = -685411989;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84835069 = -347849725;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87504641 = -649438780;    float nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF26955050 = -667107379;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54507800 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35806383;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35806383 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79714666;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79714666 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13291429;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13291429 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF96471142;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF96471142 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84706733;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84706733 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF36283849;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF36283849 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5147920;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5147920 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF73029813;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF73029813 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87872011;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87872011 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75668735;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75668735 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF58605358;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF58605358 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86098849;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86098849 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35842101;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35842101 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13506823;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13506823 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10252812;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10252812 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87365106;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87365106 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47559585;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47559585 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87324125;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87324125 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5066689;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF5066689 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF82447575;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF82447575 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75200871;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75200871 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF11596956;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF11596956 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF59025480;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF59025480 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40626930;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40626930 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92804710;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92804710 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF97755062;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF97755062 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF81842146;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF81842146 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13839953;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF13839953 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF25030683;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF25030683 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF12118127;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF12118127 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF27763622;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF27763622 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10747071;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF10747071 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF8648296;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF8648296 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44792346;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44792346 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41425939;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41425939 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74965988;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74965988 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49226450;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49226450 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44647169;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF44647169 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79572654;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79572654 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49544755;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF49544755 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF31258168;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF31258168 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF32834200;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF32834200 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63258526;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63258526 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74860163;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74860163 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF78121253;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF78121253 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF89967495;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF89967495 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41582148;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF41582148 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74374989;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF74374989 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77926082;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77926082 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF22043440;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF22043440 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72194858;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72194858 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF9932714;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF9932714 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40974477;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40974477 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63465704;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF63465704 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79306929;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF79306929 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF24209427;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF24209427 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF20689186;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF20689186 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72664498;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72664498 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF3666433;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF3666433 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86951670;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF86951670 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54441702;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54441702 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91307967;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91307967 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47999131;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47999131 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75753884;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF75753884 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47905114;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47905114 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47858287;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF47858287 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77450554;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF77450554 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91049755;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF91049755 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72080884;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF72080884 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35286824;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35286824 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF38138657;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF38138657 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2912416;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2912416 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7751472;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7751472 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF55521934;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF55521934 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF51189407;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF51189407 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF42366671;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF42366671 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF48338429;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF48338429 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84165316;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84165316 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF62505677;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF62505677 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2837216;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2837216 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF56172915;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF56172915 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7467158;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF7467158 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35913871;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF35913871 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2987244;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF2987244 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39923269;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39923269 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17830908;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17830908 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF69772594;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF69772594 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF45182591;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF45182591 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF65485416;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF65485416 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17216513;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF17216513 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54276803;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54276803 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF76561952;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF76561952 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40980737;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF40980737 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92620983;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF92620983 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF95103052;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF95103052 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39950201;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF39950201 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84835069;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF84835069 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87504641;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF87504641 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF26955050;     nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF26955050 = nhkAEozUsoWXGpWjfdwGJvfNnhzvoZOMFJVPRxrHJF54507800;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void axLPctFbLVSCPVgaVGHCSKORqEKsMRDHX42096440() {     float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14103897 = -895863756;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37312232 = -672469039;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16716054 = -518284612;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG9167187 = -747375720;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7764369 = -431475185;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG82383854 = 64692942;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33642332 = -667610717;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55973204 = -230217707;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86843257 = -592694525;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70896526 = -806219582;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG963667 = -995199596;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93276560 = -260440279;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG56853413 = -504415961;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG94215940 = -792411322;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG10814629 = -683405135;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7007067 = -466806584;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23326211 = -411496284;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG12227916 = -760001046;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG67766328 = -643988869;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG84983798 = -168271883;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG62908694 = -502204564;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43690469 = -33459251;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3788781 = -409347480;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23755719 = -283130501;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16604935 = -952629505;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG87219617 = -243507241;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11095134 = -772136256;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG46953315 = -940133130;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63624296 = -623157255;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63504149 = -382375552;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37032445 = -421588063;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70528882 = -784370379;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG59829110 = -310775209;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91172737 = -972570996;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG49729707 = -293540157;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20015836 = -318133563;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65597666 = -130732878;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47586788 = -887548820;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63665112 = -792685781;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG52398309 = 36026112;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7762569 = -691612508;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG1337350 = -832795099;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73713442 = -905924270;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37498031 = 38054488;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75848479 = -132321337;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG42914382 = -788143493;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG95456217 = -696573396;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG88278541 = -602318776;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG13764637 = -842270898;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93093474 = -640987947;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72529690 = -256694640;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG78780011 = -41126102;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85348228 = -801893454;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14249000 = -691754667;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79187746 = -998244800;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70413427 = -762404506;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33523451 = -163121560;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92960334 = -135154112;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92562251 = -794746215;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20544752 = -87967944;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG71288720 = -163170803;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86689016 = -727477588;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92348908 = -607060453;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23339108 = -110318973;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33864081 = -284631520;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG30434785 = -110829217;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33447451 = -949665071;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65680675 = -531844965;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG44486233 = -398871165;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90798793 = -265271572;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG41409400 = -236073707;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75739422 = -523947465;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG48562804 = -967315265;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG15368020 = -580014981;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG77221229 = -476659376;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG61571344 = -669409465;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG69977027 = -127534981;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG66290749 = -347401968;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47907240 = -50809165;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73690553 = -64486013;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91763399 = -546933845;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG22816592 = -69817480;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33188679 = 2137768;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70530821 = -982169308;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90974459 = -25680913;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG58252434 = -280461961;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85180654 = -982476925;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45580110 = -619020542;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11984992 = -974326197;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79316279 = -531135652;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86492384 = -55012004;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72637331 = -995578766;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55024537 = 7197395;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43120361 = -604717837;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG81109588 = -800803086;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG21073553 = -964134921;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG8988442 = -125734647;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG50374334 = -695605297;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3633951 = -677313993;    float zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45413694 = -895863756;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14103897 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37312232;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37312232 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16716054;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16716054 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG9167187;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG9167187 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7764369;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7764369 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG82383854;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG82383854 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33642332;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33642332 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55973204;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55973204 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86843257;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86843257 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70896526;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70896526 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG963667;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG963667 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93276560;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93276560 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG56853413;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG56853413 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG94215940;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG94215940 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG10814629;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG10814629 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7007067;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7007067 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23326211;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23326211 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG12227916;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG12227916 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG67766328;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG67766328 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG84983798;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG84983798 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG62908694;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG62908694 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43690469;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43690469 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3788781;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3788781 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23755719;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23755719 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16604935;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG16604935 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG87219617;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG87219617 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11095134;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11095134 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG46953315;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG46953315 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63624296;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63624296 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63504149;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63504149 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37032445;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37032445 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70528882;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70528882 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG59829110;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG59829110 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91172737;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91172737 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG49729707;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG49729707 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20015836;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20015836 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65597666;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65597666 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47586788;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47586788 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63665112;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG63665112 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG52398309;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG52398309 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7762569;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG7762569 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG1337350;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG1337350 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73713442;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73713442 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37498031;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG37498031 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75848479;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75848479 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG42914382;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG42914382 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG95456217;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG95456217 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG88278541;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG88278541 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG13764637;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG13764637 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93093474;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG93093474 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72529690;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72529690 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG78780011;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG78780011 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85348228;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85348228 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14249000;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14249000 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79187746;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79187746 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70413427;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70413427 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33523451;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33523451 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92960334;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92960334 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92562251;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92562251 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20544752;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG20544752 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG71288720;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG71288720 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86689016;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86689016 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92348908;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG92348908 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23339108;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG23339108 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33864081;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33864081 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG30434785;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG30434785 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33447451;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33447451 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65680675;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG65680675 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG44486233;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG44486233 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90798793;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90798793 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG41409400;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG41409400 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75739422;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG75739422 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG48562804;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG48562804 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG15368020;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG15368020 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG77221229;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG77221229 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG61571344;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG61571344 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG69977027;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG69977027 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG66290749;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG66290749 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47907240;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG47907240 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73690553;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG73690553 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91763399;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG91763399 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG22816592;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG22816592 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33188679;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG33188679 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70530821;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG70530821 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90974459;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG90974459 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG58252434;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG58252434 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85180654;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG85180654 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45580110;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45580110 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11984992;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG11984992 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79316279;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG79316279 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86492384;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG86492384 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72637331;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG72637331 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55024537;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG55024537 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43120361;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG43120361 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG81109588;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG81109588 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG21073553;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG21073553 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG8988442;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG8988442 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG50374334;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG50374334 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3633951;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG3633951 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45413694;     zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG45413694 = zcrPHDKwQhbjULmAkjVuuXQiuZXjMOtSLfQspKOCwG14103897;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mQJctoPVYtXldIrpuIPSqlJkiNgZwgBpz2399098() {     float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic4230206 = -954619957;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20437297 = 52604791;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic12208753 = -655079074;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic82665761 = -933547542;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20821104 = -372798626;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63170258 = -927940166;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28305770 = -305156190;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8851768 = -966665446;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic10654945 = -600587163;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75152197 = -376094108;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic77115486 = -403619753;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28026068 = -840028414;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95199545 = -816651821;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic32634794 = -790572206;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8889001 = -68526078;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31186808 = -167186454;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67288391 = -672841526;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33583628 = -102850339;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28680720 = -10399305;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52308046 = -816150193;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic50831096 = -206629656;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41772051 = -366555887;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic37027199 = -815807401;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31676817 = -731154877;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63490123 = -496140449;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic6010583 = -119380976;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33062468 = -531665250;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic70123690 = 99976812;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic24833294 = -285356303;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic11293230 = -256777944;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic40495848 = -748254607;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic69895796 = -185194799;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68798151 = -611000368;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic15011383 = -964022154;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85326241 = 56124182;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic73246842 = -621162973;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65831235 = -746548782;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71944071 = -753608063;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic74198129 = -500147827;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic96910450 = -968681661;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic21462242 = -397473783;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic55981812 = -647288312;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33530283 = -281349866;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68159972 = -926028701;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67812896 = -244831293;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63353375 = -171767398;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75879507 = -245055896;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic78665000 = -628975030;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41683291 = -178210245;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22373880 = 2015716;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1895214 = -631076684;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22553119 = -5552935;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34800683 = -513746449;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67156062 = -815309948;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic51568001 = -26845072;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic62458154 = -488064071;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic83410098 = -131587809;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80531936 = -923924197;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic19175639 = -337407093;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic14810522 = -153417651;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30107790 = -296274917;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic58182079 = -305133002;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic84018473 = -581309143;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic99361715 = -243809220;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34656349 = -627839501;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic7219690 = -118424955;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59227917 = -129028046;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80188163 = -852629668;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic47308553 = -746696389;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35642158 = -447363105;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65355573 = -420637673;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95344319 = -919233463;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59385499 = -602702512;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31770269 = -41717644;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30845805 = -318676410;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic94849283 = -559341345;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8241768 = 14793979;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68867226 = -889778700;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63863920 = -386323585;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic136748 = -224373051;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30131075 = -874325080;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic54397468 = -902690221;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28440400 = -721812944;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic2459414 = -187372019;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic9398016 = -625701260;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic17942730 = -642701672;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35095113 = -671448350;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1642089 = -795690420;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63443381 = -837177083;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22868087 = -455811747;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic89836744 = -389575165;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85299298 = -822624585;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52768433 = -316200971;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59387607 = -246730176;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic66802660 = -572406745;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63280163 = 7659218;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71963339 = 34020831;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34168568 = 62459354;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33503624 = -198189200;    float qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic60593207 = -954619957;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic4230206 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20437297;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20437297 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic12208753;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic12208753 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic82665761;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic82665761 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20821104;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic20821104 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63170258;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63170258 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28305770;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28305770 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8851768;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8851768 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic10654945;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic10654945 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75152197;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75152197 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic77115486;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic77115486 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28026068;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28026068 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95199545;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95199545 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic32634794;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic32634794 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8889001;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8889001 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31186808;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31186808 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67288391;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67288391 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33583628;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33583628 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28680720;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28680720 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52308046;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52308046 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic50831096;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic50831096 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41772051;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41772051 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic37027199;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic37027199 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31676817;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31676817 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63490123;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63490123 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic6010583;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic6010583 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33062468;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33062468 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic70123690;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic70123690 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic24833294;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic24833294 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic11293230;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic11293230 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic40495848;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic40495848 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic69895796;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic69895796 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68798151;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68798151 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic15011383;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic15011383 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85326241;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85326241 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic73246842;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic73246842 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65831235;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65831235 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71944071;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71944071 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic74198129;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic74198129 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic96910450;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic96910450 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic21462242;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic21462242 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic55981812;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic55981812 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33530283;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33530283 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68159972;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68159972 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67812896;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67812896 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63353375;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63353375 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75879507;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic75879507 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic78665000;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic78665000 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41683291;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic41683291 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22373880;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22373880 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1895214;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1895214 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22553119;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22553119 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34800683;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34800683 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67156062;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic67156062 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic51568001;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic51568001 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic62458154;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic62458154 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic83410098;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic83410098 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80531936;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80531936 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic19175639;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic19175639 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic14810522;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic14810522 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30107790;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30107790 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic58182079;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic58182079 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic84018473;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic84018473 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic99361715;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic99361715 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34656349;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34656349 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic7219690;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic7219690 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59227917;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59227917 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80188163;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic80188163 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic47308553;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic47308553 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35642158;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35642158 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65355573;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic65355573 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95344319;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic95344319 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59385499;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59385499 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31770269;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic31770269 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30845805;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30845805 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic94849283;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic94849283 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8241768;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic8241768 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68867226;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic68867226 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63863920;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63863920 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic136748;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic136748 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30131075;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic30131075 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic54397468;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic54397468 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28440400;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic28440400 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic2459414;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic2459414 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic9398016;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic9398016 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic17942730;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic17942730 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35095113;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic35095113 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1642089;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic1642089 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63443381;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63443381 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22868087;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic22868087 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic89836744;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic89836744 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85299298;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic85299298 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52768433;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic52768433 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59387607;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic59387607 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic66802660;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic66802660 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63280163;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic63280163 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71963339;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic71963339 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34168568;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic34168568 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33503624;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic33503624 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic60593207;     qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic60593207 = qlnDdMgpaMzSNrIlNnKgqjBGZtgHpZsrhlmWDmRvic4230206;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fygdgSwSjOBhTWrzxUcHHZAPbxSEhCbKz14944287() {     float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG23698376 = -267751169;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73461161 = -493273205;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29045745 = -306707689;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1312911 = -750121805;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21267621 = -999071042;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG88762332 = -818424934;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73137648 = -748462419;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74102000 = 39526589;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71341742 = -228778542;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53080920 = -381680153;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31338750 = -836610053;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31520681 = -839331119;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG85571204 = -141009098;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41050834 = -232857932;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69415462 = -366609869;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG97402457 = -630378388;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73250504 = -844616207;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57646380 = -953605057;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG28315599 = -387604066;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG32919348 = -433686649;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63287168 = -812841982;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56754134 = -878359100;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG5200205 = -13382019;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG49398485 = -367698869;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74693612 = -790440558;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10778044 = -905176194;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16990600 = -196816182;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG20915366 = -63756467;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66578250 = -299267449;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG96000083 = -348216638;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG70299933 = -613580699;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9475107 = -749543817;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG80274254 = -66208135;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73767889 = -168625361;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25256577 = -6578624;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9312780 = -924731582;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG34214686 = -173424857;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG13426546 = -830816879;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41511454 = -964562652;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG18192187 = -965212758;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG62944299 = -907260079;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG67840945 = -886184538;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4663525 = -229151663;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51545511 = -275101362;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG47841308 = -521954256;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG17814503 = -709098820;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57869387 = -158749219;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG78820830 = -812262344;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82818882 = -192149483;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63272222 = -858996629;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG76330782 = 62558385;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG39001979 = -382905794;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4625830 = -189855410;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40086091 = -809903585;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51657118 = -901403707;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66944241 = -389392070;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68260956 = -379891186;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG79647259 = -939008820;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG26619298 = -959681247;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10489577 = 6105151;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71771733 = -521608753;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52222283 = -584705953;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG7523750 = -661205963;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG75341658 = -880561904;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82780986 = -768099454;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21863643 = 12933763;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51246427 = -673122985;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG11803316 = -972383738;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG15794257 = -126279309;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60102682 = -441878288;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63187772 = -356953532;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG59823958 = 86200671;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16134926 = -989042405;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10123413 = -422391308;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69975049 = -526426571;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG95446222 = -926657444;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52090610 = -549207437;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53654694 = -738280658;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1557178 = -845744613;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56879110 = 18658261;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52908656 = -646426975;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38169769 = -384553838;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38096484 = -871606984;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG3306028 = -440270820;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG19669301 = -310775023;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31297955 = -130674906;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4849278 = -459688407;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40188163 = -256304551;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG22110772 = -267221655;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG58312336 = -617186554;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41051824 = -444840396;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG54567426 = -234416037;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG86807247 = -871135633;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31021877 = -870667804;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG46420453 = -343604005;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10722017 = -222554126;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60317195 = -124978575;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29321866 = -348589759;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68764524 = -507001908;    float KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25977665 = -267751169;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG23698376 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73461161;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73461161 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29045745;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29045745 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1312911;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1312911 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21267621;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21267621 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG88762332;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG88762332 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73137648;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73137648 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74102000;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74102000 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71341742;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71341742 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53080920;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53080920 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31338750;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31338750 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31520681;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31520681 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG85571204;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG85571204 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41050834;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41050834 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69415462;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69415462 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG97402457;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG97402457 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73250504;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73250504 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57646380;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57646380 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG28315599;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG28315599 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG32919348;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG32919348 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63287168;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63287168 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56754134;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56754134 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG5200205;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG5200205 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG49398485;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG49398485 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74693612;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG74693612 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10778044;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10778044 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16990600;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16990600 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG20915366;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG20915366 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66578250;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66578250 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG96000083;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG96000083 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG70299933;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG70299933 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9475107;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9475107 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG80274254;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG80274254 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73767889;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG73767889 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25256577;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25256577 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9312780;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG9312780 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG34214686;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG34214686 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG13426546;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG13426546 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41511454;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41511454 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG18192187;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG18192187 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG62944299;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG62944299 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG67840945;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG67840945 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4663525;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4663525 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51545511;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51545511 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG47841308;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG47841308 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG17814503;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG17814503 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57869387;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG57869387 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG78820830;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG78820830 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82818882;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82818882 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63272222;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63272222 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG76330782;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG76330782 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG39001979;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG39001979 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4625830;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4625830 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40086091;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40086091 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51657118;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51657118 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66944241;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG66944241 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68260956;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68260956 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG79647259;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG79647259 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG26619298;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG26619298 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10489577;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10489577 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71771733;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG71771733 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52222283;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52222283 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG7523750;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG7523750 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG75341658;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG75341658 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82780986;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG82780986 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21863643;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG21863643 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51246427;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG51246427 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG11803316;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG11803316 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG15794257;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG15794257 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60102682;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60102682 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63187772;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG63187772 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG59823958;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG59823958 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16134926;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG16134926 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10123413;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10123413 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69975049;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG69975049 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG95446222;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG95446222 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52090610;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52090610 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53654694;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG53654694 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1557178;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG1557178 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56879110;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG56879110 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52908656;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG52908656 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38169769;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38169769 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38096484;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG38096484 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG3306028;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG3306028 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG19669301;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG19669301 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31297955;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31297955 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4849278;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG4849278 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40188163;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG40188163 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG22110772;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG22110772 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG58312336;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG58312336 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41051824;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG41051824 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG54567426;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG54567426 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG86807247;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG86807247 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31021877;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG31021877 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG46420453;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG46420453 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10722017;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG10722017 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60317195;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG60317195 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29321866;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG29321866 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68764524;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG68764524 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25977665;     KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG25977665 = KKbQQyrAffQcFisGtszBtYFxRBizskgmqhILPjhVlG23698376;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kPXHmebtakgqUYtJazZEcjuTtpamIpMdK11127447() {     long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK83294472 = -496507547;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK74967010 = -303428590;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66047132 = -380848611;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97188668 = -522732682;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK32560847 = -899578070;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86439453 = -676684608;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK70496131 = -78180005;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24927285 = -314684787;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK85155185 = -761451041;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36105435 = -322939007;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56633681 = -138152493;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66191883 = -934352368;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56325768 = -47187616;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK99424672 = -137016279;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66723268 = -59136390;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94156711 = -435751280;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK9211608 = -772832487;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22314711 = -222941161;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8757802 = -526723695;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK12836458 = 3904698;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK43748287 = -645862806;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25243733 = -770760977;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97392029 = -877677098;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK14128724 = 67962895;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50671617 = -246578149;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5192951 = 60206335;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30330670 = -646296179;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86026534 = -685138057;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK16362594 = -88860064;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34473550 = -395199880;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK95214251 = -158800027;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK52240367 = -66761814;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29356293 = -46155007;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56292332 = -770509292;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30193938 = -754788609;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK87902676 = -136388164;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24846363 = -466203491;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK11786884 = -775269269;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK60529397 = -683269169;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91017841 = -139093706;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK21162113 = -275921675;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37920127 = -891125957;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45542767 = 37403507;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25785016 = -699016100;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK48829623 = 31727676;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK82607631 = -952042979;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63358110 = -50604886;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25517225 = -45015572;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22208530 = -476087103;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78439615 = -80249090;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK26817033 = -823549839;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45587132 = -354149050;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK80041344 = -429803864;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK13360614 = 29927460;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK67379160 = -865337794;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK58050740 = -725746570;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK77574980 = -425751492;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK51918409 = -348811506;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK46517052 = -176154534;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK27367896 = -859784405;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56108784 = 69611571;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84469596 = -393041949;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8564691 = -125824724;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50681636 = -266251161;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK40891184 = -64138980;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4393314 = 28609321;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36835590 = -788197361;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33437 = -276678325;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69230734 = -382227670;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78820591 = -922748227;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69310348 = -969547789;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97424724 = -997563219;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK61785314 = -539671993;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK17739961 = -287629990;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91674345 = -720173627;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5828161 = -754736850;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK79700966 = -708164485;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK71607014 = -78660998;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65299101 = -963764782;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK68063986 = -294535170;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK41834841 = -889188779;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4813446 = -501280607;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63818004 = -109050955;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37922979 = 91389026;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK7656517 = -571650041;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK49627120 = -804650978;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72199023 = -636957951;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK15995679 = 23917532;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK88913172 = -905171499;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72143198 = 70957960;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK10327696 = -710636672;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72927954 = -17391986;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65269832 = -499114735;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33161501 = -823484764;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34909058 = -108705277;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36692516 = -882879727;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29355436 = -665301233;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94861131 = -696345332;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84893832 = -534877121;    long zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK44436309 = -496507547;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK83294472 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK74967010;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK74967010 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66047132;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66047132 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97188668;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97188668 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK32560847;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK32560847 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86439453;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86439453 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK70496131;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK70496131 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24927285;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24927285 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK85155185;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK85155185 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36105435;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36105435 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56633681;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56633681 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66191883;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66191883 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56325768;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56325768 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK99424672;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK99424672 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66723268;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK66723268 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94156711;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94156711 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK9211608;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK9211608 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22314711;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22314711 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8757802;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8757802 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK12836458;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK12836458 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK43748287;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK43748287 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25243733;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25243733 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97392029;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97392029 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK14128724;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK14128724 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50671617;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50671617 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5192951;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5192951 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30330670;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30330670 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86026534;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK86026534 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK16362594;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK16362594 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34473550;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34473550 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK95214251;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK95214251 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK52240367;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK52240367 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29356293;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29356293 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56292332;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56292332 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30193938;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK30193938 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK87902676;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK87902676 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24846363;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK24846363 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK11786884;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK11786884 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK60529397;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK60529397 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91017841;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91017841 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK21162113;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK21162113 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37920127;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37920127 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45542767;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45542767 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25785016;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25785016 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK48829623;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK48829623 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK82607631;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK82607631 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63358110;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63358110 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25517225;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK25517225 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22208530;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK22208530 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78439615;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78439615 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK26817033;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK26817033 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45587132;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK45587132 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK80041344;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK80041344 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK13360614;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK13360614 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK67379160;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK67379160 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK58050740;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK58050740 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK77574980;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK77574980 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK51918409;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK51918409 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK46517052;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK46517052 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK27367896;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK27367896 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56108784;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK56108784 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84469596;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84469596 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8564691;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK8564691 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50681636;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK50681636 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK40891184;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK40891184 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4393314;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4393314 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36835590;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36835590 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33437;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33437 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69230734;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69230734 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78820591;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK78820591 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69310348;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK69310348 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97424724;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK97424724 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK61785314;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK61785314 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK17739961;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK17739961 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91674345;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK91674345 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5828161;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK5828161 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK79700966;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK79700966 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK71607014;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK71607014 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65299101;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65299101 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK68063986;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK68063986 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK41834841;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK41834841 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4813446;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK4813446 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63818004;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK63818004 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37922979;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK37922979 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK7656517;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK7656517 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK49627120;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK49627120 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72199023;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72199023 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK15995679;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK15995679 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK88913172;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK88913172 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72143198;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72143198 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK10327696;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK10327696 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72927954;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK72927954 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65269832;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK65269832 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33161501;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK33161501 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34909058;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK34909058 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36692516;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK36692516 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29355436;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK29355436 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94861131;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK94861131 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84893832;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK84893832 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK44436309;     zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK44436309 = zRobxHEtGZVigTofRgtSxDBUDOwDolkXCgUHFhdrVK83294472;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OxPnSgMpWkMfqTcpYdPwTgXJlmPHmZJBw23672636() {     long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2762643 = -909638759;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27990874 = -849306586;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx82884124 = -32477226;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15835818 = -339306945;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx33007363 = -425850485;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12031528 = -567169376;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15328010 = -521486235;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90177517 = -408492753;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45841983 = -389642420;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14034158 = -328525053;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx10856945 = -571142793;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx69686496 = -933655073;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46697427 = -471544893;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7840713 = -679302005;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27249729 = -357220182;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx60372360 = -898943213;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15173721 = -944607169;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46377462 = 26304121;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx8392681 = -903928456;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93447759 = -713631758;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56204359 = -152075132;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40225816 = -182564190;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx65565036 = -75251716;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31850393 = -668581097;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61875106 = -540878258;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9960412 = -725588883;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14258801 = -311447111;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx36818209 = -848871336;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx58107550 = -102771210;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19180405 = -486638575;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25018337 = -24126120;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx91819677 = -631110833;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40832396 = -601362774;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15048839 = 24887502;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx70124274 = -817491415;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23968614 = -439956772;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93229813 = -993079566;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53269357 = -852478084;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27842722 = -47683994;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12299577 = -135624803;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62644169 = -785707971;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49779260 = -30022183;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx16676008 = 89601710;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9170555 = -48088761;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28858034 = -245395287;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37068759 = -389374400;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45347990 = 35701791;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25673055 = -228302887;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx63344120 = -490026341;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19337958 = -941261435;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx1252603 = -129914770;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62035991 = -731501909;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49866490 = -105912825;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx86290642 = 35333824;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67468276 = -639896429;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62536827 = -627074569;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62425838 = -674054870;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx51033732 = -363896129;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53960711 = -798428688;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23046951 = -700261603;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx97772726 = -155722266;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx78509800 = -672614899;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx32069968 = -205721544;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx26661579 = -903003846;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx89015821 = -204398933;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19037267 = -940031961;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28854100 = -232292300;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31648588 = -396432395;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37716439 = -861810590;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx3281116 = -917263410;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67142547 = -905863648;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61904363 = 7870915;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx18534741 = -926011886;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx96093103 = -668303654;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx30803590 = -927923788;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx6425100 = -22052950;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23549808 = -172165901;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56394481 = 72837044;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2992359 = -323185810;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx24806348 = -51503859;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx64612422 = -661290675;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx88585746 = 16855775;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx73474088 = -258844995;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx38769593 = -161509775;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17927802 = -256723805;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62982345 = -292624212;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx41953188 = -425198008;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx54541754 = -536696598;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx47580562 = -335216070;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7587448 = -90416847;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61542775 = -765901903;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx42196082 = -529183438;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx99308646 = 45950603;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx4795771 = -347422392;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14526851 = -979902537;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx84134369 = -13093072;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17709292 = -824300639;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90014429 = -7394445;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx20154734 = -843689829;    long npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9820768 = -909638759;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2762643 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27990874;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27990874 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx82884124;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx82884124 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15835818;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15835818 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx33007363;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx33007363 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12031528;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12031528 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15328010;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15328010 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90177517;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90177517 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45841983;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45841983 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14034158;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14034158 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx10856945;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx10856945 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx69686496;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx69686496 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46697427;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46697427 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7840713;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7840713 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27249729;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27249729 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx60372360;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx60372360 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15173721;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15173721 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46377462;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx46377462 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx8392681;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx8392681 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93447759;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93447759 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56204359;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56204359 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40225816;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40225816 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx65565036;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx65565036 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31850393;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31850393 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61875106;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61875106 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9960412;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9960412 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14258801;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14258801 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx36818209;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx36818209 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx58107550;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx58107550 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19180405;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19180405 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25018337;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25018337 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx91819677;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx91819677 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40832396;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx40832396 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15048839;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx15048839 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx70124274;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx70124274 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23968614;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23968614 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93229813;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx93229813 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53269357;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53269357 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27842722;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx27842722 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12299577;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx12299577 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62644169;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62644169 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49779260;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49779260 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx16676008;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx16676008 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9170555;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9170555 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28858034;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28858034 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37068759;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37068759 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45347990;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx45347990 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25673055;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx25673055 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx63344120;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx63344120 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19337958;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19337958 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx1252603;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx1252603 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62035991;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62035991 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49866490;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx49866490 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx86290642;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx86290642 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67468276;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67468276 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62536827;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62536827 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62425838;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62425838 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx51033732;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx51033732 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53960711;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx53960711 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23046951;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23046951 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx97772726;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx97772726 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx78509800;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx78509800 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx32069968;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx32069968 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx26661579;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx26661579 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx89015821;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx89015821 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19037267;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx19037267 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28854100;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx28854100 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31648588;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx31648588 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37716439;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx37716439 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx3281116;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx3281116 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67142547;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx67142547 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61904363;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61904363 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx18534741;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx18534741 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx96093103;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx96093103 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx30803590;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx30803590 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx6425100;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx6425100 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23549808;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx23549808 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56394481;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx56394481 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2992359;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2992359 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx24806348;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx24806348 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx64612422;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx64612422 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx88585746;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx88585746 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx73474088;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx73474088 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx38769593;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx38769593 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17927802;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17927802 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62982345;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx62982345 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx41953188;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx41953188 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx54541754;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx54541754 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx47580562;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx47580562 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7587448;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx7587448 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61542775;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx61542775 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx42196082;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx42196082 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx99308646;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx99308646 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx4795771;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx4795771 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14526851;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx14526851 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx84134369;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx84134369 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17709292;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx17709292 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90014429;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx90014429 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx20154734;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx20154734 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9820768;     npTDAaLXnBwQSLRWAPAMwRhaFBgRECx9820768 = npTDAaLXnBwQSLRWAPAMwRhaFBgRECx2762643;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gjLUBnSFCUJzSiOkOayENZ83975292() {     long jxhSclujbtaBsJvhjKhToytQVqgyAyV92888951 = -968394959;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV11115939 = -124232756;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV78376823 = -169271687;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV89334392 = -525478767;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV46064098 = -367173927;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV92817932 = -459802484;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV9991448 = -159031708;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV43056081 = -44940492;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV69653670 = -397535058;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV18289829 = -998399578;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV87008763 = 20437050;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV4436004 = -413243208;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV85043559 = -783780753;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV46259566 = -677462889;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV25324101 = -842341125;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV84552102 = -599323083;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV59135901 = -105952410;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV67733175 = -416545172;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV69307072 = -270338892;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV60772007 = -261510068;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV44126761 = -956500224;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV38307398 = -515660826;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV98803454 = -481711637;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV39771490 = -16605473;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV8760295 = -84389202;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV28751377 = -601462618;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV36226136 = -70976104;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV59988584 = -908761394;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV19316548 = -864970258;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV66969484 = -361040966;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV28481740 = -350792664;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV91186591 = -31935252;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV49801437 = -901587934;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV38887484 = 33436344;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV5720809 = -467827076;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV77199620 = -742986182;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV93463382 = -508895471;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV77626641 = -718537328;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV38375739 = -855146040;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV56811719 = -40332576;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV76343843 = -491569247;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV4423723 = -944515396;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV76492849 = -385823886;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV39832496 = 87828050;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV20822452 = -357905243;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV57507752 = -872998305;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV25771280 = -612780709;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV16059514 = -254959140;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV91262774 = -925965688;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV48618363 = -298257772;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV30618126 = -504296815;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV5809099 = -695928742;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV99318945 = -917765820;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV39197705 = -88221458;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV39848532 = -768496700;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV54581553 = -352734134;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV12312485 = -642521119;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV38605334 = -52666215;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV80574098 = -341089566;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV17312722 = -765711310;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV56591796 = -288826380;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV50002863 = -250270314;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV23739533 = -179970234;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV2684187 = 63505907;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV89808089 = -547606915;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV95822171 = -947627699;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV54634566 = -511655275;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV46156076 = -717217098;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV40538758 = -109635814;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV48124481 = 645057;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV91088720 = 9572387;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV81509260 = -387415083;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV29357436 = -561399133;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV12495354 = -130006317;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV84428164 = -769940822;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV39703039 = 88015171;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV61814549 = -29836941;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV58970958 = -469539688;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV18949039 = -658700230;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV51252542 = -211390897;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV2980097 = -988681910;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV20166622 = -816016965;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV68725809 = -982795707;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV70698185 = -466712486;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV36351358 = -856744151;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV22672641 = -654863923;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV91867646 = -114169433;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV10603733 = -713366476;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV99038952 = -198066957;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV51139255 = -15092943;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV64887135 = -465064;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV54858049 = -356229256;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV97052542 = -277447763;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV21063017 = 10565270;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV219923 = -751506196;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV26340980 = -141298933;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV80684189 = -664545162;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV73808662 = -349329794;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV50024407 = -364565036;    long jxhSclujbtaBsJvhjKhToytQVqgyAyV25000280 = -968394959;     jxhSclujbtaBsJvhjKhToytQVqgyAyV92888951 = jxhSclujbtaBsJvhjKhToytQVqgyAyV11115939;     jxhSclujbtaBsJvhjKhToytQVqgyAyV11115939 = jxhSclujbtaBsJvhjKhToytQVqgyAyV78376823;     jxhSclujbtaBsJvhjKhToytQVqgyAyV78376823 = jxhSclujbtaBsJvhjKhToytQVqgyAyV89334392;     jxhSclujbtaBsJvhjKhToytQVqgyAyV89334392 = jxhSclujbtaBsJvhjKhToytQVqgyAyV46064098;     jxhSclujbtaBsJvhjKhToytQVqgyAyV46064098 = jxhSclujbtaBsJvhjKhToytQVqgyAyV92817932;     jxhSclujbtaBsJvhjKhToytQVqgyAyV92817932 = jxhSclujbtaBsJvhjKhToytQVqgyAyV9991448;     jxhSclujbtaBsJvhjKhToytQVqgyAyV9991448 = jxhSclujbtaBsJvhjKhToytQVqgyAyV43056081;     jxhSclujbtaBsJvhjKhToytQVqgyAyV43056081 = jxhSclujbtaBsJvhjKhToytQVqgyAyV69653670;     jxhSclujbtaBsJvhjKhToytQVqgyAyV69653670 = jxhSclujbtaBsJvhjKhToytQVqgyAyV18289829;     jxhSclujbtaBsJvhjKhToytQVqgyAyV18289829 = jxhSclujbtaBsJvhjKhToytQVqgyAyV87008763;     jxhSclujbtaBsJvhjKhToytQVqgyAyV87008763 = jxhSclujbtaBsJvhjKhToytQVqgyAyV4436004;     jxhSclujbtaBsJvhjKhToytQVqgyAyV4436004 = jxhSclujbtaBsJvhjKhToytQVqgyAyV85043559;     jxhSclujbtaBsJvhjKhToytQVqgyAyV85043559 = jxhSclujbtaBsJvhjKhToytQVqgyAyV46259566;     jxhSclujbtaBsJvhjKhToytQVqgyAyV46259566 = jxhSclujbtaBsJvhjKhToytQVqgyAyV25324101;     jxhSclujbtaBsJvhjKhToytQVqgyAyV25324101 = jxhSclujbtaBsJvhjKhToytQVqgyAyV84552102;     jxhSclujbtaBsJvhjKhToytQVqgyAyV84552102 = jxhSclujbtaBsJvhjKhToytQVqgyAyV59135901;     jxhSclujbtaBsJvhjKhToytQVqgyAyV59135901 = jxhSclujbtaBsJvhjKhToytQVqgyAyV67733175;     jxhSclujbtaBsJvhjKhToytQVqgyAyV67733175 = jxhSclujbtaBsJvhjKhToytQVqgyAyV69307072;     jxhSclujbtaBsJvhjKhToytQVqgyAyV69307072 = jxhSclujbtaBsJvhjKhToytQVqgyAyV60772007;     jxhSclujbtaBsJvhjKhToytQVqgyAyV60772007 = jxhSclujbtaBsJvhjKhToytQVqgyAyV44126761;     jxhSclujbtaBsJvhjKhToytQVqgyAyV44126761 = jxhSclujbtaBsJvhjKhToytQVqgyAyV38307398;     jxhSclujbtaBsJvhjKhToytQVqgyAyV38307398 = jxhSclujbtaBsJvhjKhToytQVqgyAyV98803454;     jxhSclujbtaBsJvhjKhToytQVqgyAyV98803454 = jxhSclujbtaBsJvhjKhToytQVqgyAyV39771490;     jxhSclujbtaBsJvhjKhToytQVqgyAyV39771490 = jxhSclujbtaBsJvhjKhToytQVqgyAyV8760295;     jxhSclujbtaBsJvhjKhToytQVqgyAyV8760295 = jxhSclujbtaBsJvhjKhToytQVqgyAyV28751377;     jxhSclujbtaBsJvhjKhToytQVqgyAyV28751377 = jxhSclujbtaBsJvhjKhToytQVqgyAyV36226136;     jxhSclujbtaBsJvhjKhToytQVqgyAyV36226136 = jxhSclujbtaBsJvhjKhToytQVqgyAyV59988584;     jxhSclujbtaBsJvhjKhToytQVqgyAyV59988584 = jxhSclujbtaBsJvhjKhToytQVqgyAyV19316548;     jxhSclujbtaBsJvhjKhToytQVqgyAyV19316548 = jxhSclujbtaBsJvhjKhToytQVqgyAyV66969484;     jxhSclujbtaBsJvhjKhToytQVqgyAyV66969484 = jxhSclujbtaBsJvhjKhToytQVqgyAyV28481740;     jxhSclujbtaBsJvhjKhToytQVqgyAyV28481740 = jxhSclujbtaBsJvhjKhToytQVqgyAyV91186591;     jxhSclujbtaBsJvhjKhToytQVqgyAyV91186591 = jxhSclujbtaBsJvhjKhToytQVqgyAyV49801437;     jxhSclujbtaBsJvhjKhToytQVqgyAyV49801437 = jxhSclujbtaBsJvhjKhToytQVqgyAyV38887484;     jxhSclujbtaBsJvhjKhToytQVqgyAyV38887484 = jxhSclujbtaBsJvhjKhToytQVqgyAyV5720809;     jxhSclujbtaBsJvhjKhToytQVqgyAyV5720809 = jxhSclujbtaBsJvhjKhToytQVqgyAyV77199620;     jxhSclujbtaBsJvhjKhToytQVqgyAyV77199620 = jxhSclujbtaBsJvhjKhToytQVqgyAyV93463382;     jxhSclujbtaBsJvhjKhToytQVqgyAyV93463382 = jxhSclujbtaBsJvhjKhToytQVqgyAyV77626641;     jxhSclujbtaBsJvhjKhToytQVqgyAyV77626641 = jxhSclujbtaBsJvhjKhToytQVqgyAyV38375739;     jxhSclujbtaBsJvhjKhToytQVqgyAyV38375739 = jxhSclujbtaBsJvhjKhToytQVqgyAyV56811719;     jxhSclujbtaBsJvhjKhToytQVqgyAyV56811719 = jxhSclujbtaBsJvhjKhToytQVqgyAyV76343843;     jxhSclujbtaBsJvhjKhToytQVqgyAyV76343843 = jxhSclujbtaBsJvhjKhToytQVqgyAyV4423723;     jxhSclujbtaBsJvhjKhToytQVqgyAyV4423723 = jxhSclujbtaBsJvhjKhToytQVqgyAyV76492849;     jxhSclujbtaBsJvhjKhToytQVqgyAyV76492849 = jxhSclujbtaBsJvhjKhToytQVqgyAyV39832496;     jxhSclujbtaBsJvhjKhToytQVqgyAyV39832496 = jxhSclujbtaBsJvhjKhToytQVqgyAyV20822452;     jxhSclujbtaBsJvhjKhToytQVqgyAyV20822452 = jxhSclujbtaBsJvhjKhToytQVqgyAyV57507752;     jxhSclujbtaBsJvhjKhToytQVqgyAyV57507752 = jxhSclujbtaBsJvhjKhToytQVqgyAyV25771280;     jxhSclujbtaBsJvhjKhToytQVqgyAyV25771280 = jxhSclujbtaBsJvhjKhToytQVqgyAyV16059514;     jxhSclujbtaBsJvhjKhToytQVqgyAyV16059514 = jxhSclujbtaBsJvhjKhToytQVqgyAyV91262774;     jxhSclujbtaBsJvhjKhToytQVqgyAyV91262774 = jxhSclujbtaBsJvhjKhToytQVqgyAyV48618363;     jxhSclujbtaBsJvhjKhToytQVqgyAyV48618363 = jxhSclujbtaBsJvhjKhToytQVqgyAyV30618126;     jxhSclujbtaBsJvhjKhToytQVqgyAyV30618126 = jxhSclujbtaBsJvhjKhToytQVqgyAyV5809099;     jxhSclujbtaBsJvhjKhToytQVqgyAyV5809099 = jxhSclujbtaBsJvhjKhToytQVqgyAyV99318945;     jxhSclujbtaBsJvhjKhToytQVqgyAyV99318945 = jxhSclujbtaBsJvhjKhToytQVqgyAyV39197705;     jxhSclujbtaBsJvhjKhToytQVqgyAyV39197705 = jxhSclujbtaBsJvhjKhToytQVqgyAyV39848532;     jxhSclujbtaBsJvhjKhToytQVqgyAyV39848532 = jxhSclujbtaBsJvhjKhToytQVqgyAyV54581553;     jxhSclujbtaBsJvhjKhToytQVqgyAyV54581553 = jxhSclujbtaBsJvhjKhToytQVqgyAyV12312485;     jxhSclujbtaBsJvhjKhToytQVqgyAyV12312485 = jxhSclujbtaBsJvhjKhToytQVqgyAyV38605334;     jxhSclujbtaBsJvhjKhToytQVqgyAyV38605334 = jxhSclujbtaBsJvhjKhToytQVqgyAyV80574098;     jxhSclujbtaBsJvhjKhToytQVqgyAyV80574098 = jxhSclujbtaBsJvhjKhToytQVqgyAyV17312722;     jxhSclujbtaBsJvhjKhToytQVqgyAyV17312722 = jxhSclujbtaBsJvhjKhToytQVqgyAyV56591796;     jxhSclujbtaBsJvhjKhToytQVqgyAyV56591796 = jxhSclujbtaBsJvhjKhToytQVqgyAyV50002863;     jxhSclujbtaBsJvhjKhToytQVqgyAyV50002863 = jxhSclujbtaBsJvhjKhToytQVqgyAyV23739533;     jxhSclujbtaBsJvhjKhToytQVqgyAyV23739533 = jxhSclujbtaBsJvhjKhToytQVqgyAyV2684187;     jxhSclujbtaBsJvhjKhToytQVqgyAyV2684187 = jxhSclujbtaBsJvhjKhToytQVqgyAyV89808089;     jxhSclujbtaBsJvhjKhToytQVqgyAyV89808089 = jxhSclujbtaBsJvhjKhToytQVqgyAyV95822171;     jxhSclujbtaBsJvhjKhToytQVqgyAyV95822171 = jxhSclujbtaBsJvhjKhToytQVqgyAyV54634566;     jxhSclujbtaBsJvhjKhToytQVqgyAyV54634566 = jxhSclujbtaBsJvhjKhToytQVqgyAyV46156076;     jxhSclujbtaBsJvhjKhToytQVqgyAyV46156076 = jxhSclujbtaBsJvhjKhToytQVqgyAyV40538758;     jxhSclujbtaBsJvhjKhToytQVqgyAyV40538758 = jxhSclujbtaBsJvhjKhToytQVqgyAyV48124481;     jxhSclujbtaBsJvhjKhToytQVqgyAyV48124481 = jxhSclujbtaBsJvhjKhToytQVqgyAyV91088720;     jxhSclujbtaBsJvhjKhToytQVqgyAyV91088720 = jxhSclujbtaBsJvhjKhToytQVqgyAyV81509260;     jxhSclujbtaBsJvhjKhToytQVqgyAyV81509260 = jxhSclujbtaBsJvhjKhToytQVqgyAyV29357436;     jxhSclujbtaBsJvhjKhToytQVqgyAyV29357436 = jxhSclujbtaBsJvhjKhToytQVqgyAyV12495354;     jxhSclujbtaBsJvhjKhToytQVqgyAyV12495354 = jxhSclujbtaBsJvhjKhToytQVqgyAyV84428164;     jxhSclujbtaBsJvhjKhToytQVqgyAyV84428164 = jxhSclujbtaBsJvhjKhToytQVqgyAyV39703039;     jxhSclujbtaBsJvhjKhToytQVqgyAyV39703039 = jxhSclujbtaBsJvhjKhToytQVqgyAyV61814549;     jxhSclujbtaBsJvhjKhToytQVqgyAyV61814549 = jxhSclujbtaBsJvhjKhToytQVqgyAyV58970958;     jxhSclujbtaBsJvhjKhToytQVqgyAyV58970958 = jxhSclujbtaBsJvhjKhToytQVqgyAyV18949039;     jxhSclujbtaBsJvhjKhToytQVqgyAyV18949039 = jxhSclujbtaBsJvhjKhToytQVqgyAyV51252542;     jxhSclujbtaBsJvhjKhToytQVqgyAyV51252542 = jxhSclujbtaBsJvhjKhToytQVqgyAyV2980097;     jxhSclujbtaBsJvhjKhToytQVqgyAyV2980097 = jxhSclujbtaBsJvhjKhToytQVqgyAyV20166622;     jxhSclujbtaBsJvhjKhToytQVqgyAyV20166622 = jxhSclujbtaBsJvhjKhToytQVqgyAyV68725809;     jxhSclujbtaBsJvhjKhToytQVqgyAyV68725809 = jxhSclujbtaBsJvhjKhToytQVqgyAyV70698185;     jxhSclujbtaBsJvhjKhToytQVqgyAyV70698185 = jxhSclujbtaBsJvhjKhToytQVqgyAyV36351358;     jxhSclujbtaBsJvhjKhToytQVqgyAyV36351358 = jxhSclujbtaBsJvhjKhToytQVqgyAyV22672641;     jxhSclujbtaBsJvhjKhToytQVqgyAyV22672641 = jxhSclujbtaBsJvhjKhToytQVqgyAyV91867646;     jxhSclujbtaBsJvhjKhToytQVqgyAyV91867646 = jxhSclujbtaBsJvhjKhToytQVqgyAyV10603733;     jxhSclujbtaBsJvhjKhToytQVqgyAyV10603733 = jxhSclujbtaBsJvhjKhToytQVqgyAyV99038952;     jxhSclujbtaBsJvhjKhToytQVqgyAyV99038952 = jxhSclujbtaBsJvhjKhToytQVqgyAyV51139255;     jxhSclujbtaBsJvhjKhToytQVqgyAyV51139255 = jxhSclujbtaBsJvhjKhToytQVqgyAyV64887135;     jxhSclujbtaBsJvhjKhToytQVqgyAyV64887135 = jxhSclujbtaBsJvhjKhToytQVqgyAyV54858049;     jxhSclujbtaBsJvhjKhToytQVqgyAyV54858049 = jxhSclujbtaBsJvhjKhToytQVqgyAyV97052542;     jxhSclujbtaBsJvhjKhToytQVqgyAyV97052542 = jxhSclujbtaBsJvhjKhToytQVqgyAyV21063017;     jxhSclujbtaBsJvhjKhToytQVqgyAyV21063017 = jxhSclujbtaBsJvhjKhToytQVqgyAyV219923;     jxhSclujbtaBsJvhjKhToytQVqgyAyV219923 = jxhSclujbtaBsJvhjKhToytQVqgyAyV26340980;     jxhSclujbtaBsJvhjKhToytQVqgyAyV26340980 = jxhSclujbtaBsJvhjKhToytQVqgyAyV80684189;     jxhSclujbtaBsJvhjKhToytQVqgyAyV80684189 = jxhSclujbtaBsJvhjKhToytQVqgyAyV73808662;     jxhSclujbtaBsJvhjKhToytQVqgyAyV73808662 = jxhSclujbtaBsJvhjKhToytQVqgyAyV50024407;     jxhSclujbtaBsJvhjKhToytQVqgyAyV50024407 = jxhSclujbtaBsJvhjKhToytQVqgyAyV25000280;     jxhSclujbtaBsJvhjKhToytQVqgyAyV25000280 = jxhSclujbtaBsJvhjKhToytQVqgyAyV92888951;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xMscatzcWMumPTHobQosRE96520481() {     long JWUilqQvgWfzYRafXodXdrLMgmOdVPX12357122 = -281526171;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX64139803 = -670110752;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX95213815 = -920900302;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX7981542 = -342053030;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX46510615 = -993446343;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX18410007 = -350287252;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX54823326 = -602337938;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX8306315 = -138748458;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX30340468 = -25726437;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX96218551 = 96014376;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX41232027 = -412553250;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX7930618 = -412545913;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX75415219 = -108138030;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX54675607 = -119748615;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX85850562 = -40424916;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX50767752 = 37484983;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX65098015 = -277727092;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX91795926 = -167299890;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX68941951 = -647543653;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX41383309 = -979046524;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX56582833 = -462712550;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX53289481 = 72535961;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX66976460 = -779286256;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX57493158 = -753149465;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX19963784 = -378689311;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX33518838 = -287257836;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX20154267 = -836127036;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX10780259 = 27505327;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX61061505 = -878881404;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX51676338 = -452479660;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX58285824 = -216118757;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX30765903 = -596284270;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX61277541 = -356795700;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX97643990 = -271166862;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX45651145 = -530529882;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX13265558 = 53445209;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX61846833 = 64228454;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX19109115 = -795746143;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX5689064 = -219560865;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX78093455 = -36863672;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX17825900 = 98644458;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX16282856 = -83411622;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX47626090 = -333625683;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX23218035 = -361244611;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX850863 = -635028206;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX11968880 = -310329726;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX7761160 = -526474032;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX16215344 = -438246454;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX32398366 = -939904926;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX89516705 = -59270118;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX5053695 = -910661746;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX22257959 = 26718399;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX69144091 = -593874781;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX12127734 = -82815094;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX39937648 = -543055335;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX59067641 = -254062133;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX97163342 = -890824497;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX37720657 = -67750838;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX88017757 = -963363719;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX12991777 = -606188507;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX98255739 = -514160217;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX44043067 = -529843265;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX47244809 = -259867054;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX78664129 = -573246777;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX37932727 = -687866868;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX10466125 = -816268981;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX46653077 = 44249787;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX77771228 = -836971168;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX9024462 = -589218733;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX72585004 = 6129874;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX88920918 = 73256528;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX45988900 = -481980949;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX86106862 = -947739026;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX90848496 = -510679981;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX23557410 = -977690982;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX40299978 = -279300929;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX5663391 = -593838356;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX43758426 = -318041646;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX56642296 = -18121259;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX7994905 = 31640415;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX25757678 = -760783805;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX3938923 = -297880583;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX78381893 = -32589748;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX71544799 = -719611287;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX46622643 = -541817915;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX36027866 = -142837156;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX61621811 = 97590510;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX49149807 = -173980607;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX57706342 = -728111528;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX86583504 = -176467750;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX16102215 = -55730294;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX24126177 = -868020708;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX31091358 = -832382425;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX92697287 = -613372358;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX79837715 = -522703456;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX73782833 = -371512278;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX69038046 = -823544568;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX68961961 = -760378907;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX85285307 = -673377743;    long JWUilqQvgWfzYRafXodXdrLMgmOdVPX90384737 = -281526171;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX12357122 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX64139803;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX64139803 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX95213815;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX95213815 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX7981542;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX7981542 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX46510615;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX46510615 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX18410007;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX18410007 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX54823326;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX54823326 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX8306315;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX8306315 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX30340468;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX30340468 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX96218551;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX96218551 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX41232027;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX41232027 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX7930618;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX7930618 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX75415219;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX75415219 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX54675607;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX54675607 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX85850562;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX85850562 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX50767752;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX50767752 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX65098015;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX65098015 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX91795926;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX91795926 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX68941951;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX68941951 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX41383309;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX41383309 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX56582833;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX56582833 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX53289481;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX53289481 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX66976460;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX66976460 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX57493158;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX57493158 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX19963784;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX19963784 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX33518838;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX33518838 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX20154267;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX20154267 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX10780259;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX10780259 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX61061505;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX61061505 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX51676338;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX51676338 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX58285824;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX58285824 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX30765903;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX30765903 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX61277541;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX61277541 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX97643990;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX97643990 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX45651145;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX45651145 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX13265558;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX13265558 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX61846833;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX61846833 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX19109115;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX19109115 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX5689064;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX5689064 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX78093455;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX78093455 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX17825900;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX17825900 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX16282856;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX16282856 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX47626090;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX47626090 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX23218035;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX23218035 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX850863;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX850863 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX11968880;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX11968880 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX7761160;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX7761160 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX16215344;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX16215344 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX32398366;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX32398366 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX89516705;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX89516705 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX5053695;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX5053695 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX22257959;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX22257959 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX69144091;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX69144091 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX12127734;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX12127734 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX39937648;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX39937648 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX59067641;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX59067641 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX97163342;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX97163342 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX37720657;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX37720657 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX88017757;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX88017757 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX12991777;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX12991777 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX98255739;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX98255739 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX44043067;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX44043067 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX47244809;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX47244809 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX78664129;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX78664129 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX37932727;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX37932727 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX10466125;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX10466125 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX46653077;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX46653077 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX77771228;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX77771228 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX9024462;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX9024462 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX72585004;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX72585004 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX88920918;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX88920918 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX45988900;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX45988900 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX86106862;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX86106862 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX90848496;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX90848496 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX23557410;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX23557410 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX40299978;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX40299978 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX5663391;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX5663391 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX43758426;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX43758426 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX56642296;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX56642296 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX7994905;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX7994905 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX25757678;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX25757678 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX3938923;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX3938923 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX78381893;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX78381893 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX71544799;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX71544799 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX46622643;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX46622643 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX36027866;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX36027866 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX61621811;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX61621811 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX49149807;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX49149807 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX57706342;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX57706342 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX86583504;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX86583504 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX16102215;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX16102215 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX24126177;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX24126177 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX31091358;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX31091358 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX92697287;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX92697287 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX79837715;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX79837715 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX73782833;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX73782833 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX69038046;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX69038046 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX68961961;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX68961961 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX85285307;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX85285307 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX90384737;     JWUilqQvgWfzYRafXodXdrLMgmOdVPX90384737 = JWUilqQvgWfzYRafXodXdrLMgmOdVPX12357122;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BVVpyIPhxccYFelRjLVoZe56823139() {     long jGzdbtVpfIRN2483431 = -340282372;    long jGzdbtVpfIRN47264868 = 54963078;    long jGzdbtVpfIRN90706514 = 42305237;    long jGzdbtVpfIRN81480116 = -528224852;    long jGzdbtVpfIRN59567350 = -934769785;    long jGzdbtVpfIRN99196410 = -242920360;    long jGzdbtVpfIRN49486764 = -239883411;    long jGzdbtVpfIRN61184878 = -875196196;    long jGzdbtVpfIRN54152155 = -33619075;    long jGzdbtVpfIRN474222 = -573860149;    long jGzdbtVpfIRN17383847 = -920973408;    long jGzdbtVpfIRN42680125 = -992134048;    long jGzdbtVpfIRN13761352 = -420373890;    long jGzdbtVpfIRN93094460 = -117909499;    long jGzdbtVpfIRN83924933 = -525545859;    long jGzdbtVpfIRN74947493 = -762894887;    long jGzdbtVpfIRN9060196 = -539072333;    long jGzdbtVpfIRN13151639 = -610149182;    long jGzdbtVpfIRN29856343 = -13954088;    long jGzdbtVpfIRN8707558 = -526924834;    long jGzdbtVpfIRN44505236 = -167137642;    long jGzdbtVpfIRN51371063 = -260560674;    long jGzdbtVpfIRN214879 = -85746177;    long jGzdbtVpfIRN65414256 = -101173840;    long jGzdbtVpfIRN66848971 = 77799745;    long jGzdbtVpfIRN52309803 = -163131571;    long jGzdbtVpfIRN42121602 = -595656030;    long jGzdbtVpfIRN33950634 = -32384732;    long jGzdbtVpfIRN22270503 = -541080452;    long jGzdbtVpfIRN99465418 = -326882052;    long jGzdbtVpfIRN61749227 = -542785301;    long jGzdbtVpfIRN30132817 = 2891310;    long jGzdbtVpfIRN70246582 = -657020860;    long jGzdbtVpfIRN21482636 = -262618020;    long jGzdbtVpfIRN81247679 = -180865543;    long jGzdbtVpfIRN66496564 = -249584201;    long jGzdbtVpfIRN62080402 = -551587450;    long jGzdbtVpfIRN43466398 = -661805387;    long jGzdbtVpfIRN16222081 = 72977090;    long jGzdbtVpfIRN22605597 = 58428555;    long jGzdbtVpfIRN31525573 = -707216818;    long jGzdbtVpfIRN70927319 = -997904835;    long jGzdbtVpfIRN7442932 = -809051279;    long jGzdbtVpfIRN53879975 = -225327800;    long jGzdbtVpfIRN92815280 = -747538162;    long jGzdbtVpfIRN32407873 = -793953632;    long jGzdbtVpfIRN88184450 = -74956532;    long jGzdbtVpfIRN6601803 = -464902707;    long jGzdbtVpfIRN60317019 = -275844273;    long jGzdbtVpfIRN18797112 = -516266455;    long jGzdbtVpfIRN34419219 = -185043791;    long jGzdbtVpfIRN66031066 = 62291566;    long jGzdbtVpfIRN18596547 = -305727775;    long jGzdbtVpfIRN65034795 = -206370376;    long jGzdbtVpfIRN12317904 = -671655607;    long jGzdbtVpfIRN51112367 = 20278302;    long jGzdbtVpfIRN47049989 = -859290746;    long jGzdbtVpfIRN25292259 = -856520923;    long jGzdbtVpfIRN14631145 = -506024597;    long jGzdbtVpfIRN7257548 = -671638214;    long jGzdbtVpfIRN57074809 = -647264331;    long jGzdbtVpfIRN15536130 = -107498679;    long jGzdbtVpfIRN38914375 = -234115745;    long jGzdbtVpfIRN54686737 = -706737024;    long jGzdbtVpfIRN38724995 = 68925151;    long jGzdbtVpfIRN87251029 = -823864718;    long jGzdbtVpfIRN72433543 = -235113189;    long jGzdbtVpfIRN92278716 = -57755870;    long jGzdbtVpfIRN11846781 = -937043957;    long jGzdbtVpfIRN17428370 = -175961658;    long jGzdbtVpfIRN12867092 = -111307438;    long jGzdbtVpfIRN65593797 = -877266946;    long jGzdbtVpfIRN96929558 = -583126272;    long jGzdbtVpfIRN7250747 = 27617356;    long jGzdbtVpfIRN77181984 = -819708017;    long jGzdbtVpfIRN73577917 = -169232808;    long jGzdbtVpfIRN43928132 = -451509396;    long jGzdbtVpfIRN46334903 = -860418378;    long jGzdbtVpfIRN72598975 = -353635678;    long jGzdbtVpfIRN34441099 = -128246624;    long jGzdbtVpfIRN64125352 = 11824960;    long jGzdbtVpfIRN35519799 = -30753323;    long jGzdbtVpfIRN73633614 = -756540459;    long jGzdbtVpfIRN3473392 = 75186003;    long jGzdbtVpfIRN65046199 = -41838261;    long jGzdbtVpfIRN95718161 = -505076867;    long jGzdbtVpfIRN11536270 = -691380915;    long jGzdbtVpfIRN5211787 = -350650485;    long jGzdbtVpfIRN9164732 = -590962414;    long jGzdbtVpfIRN30135312 = -101143845;    long jGzdbtVpfIRN19446575 = -390293455;    long jGzdbtVpfIRN36788144 = -695066527;    long jGzdbtVpfIRN28835254 = -55780791;    long jGzdbtVpfIRN8964534 = -255384696;    long jGzdbtVpfIRN65530787 = -294307115;    long jGzdbtVpfIRN15989444 = -499718139;    long jGzdbtVpfIRN32012944 = -663789090;    long jGzdbtVpfIRN52756194 = -2314256;    long jGzdbtVpfIRN15154981 = -194252951;    long jGzdbtVpfIRN5564251 = -340282372;     jGzdbtVpfIRN2483431 = jGzdbtVpfIRN47264868;     jGzdbtVpfIRN47264868 = jGzdbtVpfIRN90706514;     jGzdbtVpfIRN90706514 = jGzdbtVpfIRN81480116;     jGzdbtVpfIRN81480116 = jGzdbtVpfIRN59567350;     jGzdbtVpfIRN59567350 = jGzdbtVpfIRN99196410;     jGzdbtVpfIRN99196410 = jGzdbtVpfIRN49486764;     jGzdbtVpfIRN49486764 = jGzdbtVpfIRN61184878;     jGzdbtVpfIRN61184878 = jGzdbtVpfIRN54152155;     jGzdbtVpfIRN54152155 = jGzdbtVpfIRN474222;     jGzdbtVpfIRN474222 = jGzdbtVpfIRN17383847;     jGzdbtVpfIRN17383847 = jGzdbtVpfIRN42680125;     jGzdbtVpfIRN42680125 = jGzdbtVpfIRN13761352;     jGzdbtVpfIRN13761352 = jGzdbtVpfIRN93094460;     jGzdbtVpfIRN93094460 = jGzdbtVpfIRN83924933;     jGzdbtVpfIRN83924933 = jGzdbtVpfIRN74947493;     jGzdbtVpfIRN74947493 = jGzdbtVpfIRN9060196;     jGzdbtVpfIRN9060196 = jGzdbtVpfIRN13151639;     jGzdbtVpfIRN13151639 = jGzdbtVpfIRN29856343;     jGzdbtVpfIRN29856343 = jGzdbtVpfIRN8707558;     jGzdbtVpfIRN8707558 = jGzdbtVpfIRN44505236;     jGzdbtVpfIRN44505236 = jGzdbtVpfIRN51371063;     jGzdbtVpfIRN51371063 = jGzdbtVpfIRN214879;     jGzdbtVpfIRN214879 = jGzdbtVpfIRN65414256;     jGzdbtVpfIRN65414256 = jGzdbtVpfIRN66848971;     jGzdbtVpfIRN66848971 = jGzdbtVpfIRN52309803;     jGzdbtVpfIRN52309803 = jGzdbtVpfIRN42121602;     jGzdbtVpfIRN42121602 = jGzdbtVpfIRN33950634;     jGzdbtVpfIRN33950634 = jGzdbtVpfIRN22270503;     jGzdbtVpfIRN22270503 = jGzdbtVpfIRN99465418;     jGzdbtVpfIRN99465418 = jGzdbtVpfIRN61749227;     jGzdbtVpfIRN61749227 = jGzdbtVpfIRN30132817;     jGzdbtVpfIRN30132817 = jGzdbtVpfIRN70246582;     jGzdbtVpfIRN70246582 = jGzdbtVpfIRN21482636;     jGzdbtVpfIRN21482636 = jGzdbtVpfIRN81247679;     jGzdbtVpfIRN81247679 = jGzdbtVpfIRN66496564;     jGzdbtVpfIRN66496564 = jGzdbtVpfIRN62080402;     jGzdbtVpfIRN62080402 = jGzdbtVpfIRN43466398;     jGzdbtVpfIRN43466398 = jGzdbtVpfIRN16222081;     jGzdbtVpfIRN16222081 = jGzdbtVpfIRN22605597;     jGzdbtVpfIRN22605597 = jGzdbtVpfIRN31525573;     jGzdbtVpfIRN31525573 = jGzdbtVpfIRN70927319;     jGzdbtVpfIRN70927319 = jGzdbtVpfIRN7442932;     jGzdbtVpfIRN7442932 = jGzdbtVpfIRN53879975;     jGzdbtVpfIRN53879975 = jGzdbtVpfIRN92815280;     jGzdbtVpfIRN92815280 = jGzdbtVpfIRN32407873;     jGzdbtVpfIRN32407873 = jGzdbtVpfIRN88184450;     jGzdbtVpfIRN88184450 = jGzdbtVpfIRN6601803;     jGzdbtVpfIRN6601803 = jGzdbtVpfIRN60317019;     jGzdbtVpfIRN60317019 = jGzdbtVpfIRN18797112;     jGzdbtVpfIRN18797112 = jGzdbtVpfIRN34419219;     jGzdbtVpfIRN34419219 = jGzdbtVpfIRN66031066;     jGzdbtVpfIRN66031066 = jGzdbtVpfIRN18596547;     jGzdbtVpfIRN18596547 = jGzdbtVpfIRN65034795;     jGzdbtVpfIRN65034795 = jGzdbtVpfIRN12317904;     jGzdbtVpfIRN12317904 = jGzdbtVpfIRN51112367;     jGzdbtVpfIRN51112367 = jGzdbtVpfIRN47049989;     jGzdbtVpfIRN47049989 = jGzdbtVpfIRN25292259;     jGzdbtVpfIRN25292259 = jGzdbtVpfIRN14631145;     jGzdbtVpfIRN14631145 = jGzdbtVpfIRN7257548;     jGzdbtVpfIRN7257548 = jGzdbtVpfIRN57074809;     jGzdbtVpfIRN57074809 = jGzdbtVpfIRN15536130;     jGzdbtVpfIRN15536130 = jGzdbtVpfIRN38914375;     jGzdbtVpfIRN38914375 = jGzdbtVpfIRN54686737;     jGzdbtVpfIRN54686737 = jGzdbtVpfIRN38724995;     jGzdbtVpfIRN38724995 = jGzdbtVpfIRN87251029;     jGzdbtVpfIRN87251029 = jGzdbtVpfIRN72433543;     jGzdbtVpfIRN72433543 = jGzdbtVpfIRN92278716;     jGzdbtVpfIRN92278716 = jGzdbtVpfIRN11846781;     jGzdbtVpfIRN11846781 = jGzdbtVpfIRN17428370;     jGzdbtVpfIRN17428370 = jGzdbtVpfIRN12867092;     jGzdbtVpfIRN12867092 = jGzdbtVpfIRN65593797;     jGzdbtVpfIRN65593797 = jGzdbtVpfIRN96929558;     jGzdbtVpfIRN96929558 = jGzdbtVpfIRN7250747;     jGzdbtVpfIRN7250747 = jGzdbtVpfIRN77181984;     jGzdbtVpfIRN77181984 = jGzdbtVpfIRN73577917;     jGzdbtVpfIRN73577917 = jGzdbtVpfIRN43928132;     jGzdbtVpfIRN43928132 = jGzdbtVpfIRN46334903;     jGzdbtVpfIRN46334903 = jGzdbtVpfIRN72598975;     jGzdbtVpfIRN72598975 = jGzdbtVpfIRN34441099;     jGzdbtVpfIRN34441099 = jGzdbtVpfIRN64125352;     jGzdbtVpfIRN64125352 = jGzdbtVpfIRN35519799;     jGzdbtVpfIRN35519799 = jGzdbtVpfIRN73633614;     jGzdbtVpfIRN73633614 = jGzdbtVpfIRN3473392;     jGzdbtVpfIRN3473392 = jGzdbtVpfIRN65046199;     jGzdbtVpfIRN65046199 = jGzdbtVpfIRN95718161;     jGzdbtVpfIRN95718161 = jGzdbtVpfIRN11536270;     jGzdbtVpfIRN11536270 = jGzdbtVpfIRN5211787;     jGzdbtVpfIRN5211787 = jGzdbtVpfIRN9164732;     jGzdbtVpfIRN9164732 = jGzdbtVpfIRN30135312;     jGzdbtVpfIRN30135312 = jGzdbtVpfIRN19446575;     jGzdbtVpfIRN19446575 = jGzdbtVpfIRN36788144;     jGzdbtVpfIRN36788144 = jGzdbtVpfIRN28835254;     jGzdbtVpfIRN28835254 = jGzdbtVpfIRN8964534;     jGzdbtVpfIRN8964534 = jGzdbtVpfIRN65530787;     jGzdbtVpfIRN65530787 = jGzdbtVpfIRN15989444;     jGzdbtVpfIRN15989444 = jGzdbtVpfIRN32012944;     jGzdbtVpfIRN32012944 = jGzdbtVpfIRN52756194;     jGzdbtVpfIRN52756194 = jGzdbtVpfIRN15154981;     jGzdbtVpfIRN15154981 = jGzdbtVpfIRN5564251;     jGzdbtVpfIRN5564251 = jGzdbtVpfIRN2483431;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zjmCUtLbYkgYdCUoCgfpQh53006299() {     long hENXduOMFbQb62079527 = -569038750;    long hENXduOMFbQb48770717 = -855192307;    long hENXduOMFbQb27707902 = -31835686;    long hENXduOMFbQb77355874 = -300835730;    long hENXduOMFbQb70860576 = -835276812;    long hENXduOMFbQb96873531 = -101180034;    long hENXduOMFbQb46845247 = -669600996;    long hENXduOMFbQb12010162 = -129407572;    long hENXduOMFbQb67965599 = -566291574;    long hENXduOMFbQb83498737 = -515119003;    long hENXduOMFbQb42678778 = -222515847;    long hENXduOMFbQb77351326 = 12844702;    long hENXduOMFbQb84515914 = -326552409;    long hENXduOMFbQb51468299 = -22067847;    long hENXduOMFbQb81232739 = -218072380;    long hENXduOMFbQb71701748 = -568267779;    long hENXduOMFbQb45021299 = -467288613;    long hENXduOMFbQb77819969 = -979485287;    long hENXduOMFbQb10298546 = -153073718;    long hENXduOMFbQb88624666 = -89333487;    long hENXduOMFbQb24966355 = -158467;    long hENXduOMFbQb19860662 = -152962552;    long hENXduOMFbQb92406703 = -950041256;    long hENXduOMFbQb30144495 = -765512077;    long hENXduOMFbQb42826977 = -478337845;    long hENXduOMFbQb46724710 = -297749042;    long hENXduOMFbQb55461672 = 54863973;    long hENXduOMFbQb99061803 = -653766322;    long hENXduOMFbQb72054845 = -330673067;    long hENXduOMFbQb37938885 = -373865294;    long hENXduOMFbQb86663545 = -88004629;    long hENXduOMFbQb72898077 = -414326687;    long hENXduOMFbQb19328621 = -636967732;    long hENXduOMFbQb4007078 = -864501952;    long hENXduOMFbQb86185040 = -929075528;    long hENXduOMFbQb45086461 = -561240783;    long hENXduOMFbQb52712080 = -844366084;    long hENXduOMFbQb41826736 = -606257777;    long hENXduOMFbQb35240024 = -745729427;    long hENXduOMFbQb95431250 = -215452394;    long hENXduOMFbQb89743386 = -75878414;    long hENXduOMFbQb41006500 = 97153747;    long hENXduOMFbQb48322174 = -542496108;    long hENXduOMFbQb28119481 = -649242538;    long hENXduOMFbQb93803595 = -193856231;    long hENXduOMFbQb97201001 = 63102209;    long hENXduOMFbQb93673172 = 33187801;    long hENXduOMFbQb53298196 = -797655936;    long hENXduOMFbQb99706667 = -559781892;    long hENXduOMFbQb33964504 = -837518916;    long hENXduOMFbQb84905469 = 28847985;    long hENXduOMFbQb72616219 = 91048311;    long hENXduOMFbQb94012060 = -545676229;    long hENXduOMFbQb38309319 = -466539331;    long hENXduOMFbQb28039945 = -635589694;    long hENXduOMFbQb42218866 = -316076198;    long hENXduOMFbQb56364014 = -905151052;    long hENXduOMFbQb97563407 = -266323609;    long hENXduOMFbQb34528898 = -822497885;    long hENXduOMFbQb24135867 = -437527771;    long hENXduOMFbQb41411859 = -56044007;    long hENXduOMFbQb47783444 = 84165325;    long hENXduOMFbQb39955316 = -798734505;    long hENXduOMFbQb30026714 = -92426281;    long hENXduOMFbQb96835191 = -327114375;    long hENXduOMFbQb69780701 = -808189161;    long hENXduOMFbQb58022706 = -350187566;    long hENXduOMFbQb80508836 = -462050458;    long hENXduOMFbQb65283259 = -92992319;    long hENXduOMFbQb36146279 = -656831598;    long hENXduOMFbQb18989669 = -723901695;    long hENXduOMFbQb3194563 = -861030837;    long hENXduOMFbQb42579946 = -133755860;    long hENXduOMFbQb14867295 = -937621325;    long hENXduOMFbQb98881279 = 86544927;    long hENXduOMFbQb83959854 = 2687786;    long hENXduOMFbQb71538488 = -610466444;    long hENXduOMFbQb64287223 = -200798718;    long hENXduOMFbQb36340899 = -471655846;    long hENXduOMFbQb45625975 = -441440055;    long hENXduOMFbQb53051537 = -230936844;    long hENXduOMFbQb2163476 = -147480092;    long hENXduOMFbQb99355135 = 6015570;    long hENXduOMFbQb38090342 = -493154151;    long hENXduOMFbQb53033416 = -302713279;    long hENXduOMFbQb14047327 = -79052940;    long hENXduOMFbQb78886016 = -868650458;    long hENXduOMFbQb81019301 = -70428402;    long hENXduOMFbQb75967132 = -128912258;    long hENXduOMFbQb43966175 = -512999331;    long hENXduOMFbQb88722446 = -656089731;    long hENXduOMFbQb55148672 = -478042476;    long hENXduOMFbQb7297838 = -783759893;    long hENXduOMFbQb11104158 = -208201657;    long hENXduOMFbQb54019391 = -59408387;    long hENXduOMFbQb41959943 = -60043740;    long hENXduOMFbQb1051185 = -104111748;    long hENXduOMFbQb18295460 = -350069828;    long hENXduOMFbQb31284290 = -222128164;    long hENXduOMFbQb24022895 = -569038750;     hENXduOMFbQb62079527 = hENXduOMFbQb48770717;     hENXduOMFbQb48770717 = hENXduOMFbQb27707902;     hENXduOMFbQb27707902 = hENXduOMFbQb77355874;     hENXduOMFbQb77355874 = hENXduOMFbQb70860576;     hENXduOMFbQb70860576 = hENXduOMFbQb96873531;     hENXduOMFbQb96873531 = hENXduOMFbQb46845247;     hENXduOMFbQb46845247 = hENXduOMFbQb12010162;     hENXduOMFbQb12010162 = hENXduOMFbQb67965599;     hENXduOMFbQb67965599 = hENXduOMFbQb83498737;     hENXduOMFbQb83498737 = hENXduOMFbQb42678778;     hENXduOMFbQb42678778 = hENXduOMFbQb77351326;     hENXduOMFbQb77351326 = hENXduOMFbQb84515914;     hENXduOMFbQb84515914 = hENXduOMFbQb51468299;     hENXduOMFbQb51468299 = hENXduOMFbQb81232739;     hENXduOMFbQb81232739 = hENXduOMFbQb71701748;     hENXduOMFbQb71701748 = hENXduOMFbQb45021299;     hENXduOMFbQb45021299 = hENXduOMFbQb77819969;     hENXduOMFbQb77819969 = hENXduOMFbQb10298546;     hENXduOMFbQb10298546 = hENXduOMFbQb88624666;     hENXduOMFbQb88624666 = hENXduOMFbQb24966355;     hENXduOMFbQb24966355 = hENXduOMFbQb19860662;     hENXduOMFbQb19860662 = hENXduOMFbQb92406703;     hENXduOMFbQb92406703 = hENXduOMFbQb30144495;     hENXduOMFbQb30144495 = hENXduOMFbQb42826977;     hENXduOMFbQb42826977 = hENXduOMFbQb46724710;     hENXduOMFbQb46724710 = hENXduOMFbQb55461672;     hENXduOMFbQb55461672 = hENXduOMFbQb99061803;     hENXduOMFbQb99061803 = hENXduOMFbQb72054845;     hENXduOMFbQb72054845 = hENXduOMFbQb37938885;     hENXduOMFbQb37938885 = hENXduOMFbQb86663545;     hENXduOMFbQb86663545 = hENXduOMFbQb72898077;     hENXduOMFbQb72898077 = hENXduOMFbQb19328621;     hENXduOMFbQb19328621 = hENXduOMFbQb4007078;     hENXduOMFbQb4007078 = hENXduOMFbQb86185040;     hENXduOMFbQb86185040 = hENXduOMFbQb45086461;     hENXduOMFbQb45086461 = hENXduOMFbQb52712080;     hENXduOMFbQb52712080 = hENXduOMFbQb41826736;     hENXduOMFbQb41826736 = hENXduOMFbQb35240024;     hENXduOMFbQb35240024 = hENXduOMFbQb95431250;     hENXduOMFbQb95431250 = hENXduOMFbQb89743386;     hENXduOMFbQb89743386 = hENXduOMFbQb41006500;     hENXduOMFbQb41006500 = hENXduOMFbQb48322174;     hENXduOMFbQb48322174 = hENXduOMFbQb28119481;     hENXduOMFbQb28119481 = hENXduOMFbQb93803595;     hENXduOMFbQb93803595 = hENXduOMFbQb97201001;     hENXduOMFbQb97201001 = hENXduOMFbQb93673172;     hENXduOMFbQb93673172 = hENXduOMFbQb53298196;     hENXduOMFbQb53298196 = hENXduOMFbQb99706667;     hENXduOMFbQb99706667 = hENXduOMFbQb33964504;     hENXduOMFbQb33964504 = hENXduOMFbQb84905469;     hENXduOMFbQb84905469 = hENXduOMFbQb72616219;     hENXduOMFbQb72616219 = hENXduOMFbQb94012060;     hENXduOMFbQb94012060 = hENXduOMFbQb38309319;     hENXduOMFbQb38309319 = hENXduOMFbQb28039945;     hENXduOMFbQb28039945 = hENXduOMFbQb42218866;     hENXduOMFbQb42218866 = hENXduOMFbQb56364014;     hENXduOMFbQb56364014 = hENXduOMFbQb97563407;     hENXduOMFbQb97563407 = hENXduOMFbQb34528898;     hENXduOMFbQb34528898 = hENXduOMFbQb24135867;     hENXduOMFbQb24135867 = hENXduOMFbQb41411859;     hENXduOMFbQb41411859 = hENXduOMFbQb47783444;     hENXduOMFbQb47783444 = hENXduOMFbQb39955316;     hENXduOMFbQb39955316 = hENXduOMFbQb30026714;     hENXduOMFbQb30026714 = hENXduOMFbQb96835191;     hENXduOMFbQb96835191 = hENXduOMFbQb69780701;     hENXduOMFbQb69780701 = hENXduOMFbQb58022706;     hENXduOMFbQb58022706 = hENXduOMFbQb80508836;     hENXduOMFbQb80508836 = hENXduOMFbQb65283259;     hENXduOMFbQb65283259 = hENXduOMFbQb36146279;     hENXduOMFbQb36146279 = hENXduOMFbQb18989669;     hENXduOMFbQb18989669 = hENXduOMFbQb3194563;     hENXduOMFbQb3194563 = hENXduOMFbQb42579946;     hENXduOMFbQb42579946 = hENXduOMFbQb14867295;     hENXduOMFbQb14867295 = hENXduOMFbQb98881279;     hENXduOMFbQb98881279 = hENXduOMFbQb83959854;     hENXduOMFbQb83959854 = hENXduOMFbQb71538488;     hENXduOMFbQb71538488 = hENXduOMFbQb64287223;     hENXduOMFbQb64287223 = hENXduOMFbQb36340899;     hENXduOMFbQb36340899 = hENXduOMFbQb45625975;     hENXduOMFbQb45625975 = hENXduOMFbQb53051537;     hENXduOMFbQb53051537 = hENXduOMFbQb2163476;     hENXduOMFbQb2163476 = hENXduOMFbQb99355135;     hENXduOMFbQb99355135 = hENXduOMFbQb38090342;     hENXduOMFbQb38090342 = hENXduOMFbQb53033416;     hENXduOMFbQb53033416 = hENXduOMFbQb14047327;     hENXduOMFbQb14047327 = hENXduOMFbQb78886016;     hENXduOMFbQb78886016 = hENXduOMFbQb81019301;     hENXduOMFbQb81019301 = hENXduOMFbQb75967132;     hENXduOMFbQb75967132 = hENXduOMFbQb43966175;     hENXduOMFbQb43966175 = hENXduOMFbQb88722446;     hENXduOMFbQb88722446 = hENXduOMFbQb55148672;     hENXduOMFbQb55148672 = hENXduOMFbQb7297838;     hENXduOMFbQb7297838 = hENXduOMFbQb11104158;     hENXduOMFbQb11104158 = hENXduOMFbQb54019391;     hENXduOMFbQb54019391 = hENXduOMFbQb41959943;     hENXduOMFbQb41959943 = hENXduOMFbQb1051185;     hENXduOMFbQb1051185 = hENXduOMFbQb18295460;     hENXduOMFbQb18295460 = hENXduOMFbQb31284290;     hENXduOMFbQb31284290 = hENXduOMFbQb24022895;     hENXduOMFbQb24022895 = hENXduOMFbQb62079527;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void yGPrXJPQVrEZzY65551488() {     long XUvDWIOaFvZW81547697 = -982169961;    long XUvDWIOaFvZW1794582 = -301070304;    long XUvDWIOaFvZW44544894 = -783464301;    long XUvDWIOaFvZW96003023 = -117409993;    long XUvDWIOaFvZW71307092 = -361549228;    long XUvDWIOaFvZW22465606 = 8335198;    long XUvDWIOaFvZW91677125 = -12907226;    long XUvDWIOaFvZW77260395 = -223215538;    long XUvDWIOaFvZW28652396 = -194482953;    long XUvDWIOaFvZW61427460 = -520705049;    long XUvDWIOaFvZW96902041 = -655506147;    long XUvDWIOaFvZW80845940 = 13541998;    long XUvDWIOaFvZW74887573 = -750909685;    long XUvDWIOaFvZW59884339 = -564353572;    long XUvDWIOaFvZW41759201 = -516156171;    long XUvDWIOaFvZW37917397 = 68540288;    long XUvDWIOaFvZW50983412 = -639063295;    long XUvDWIOaFvZW1882722 = -730240005;    long XUvDWIOaFvZW9933425 = -530278479;    long XUvDWIOaFvZW69235968 = -806869943;    long XUvDWIOaFvZW37422427 = -606370792;    long XUvDWIOaFvZW34842745 = -664765765;    long XUvDWIOaFvZW60579709 = -147615874;    long XUvDWIOaFvZW47866163 = -402056069;    long XUvDWIOaFvZW54030466 = -772637955;    long XUvDWIOaFvZW51492171 = 16455740;    long XUvDWIOaFvZW39389803 = -710286959;    long XUvDWIOaFvZW49853478 = -817499601;    long XUvDWIOaFvZW13799803 = -344584213;    long XUvDWIOaFvZW22645739 = -465303988;    long XUvDWIOaFvZW16467631 = 46669279;    long XUvDWIOaFvZW12477388 = -978675705;    long XUvDWIOaFvZW30804724 = -92175499;    long XUvDWIOaFvZW62763585 = -69105158;    long XUvDWIOaFvZW26115377 = -991778335;    long XUvDWIOaFvZW81152398 = -864809391;    long XUvDWIOaFvZW21095530 = -271242159;    long XUvDWIOaFvZW83309210 = -683466593;    long XUvDWIOaFvZW2553349 = -110144252;    long XUvDWIOaFvZW16712987 = -211983490;    long XUvDWIOaFvZW31225444 = -585664710;    long XUvDWIOaFvZW52865633 = -141742479;    long XUvDWIOaFvZW19455415 = -490297906;    long XUvDWIOaFvZW11505020 = 1684801;    long XUvDWIOaFvZW73832006 = -470979194;    long XUvDWIOaFvZW51662129 = -474229212;    long XUvDWIOaFvZW75663052 = -980505521;    long XUvDWIOaFvZW53454026 = -980943250;    long XUvDWIOaFvZW40842258 = -573721131;    long XUvDWIOaFvZW74862846 = -598531261;    long XUvDWIOaFvZW59341038 = -377516946;    long XUvDWIOaFvZW89065079 = -286304549;    long XUvDWIOaFvZW63837207 = -221785190;    long XUvDWIOaFvZW11239348 = -461132968;    long XUvDWIOaFvZW28129062 = -410148329;    long XUvDWIOaFvZW46704953 = -217404197;    long XUvDWIOaFvZW41214872 = -53454430;    long XUvDWIOaFvZW96678730 = -281408232;    long XUvDWIOaFvZW41972558 = -344772038;    long XUvDWIOaFvZW19814922 = -278004968;    long XUvDWIOaFvZW83075802 = -281377844;    long XUvDWIOaFvZW41823648 = -195407626;    long XUvDWIOaFvZW63460592 = -878631325;    long XUvDWIOaFvZW6006658 = -729178965;    long XUvDWIOaFvZW44959829 = -467374328;    long XUvDWIOaFvZW84424654 = -676830443;    long XUvDWIOaFvZW50041216 = -894282504;    long XUvDWIOaFvZW12123989 = -581804528;    long XUvDWIOaFvZW33768963 = -572575238;    long XUvDWIOaFvZW60606803 = -651346781;    long XUvDWIOaFvZW16821867 = -660217554;    long XUvDWIOaFvZW67674202 = -955596703;    long XUvDWIOaFvZW99329372 = -520095753;    long XUvDWIOaFvZW93220437 = -218294989;    long XUvDWIOaFvZW38010525 = -121205234;    long XUvDWIOaFvZW84556793 = -364628314;    long XUvDWIOaFvZW15387330 = -74467860;    long XUvDWIOaFvZW49074690 = -49300676;    long XUvDWIOaFvZW74034156 = -931076875;    long XUvDWIOaFvZW2368337 = -198408743;    long XUvDWIOaFvZW75829119 = -3038739;    long XUvDWIOaFvZW85935776 = -729343709;    long XUvDWIOaFvZW9011220 = -143778470;    long XUvDWIOaFvZW38936957 = -746052952;    long XUvDWIOaFvZW63304701 = 12212957;    long XUvDWIOaFvZW27402552 = -667026173;    long XUvDWIOaFvZW48640180 = -656890516;    long XUvDWIOaFvZW19565377 = -631042532;    long XUvDWIOaFvZW34634523 = -658956830;    long XUvDWIOaFvZW79410423 = -674374138;    long XUvDWIOaFvZW39937526 = -711354962;    long XUvDWIOaFvZW24416800 = -989833927;    long XUvDWIOaFvZW41336653 = -238694555;    long XUvDWIOaFvZW82738427 = -832139284;    long XUvDWIOaFvZW33637185 = -930605647;    long XUvDWIOaFvZW89401796 = -290257084;    long XUvDWIOaFvZW89405040 = -263111154;    long XUvDWIOaFvZW13448758 = -761118941;    long XUvDWIOaFvZW66545190 = -530940871;    long XUvDWIOaFvZW89407352 = -982169961;     XUvDWIOaFvZW81547697 = XUvDWIOaFvZW1794582;     XUvDWIOaFvZW1794582 = XUvDWIOaFvZW44544894;     XUvDWIOaFvZW44544894 = XUvDWIOaFvZW96003023;     XUvDWIOaFvZW96003023 = XUvDWIOaFvZW71307092;     XUvDWIOaFvZW71307092 = XUvDWIOaFvZW22465606;     XUvDWIOaFvZW22465606 = XUvDWIOaFvZW91677125;     XUvDWIOaFvZW91677125 = XUvDWIOaFvZW77260395;     XUvDWIOaFvZW77260395 = XUvDWIOaFvZW28652396;     XUvDWIOaFvZW28652396 = XUvDWIOaFvZW61427460;     XUvDWIOaFvZW61427460 = XUvDWIOaFvZW96902041;     XUvDWIOaFvZW96902041 = XUvDWIOaFvZW80845940;     XUvDWIOaFvZW80845940 = XUvDWIOaFvZW74887573;     XUvDWIOaFvZW74887573 = XUvDWIOaFvZW59884339;     XUvDWIOaFvZW59884339 = XUvDWIOaFvZW41759201;     XUvDWIOaFvZW41759201 = XUvDWIOaFvZW37917397;     XUvDWIOaFvZW37917397 = XUvDWIOaFvZW50983412;     XUvDWIOaFvZW50983412 = XUvDWIOaFvZW1882722;     XUvDWIOaFvZW1882722 = XUvDWIOaFvZW9933425;     XUvDWIOaFvZW9933425 = XUvDWIOaFvZW69235968;     XUvDWIOaFvZW69235968 = XUvDWIOaFvZW37422427;     XUvDWIOaFvZW37422427 = XUvDWIOaFvZW34842745;     XUvDWIOaFvZW34842745 = XUvDWIOaFvZW60579709;     XUvDWIOaFvZW60579709 = XUvDWIOaFvZW47866163;     XUvDWIOaFvZW47866163 = XUvDWIOaFvZW54030466;     XUvDWIOaFvZW54030466 = XUvDWIOaFvZW51492171;     XUvDWIOaFvZW51492171 = XUvDWIOaFvZW39389803;     XUvDWIOaFvZW39389803 = XUvDWIOaFvZW49853478;     XUvDWIOaFvZW49853478 = XUvDWIOaFvZW13799803;     XUvDWIOaFvZW13799803 = XUvDWIOaFvZW22645739;     XUvDWIOaFvZW22645739 = XUvDWIOaFvZW16467631;     XUvDWIOaFvZW16467631 = XUvDWIOaFvZW12477388;     XUvDWIOaFvZW12477388 = XUvDWIOaFvZW30804724;     XUvDWIOaFvZW30804724 = XUvDWIOaFvZW62763585;     XUvDWIOaFvZW62763585 = XUvDWIOaFvZW26115377;     XUvDWIOaFvZW26115377 = XUvDWIOaFvZW81152398;     XUvDWIOaFvZW81152398 = XUvDWIOaFvZW21095530;     XUvDWIOaFvZW21095530 = XUvDWIOaFvZW83309210;     XUvDWIOaFvZW83309210 = XUvDWIOaFvZW2553349;     XUvDWIOaFvZW2553349 = XUvDWIOaFvZW16712987;     XUvDWIOaFvZW16712987 = XUvDWIOaFvZW31225444;     XUvDWIOaFvZW31225444 = XUvDWIOaFvZW52865633;     XUvDWIOaFvZW52865633 = XUvDWIOaFvZW19455415;     XUvDWIOaFvZW19455415 = XUvDWIOaFvZW11505020;     XUvDWIOaFvZW11505020 = XUvDWIOaFvZW73832006;     XUvDWIOaFvZW73832006 = XUvDWIOaFvZW51662129;     XUvDWIOaFvZW51662129 = XUvDWIOaFvZW75663052;     XUvDWIOaFvZW75663052 = XUvDWIOaFvZW53454026;     XUvDWIOaFvZW53454026 = XUvDWIOaFvZW40842258;     XUvDWIOaFvZW40842258 = XUvDWIOaFvZW74862846;     XUvDWIOaFvZW74862846 = XUvDWIOaFvZW59341038;     XUvDWIOaFvZW59341038 = XUvDWIOaFvZW89065079;     XUvDWIOaFvZW89065079 = XUvDWIOaFvZW63837207;     XUvDWIOaFvZW63837207 = XUvDWIOaFvZW11239348;     XUvDWIOaFvZW11239348 = XUvDWIOaFvZW28129062;     XUvDWIOaFvZW28129062 = XUvDWIOaFvZW46704953;     XUvDWIOaFvZW46704953 = XUvDWIOaFvZW41214872;     XUvDWIOaFvZW41214872 = XUvDWIOaFvZW96678730;     XUvDWIOaFvZW96678730 = XUvDWIOaFvZW41972558;     XUvDWIOaFvZW41972558 = XUvDWIOaFvZW19814922;     XUvDWIOaFvZW19814922 = XUvDWIOaFvZW83075802;     XUvDWIOaFvZW83075802 = XUvDWIOaFvZW41823648;     XUvDWIOaFvZW41823648 = XUvDWIOaFvZW63460592;     XUvDWIOaFvZW63460592 = XUvDWIOaFvZW6006658;     XUvDWIOaFvZW6006658 = XUvDWIOaFvZW44959829;     XUvDWIOaFvZW44959829 = XUvDWIOaFvZW84424654;     XUvDWIOaFvZW84424654 = XUvDWIOaFvZW50041216;     XUvDWIOaFvZW50041216 = XUvDWIOaFvZW12123989;     XUvDWIOaFvZW12123989 = XUvDWIOaFvZW33768963;     XUvDWIOaFvZW33768963 = XUvDWIOaFvZW60606803;     XUvDWIOaFvZW60606803 = XUvDWIOaFvZW16821867;     XUvDWIOaFvZW16821867 = XUvDWIOaFvZW67674202;     XUvDWIOaFvZW67674202 = XUvDWIOaFvZW99329372;     XUvDWIOaFvZW99329372 = XUvDWIOaFvZW93220437;     XUvDWIOaFvZW93220437 = XUvDWIOaFvZW38010525;     XUvDWIOaFvZW38010525 = XUvDWIOaFvZW84556793;     XUvDWIOaFvZW84556793 = XUvDWIOaFvZW15387330;     XUvDWIOaFvZW15387330 = XUvDWIOaFvZW49074690;     XUvDWIOaFvZW49074690 = XUvDWIOaFvZW74034156;     XUvDWIOaFvZW74034156 = XUvDWIOaFvZW2368337;     XUvDWIOaFvZW2368337 = XUvDWIOaFvZW75829119;     XUvDWIOaFvZW75829119 = XUvDWIOaFvZW85935776;     XUvDWIOaFvZW85935776 = XUvDWIOaFvZW9011220;     XUvDWIOaFvZW9011220 = XUvDWIOaFvZW38936957;     XUvDWIOaFvZW38936957 = XUvDWIOaFvZW63304701;     XUvDWIOaFvZW63304701 = XUvDWIOaFvZW27402552;     XUvDWIOaFvZW27402552 = XUvDWIOaFvZW48640180;     XUvDWIOaFvZW48640180 = XUvDWIOaFvZW19565377;     XUvDWIOaFvZW19565377 = XUvDWIOaFvZW34634523;     XUvDWIOaFvZW34634523 = XUvDWIOaFvZW79410423;     XUvDWIOaFvZW79410423 = XUvDWIOaFvZW39937526;     XUvDWIOaFvZW39937526 = XUvDWIOaFvZW24416800;     XUvDWIOaFvZW24416800 = XUvDWIOaFvZW41336653;     XUvDWIOaFvZW41336653 = XUvDWIOaFvZW82738427;     XUvDWIOaFvZW82738427 = XUvDWIOaFvZW33637185;     XUvDWIOaFvZW33637185 = XUvDWIOaFvZW89401796;     XUvDWIOaFvZW89401796 = XUvDWIOaFvZW89405040;     XUvDWIOaFvZW89405040 = XUvDWIOaFvZW13448758;     XUvDWIOaFvZW13448758 = XUvDWIOaFvZW66545190;     XUvDWIOaFvZW66545190 = XUvDWIOaFvZW89407352;     XUvDWIOaFvZW89407352 = XUvDWIOaFvZW81547697;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GlwGGPneZwzjft25854146() {     long jCsWJTeWakFk71674006 = 59073838;    long jCsWJTeWakFk84919646 = -675996474;    long jCsWJTeWakFk40037593 = -920258762;    long jCsWJTeWakFk69501598 = -303581815;    long jCsWJTeWakFk84363828 = -302872670;    long jCsWJTeWakFk3252010 = -984297910;    long jCsWJTeWakFk86340563 = -750452699;    long jCsWJTeWakFk30138958 = -959663276;    long jCsWJTeWakFk52464084 = -202375591;    long jCsWJTeWakFk65683130 = -90579574;    long jCsWJTeWakFk73053860 = -63926305;    long jCsWJTeWakFk15595448 = -566046138;    long jCsWJTeWakFk13233706 = 36854454;    long jCsWJTeWakFk98303192 = -562514457;    long jCsWJTeWakFk39833573 = 98722886;    long jCsWJTeWakFk62097139 = -731839583;    long jCsWJTeWakFk94945592 = -900408536;    long jCsWJTeWakFk23238434 = -73089297;    long jCsWJTeWakFk70847816 = -996688915;    long jCsWJTeWakFk36560217 = -354748253;    long jCsWJTeWakFk25344829 = -310795885;    long jCsWJTeWakFk32924327 = -997862401;    long jCsWJTeWakFk93818127 = -554075795;    long jCsWJTeWakFk55787260 = -850080444;    long jCsWJTeWakFk915654 = -316148899;    long jCsWJTeWakFk70283136 = -959417995;    long jCsWJTeWakFk61357138 = -469815953;    long jCsWJTeWakFk73023853 = -877389659;    long jCsWJTeWakFk75008800 = -6783261;    long jCsWJTeWakFk70434819 = -339706380;    long jCsWJTeWakFk19931034 = -279997265;    long jCsWJTeWakFk11844302 = -379500125;    long jCsWJTeWakFk39773765 = -392400659;    long jCsWJTeWakFk86602229 = -60556316;    long jCsWJTeWakFk61711911 = -642113995;    long jCsWJTeWakFk34383405 = -67838801;    long jCsWJTeWakFk21329099 = -887058064;    long jCsWJTeWakFk7666494 = -549525836;    long jCsWJTeWakFk13086366 = -917606298;    long jCsWJTeWakFk61225128 = -116691263;    long jCsWJTeWakFk44925117 = -291525986;    long jCsWJTeWakFk7510097 = 43764308;    long jCsWJTeWakFk79272256 = -965723501;    long jCsWJTeWakFk42166960 = -962398388;    long jCsWJTeWakFk65796424 = -583489150;    long jCsWJTeWakFk72101122 = -957853117;    long jCsWJTeWakFk56086343 = -528988021;    long jCsWJTeWakFk43840486 = 92400497;    long jCsWJTeWakFk68760912 = 90339523;    long jCsWJTeWakFk4143252 = 44472402;    long jCsWJTeWakFk88706561 = -751898991;    long jCsWJTeWakFk32838187 = -250731382;    long jCsWJTeWakFk13289663 = 66361815;    long jCsWJTeWakFk64146409 = -584688249;    long jCsWJTeWakFk509317 = -538748600;    long jCsWJTeWakFk38749679 = 56936238;    long jCsWJTeWakFk91101518 = -21920679;    long jCsWJTeWakFk84250332 = 29821682;    long jCsWJTeWakFk68585944 = -987432916;    long jCsWJTeWakFk14080692 = -343454675;    long jCsWJTeWakFk41894872 = -414481958;    long jCsWJTeWakFk13316711 = -873063040;    long jCsWJTeWakFk55130158 = -852880016;    long jCsWJTeWakFk82029265 = -862669212;    long jCsWJTeWakFk45752097 = -810582310;    long jCsWJTeWakFk61209559 = -684426180;    long jCsWJTeWakFk75821682 = -73645479;    long jCsWJTeWakFk26631477 = -902589230;    long jCsWJTeWakFk36591282 = -920400462;    long jCsWJTeWakFk5450168 = -833438313;    long jCsWJTeWakFk40768040 = -844781519;    long jCsWJTeWakFk87279099 = -250882700;    long jCsWJTeWakFk10152069 = -155483000;    long jCsWJTeWakFk9622688 = -779997652;    long jCsWJTeWakFk91635099 = 36777732;    long jCsWJTeWakFk17834733 = -254560193;    long jCsWJTeWakFk53652071 = 67861100;    long jCsWJTeWakFk51651167 = -591677408;    long jCsWJTeWakFk89990836 = -166591295;    long jCsWJTeWakFk28814531 = -358295782;    long jCsWJTeWakFk14196794 = -330429974;    long jCsWJTeWakFk17516653 = -462216450;    long jCsWJTeWakFk4262941 = -867729182;    long jCsWJTeWakFk70865548 = 48744337;    long jCsWJTeWakFk81728257 = -587807389;    long jCsWJTeWakFk87092847 = 70734116;    long jCsWJTeWakFk98554639 = -345861940;    long jCsWJTeWakFk75627355 = -807712410;    long jCsWJTeWakFk86092912 = -521807716;    long jCsWJTeWakFk22962232 = -599050234;    long jCsWJTeWakFk43281886 = 54081877;    long jCsWJTeWakFk37078767 = -816879746;    long jCsWJTeWakFk39080549 = -562092921;    long jCsWJTeWakFk99005673 = -474151623;    long jCsWJTeWakFk19330257 = -702209306;    long jCsWJTeWakFk31608407 = -418462946;    long jCsWJTeWakFk52379938 = -103355676;    long jCsWJTeWakFk97242991 = -3054290;    long jCsWJTeWakFk96414863 = -51816079;    long jCsWJTeWakFk4586866 = 59073838;     jCsWJTeWakFk71674006 = jCsWJTeWakFk84919646;     jCsWJTeWakFk84919646 = jCsWJTeWakFk40037593;     jCsWJTeWakFk40037593 = jCsWJTeWakFk69501598;     jCsWJTeWakFk69501598 = jCsWJTeWakFk84363828;     jCsWJTeWakFk84363828 = jCsWJTeWakFk3252010;     jCsWJTeWakFk3252010 = jCsWJTeWakFk86340563;     jCsWJTeWakFk86340563 = jCsWJTeWakFk30138958;     jCsWJTeWakFk30138958 = jCsWJTeWakFk52464084;     jCsWJTeWakFk52464084 = jCsWJTeWakFk65683130;     jCsWJTeWakFk65683130 = jCsWJTeWakFk73053860;     jCsWJTeWakFk73053860 = jCsWJTeWakFk15595448;     jCsWJTeWakFk15595448 = jCsWJTeWakFk13233706;     jCsWJTeWakFk13233706 = jCsWJTeWakFk98303192;     jCsWJTeWakFk98303192 = jCsWJTeWakFk39833573;     jCsWJTeWakFk39833573 = jCsWJTeWakFk62097139;     jCsWJTeWakFk62097139 = jCsWJTeWakFk94945592;     jCsWJTeWakFk94945592 = jCsWJTeWakFk23238434;     jCsWJTeWakFk23238434 = jCsWJTeWakFk70847816;     jCsWJTeWakFk70847816 = jCsWJTeWakFk36560217;     jCsWJTeWakFk36560217 = jCsWJTeWakFk25344829;     jCsWJTeWakFk25344829 = jCsWJTeWakFk32924327;     jCsWJTeWakFk32924327 = jCsWJTeWakFk93818127;     jCsWJTeWakFk93818127 = jCsWJTeWakFk55787260;     jCsWJTeWakFk55787260 = jCsWJTeWakFk915654;     jCsWJTeWakFk915654 = jCsWJTeWakFk70283136;     jCsWJTeWakFk70283136 = jCsWJTeWakFk61357138;     jCsWJTeWakFk61357138 = jCsWJTeWakFk73023853;     jCsWJTeWakFk73023853 = jCsWJTeWakFk75008800;     jCsWJTeWakFk75008800 = jCsWJTeWakFk70434819;     jCsWJTeWakFk70434819 = jCsWJTeWakFk19931034;     jCsWJTeWakFk19931034 = jCsWJTeWakFk11844302;     jCsWJTeWakFk11844302 = jCsWJTeWakFk39773765;     jCsWJTeWakFk39773765 = jCsWJTeWakFk86602229;     jCsWJTeWakFk86602229 = jCsWJTeWakFk61711911;     jCsWJTeWakFk61711911 = jCsWJTeWakFk34383405;     jCsWJTeWakFk34383405 = jCsWJTeWakFk21329099;     jCsWJTeWakFk21329099 = jCsWJTeWakFk7666494;     jCsWJTeWakFk7666494 = jCsWJTeWakFk13086366;     jCsWJTeWakFk13086366 = jCsWJTeWakFk61225128;     jCsWJTeWakFk61225128 = jCsWJTeWakFk44925117;     jCsWJTeWakFk44925117 = jCsWJTeWakFk7510097;     jCsWJTeWakFk7510097 = jCsWJTeWakFk79272256;     jCsWJTeWakFk79272256 = jCsWJTeWakFk42166960;     jCsWJTeWakFk42166960 = jCsWJTeWakFk65796424;     jCsWJTeWakFk65796424 = jCsWJTeWakFk72101122;     jCsWJTeWakFk72101122 = jCsWJTeWakFk56086343;     jCsWJTeWakFk56086343 = jCsWJTeWakFk43840486;     jCsWJTeWakFk43840486 = jCsWJTeWakFk68760912;     jCsWJTeWakFk68760912 = jCsWJTeWakFk4143252;     jCsWJTeWakFk4143252 = jCsWJTeWakFk88706561;     jCsWJTeWakFk88706561 = jCsWJTeWakFk32838187;     jCsWJTeWakFk32838187 = jCsWJTeWakFk13289663;     jCsWJTeWakFk13289663 = jCsWJTeWakFk64146409;     jCsWJTeWakFk64146409 = jCsWJTeWakFk509317;     jCsWJTeWakFk509317 = jCsWJTeWakFk38749679;     jCsWJTeWakFk38749679 = jCsWJTeWakFk91101518;     jCsWJTeWakFk91101518 = jCsWJTeWakFk84250332;     jCsWJTeWakFk84250332 = jCsWJTeWakFk68585944;     jCsWJTeWakFk68585944 = jCsWJTeWakFk14080692;     jCsWJTeWakFk14080692 = jCsWJTeWakFk41894872;     jCsWJTeWakFk41894872 = jCsWJTeWakFk13316711;     jCsWJTeWakFk13316711 = jCsWJTeWakFk55130158;     jCsWJTeWakFk55130158 = jCsWJTeWakFk82029265;     jCsWJTeWakFk82029265 = jCsWJTeWakFk45752097;     jCsWJTeWakFk45752097 = jCsWJTeWakFk61209559;     jCsWJTeWakFk61209559 = jCsWJTeWakFk75821682;     jCsWJTeWakFk75821682 = jCsWJTeWakFk26631477;     jCsWJTeWakFk26631477 = jCsWJTeWakFk36591282;     jCsWJTeWakFk36591282 = jCsWJTeWakFk5450168;     jCsWJTeWakFk5450168 = jCsWJTeWakFk40768040;     jCsWJTeWakFk40768040 = jCsWJTeWakFk87279099;     jCsWJTeWakFk87279099 = jCsWJTeWakFk10152069;     jCsWJTeWakFk10152069 = jCsWJTeWakFk9622688;     jCsWJTeWakFk9622688 = jCsWJTeWakFk91635099;     jCsWJTeWakFk91635099 = jCsWJTeWakFk17834733;     jCsWJTeWakFk17834733 = jCsWJTeWakFk53652071;     jCsWJTeWakFk53652071 = jCsWJTeWakFk51651167;     jCsWJTeWakFk51651167 = jCsWJTeWakFk89990836;     jCsWJTeWakFk89990836 = jCsWJTeWakFk28814531;     jCsWJTeWakFk28814531 = jCsWJTeWakFk14196794;     jCsWJTeWakFk14196794 = jCsWJTeWakFk17516653;     jCsWJTeWakFk17516653 = jCsWJTeWakFk4262941;     jCsWJTeWakFk4262941 = jCsWJTeWakFk70865548;     jCsWJTeWakFk70865548 = jCsWJTeWakFk81728257;     jCsWJTeWakFk81728257 = jCsWJTeWakFk87092847;     jCsWJTeWakFk87092847 = jCsWJTeWakFk98554639;     jCsWJTeWakFk98554639 = jCsWJTeWakFk75627355;     jCsWJTeWakFk75627355 = jCsWJTeWakFk86092912;     jCsWJTeWakFk86092912 = jCsWJTeWakFk22962232;     jCsWJTeWakFk22962232 = jCsWJTeWakFk43281886;     jCsWJTeWakFk43281886 = jCsWJTeWakFk37078767;     jCsWJTeWakFk37078767 = jCsWJTeWakFk39080549;     jCsWJTeWakFk39080549 = jCsWJTeWakFk99005673;     jCsWJTeWakFk99005673 = jCsWJTeWakFk19330257;     jCsWJTeWakFk19330257 = jCsWJTeWakFk31608407;     jCsWJTeWakFk31608407 = jCsWJTeWakFk52379938;     jCsWJTeWakFk52379938 = jCsWJTeWakFk97242991;     jCsWJTeWakFk97242991 = jCsWJTeWakFk96414863;     jCsWJTeWakFk96414863 = jCsWJTeWakFk4586866;     jCsWJTeWakFk4586866 = jCsWJTeWakFk71674006;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tCZCZbDbiBQWVr38399334() {     long yJWgQzRBlIkj91142176 = -354057374;    long yJWgQzRBlIkj37943510 = -121874470;    long yJWgQzRBlIkj56874585 = -571887377;    long yJWgQzRBlIkj88148746 = -120156078;    long yJWgQzRBlIkj84810344 = -929145086;    long yJWgQzRBlIkj28844084 = -874782678;    long yJWgQzRBlIkj31172442 = -93758929;    long yJWgQzRBlIkj95389191 = 46528758;    long yJWgQzRBlIkj13150881 = -930566970;    long yJWgQzRBlIkj43611853 = -96165620;    long yJWgQzRBlIkj27277124 = -496916605;    long yJWgQzRBlIkj19090061 = -565348842;    long yJWgQzRBlIkj3605366 = -387502822;    long yJWgQzRBlIkj6719233 = -4800182;    long yJWgQzRBlIkj360034 = -199360905;    long yJWgQzRBlIkj28312788 = -95031516;    long yJWgQzRBlIkj907706 = 27816782;    long yJWgQzRBlIkj47301185 = -923844015;    long yJWgQzRBlIkj70482695 = -273893675;    long yJWgQzRBlIkj17171519 = 27715291;    long yJWgQzRBlIkj37800901 = -917008210;    long yJWgQzRBlIkj47906410 = -409665614;    long yJWgQzRBlIkj61991134 = -851650414;    long yJWgQzRBlIkj73508929 = -486624436;    long yJWgQzRBlIkj12119143 = -610449008;    long yJWgQzRBlIkj75050597 = -645213213;    long yJWgQzRBlIkj45285269 = -134966884;    long yJWgQzRBlIkj23815528 = 58877062;    long yJWgQzRBlIkj16753757 = -20694407;    long yJWgQzRBlIkj55141673 = -431145074;    long yJWgQzRBlIkj49735119 = -145323358;    long yJWgQzRBlIkj51423612 = -943849143;    long yJWgQzRBlIkj51249868 = -947608426;    long yJWgQzRBlIkj45358736 = -365159522;    long yJWgQzRBlIkj1642247 = -704816801;    long yJWgQzRBlIkj70449342 = -371407410;    long yJWgQzRBlIkj89712549 = -313934139;    long yJWgQzRBlIkj49148968 = -626734652;    long yJWgQzRBlIkj80399690 = -282021123;    long yJWgQzRBlIkj82506864 = -113222360;    long yJWgQzRBlIkj86407174 = -801312281;    long yJWgQzRBlIkj19369230 = -195131918;    long yJWgQzRBlIkj50405497 = -913525299;    long yJWgQzRBlIkj25552499 = -311471049;    long yJWgQzRBlIkj45824835 = -860612113;    long yJWgQzRBlIkj26562250 = -395184539;    long yJWgQzRBlIkj38076223 = -442681344;    long yJWgQzRBlIkj43996316 = -90886817;    long yJWgQzRBlIkj9896504 = 76400284;    long yJWgQzRBlIkj45041594 = -816539943;    long yJWgQzRBlIkj63142131 = -58263922;    long yJWgQzRBlIkj49287047 = -628084241;    long yJWgQzRBlIkj83114808 = -709747146;    long yJWgQzRBlIkj37076438 = -579281886;    long yJWgQzRBlIkj598434 = -313307235;    long yJWgQzRBlIkj43235767 = -944391761;    long yJWgQzRBlIkj75952376 = -270224057;    long yJWgQzRBlIkj83365655 = 14737059;    long yJWgQzRBlIkj76029604 = -509707070;    long yJWgQzRBlIkj9759747 = -183931873;    long yJWgQzRBlIkj83558815 = -639815794;    long yJWgQzRBlIkj7356914 = -52635991;    long yJWgQzRBlIkj78635434 = -932776836;    long yJWgQzRBlIkj58009208 = -399421896;    long yJWgQzRBlIkj93876734 = -950842263;    long yJWgQzRBlIkj75853512 = -553067462;    long yJWgQzRBlIkj67840192 = -617740417;    long yJWgQzRBlIkj58246629 = 77656700;    long yJWgQzRBlIkj5076987 = -299983382;    long yJWgQzRBlIkj29910692 = -827953496;    long yJWgQzRBlIkj38600238 = -781097378;    long yJWgQzRBlIkj51758738 = -345448566;    long yJWgQzRBlIkj66901495 = -541822893;    long yJWgQzRBlIkj87975830 = -60671316;    long yJWgQzRBlIkj30764345 = -170972428;    long yJWgQzRBlIkj18431672 = -621876293;    long yJWgQzRBlIkj97500912 = -496140315;    long yJWgQzRBlIkj36438635 = -440179366;    long yJWgQzRBlIkj27684094 = -626012324;    long yJWgQzRBlIkj85556893 = -115264470;    long yJWgQzRBlIkj36974375 = -102531870;    long yJWgQzRBlIkj1288954 = 55919933;    long yJWgQzRBlIkj13919025 = 82476777;    long yJWgQzRBlIkj71712163 = -204154464;    long yJWgQzRBlIkj91999542 = -272881152;    long yJWgQzRBlIkj448072 = -517239117;    long yJWgQzRBlIkj68308804 = -134101998;    long yJWgQzRBlIkj14173431 = -268326540;    long yJWgQzRBlIkj44760303 = 48147712;    long yJWgQzRBlIkj58406480 = -760425041;    long yJWgQzRBlIkj94496965 = -1183353;    long yJWgQzRBlIkj6346894 = -228671198;    long yJWgQzRBlIkj73119364 = -17027583;    long yJWgQzRBlIkj70639943 = 1910750;    long yJWgQzRBlIkj98948049 = -473406566;    long yJWgQzRBlIkj79050260 = -648676290;    long yJWgQzRBlIkj40733795 = -262355082;    long yJWgQzRBlIkj92396289 = -414103403;    long yJWgQzRBlIkj31675764 = -360628786;    long yJWgQzRBlIkj69971323 = -354057374;     yJWgQzRBlIkj91142176 = yJWgQzRBlIkj37943510;     yJWgQzRBlIkj37943510 = yJWgQzRBlIkj56874585;     yJWgQzRBlIkj56874585 = yJWgQzRBlIkj88148746;     yJWgQzRBlIkj88148746 = yJWgQzRBlIkj84810344;     yJWgQzRBlIkj84810344 = yJWgQzRBlIkj28844084;     yJWgQzRBlIkj28844084 = yJWgQzRBlIkj31172442;     yJWgQzRBlIkj31172442 = yJWgQzRBlIkj95389191;     yJWgQzRBlIkj95389191 = yJWgQzRBlIkj13150881;     yJWgQzRBlIkj13150881 = yJWgQzRBlIkj43611853;     yJWgQzRBlIkj43611853 = yJWgQzRBlIkj27277124;     yJWgQzRBlIkj27277124 = yJWgQzRBlIkj19090061;     yJWgQzRBlIkj19090061 = yJWgQzRBlIkj3605366;     yJWgQzRBlIkj3605366 = yJWgQzRBlIkj6719233;     yJWgQzRBlIkj6719233 = yJWgQzRBlIkj360034;     yJWgQzRBlIkj360034 = yJWgQzRBlIkj28312788;     yJWgQzRBlIkj28312788 = yJWgQzRBlIkj907706;     yJWgQzRBlIkj907706 = yJWgQzRBlIkj47301185;     yJWgQzRBlIkj47301185 = yJWgQzRBlIkj70482695;     yJWgQzRBlIkj70482695 = yJWgQzRBlIkj17171519;     yJWgQzRBlIkj17171519 = yJWgQzRBlIkj37800901;     yJWgQzRBlIkj37800901 = yJWgQzRBlIkj47906410;     yJWgQzRBlIkj47906410 = yJWgQzRBlIkj61991134;     yJWgQzRBlIkj61991134 = yJWgQzRBlIkj73508929;     yJWgQzRBlIkj73508929 = yJWgQzRBlIkj12119143;     yJWgQzRBlIkj12119143 = yJWgQzRBlIkj75050597;     yJWgQzRBlIkj75050597 = yJWgQzRBlIkj45285269;     yJWgQzRBlIkj45285269 = yJWgQzRBlIkj23815528;     yJWgQzRBlIkj23815528 = yJWgQzRBlIkj16753757;     yJWgQzRBlIkj16753757 = yJWgQzRBlIkj55141673;     yJWgQzRBlIkj55141673 = yJWgQzRBlIkj49735119;     yJWgQzRBlIkj49735119 = yJWgQzRBlIkj51423612;     yJWgQzRBlIkj51423612 = yJWgQzRBlIkj51249868;     yJWgQzRBlIkj51249868 = yJWgQzRBlIkj45358736;     yJWgQzRBlIkj45358736 = yJWgQzRBlIkj1642247;     yJWgQzRBlIkj1642247 = yJWgQzRBlIkj70449342;     yJWgQzRBlIkj70449342 = yJWgQzRBlIkj89712549;     yJWgQzRBlIkj89712549 = yJWgQzRBlIkj49148968;     yJWgQzRBlIkj49148968 = yJWgQzRBlIkj80399690;     yJWgQzRBlIkj80399690 = yJWgQzRBlIkj82506864;     yJWgQzRBlIkj82506864 = yJWgQzRBlIkj86407174;     yJWgQzRBlIkj86407174 = yJWgQzRBlIkj19369230;     yJWgQzRBlIkj19369230 = yJWgQzRBlIkj50405497;     yJWgQzRBlIkj50405497 = yJWgQzRBlIkj25552499;     yJWgQzRBlIkj25552499 = yJWgQzRBlIkj45824835;     yJWgQzRBlIkj45824835 = yJWgQzRBlIkj26562250;     yJWgQzRBlIkj26562250 = yJWgQzRBlIkj38076223;     yJWgQzRBlIkj38076223 = yJWgQzRBlIkj43996316;     yJWgQzRBlIkj43996316 = yJWgQzRBlIkj9896504;     yJWgQzRBlIkj9896504 = yJWgQzRBlIkj45041594;     yJWgQzRBlIkj45041594 = yJWgQzRBlIkj63142131;     yJWgQzRBlIkj63142131 = yJWgQzRBlIkj49287047;     yJWgQzRBlIkj49287047 = yJWgQzRBlIkj83114808;     yJWgQzRBlIkj83114808 = yJWgQzRBlIkj37076438;     yJWgQzRBlIkj37076438 = yJWgQzRBlIkj598434;     yJWgQzRBlIkj598434 = yJWgQzRBlIkj43235767;     yJWgQzRBlIkj43235767 = yJWgQzRBlIkj75952376;     yJWgQzRBlIkj75952376 = yJWgQzRBlIkj83365655;     yJWgQzRBlIkj83365655 = yJWgQzRBlIkj76029604;     yJWgQzRBlIkj76029604 = yJWgQzRBlIkj9759747;     yJWgQzRBlIkj9759747 = yJWgQzRBlIkj83558815;     yJWgQzRBlIkj83558815 = yJWgQzRBlIkj7356914;     yJWgQzRBlIkj7356914 = yJWgQzRBlIkj78635434;     yJWgQzRBlIkj78635434 = yJWgQzRBlIkj58009208;     yJWgQzRBlIkj58009208 = yJWgQzRBlIkj93876734;     yJWgQzRBlIkj93876734 = yJWgQzRBlIkj75853512;     yJWgQzRBlIkj75853512 = yJWgQzRBlIkj67840192;     yJWgQzRBlIkj67840192 = yJWgQzRBlIkj58246629;     yJWgQzRBlIkj58246629 = yJWgQzRBlIkj5076987;     yJWgQzRBlIkj5076987 = yJWgQzRBlIkj29910692;     yJWgQzRBlIkj29910692 = yJWgQzRBlIkj38600238;     yJWgQzRBlIkj38600238 = yJWgQzRBlIkj51758738;     yJWgQzRBlIkj51758738 = yJWgQzRBlIkj66901495;     yJWgQzRBlIkj66901495 = yJWgQzRBlIkj87975830;     yJWgQzRBlIkj87975830 = yJWgQzRBlIkj30764345;     yJWgQzRBlIkj30764345 = yJWgQzRBlIkj18431672;     yJWgQzRBlIkj18431672 = yJWgQzRBlIkj97500912;     yJWgQzRBlIkj97500912 = yJWgQzRBlIkj36438635;     yJWgQzRBlIkj36438635 = yJWgQzRBlIkj27684094;     yJWgQzRBlIkj27684094 = yJWgQzRBlIkj85556893;     yJWgQzRBlIkj85556893 = yJWgQzRBlIkj36974375;     yJWgQzRBlIkj36974375 = yJWgQzRBlIkj1288954;     yJWgQzRBlIkj1288954 = yJWgQzRBlIkj13919025;     yJWgQzRBlIkj13919025 = yJWgQzRBlIkj71712163;     yJWgQzRBlIkj71712163 = yJWgQzRBlIkj91999542;     yJWgQzRBlIkj91999542 = yJWgQzRBlIkj448072;     yJWgQzRBlIkj448072 = yJWgQzRBlIkj68308804;     yJWgQzRBlIkj68308804 = yJWgQzRBlIkj14173431;     yJWgQzRBlIkj14173431 = yJWgQzRBlIkj44760303;     yJWgQzRBlIkj44760303 = yJWgQzRBlIkj58406480;     yJWgQzRBlIkj58406480 = yJWgQzRBlIkj94496965;     yJWgQzRBlIkj94496965 = yJWgQzRBlIkj6346894;     yJWgQzRBlIkj6346894 = yJWgQzRBlIkj73119364;     yJWgQzRBlIkj73119364 = yJWgQzRBlIkj70639943;     yJWgQzRBlIkj70639943 = yJWgQzRBlIkj98948049;     yJWgQzRBlIkj98948049 = yJWgQzRBlIkj79050260;     yJWgQzRBlIkj79050260 = yJWgQzRBlIkj40733795;     yJWgQzRBlIkj40733795 = yJWgQzRBlIkj92396289;     yJWgQzRBlIkj92396289 = yJWgQzRBlIkj31675764;     yJWgQzRBlIkj31675764 = yJWgQzRBlIkj69971323;     yJWgQzRBlIkj69971323 = yJWgQzRBlIkj91142176;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rLPJPmhfzqgQbL34582495() {     long YgiYvIRqoAee50738273 = -582813752;    long YgiYvIRqoAee39449360 = 67970145;    long YgiYvIRqoAee93875972 = -646028299;    long YgiYvIRqoAee84024505 = -992766955;    long YgiYvIRqoAee96103570 = -829652113;    long YgiYvIRqoAee26521205 = -733042351;    long YgiYvIRqoAee28530925 = -523476515;    long YgiYvIRqoAee46214475 = -307682618;    long YgiYvIRqoAee26964325 = -363239469;    long YgiYvIRqoAee26636369 = -37424474;    long YgiYvIRqoAee52572055 = -898459044;    long YgiYvIRqoAee53761263 = -660370092;    long YgiYvIRqoAee74359928 = -293681341;    long YgiYvIRqoAee65093072 = 91041470;    long YgiYvIRqoAee97667839 = -991887427;    long YgiYvIRqoAee25067043 = 99595592;    long YgiYvIRqoAee36868809 = 99600502;    long YgiYvIRqoAee11969517 = -193180120;    long YgiYvIRqoAee50924898 = -413013305;    long YgiYvIRqoAee97088627 = -634693362;    long YgiYvIRqoAee18262020 = -750029035;    long YgiYvIRqoAee16396008 = -302067492;    long YgiYvIRqoAee54182959 = -615945493;    long YgiYvIRqoAee38239168 = -50962673;    long YgiYvIRqoAee88097147 = -66586598;    long YgiYvIRqoAee69465504 = -779830684;    long YgiYvIRqoAee58625339 = -584446882;    long YgiYvIRqoAee88926696 = -562504528;    long YgiYvIRqoAee66538100 = -910287022;    long YgiYvIRqoAee93615139 = -478128316;    long YgiYvIRqoAee74649437 = -790542686;    long YgiYvIRqoAee94188872 = -261067140;    long YgiYvIRqoAee331907 = -927555298;    long YgiYvIRqoAee27883179 = -967043453;    long YgiYvIRqoAee6579608 = -353026787;    long YgiYvIRqoAee49039238 = -683063991;    long YgiYvIRqoAee80344227 = -606712773;    long YgiYvIRqoAee47509305 = -571187042;    long YgiYvIRqoAee99417633 = -727639;    long YgiYvIRqoAee55332519 = -387103308;    long YgiYvIRqoAee44624988 = -169973878;    long YgiYvIRqoAee89448410 = -200073336;    long YgiYvIRqoAee91284739 = -646970128;    long YgiYvIRqoAee99792004 = -735385787;    long YgiYvIRqoAee46813151 = -306930182;    long YgiYvIRqoAee91355378 = -638128697;    long YgiYvIRqoAee43564945 = -334537011;    long YgiYvIRqoAee90692709 = -423640046;    long YgiYvIRqoAee49286151 = -207537336;    long YgiYvIRqoAee60208986 = -37792404;    long YgiYvIRqoAee13628382 = -944372146;    long YgiYvIRqoAee55872200 = -599327496;    long YgiYvIRqoAee58530323 = -949695600;    long YgiYvIRqoAee10350962 = -839450841;    long YgiYvIRqoAee16320475 = -277241322;    long YgiYvIRqoAee34342265 = -180746260;    long YgiYvIRqoAee85266401 = -316084363;    long YgiYvIRqoAee55636805 = -495065627;    long YgiYvIRqoAee95927357 = -826180357;    long YgiYvIRqoAee26638066 = 50178571;    long YgiYvIRqoAee67895865 = -48595470;    long YgiYvIRqoAee39604228 = -960971987;    long YgiYvIRqoAee79676375 = -397395596;    long YgiYvIRqoAee33349185 = -885111153;    long YgiYvIRqoAee51986932 = -246881788;    long YgiYvIRqoAee58383183 = -537391904;    long YgiYvIRqoAee53429356 = -732814794;    long YgiYvIRqoAee46476750 = -326637888;    long YgiYvIRqoAee58513464 = -555931743;    long YgiYvIRqoAee48628601 = -208823436;    long YgiYvIRqoAee44722815 = -293691635;    long YgiYvIRqoAee89359504 = -329212457;    long YgiYvIRqoAee12551883 = -92452481;    long YgiYvIRqoAee95592378 = 74090002;    long YgiYvIRqoAee52463640 = -364719485;    long YgiYvIRqoAee28813609 = -449955699;    long YgiYvIRqoAee25111269 = -655097364;    long YgiYvIRqoAee54390955 = -880559706;    long YgiYvIRqoAee91426017 = -744032492;    long YgiYvIRqoAee96741769 = -428457901;    long YgiYvIRqoAee25900560 = -345293674;    long YgiYvIRqoAee67932630 = -60806836;    long YgiYvIRqoAee39640546 = -254967193;    long YgiYvIRqoAee6329114 = -772494618;    long YgiYvIRqoAee79986758 = -533756171;    long YgiYvIRqoAee18777237 = -91215190;    long YgiYvIRqoAee35658550 = -311371541;    long YgiYvIRqoAee89980945 = 11895542;    long YgiYvIRqoAee11562704 = -589802132;    long YgiYvIRqoAee72237343 = -72280527;    long YgiYvIRqoAee63772837 = -266979629;    long YgiYvIRqoAee24707423 = -11647147;    long YgiYvIRqoAee51581948 = -745006685;    long YgiYvIRqoAee72779567 = 49093789;    long YgiYvIRqoAee87436653 = -238507838;    long YgiYvIRqoAee5020760 = -209001891;    long YgiYvIRqoAee9772035 = -802677741;    long YgiYvIRqoAee57935554 = -761858976;    long YgiYvIRqoAee47805073 = -388503999;    long YgiYvIRqoAee88429967 = -582813752;     YgiYvIRqoAee50738273 = YgiYvIRqoAee39449360;     YgiYvIRqoAee39449360 = YgiYvIRqoAee93875972;     YgiYvIRqoAee93875972 = YgiYvIRqoAee84024505;     YgiYvIRqoAee84024505 = YgiYvIRqoAee96103570;     YgiYvIRqoAee96103570 = YgiYvIRqoAee26521205;     YgiYvIRqoAee26521205 = YgiYvIRqoAee28530925;     YgiYvIRqoAee28530925 = YgiYvIRqoAee46214475;     YgiYvIRqoAee46214475 = YgiYvIRqoAee26964325;     YgiYvIRqoAee26964325 = YgiYvIRqoAee26636369;     YgiYvIRqoAee26636369 = YgiYvIRqoAee52572055;     YgiYvIRqoAee52572055 = YgiYvIRqoAee53761263;     YgiYvIRqoAee53761263 = YgiYvIRqoAee74359928;     YgiYvIRqoAee74359928 = YgiYvIRqoAee65093072;     YgiYvIRqoAee65093072 = YgiYvIRqoAee97667839;     YgiYvIRqoAee97667839 = YgiYvIRqoAee25067043;     YgiYvIRqoAee25067043 = YgiYvIRqoAee36868809;     YgiYvIRqoAee36868809 = YgiYvIRqoAee11969517;     YgiYvIRqoAee11969517 = YgiYvIRqoAee50924898;     YgiYvIRqoAee50924898 = YgiYvIRqoAee97088627;     YgiYvIRqoAee97088627 = YgiYvIRqoAee18262020;     YgiYvIRqoAee18262020 = YgiYvIRqoAee16396008;     YgiYvIRqoAee16396008 = YgiYvIRqoAee54182959;     YgiYvIRqoAee54182959 = YgiYvIRqoAee38239168;     YgiYvIRqoAee38239168 = YgiYvIRqoAee88097147;     YgiYvIRqoAee88097147 = YgiYvIRqoAee69465504;     YgiYvIRqoAee69465504 = YgiYvIRqoAee58625339;     YgiYvIRqoAee58625339 = YgiYvIRqoAee88926696;     YgiYvIRqoAee88926696 = YgiYvIRqoAee66538100;     YgiYvIRqoAee66538100 = YgiYvIRqoAee93615139;     YgiYvIRqoAee93615139 = YgiYvIRqoAee74649437;     YgiYvIRqoAee74649437 = YgiYvIRqoAee94188872;     YgiYvIRqoAee94188872 = YgiYvIRqoAee331907;     YgiYvIRqoAee331907 = YgiYvIRqoAee27883179;     YgiYvIRqoAee27883179 = YgiYvIRqoAee6579608;     YgiYvIRqoAee6579608 = YgiYvIRqoAee49039238;     YgiYvIRqoAee49039238 = YgiYvIRqoAee80344227;     YgiYvIRqoAee80344227 = YgiYvIRqoAee47509305;     YgiYvIRqoAee47509305 = YgiYvIRqoAee99417633;     YgiYvIRqoAee99417633 = YgiYvIRqoAee55332519;     YgiYvIRqoAee55332519 = YgiYvIRqoAee44624988;     YgiYvIRqoAee44624988 = YgiYvIRqoAee89448410;     YgiYvIRqoAee89448410 = YgiYvIRqoAee91284739;     YgiYvIRqoAee91284739 = YgiYvIRqoAee99792004;     YgiYvIRqoAee99792004 = YgiYvIRqoAee46813151;     YgiYvIRqoAee46813151 = YgiYvIRqoAee91355378;     YgiYvIRqoAee91355378 = YgiYvIRqoAee43564945;     YgiYvIRqoAee43564945 = YgiYvIRqoAee90692709;     YgiYvIRqoAee90692709 = YgiYvIRqoAee49286151;     YgiYvIRqoAee49286151 = YgiYvIRqoAee60208986;     YgiYvIRqoAee60208986 = YgiYvIRqoAee13628382;     YgiYvIRqoAee13628382 = YgiYvIRqoAee55872200;     YgiYvIRqoAee55872200 = YgiYvIRqoAee58530323;     YgiYvIRqoAee58530323 = YgiYvIRqoAee10350962;     YgiYvIRqoAee10350962 = YgiYvIRqoAee16320475;     YgiYvIRqoAee16320475 = YgiYvIRqoAee34342265;     YgiYvIRqoAee34342265 = YgiYvIRqoAee85266401;     YgiYvIRqoAee85266401 = YgiYvIRqoAee55636805;     YgiYvIRqoAee55636805 = YgiYvIRqoAee95927357;     YgiYvIRqoAee95927357 = YgiYvIRqoAee26638066;     YgiYvIRqoAee26638066 = YgiYvIRqoAee67895865;     YgiYvIRqoAee67895865 = YgiYvIRqoAee39604228;     YgiYvIRqoAee39604228 = YgiYvIRqoAee79676375;     YgiYvIRqoAee79676375 = YgiYvIRqoAee33349185;     YgiYvIRqoAee33349185 = YgiYvIRqoAee51986932;     YgiYvIRqoAee51986932 = YgiYvIRqoAee58383183;     YgiYvIRqoAee58383183 = YgiYvIRqoAee53429356;     YgiYvIRqoAee53429356 = YgiYvIRqoAee46476750;     YgiYvIRqoAee46476750 = YgiYvIRqoAee58513464;     YgiYvIRqoAee58513464 = YgiYvIRqoAee48628601;     YgiYvIRqoAee48628601 = YgiYvIRqoAee44722815;     YgiYvIRqoAee44722815 = YgiYvIRqoAee89359504;     YgiYvIRqoAee89359504 = YgiYvIRqoAee12551883;     YgiYvIRqoAee12551883 = YgiYvIRqoAee95592378;     YgiYvIRqoAee95592378 = YgiYvIRqoAee52463640;     YgiYvIRqoAee52463640 = YgiYvIRqoAee28813609;     YgiYvIRqoAee28813609 = YgiYvIRqoAee25111269;     YgiYvIRqoAee25111269 = YgiYvIRqoAee54390955;     YgiYvIRqoAee54390955 = YgiYvIRqoAee91426017;     YgiYvIRqoAee91426017 = YgiYvIRqoAee96741769;     YgiYvIRqoAee96741769 = YgiYvIRqoAee25900560;     YgiYvIRqoAee25900560 = YgiYvIRqoAee67932630;     YgiYvIRqoAee67932630 = YgiYvIRqoAee39640546;     YgiYvIRqoAee39640546 = YgiYvIRqoAee6329114;     YgiYvIRqoAee6329114 = YgiYvIRqoAee79986758;     YgiYvIRqoAee79986758 = YgiYvIRqoAee18777237;     YgiYvIRqoAee18777237 = YgiYvIRqoAee35658550;     YgiYvIRqoAee35658550 = YgiYvIRqoAee89980945;     YgiYvIRqoAee89980945 = YgiYvIRqoAee11562704;     YgiYvIRqoAee11562704 = YgiYvIRqoAee72237343;     YgiYvIRqoAee72237343 = YgiYvIRqoAee63772837;     YgiYvIRqoAee63772837 = YgiYvIRqoAee24707423;     YgiYvIRqoAee24707423 = YgiYvIRqoAee51581948;     YgiYvIRqoAee51581948 = YgiYvIRqoAee72779567;     YgiYvIRqoAee72779567 = YgiYvIRqoAee87436653;     YgiYvIRqoAee87436653 = YgiYvIRqoAee5020760;     YgiYvIRqoAee5020760 = YgiYvIRqoAee9772035;     YgiYvIRqoAee9772035 = YgiYvIRqoAee57935554;     YgiYvIRqoAee57935554 = YgiYvIRqoAee47805073;     YgiYvIRqoAee47805073 = YgiYvIRqoAee88429967;     YgiYvIRqoAee88429967 = YgiYvIRqoAee50738273;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ereRnkOnbhAJBk94885151() {     long aLfWZCLUBbQH40864582 = -641569952;    long aLfWZCLUBbQH22574425 = -306956025;    long aLfWZCLUBbQH89368671 = -782822761;    long aLfWZCLUBbQH57523080 = -78938777;    long aLfWZCLUBbQH9160307 = -770975555;    long aLfWZCLUBbQH7307610 = -625675459;    long aLfWZCLUBbQH23194363 = -161021988;    long aLfWZCLUBbQH99093038 = 55869644;    long aLfWZCLUBbQH50776012 = -371132107;    long aLfWZCLUBbQH30892039 = -707298999;    long aLfWZCLUBbQH28723875 = -306879202;    long aLfWZCLUBbQH88510770 = -139958227;    long aLfWZCLUBbQH12706061 = -605917201;    long aLfWZCLUBbQH3511926 = 92880586;    long aLfWZCLUBbQH95742211 = -377008369;    long aLfWZCLUBbQH49246784 = -700784278;    long aLfWZCLUBbQH80830990 = -161744739;    long aLfWZCLUBbQH33325229 = -636029412;    long aLfWZCLUBbQH11839290 = -879423741;    long aLfWZCLUBbQH64412876 = -182571672;    long aLfWZCLUBbQH6184422 = -454454127;    long aLfWZCLUBbQH14477590 = -635164127;    long aLfWZCLUBbQH87421377 = 77594586;    long aLfWZCLUBbQH46160265 = -498987048;    long aLfWZCLUBbQH34982336 = -710097542;    long aLfWZCLUBbQH88256469 = -655704419;    long aLfWZCLUBbQH80592674 = -343975875;    long aLfWZCLUBbQH12097072 = -622394586;    long aLfWZCLUBbQH27747098 = -572486070;    long aLfWZCLUBbQH41404220 = -352530707;    long aLfWZCLUBbQH78112839 = -17209230;    long aLfWZCLUBbQH93555786 = -761891560;    long aLfWZCLUBbQH9300948 = -127780458;    long aLfWZCLUBbQH51721823 = -958494611;    long aLfWZCLUBbQH42176142 = -3362448;    long aLfWZCLUBbQH2270245 = -986093402;    long aLfWZCLUBbQH80577796 = -122528678;    long aLfWZCLUBbQH71866588 = -437246285;    long aLfWZCLUBbQH9950651 = -808189685;    long aLfWZCLUBbQH99844660 = -291811081;    long aLfWZCLUBbQH58324661 = -975835153;    long aLfWZCLUBbQH44092874 = -14566550;    long aLfWZCLUBbQH51101580 = -22395724;    long aLfWZCLUBbQH30453945 = -599468976;    long aLfWZCLUBbQH38777568 = -419440138;    long aLfWZCLUBbQH11794372 = -21752603;    long aLfWZCLUBbQH23988236 = -983019511;    long aLfWZCLUBbQH81079168 = -450296299;    long aLfWZCLUBbQH77204805 = -643476682;    long aLfWZCLUBbQH89489392 = -494788741;    long aLfWZCLUBbQH42993905 = -218754191;    long aLfWZCLUBbQH99645306 = -563754329;    long aLfWZCLUBbQH7982778 = -661548594;    long aLfWZCLUBbQH63258023 = -963006123;    long aLfWZCLUBbQH88700730 = -405841594;    long aLfWZCLUBbQH26386992 = 93594174;    long aLfWZCLUBbQH35153048 = -284550612;    long aLfWZCLUBbQH43208406 = -183835713;    long aLfWZCLUBbQH22540745 = -368841235;    long aLfWZCLUBbQH20903837 = -15271136;    long aLfWZCLUBbQH26714935 = -181699584;    long aLfWZCLUBbQH11097291 = -538627402;    long aLfWZCLUBbQH71345941 = -371644287;    long aLfWZCLUBbQH9371793 = 81398600;    long aLfWZCLUBbQH52779199 = -590089770;    long aLfWZCLUBbQH35168088 = -544987642;    long aLfWZCLUBbQH79209822 = 87822230;    long aLfWZCLUBbQH60984237 = -647422590;    long aLfWZCLUBbQH61335783 = -903756967;    long aLfWZCLUBbQH93471966 = -390914968;    long aLfWZCLUBbQH68668988 = -478255601;    long aLfWZCLUBbQH8964402 = -724498454;    long aLfWZCLUBbQH23374579 = -827839728;    long aLfWZCLUBbQH11994629 = -487612661;    long aLfWZCLUBbQH6088215 = -206736519;    long aLfWZCLUBbQH62091548 = -339887578;    long aLfWZCLUBbQH63376009 = -512768404;    long aLfWZCLUBbQH56967432 = -322936438;    long aLfWZCLUBbQH7382698 = 20453089;    long aLfWZCLUBbQH23187964 = -588344940;    long aLfWZCLUBbQH64268234 = -672684909;    long aLfWZCLUBbQH99513505 = -893679577;    long aLfWZCLUBbQH34892267 = -978917905;    long aLfWZCLUBbQH38257706 = 22302671;    long aLfWZCLUBbQH98410314 = -33776517;    long aLfWZCLUBbQH78467532 = -453454901;    long aLfWZCLUBbQH85573008 = -342966;    long aLfWZCLUBbQH46042925 = -164774336;    long aLfWZCLUBbQH63021093 = -452653018;    long aLfWZCLUBbQH15789151 = 3043378;    long aLfWZCLUBbQH67117197 = -601542790;    long aLfWZCLUBbQH37369390 = -938692966;    long aLfWZCLUBbQH49325844 = 31594949;    long aLfWZCLUBbQH89046813 = -692918549;    long aLfWZCLUBbQH73129725 = -10111497;    long aLfWZCLUBbQH47227370 = -337207752;    long aLfWZCLUBbQH72746932 = -642922263;    long aLfWZCLUBbQH41729788 = -3794325;    long aLfWZCLUBbQH77674746 = 90620793;    long aLfWZCLUBbQH3609480 = -641569952;     aLfWZCLUBbQH40864582 = aLfWZCLUBbQH22574425;     aLfWZCLUBbQH22574425 = aLfWZCLUBbQH89368671;     aLfWZCLUBbQH89368671 = aLfWZCLUBbQH57523080;     aLfWZCLUBbQH57523080 = aLfWZCLUBbQH9160307;     aLfWZCLUBbQH9160307 = aLfWZCLUBbQH7307610;     aLfWZCLUBbQH7307610 = aLfWZCLUBbQH23194363;     aLfWZCLUBbQH23194363 = aLfWZCLUBbQH99093038;     aLfWZCLUBbQH99093038 = aLfWZCLUBbQH50776012;     aLfWZCLUBbQH50776012 = aLfWZCLUBbQH30892039;     aLfWZCLUBbQH30892039 = aLfWZCLUBbQH28723875;     aLfWZCLUBbQH28723875 = aLfWZCLUBbQH88510770;     aLfWZCLUBbQH88510770 = aLfWZCLUBbQH12706061;     aLfWZCLUBbQH12706061 = aLfWZCLUBbQH3511926;     aLfWZCLUBbQH3511926 = aLfWZCLUBbQH95742211;     aLfWZCLUBbQH95742211 = aLfWZCLUBbQH49246784;     aLfWZCLUBbQH49246784 = aLfWZCLUBbQH80830990;     aLfWZCLUBbQH80830990 = aLfWZCLUBbQH33325229;     aLfWZCLUBbQH33325229 = aLfWZCLUBbQH11839290;     aLfWZCLUBbQH11839290 = aLfWZCLUBbQH64412876;     aLfWZCLUBbQH64412876 = aLfWZCLUBbQH6184422;     aLfWZCLUBbQH6184422 = aLfWZCLUBbQH14477590;     aLfWZCLUBbQH14477590 = aLfWZCLUBbQH87421377;     aLfWZCLUBbQH87421377 = aLfWZCLUBbQH46160265;     aLfWZCLUBbQH46160265 = aLfWZCLUBbQH34982336;     aLfWZCLUBbQH34982336 = aLfWZCLUBbQH88256469;     aLfWZCLUBbQH88256469 = aLfWZCLUBbQH80592674;     aLfWZCLUBbQH80592674 = aLfWZCLUBbQH12097072;     aLfWZCLUBbQH12097072 = aLfWZCLUBbQH27747098;     aLfWZCLUBbQH27747098 = aLfWZCLUBbQH41404220;     aLfWZCLUBbQH41404220 = aLfWZCLUBbQH78112839;     aLfWZCLUBbQH78112839 = aLfWZCLUBbQH93555786;     aLfWZCLUBbQH93555786 = aLfWZCLUBbQH9300948;     aLfWZCLUBbQH9300948 = aLfWZCLUBbQH51721823;     aLfWZCLUBbQH51721823 = aLfWZCLUBbQH42176142;     aLfWZCLUBbQH42176142 = aLfWZCLUBbQH2270245;     aLfWZCLUBbQH2270245 = aLfWZCLUBbQH80577796;     aLfWZCLUBbQH80577796 = aLfWZCLUBbQH71866588;     aLfWZCLUBbQH71866588 = aLfWZCLUBbQH9950651;     aLfWZCLUBbQH9950651 = aLfWZCLUBbQH99844660;     aLfWZCLUBbQH99844660 = aLfWZCLUBbQH58324661;     aLfWZCLUBbQH58324661 = aLfWZCLUBbQH44092874;     aLfWZCLUBbQH44092874 = aLfWZCLUBbQH51101580;     aLfWZCLUBbQH51101580 = aLfWZCLUBbQH30453945;     aLfWZCLUBbQH30453945 = aLfWZCLUBbQH38777568;     aLfWZCLUBbQH38777568 = aLfWZCLUBbQH11794372;     aLfWZCLUBbQH11794372 = aLfWZCLUBbQH23988236;     aLfWZCLUBbQH23988236 = aLfWZCLUBbQH81079168;     aLfWZCLUBbQH81079168 = aLfWZCLUBbQH77204805;     aLfWZCLUBbQH77204805 = aLfWZCLUBbQH89489392;     aLfWZCLUBbQH89489392 = aLfWZCLUBbQH42993905;     aLfWZCLUBbQH42993905 = aLfWZCLUBbQH99645306;     aLfWZCLUBbQH99645306 = aLfWZCLUBbQH7982778;     aLfWZCLUBbQH7982778 = aLfWZCLUBbQH63258023;     aLfWZCLUBbQH63258023 = aLfWZCLUBbQH88700730;     aLfWZCLUBbQH88700730 = aLfWZCLUBbQH26386992;     aLfWZCLUBbQH26386992 = aLfWZCLUBbQH35153048;     aLfWZCLUBbQH35153048 = aLfWZCLUBbQH43208406;     aLfWZCLUBbQH43208406 = aLfWZCLUBbQH22540745;     aLfWZCLUBbQH22540745 = aLfWZCLUBbQH20903837;     aLfWZCLUBbQH20903837 = aLfWZCLUBbQH26714935;     aLfWZCLUBbQH26714935 = aLfWZCLUBbQH11097291;     aLfWZCLUBbQH11097291 = aLfWZCLUBbQH71345941;     aLfWZCLUBbQH71345941 = aLfWZCLUBbQH9371793;     aLfWZCLUBbQH9371793 = aLfWZCLUBbQH52779199;     aLfWZCLUBbQH52779199 = aLfWZCLUBbQH35168088;     aLfWZCLUBbQH35168088 = aLfWZCLUBbQH79209822;     aLfWZCLUBbQH79209822 = aLfWZCLUBbQH60984237;     aLfWZCLUBbQH60984237 = aLfWZCLUBbQH61335783;     aLfWZCLUBbQH61335783 = aLfWZCLUBbQH93471966;     aLfWZCLUBbQH93471966 = aLfWZCLUBbQH68668988;     aLfWZCLUBbQH68668988 = aLfWZCLUBbQH8964402;     aLfWZCLUBbQH8964402 = aLfWZCLUBbQH23374579;     aLfWZCLUBbQH23374579 = aLfWZCLUBbQH11994629;     aLfWZCLUBbQH11994629 = aLfWZCLUBbQH6088215;     aLfWZCLUBbQH6088215 = aLfWZCLUBbQH62091548;     aLfWZCLUBbQH62091548 = aLfWZCLUBbQH63376009;     aLfWZCLUBbQH63376009 = aLfWZCLUBbQH56967432;     aLfWZCLUBbQH56967432 = aLfWZCLUBbQH7382698;     aLfWZCLUBbQH7382698 = aLfWZCLUBbQH23187964;     aLfWZCLUBbQH23187964 = aLfWZCLUBbQH64268234;     aLfWZCLUBbQH64268234 = aLfWZCLUBbQH99513505;     aLfWZCLUBbQH99513505 = aLfWZCLUBbQH34892267;     aLfWZCLUBbQH34892267 = aLfWZCLUBbQH38257706;     aLfWZCLUBbQH38257706 = aLfWZCLUBbQH98410314;     aLfWZCLUBbQH98410314 = aLfWZCLUBbQH78467532;     aLfWZCLUBbQH78467532 = aLfWZCLUBbQH85573008;     aLfWZCLUBbQH85573008 = aLfWZCLUBbQH46042925;     aLfWZCLUBbQH46042925 = aLfWZCLUBbQH63021093;     aLfWZCLUBbQH63021093 = aLfWZCLUBbQH15789151;     aLfWZCLUBbQH15789151 = aLfWZCLUBbQH67117197;     aLfWZCLUBbQH67117197 = aLfWZCLUBbQH37369390;     aLfWZCLUBbQH37369390 = aLfWZCLUBbQH49325844;     aLfWZCLUBbQH49325844 = aLfWZCLUBbQH89046813;     aLfWZCLUBbQH89046813 = aLfWZCLUBbQH73129725;     aLfWZCLUBbQH73129725 = aLfWZCLUBbQH47227370;     aLfWZCLUBbQH47227370 = aLfWZCLUBbQH72746932;     aLfWZCLUBbQH72746932 = aLfWZCLUBbQH41729788;     aLfWZCLUBbQH41729788 = aLfWZCLUBbQH77674746;     aLfWZCLUBbQH77674746 = aLfWZCLUBbQH3609480;     aLfWZCLUBbQH3609480 = aLfWZCLUBbQH40864582;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TGyaglFkcYRijh91068312() {     long BPxwutmcKEhW460679 = -870326330;    long BPxwutmcKEhW24080274 = -117111410;    long BPxwutmcKEhW26370060 = -856963683;    long BPxwutmcKEhW53398838 = -951549654;    long BPxwutmcKEhW20453533 = -671482582;    long BPxwutmcKEhW4984730 = -483935133;    long BPxwutmcKEhW20552846 = -590739573;    long BPxwutmcKEhW49918323 = -298341732;    long BPxwutmcKEhW64589456 = -903804606;    long BPxwutmcKEhW13916554 = -648557853;    long BPxwutmcKEhW54018806 = -708421641;    long BPxwutmcKEhW23181972 = -234979476;    long BPxwutmcKEhW83460624 = -512095719;    long BPxwutmcKEhW61885764 = -911277761;    long BPxwutmcKEhW93050017 = -69534891;    long BPxwutmcKEhW46001039 = -506157169;    long BPxwutmcKEhW16792094 = -89961020;    long BPxwutmcKEhW97993559 = 94634483;    long BPxwutmcKEhW92281492 = 81456629;    long BPxwutmcKEhW44329985 = -844980325;    long BPxwutmcKEhW86645540 = -287474952;    long BPxwutmcKEhW82967188 = -527566005;    long BPxwutmcKEhW79613202 = -786700493;    long BPxwutmcKEhW10890505 = -63325285;    long BPxwutmcKEhW10960341 = -166235132;    long BPxwutmcKEhW82671376 = -790321890;    long BPxwutmcKEhW93932744 = -793455873;    long BPxwutmcKEhW77208241 = -143776177;    long BPxwutmcKEhW77531441 = -362078685;    long BPxwutmcKEhW79877686 = -399513950;    long BPxwutmcKEhW3027158 = -662428558;    long BPxwutmcKEhW36321047 = -79109557;    long BPxwutmcKEhW58382987 = -107727330;    long BPxwutmcKEhW34246266 = -460378543;    long BPxwutmcKEhW47113503 = -751572433;    long BPxwutmcKEhW80860141 = -197749984;    long BPxwutmcKEhW71209473 = -415307312;    long BPxwutmcKEhW70226926 = -381698675;    long BPxwutmcKEhW28968593 = -526896202;    long BPxwutmcKEhW72670315 = -565692029;    long BPxwutmcKEhW16542475 = -344496750;    long BPxwutmcKEhW14172055 = -19507968;    long BPxwutmcKEhW91980822 = -855840553;    long BPxwutmcKEhW4693451 = 76616285;    long BPxwutmcKEhW39765884 = -965758206;    long BPxwutmcKEhW76587500 = -264696762;    long BPxwutmcKEhW29476958 = -874875178;    long BPxwutmcKEhW27775563 = -783049528;    long BPxwutmcKEhW16594453 = -927414302;    long BPxwutmcKEhW4656785 = -816041202;    long BPxwutmcKEhW93480155 = -4862415;    long BPxwutmcKEhW6230460 = -534997584;    long BPxwutmcKEhW83398292 = -901497048;    long BPxwutmcKEhW36532547 = -123175078;    long BPxwutmcKEhW4422772 = -369775681;    long BPxwutmcKEhW17493490 = -242760326;    long BPxwutmcKEhW44467072 = -330410918;    long BPxwutmcKEhW15479556 = -693638398;    long BPxwutmcKEhW42438498 = -685314523;    long BPxwutmcKEhW37782156 = -881160693;    long BPxwutmcKEhW11051986 = -690479260;    long BPxwutmcKEhW43344605 = -346963397;    long BPxwutmcKEhW72386882 = -936263047;    long BPxwutmcKEhW84711770 = -404290657;    long BPxwutmcKEhW10889396 = -986129295;    long BPxwutmcKEhW17697759 = -529312085;    long BPxwutmcKEhW64798985 = -27252147;    long BPxwutmcKEhW49214358 = 48282823;    long BPxwutmcKEhW14772261 = -59705328;    long BPxwutmcKEhW12189876 = -871784908;    long BPxwutmcKEhW74791565 = 9150143;    long BPxwutmcKEhW46565167 = -708262345;    long BPxwutmcKEhW69024966 = -378469316;    long BPxwutmcKEhW19611177 = -352851342;    long BPxwutmcKEhW27787511 = -400483575;    long BPxwutmcKEhW72473485 = -167966984;    long BPxwutmcKEhW90986366 = -671725452;    long BPxwutmcKEhW74919751 = -763316778;    long BPxwutmcKEhW71124620 = -97567079;    long BPxwutmcKEhW34372840 = -901538371;    long BPxwutmcKEhW53194419 = -915446713;    long BPxwutmcKEhW66157182 = 89593654;    long BPxwutmcKEhW60613788 = -216361875;    long BPxwutmcKEhW72874656 = -546037483;    long BPxwutmcKEhW86397530 = -294651535;    long BPxwutmcKEhW96796698 = -27430974;    long BPxwutmcKEhW52922755 = -177612510;    long BPxwutmcKEhW21850440 = -984552253;    long BPxwutmcKEhW29823494 = 9397138;    long BPxwutmcKEhW29620014 = -408812108;    long BPxwutmcKEhW36393069 = -867339066;    long BPxwutmcKEhW55729918 = -721668914;    long BPxwutmcKEhW27788429 = -696384153;    long BPxwutmcKEhW91186437 = -645735510;    long BPxwutmcKEhW61618330 = -875212769;    long BPxwutmcKEhW73197869 = -997533353;    long BPxwutmcKEhW41785173 = -83244921;    long BPxwutmcKEhW7269053 = -351549897;    long BPxwutmcKEhW93804054 = 62745580;    long BPxwutmcKEhW22068125 = -870326330;     BPxwutmcKEhW460679 = BPxwutmcKEhW24080274;     BPxwutmcKEhW24080274 = BPxwutmcKEhW26370060;     BPxwutmcKEhW26370060 = BPxwutmcKEhW53398838;     BPxwutmcKEhW53398838 = BPxwutmcKEhW20453533;     BPxwutmcKEhW20453533 = BPxwutmcKEhW4984730;     BPxwutmcKEhW4984730 = BPxwutmcKEhW20552846;     BPxwutmcKEhW20552846 = BPxwutmcKEhW49918323;     BPxwutmcKEhW49918323 = BPxwutmcKEhW64589456;     BPxwutmcKEhW64589456 = BPxwutmcKEhW13916554;     BPxwutmcKEhW13916554 = BPxwutmcKEhW54018806;     BPxwutmcKEhW54018806 = BPxwutmcKEhW23181972;     BPxwutmcKEhW23181972 = BPxwutmcKEhW83460624;     BPxwutmcKEhW83460624 = BPxwutmcKEhW61885764;     BPxwutmcKEhW61885764 = BPxwutmcKEhW93050017;     BPxwutmcKEhW93050017 = BPxwutmcKEhW46001039;     BPxwutmcKEhW46001039 = BPxwutmcKEhW16792094;     BPxwutmcKEhW16792094 = BPxwutmcKEhW97993559;     BPxwutmcKEhW97993559 = BPxwutmcKEhW92281492;     BPxwutmcKEhW92281492 = BPxwutmcKEhW44329985;     BPxwutmcKEhW44329985 = BPxwutmcKEhW86645540;     BPxwutmcKEhW86645540 = BPxwutmcKEhW82967188;     BPxwutmcKEhW82967188 = BPxwutmcKEhW79613202;     BPxwutmcKEhW79613202 = BPxwutmcKEhW10890505;     BPxwutmcKEhW10890505 = BPxwutmcKEhW10960341;     BPxwutmcKEhW10960341 = BPxwutmcKEhW82671376;     BPxwutmcKEhW82671376 = BPxwutmcKEhW93932744;     BPxwutmcKEhW93932744 = BPxwutmcKEhW77208241;     BPxwutmcKEhW77208241 = BPxwutmcKEhW77531441;     BPxwutmcKEhW77531441 = BPxwutmcKEhW79877686;     BPxwutmcKEhW79877686 = BPxwutmcKEhW3027158;     BPxwutmcKEhW3027158 = BPxwutmcKEhW36321047;     BPxwutmcKEhW36321047 = BPxwutmcKEhW58382987;     BPxwutmcKEhW58382987 = BPxwutmcKEhW34246266;     BPxwutmcKEhW34246266 = BPxwutmcKEhW47113503;     BPxwutmcKEhW47113503 = BPxwutmcKEhW80860141;     BPxwutmcKEhW80860141 = BPxwutmcKEhW71209473;     BPxwutmcKEhW71209473 = BPxwutmcKEhW70226926;     BPxwutmcKEhW70226926 = BPxwutmcKEhW28968593;     BPxwutmcKEhW28968593 = BPxwutmcKEhW72670315;     BPxwutmcKEhW72670315 = BPxwutmcKEhW16542475;     BPxwutmcKEhW16542475 = BPxwutmcKEhW14172055;     BPxwutmcKEhW14172055 = BPxwutmcKEhW91980822;     BPxwutmcKEhW91980822 = BPxwutmcKEhW4693451;     BPxwutmcKEhW4693451 = BPxwutmcKEhW39765884;     BPxwutmcKEhW39765884 = BPxwutmcKEhW76587500;     BPxwutmcKEhW76587500 = BPxwutmcKEhW29476958;     BPxwutmcKEhW29476958 = BPxwutmcKEhW27775563;     BPxwutmcKEhW27775563 = BPxwutmcKEhW16594453;     BPxwutmcKEhW16594453 = BPxwutmcKEhW4656785;     BPxwutmcKEhW4656785 = BPxwutmcKEhW93480155;     BPxwutmcKEhW93480155 = BPxwutmcKEhW6230460;     BPxwutmcKEhW6230460 = BPxwutmcKEhW83398292;     BPxwutmcKEhW83398292 = BPxwutmcKEhW36532547;     BPxwutmcKEhW36532547 = BPxwutmcKEhW4422772;     BPxwutmcKEhW4422772 = BPxwutmcKEhW17493490;     BPxwutmcKEhW17493490 = BPxwutmcKEhW44467072;     BPxwutmcKEhW44467072 = BPxwutmcKEhW15479556;     BPxwutmcKEhW15479556 = BPxwutmcKEhW42438498;     BPxwutmcKEhW42438498 = BPxwutmcKEhW37782156;     BPxwutmcKEhW37782156 = BPxwutmcKEhW11051986;     BPxwutmcKEhW11051986 = BPxwutmcKEhW43344605;     BPxwutmcKEhW43344605 = BPxwutmcKEhW72386882;     BPxwutmcKEhW72386882 = BPxwutmcKEhW84711770;     BPxwutmcKEhW84711770 = BPxwutmcKEhW10889396;     BPxwutmcKEhW10889396 = BPxwutmcKEhW17697759;     BPxwutmcKEhW17697759 = BPxwutmcKEhW64798985;     BPxwutmcKEhW64798985 = BPxwutmcKEhW49214358;     BPxwutmcKEhW49214358 = BPxwutmcKEhW14772261;     BPxwutmcKEhW14772261 = BPxwutmcKEhW12189876;     BPxwutmcKEhW12189876 = BPxwutmcKEhW74791565;     BPxwutmcKEhW74791565 = BPxwutmcKEhW46565167;     BPxwutmcKEhW46565167 = BPxwutmcKEhW69024966;     BPxwutmcKEhW69024966 = BPxwutmcKEhW19611177;     BPxwutmcKEhW19611177 = BPxwutmcKEhW27787511;     BPxwutmcKEhW27787511 = BPxwutmcKEhW72473485;     BPxwutmcKEhW72473485 = BPxwutmcKEhW90986366;     BPxwutmcKEhW90986366 = BPxwutmcKEhW74919751;     BPxwutmcKEhW74919751 = BPxwutmcKEhW71124620;     BPxwutmcKEhW71124620 = BPxwutmcKEhW34372840;     BPxwutmcKEhW34372840 = BPxwutmcKEhW53194419;     BPxwutmcKEhW53194419 = BPxwutmcKEhW66157182;     BPxwutmcKEhW66157182 = BPxwutmcKEhW60613788;     BPxwutmcKEhW60613788 = BPxwutmcKEhW72874656;     BPxwutmcKEhW72874656 = BPxwutmcKEhW86397530;     BPxwutmcKEhW86397530 = BPxwutmcKEhW96796698;     BPxwutmcKEhW96796698 = BPxwutmcKEhW52922755;     BPxwutmcKEhW52922755 = BPxwutmcKEhW21850440;     BPxwutmcKEhW21850440 = BPxwutmcKEhW29823494;     BPxwutmcKEhW29823494 = BPxwutmcKEhW29620014;     BPxwutmcKEhW29620014 = BPxwutmcKEhW36393069;     BPxwutmcKEhW36393069 = BPxwutmcKEhW55729918;     BPxwutmcKEhW55729918 = BPxwutmcKEhW27788429;     BPxwutmcKEhW27788429 = BPxwutmcKEhW91186437;     BPxwutmcKEhW91186437 = BPxwutmcKEhW61618330;     BPxwutmcKEhW61618330 = BPxwutmcKEhW73197869;     BPxwutmcKEhW73197869 = BPxwutmcKEhW41785173;     BPxwutmcKEhW41785173 = BPxwutmcKEhW7269053;     BPxwutmcKEhW7269053 = BPxwutmcKEhW93804054;     BPxwutmcKEhW93804054 = BPxwutmcKEhW22068125;     BPxwutmcKEhW22068125 = BPxwutmcKEhW460679;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GTRygUHwdyRExl3613501() {     double zwvxRMTUdUmV19928849 = -183457542;    double zwvxRMTUdUmV77104138 = -662989406;    double zwvxRMTUdUmV43207051 = -508592298;    double zwvxRMTUdUmV72045987 = -768123917;    double zwvxRMTUdUmV20900049 = -197754998;    double zwvxRMTUdUmV30576804 = -374419901;    double zwvxRMTUdUmV65384724 = 65954197;    double zwvxRMTUdUmV15168556 = -392149698;    double zwvxRMTUdUmV25276253 = -531995985;    double zwvxRMTUdUmV91845276 = -654143898;    double zwvxRMTUdUmV8242070 = -41411941;    double zwvxRMTUdUmV26676586 = -234282181;    double zwvxRMTUdUmV73832283 = -936452996;    double zwvxRMTUdUmV70301804 = -353563487;    double zwvxRMTUdUmV53576478 = -367618682;    double zwvxRMTUdUmV12216688 = -969349103;    double zwvxRMTUdUmV22754207 = -261735701;    double zwvxRMTUdUmV22056312 = -756120235;    double zwvxRMTUdUmV91916371 = -295748132;    double zwvxRMTUdUmV24941287 = -462516781;    double zwvxRMTUdUmV99101612 = -893687277;    double zwvxRMTUdUmV97949271 = 60630782;    double zwvxRMTUdUmV47786208 = 15724889;    double zwvxRMTUdUmV28612173 = -799869277;    double zwvxRMTUdUmV22163830 = -460535242;    double zwvxRMTUdUmV87438837 = -476117109;    double zwvxRMTUdUmV77860875 = -458606804;    double zwvxRMTUdUmV27999916 = -307509456;    double zwvxRMTUdUmV19276398 = -375989831;    double zwvxRMTUdUmV64584540 = -490952644;    double zwvxRMTUdUmV32831243 = -527754650;    double zwvxRMTUdUmV75900357 = -643458575;    double zwvxRMTUdUmV69859090 = -662935097;    double zwvxRMTUdUmV93002772 = -764981749;    double zwvxRMTUdUmV87043839 = -814275239;    double zwvxRMTUdUmV16926079 = -501318592;    double zwvxRMTUdUmV39592924 = -942183387;    double zwvxRMTUdUmV11709401 = -458907491;    double zwvxRMTUdUmV96281918 = -991311027;    double zwvxRMTUdUmV93952051 = -562223126;    double zwvxRMTUdUmV58024531 = -854283045;    double zwvxRMTUdUmV26031188 = -258404194;    double zwvxRMTUdUmV63114064 = -803642351;    double zwvxRMTUdUmV88078989 = -372456375;    double zwvxRMTUdUmV19794295 = -142881169;    double zwvxRMTUdUmV31048628 = -802028183;    double zwvxRMTUdUmV11466838 = -788568501;    double zwvxRMTUdUmV27931393 = -966336842;    double zwvxRMTUdUmV57730043 = -941353540;    double zwvxRMTUdUmV45555127 = -577053547;    double zwvxRMTUdUmV67915724 = -411227346;    double zwvxRMTUdUmV22679320 = -912350444;    double zwvxRMTUdUmV53223438 = -577606009;    double zwvxRMTUdUmV9462575 = -117768714;    double zwvxRMTUdUmV4511889 = -144334316;    double zwvxRMTUdUmV21979577 = -144088324;    double zwvxRMTUdUmV29317930 = -578714296;    double zwvxRMTUdUmV14594879 = -708723021;    double zwvxRMTUdUmV49882158 = -207588676;    double zwvxRMTUdUmV33461211 = -721637890;    double zwvxRMTUdUmV52715928 = -915813097;    double zwvxRMTUdUmV37384809 = -626536348;    double zwvxRMTUdUmV95892158 = 83840133;    double zwvxRMTUdUmV60691713 = 58956659;    double zwvxRMTUdUmV59014034 = -26389249;    double zwvxRMTUdUmV32341712 = -397953366;    double zwvxRMTUdUmV56817495 = -571347085;    double zwvxRMTUdUmV80829510 = -71471248;    double zwvxRMTUdUmV83257965 = -539288248;    double zwvxRMTUdUmV36650400 = -866300091;    double zwvxRMTUdUmV72623763 = 72834284;    double zwvxRMTUdUmV11044807 = -802828211;    double zwvxRMTUdUmV25774393 = -764809209;    double zwvxRMTUdUmV97964320 = -733525006;    double zwvxRMTUdUmV66916755 = -608233736;    double zwvxRMTUdUmV73070425 = -535283084;    double zwvxRMTUdUmV34835208 = -135726867;    double zwvxRMTUdUmV59707219 = -611818736;    double zwvxRMTUdUmV8817879 = -556988108;    double zwvxRMTUdUmV91115201 = -658507059;    double zwvxRMTUdUmV75972000 = -687548608;    double zwvxRMTUdUmV49929483 = -492269963;    double zwvxRMTUdUmV70269872 = -366155916;    double zwvxRMTUdUmV73721270 = -798936284;    double zwvxRMTUdUmV96668815 = 20274701;    double zwvxRMTUdUmV10151923 = -615404207;    double zwvxRMTUdUmV22676919 = 34147433;    double zwvxRMTUdUmV60396515 = -445166383;    double zwvxRMTUdUmV88490884 = -520647434;    double zwvxRMTUdUmV65064263 = -570186915;    double zwvxRMTUdUmV87608148 = -922604297;    double zwvxRMTUdUmV24998046 = -133460366;    double zwvxRMTUdUmV61827243 = -151318815;    double zwvxRMTUdUmV62820707 = -169673137;    double zwvxRMTUdUmV41236123 = -646410029;    double zwvxRMTUdUmV20639723 = -127746698;    double zwvxRMTUdUmV30139029 = -242244327;    double zwvxRMTUdUmV2422351 = -762599010;    double zwvxRMTUdUmV29064955 = -246067127;    double zwvxRMTUdUmV87452582 = -183457542;     zwvxRMTUdUmV19928849 = zwvxRMTUdUmV77104138;     zwvxRMTUdUmV77104138 = zwvxRMTUdUmV43207051;     zwvxRMTUdUmV43207051 = zwvxRMTUdUmV72045987;     zwvxRMTUdUmV72045987 = zwvxRMTUdUmV20900049;     zwvxRMTUdUmV20900049 = zwvxRMTUdUmV30576804;     zwvxRMTUdUmV30576804 = zwvxRMTUdUmV65384724;     zwvxRMTUdUmV65384724 = zwvxRMTUdUmV15168556;     zwvxRMTUdUmV15168556 = zwvxRMTUdUmV25276253;     zwvxRMTUdUmV25276253 = zwvxRMTUdUmV91845276;     zwvxRMTUdUmV91845276 = zwvxRMTUdUmV8242070;     zwvxRMTUdUmV8242070 = zwvxRMTUdUmV26676586;     zwvxRMTUdUmV26676586 = zwvxRMTUdUmV73832283;     zwvxRMTUdUmV73832283 = zwvxRMTUdUmV70301804;     zwvxRMTUdUmV70301804 = zwvxRMTUdUmV53576478;     zwvxRMTUdUmV53576478 = zwvxRMTUdUmV12216688;     zwvxRMTUdUmV12216688 = zwvxRMTUdUmV22754207;     zwvxRMTUdUmV22754207 = zwvxRMTUdUmV22056312;     zwvxRMTUdUmV22056312 = zwvxRMTUdUmV91916371;     zwvxRMTUdUmV91916371 = zwvxRMTUdUmV24941287;     zwvxRMTUdUmV24941287 = zwvxRMTUdUmV99101612;     zwvxRMTUdUmV99101612 = zwvxRMTUdUmV97949271;     zwvxRMTUdUmV97949271 = zwvxRMTUdUmV47786208;     zwvxRMTUdUmV47786208 = zwvxRMTUdUmV28612173;     zwvxRMTUdUmV28612173 = zwvxRMTUdUmV22163830;     zwvxRMTUdUmV22163830 = zwvxRMTUdUmV87438837;     zwvxRMTUdUmV87438837 = zwvxRMTUdUmV77860875;     zwvxRMTUdUmV77860875 = zwvxRMTUdUmV27999916;     zwvxRMTUdUmV27999916 = zwvxRMTUdUmV19276398;     zwvxRMTUdUmV19276398 = zwvxRMTUdUmV64584540;     zwvxRMTUdUmV64584540 = zwvxRMTUdUmV32831243;     zwvxRMTUdUmV32831243 = zwvxRMTUdUmV75900357;     zwvxRMTUdUmV75900357 = zwvxRMTUdUmV69859090;     zwvxRMTUdUmV69859090 = zwvxRMTUdUmV93002772;     zwvxRMTUdUmV93002772 = zwvxRMTUdUmV87043839;     zwvxRMTUdUmV87043839 = zwvxRMTUdUmV16926079;     zwvxRMTUdUmV16926079 = zwvxRMTUdUmV39592924;     zwvxRMTUdUmV39592924 = zwvxRMTUdUmV11709401;     zwvxRMTUdUmV11709401 = zwvxRMTUdUmV96281918;     zwvxRMTUdUmV96281918 = zwvxRMTUdUmV93952051;     zwvxRMTUdUmV93952051 = zwvxRMTUdUmV58024531;     zwvxRMTUdUmV58024531 = zwvxRMTUdUmV26031188;     zwvxRMTUdUmV26031188 = zwvxRMTUdUmV63114064;     zwvxRMTUdUmV63114064 = zwvxRMTUdUmV88078989;     zwvxRMTUdUmV88078989 = zwvxRMTUdUmV19794295;     zwvxRMTUdUmV19794295 = zwvxRMTUdUmV31048628;     zwvxRMTUdUmV31048628 = zwvxRMTUdUmV11466838;     zwvxRMTUdUmV11466838 = zwvxRMTUdUmV27931393;     zwvxRMTUdUmV27931393 = zwvxRMTUdUmV57730043;     zwvxRMTUdUmV57730043 = zwvxRMTUdUmV45555127;     zwvxRMTUdUmV45555127 = zwvxRMTUdUmV67915724;     zwvxRMTUdUmV67915724 = zwvxRMTUdUmV22679320;     zwvxRMTUdUmV22679320 = zwvxRMTUdUmV53223438;     zwvxRMTUdUmV53223438 = zwvxRMTUdUmV9462575;     zwvxRMTUdUmV9462575 = zwvxRMTUdUmV4511889;     zwvxRMTUdUmV4511889 = zwvxRMTUdUmV21979577;     zwvxRMTUdUmV21979577 = zwvxRMTUdUmV29317930;     zwvxRMTUdUmV29317930 = zwvxRMTUdUmV14594879;     zwvxRMTUdUmV14594879 = zwvxRMTUdUmV49882158;     zwvxRMTUdUmV49882158 = zwvxRMTUdUmV33461211;     zwvxRMTUdUmV33461211 = zwvxRMTUdUmV52715928;     zwvxRMTUdUmV52715928 = zwvxRMTUdUmV37384809;     zwvxRMTUdUmV37384809 = zwvxRMTUdUmV95892158;     zwvxRMTUdUmV95892158 = zwvxRMTUdUmV60691713;     zwvxRMTUdUmV60691713 = zwvxRMTUdUmV59014034;     zwvxRMTUdUmV59014034 = zwvxRMTUdUmV32341712;     zwvxRMTUdUmV32341712 = zwvxRMTUdUmV56817495;     zwvxRMTUdUmV56817495 = zwvxRMTUdUmV80829510;     zwvxRMTUdUmV80829510 = zwvxRMTUdUmV83257965;     zwvxRMTUdUmV83257965 = zwvxRMTUdUmV36650400;     zwvxRMTUdUmV36650400 = zwvxRMTUdUmV72623763;     zwvxRMTUdUmV72623763 = zwvxRMTUdUmV11044807;     zwvxRMTUdUmV11044807 = zwvxRMTUdUmV25774393;     zwvxRMTUdUmV25774393 = zwvxRMTUdUmV97964320;     zwvxRMTUdUmV97964320 = zwvxRMTUdUmV66916755;     zwvxRMTUdUmV66916755 = zwvxRMTUdUmV73070425;     zwvxRMTUdUmV73070425 = zwvxRMTUdUmV34835208;     zwvxRMTUdUmV34835208 = zwvxRMTUdUmV59707219;     zwvxRMTUdUmV59707219 = zwvxRMTUdUmV8817879;     zwvxRMTUdUmV8817879 = zwvxRMTUdUmV91115201;     zwvxRMTUdUmV91115201 = zwvxRMTUdUmV75972000;     zwvxRMTUdUmV75972000 = zwvxRMTUdUmV49929483;     zwvxRMTUdUmV49929483 = zwvxRMTUdUmV70269872;     zwvxRMTUdUmV70269872 = zwvxRMTUdUmV73721270;     zwvxRMTUdUmV73721270 = zwvxRMTUdUmV96668815;     zwvxRMTUdUmV96668815 = zwvxRMTUdUmV10151923;     zwvxRMTUdUmV10151923 = zwvxRMTUdUmV22676919;     zwvxRMTUdUmV22676919 = zwvxRMTUdUmV60396515;     zwvxRMTUdUmV60396515 = zwvxRMTUdUmV88490884;     zwvxRMTUdUmV88490884 = zwvxRMTUdUmV65064263;     zwvxRMTUdUmV65064263 = zwvxRMTUdUmV87608148;     zwvxRMTUdUmV87608148 = zwvxRMTUdUmV24998046;     zwvxRMTUdUmV24998046 = zwvxRMTUdUmV61827243;     zwvxRMTUdUmV61827243 = zwvxRMTUdUmV62820707;     zwvxRMTUdUmV62820707 = zwvxRMTUdUmV41236123;     zwvxRMTUdUmV41236123 = zwvxRMTUdUmV20639723;     zwvxRMTUdUmV20639723 = zwvxRMTUdUmV30139029;     zwvxRMTUdUmV30139029 = zwvxRMTUdUmV2422351;     zwvxRMTUdUmV2422351 = zwvxRMTUdUmV29064955;     zwvxRMTUdUmV29064955 = zwvxRMTUdUmV87452582;     zwvxRMTUdUmV87452582 = zwvxRMTUdUmV19928849;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qMxXfeCUQp63916158() {     double vPYgwtCsboUP10055157 = -242213743;    double vPYgwtCsboUP60229203 = 62084424;    double vPYgwtCsboUP38699750 = -645386759;    double vPYgwtCsboUP45544562 = -954295739;    double vPYgwtCsboUP33956784 = -139078440;    double vPYgwtCsboUP11363209 = -267053009;    double vPYgwtCsboUP60048162 = -671591276;    double vPYgwtCsboUP68047119 = -28597436;    double vPYgwtCsboUP49087941 = -539888623;    double vPYgwtCsboUP96100947 = -224018424;    double vPYgwtCsboUP84393888 = -549832099;    double vPYgwtCsboUP61426093 = -813870316;    double vPYgwtCsboUP12178416 = -148688856;    double vPYgwtCsboUP8720658 = -351724371;    double vPYgwtCsboUP51650850 = -852739625;    double vPYgwtCsboUP36396430 = -669728973;    double vPYgwtCsboUP66716387 = -523080942;    double vPYgwtCsboUP43412024 = -98969527;    double vPYgwtCsboUP52830762 = -762158568;    double vPYgwtCsboUP92265535 = -10395090;    double vPYgwtCsboUP87024014 = -598112369;    double vPYgwtCsboUP96030853 = -272465853;    double vPYgwtCsboUP81024626 = -390735032;    double vPYgwtCsboUP36533270 = -147893653;    double vPYgwtCsboUP69049018 = -4046186;    double vPYgwtCsboUP6229803 = -351990843;    double vPYgwtCsboUP99828210 = -218135798;    double vPYgwtCsboUP51170291 = -367399514;    double vPYgwtCsboUP80485395 = -38188879;    double vPYgwtCsboUP12373621 = -365355035;    double vPYgwtCsboUP36294646 = -854421194;    double vPYgwtCsboUP75267271 = -44282995;    double vPYgwtCsboUP78828131 = -963160256;    double vPYgwtCsboUP16841418 = -756432907;    double vPYgwtCsboUP22640374 = -464610900;    double vPYgwtCsboUP70157085 = -804348002;    double vPYgwtCsboUP39826493 = -457999291;    double vPYgwtCsboUP36066684 = -324966734;    double vPYgwtCsboUP6814936 = -698773073;    double vPYgwtCsboUP38464193 = -466930899;    double vPYgwtCsboUP71724205 = -560144321;    double vPYgwtCsboUP80675650 = -72897407;    double vPYgwtCsboUP22930905 = -179067946;    double vPYgwtCsboUP18740930 = -236539564;    double vPYgwtCsboUP11758712 = -255391125;    double vPYgwtCsboUP51487622 = -185652088;    double vPYgwtCsboUP91890127 = -337051001;    double vPYgwtCsboUP18317852 = -992993095;    double vPYgwtCsboUP85648697 = -277292887;    double vPYgwtCsboUP74835533 = 65950115;    double vPYgwtCsboUP97281248 = -785609391;    double vPYgwtCsboUP66452427 = -876777277;    double vPYgwtCsboUP2675894 = -289459004;    double vPYgwtCsboUP62369637 = -241323996;    double vPYgwtCsboUP76892143 = -272934587;    double vPYgwtCsboUP14024304 = -969747890;    double vPYgwtCsboUP79204576 = -547180545;    double vPYgwtCsboUP2166481 = -397493107;    double vPYgwtCsboUP76495544 = -850249554;    double vPYgwtCsboUP27726982 = -787087597;    double vPYgwtCsboUP11534998 = 51082789;    double vPYgwtCsboUP8877872 = -204191763;    double vPYgwtCsboUP87561723 = -990408558;    double vPYgwtCsboUP36714321 = -74533588;    double vPYgwtCsboUP59806301 = -369597230;    double vPYgwtCsboUP9126618 = -405549104;    double vPYgwtCsboUP82597961 = -850710060;    double vPYgwtCsboUP95336998 = -392255950;    double vPYgwtCsboUP86080284 = -887113472;    double vPYgwtCsboUP81493764 = 51608377;    double vPYgwtCsboUP96569936 = -111729682;    double vPYgwtCsboUP30649704 = -98114209;    double vPYgwtCsboUP36597089 = -400196455;    double vPYgwtCsboUP14366570 = -195227669;    double vPYgwtCsboUP20541331 = -450250770;    double vPYgwtCsboUP6348364 = -425214963;    double vPYgwtCsboUP73099948 = 6602093;    double vPYgwtCsboUP62283696 = -54195468;    double vPYgwtCsboUP24774558 = -892502528;    double vPYgwtCsboUP17561397 = -818394098;    double vPYgwtCsboUP14339675 = 85060157;    double vPYgwtCsboUP81510359 = -225142704;    double vPYgwtCsboUP65521593 = 9893372;    double vPYgwtCsboUP5649863 = -4138995;    double vPYgwtCsboUP15092372 = -579745645;    double vPYgwtCsboUP69842218 = -977643918;    double vPYgwtCsboUP72591378 = -754823991;    double vPYgwtCsboUP16458494 = -621836261;    double vPYgwtCsboUP39949274 = -383498320;    double vPYgwtCsboUP8616071 = -494863011;    double vPYgwtCsboUP90952508 = -157167458;    double vPYgwtCsboUP37660013 = 39493815;    double vPYgwtCsboUP59571139 = -474717181;    double vPYgwtCsboUP79087953 = -911685476;    double vPYgwtCsboUP26929195 = -418013688;    double vPYgwtCsboUP62846333 = -255952559;    double vPYgwtCsboUP93113927 = -82488850;    double vPYgwtCsboUP86216584 = -4534359;    double vPYgwtCsboUP58934629 = -866942335;    double vPYgwtCsboUP2632095 = -242213743;     vPYgwtCsboUP10055157 = vPYgwtCsboUP60229203;     vPYgwtCsboUP60229203 = vPYgwtCsboUP38699750;     vPYgwtCsboUP38699750 = vPYgwtCsboUP45544562;     vPYgwtCsboUP45544562 = vPYgwtCsboUP33956784;     vPYgwtCsboUP33956784 = vPYgwtCsboUP11363209;     vPYgwtCsboUP11363209 = vPYgwtCsboUP60048162;     vPYgwtCsboUP60048162 = vPYgwtCsboUP68047119;     vPYgwtCsboUP68047119 = vPYgwtCsboUP49087941;     vPYgwtCsboUP49087941 = vPYgwtCsboUP96100947;     vPYgwtCsboUP96100947 = vPYgwtCsboUP84393888;     vPYgwtCsboUP84393888 = vPYgwtCsboUP61426093;     vPYgwtCsboUP61426093 = vPYgwtCsboUP12178416;     vPYgwtCsboUP12178416 = vPYgwtCsboUP8720658;     vPYgwtCsboUP8720658 = vPYgwtCsboUP51650850;     vPYgwtCsboUP51650850 = vPYgwtCsboUP36396430;     vPYgwtCsboUP36396430 = vPYgwtCsboUP66716387;     vPYgwtCsboUP66716387 = vPYgwtCsboUP43412024;     vPYgwtCsboUP43412024 = vPYgwtCsboUP52830762;     vPYgwtCsboUP52830762 = vPYgwtCsboUP92265535;     vPYgwtCsboUP92265535 = vPYgwtCsboUP87024014;     vPYgwtCsboUP87024014 = vPYgwtCsboUP96030853;     vPYgwtCsboUP96030853 = vPYgwtCsboUP81024626;     vPYgwtCsboUP81024626 = vPYgwtCsboUP36533270;     vPYgwtCsboUP36533270 = vPYgwtCsboUP69049018;     vPYgwtCsboUP69049018 = vPYgwtCsboUP6229803;     vPYgwtCsboUP6229803 = vPYgwtCsboUP99828210;     vPYgwtCsboUP99828210 = vPYgwtCsboUP51170291;     vPYgwtCsboUP51170291 = vPYgwtCsboUP80485395;     vPYgwtCsboUP80485395 = vPYgwtCsboUP12373621;     vPYgwtCsboUP12373621 = vPYgwtCsboUP36294646;     vPYgwtCsboUP36294646 = vPYgwtCsboUP75267271;     vPYgwtCsboUP75267271 = vPYgwtCsboUP78828131;     vPYgwtCsboUP78828131 = vPYgwtCsboUP16841418;     vPYgwtCsboUP16841418 = vPYgwtCsboUP22640374;     vPYgwtCsboUP22640374 = vPYgwtCsboUP70157085;     vPYgwtCsboUP70157085 = vPYgwtCsboUP39826493;     vPYgwtCsboUP39826493 = vPYgwtCsboUP36066684;     vPYgwtCsboUP36066684 = vPYgwtCsboUP6814936;     vPYgwtCsboUP6814936 = vPYgwtCsboUP38464193;     vPYgwtCsboUP38464193 = vPYgwtCsboUP71724205;     vPYgwtCsboUP71724205 = vPYgwtCsboUP80675650;     vPYgwtCsboUP80675650 = vPYgwtCsboUP22930905;     vPYgwtCsboUP22930905 = vPYgwtCsboUP18740930;     vPYgwtCsboUP18740930 = vPYgwtCsboUP11758712;     vPYgwtCsboUP11758712 = vPYgwtCsboUP51487622;     vPYgwtCsboUP51487622 = vPYgwtCsboUP91890127;     vPYgwtCsboUP91890127 = vPYgwtCsboUP18317852;     vPYgwtCsboUP18317852 = vPYgwtCsboUP85648697;     vPYgwtCsboUP85648697 = vPYgwtCsboUP74835533;     vPYgwtCsboUP74835533 = vPYgwtCsboUP97281248;     vPYgwtCsboUP97281248 = vPYgwtCsboUP66452427;     vPYgwtCsboUP66452427 = vPYgwtCsboUP2675894;     vPYgwtCsboUP2675894 = vPYgwtCsboUP62369637;     vPYgwtCsboUP62369637 = vPYgwtCsboUP76892143;     vPYgwtCsboUP76892143 = vPYgwtCsboUP14024304;     vPYgwtCsboUP14024304 = vPYgwtCsboUP79204576;     vPYgwtCsboUP79204576 = vPYgwtCsboUP2166481;     vPYgwtCsboUP2166481 = vPYgwtCsboUP76495544;     vPYgwtCsboUP76495544 = vPYgwtCsboUP27726982;     vPYgwtCsboUP27726982 = vPYgwtCsboUP11534998;     vPYgwtCsboUP11534998 = vPYgwtCsboUP8877872;     vPYgwtCsboUP8877872 = vPYgwtCsboUP87561723;     vPYgwtCsboUP87561723 = vPYgwtCsboUP36714321;     vPYgwtCsboUP36714321 = vPYgwtCsboUP59806301;     vPYgwtCsboUP59806301 = vPYgwtCsboUP9126618;     vPYgwtCsboUP9126618 = vPYgwtCsboUP82597961;     vPYgwtCsboUP82597961 = vPYgwtCsboUP95336998;     vPYgwtCsboUP95336998 = vPYgwtCsboUP86080284;     vPYgwtCsboUP86080284 = vPYgwtCsboUP81493764;     vPYgwtCsboUP81493764 = vPYgwtCsboUP96569936;     vPYgwtCsboUP96569936 = vPYgwtCsboUP30649704;     vPYgwtCsboUP30649704 = vPYgwtCsboUP36597089;     vPYgwtCsboUP36597089 = vPYgwtCsboUP14366570;     vPYgwtCsboUP14366570 = vPYgwtCsboUP20541331;     vPYgwtCsboUP20541331 = vPYgwtCsboUP6348364;     vPYgwtCsboUP6348364 = vPYgwtCsboUP73099948;     vPYgwtCsboUP73099948 = vPYgwtCsboUP62283696;     vPYgwtCsboUP62283696 = vPYgwtCsboUP24774558;     vPYgwtCsboUP24774558 = vPYgwtCsboUP17561397;     vPYgwtCsboUP17561397 = vPYgwtCsboUP14339675;     vPYgwtCsboUP14339675 = vPYgwtCsboUP81510359;     vPYgwtCsboUP81510359 = vPYgwtCsboUP65521593;     vPYgwtCsboUP65521593 = vPYgwtCsboUP5649863;     vPYgwtCsboUP5649863 = vPYgwtCsboUP15092372;     vPYgwtCsboUP15092372 = vPYgwtCsboUP69842218;     vPYgwtCsboUP69842218 = vPYgwtCsboUP72591378;     vPYgwtCsboUP72591378 = vPYgwtCsboUP16458494;     vPYgwtCsboUP16458494 = vPYgwtCsboUP39949274;     vPYgwtCsboUP39949274 = vPYgwtCsboUP8616071;     vPYgwtCsboUP8616071 = vPYgwtCsboUP90952508;     vPYgwtCsboUP90952508 = vPYgwtCsboUP37660013;     vPYgwtCsboUP37660013 = vPYgwtCsboUP59571139;     vPYgwtCsboUP59571139 = vPYgwtCsboUP79087953;     vPYgwtCsboUP79087953 = vPYgwtCsboUP26929195;     vPYgwtCsboUP26929195 = vPYgwtCsboUP62846333;     vPYgwtCsboUP62846333 = vPYgwtCsboUP93113927;     vPYgwtCsboUP93113927 = vPYgwtCsboUP86216584;     vPYgwtCsboUP86216584 = vPYgwtCsboUP58934629;     vPYgwtCsboUP58934629 = vPYgwtCsboUP2632095;     vPYgwtCsboUP2632095 = vPYgwtCsboUP10055157;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void YcDMtlQzzw76461347() {     double CELtWfRIpS29523328 = -655344954;    double CELtWfRIpS13253067 = -483793572;    double CELtWfRIpS55536742 = -297015374;    double CELtWfRIpS64191711 = -770870002;    double CELtWfRIpS34403301 = -765350856;    double CELtWfRIpS36955283 = -157537777;    double CELtWfRIpS4880041 = -14897506;    double CELtWfRIpS33297353 = -122405402;    double CELtWfRIpS9774738 = -168080002;    double CELtWfRIpS74029670 = -229604470;    double CELtWfRIpS38617152 = -982822399;    double CELtWfRIpS64920706 = -813173021;    double CELtWfRIpS2550076 = -573046133;    double CELtWfRIpS17136699 = -894010097;    double CELtWfRIpS12177312 = -50823416;    double CELtWfRIpS2612079 = -32920907;    double CELtWfRIpS72678500 = -694855624;    double CELtWfRIpS67474775 = -949724245;    double CELtWfRIpS52465642 = -39363328;    double CELtWfRIpS72876837 = -727931547;    double CELtWfRIpS99480086 = -104324695;    double CELtWfRIpS11012937 = -784269066;    double CELtWfRIpS49197632 = -688309650;    double CELtWfRIpS54254939 = -884437644;    double CELtWfRIpS80252507 = -298346295;    double CELtWfRIpS10997264 = -37786062;    double CELtWfRIpS83756341 = -983286730;    double CELtWfRIpS1961966 = -531132793;    double CELtWfRIpS22230353 = -52100025;    double CELtWfRIpS97080474 = -456793730;    double CELtWfRIpS66098731 = -719747287;    double CELtWfRIpS14846583 = -608632013;    double CELtWfRIpS90304234 = -418368023;    double CELtWfRIpS75597924 = 38963887;    double CELtWfRIpS62570710 = -527313706;    double CELtWfRIpS6223023 = -7916610;    double CELtWfRIpS8209944 = -984875366;    double CELtWfRIpS77549158 = -402175550;    double CELtWfRIpS74128260 = -63187898;    double CELtWfRIpS59745929 = -463461995;    double CELtWfRIpS13206262 = 30069383;    double CELtWfRIpS92534783 = -311793633;    double CELtWfRIpS94064146 = -126869744;    double CELtWfRIpS2126469 = -685612225;    double CELtWfRIpS91787123 = -532514088;    double CELtWfRIpS5948749 = -722983510;    double CELtWfRIpS73880007 = -250744324;    double CELtWfRIpS18473682 = -76280409;    double CELtWfRIpS26784289 = -291232125;    double CELtWfRIpS15733876 = -795062230;    double CELtWfRIpS71716817 = -91974322;    double CELtWfRIpS82901287 = -154130136;    double CELtWfRIpS72501040 = 34432035;    double CELtWfRIpS35299666 = -235917632;    double CELtWfRIpS76981260 = -47493222;    double CELtWfRIpS18510391 = -871075889;    double CELtWfRIpS64055434 = -795483922;    double CELtWfRIpS1281804 = -412577730;    double CELtWfRIpS83939204 = -372523708;    double CELtWfRIpS23406037 = -627564795;    double CELtWfRIpS53198941 = -174251048;    double CELtWfRIpS2918075 = -483764714;    double CELtWfRIpS11067001 = 29694622;    double CELtWfRIpS12694264 = -711286273;    double CELtWfRIpS7930940 = -509857183;    double CELtWfRIpS23770570 = -274190386;    double CELtWfRIpS74616472 = -294804999;    double CELtWfRIpS26952151 = -512010020;    double CELtWfRIpS54565988 = -266696392;    double CELtWfRIpS5954289 = 57093194;    double CELtWfRIpS94402134 = -48045541;    double CELtWfRIpS95129342 = -192680074;    double CELtWfRIpS93346515 = -786536348;    double CELtWfRIpS92719712 = -575901333;    double CELtWfRIpS59670575 = -658000930;    double CELtWfRIpS6945303 = -792531063;    double CELtWfRIpS16948791 = -557399323;    double CELtWfRIpS47071164 = 97302574;    double CELtWfRIpS62467815 = -251923557;    double CELtWfRIpS74303758 = -575362786;    double CELtWfRIpS37117256 = -787041739;    double CELtWfRIpS65282660 = -807006321;    double CELtWfRIpS75177677 = -139900668;    double CELtWfRIpS6496477 = -257037796;    double CELtWfRIpS25363657 = -264819408;    double CELtWfRIpS83197443 = -465617151;    double CELtWfRIpS42345542 = -543064049;    double CELtWfRIpS55004569 = -82450391;    double CELtWfRIpS98616664 = -913542891;    double CELtWfRIpS44060320 = -656237818;    double CELtWfRIpS42167588 = -212432688;    double CELtWfRIpS6928141 = -472297637;    double CELtWfRIpS93609954 = 70348157;    double CELtWfRIpS50722224 = -435623103;    double CELtWfRIpS6546988 = -189210948;    double CELtWfRIpS10288187 = -486165904;    double CELtWfRIpS81467783 = -241488255;    double CELtWfRIpS81369882 = -415583472;    double CELtWfRIpS94195529 = -75755042;    double CELtWfRIpS68016553 = -655344954;     CELtWfRIpS29523328 = CELtWfRIpS13253067;     CELtWfRIpS13253067 = CELtWfRIpS55536742;     CELtWfRIpS55536742 = CELtWfRIpS64191711;     CELtWfRIpS64191711 = CELtWfRIpS34403301;     CELtWfRIpS34403301 = CELtWfRIpS36955283;     CELtWfRIpS36955283 = CELtWfRIpS4880041;     CELtWfRIpS4880041 = CELtWfRIpS33297353;     CELtWfRIpS33297353 = CELtWfRIpS9774738;     CELtWfRIpS9774738 = CELtWfRIpS74029670;     CELtWfRIpS74029670 = CELtWfRIpS38617152;     CELtWfRIpS38617152 = CELtWfRIpS64920706;     CELtWfRIpS64920706 = CELtWfRIpS2550076;     CELtWfRIpS2550076 = CELtWfRIpS17136699;     CELtWfRIpS17136699 = CELtWfRIpS12177312;     CELtWfRIpS12177312 = CELtWfRIpS2612079;     CELtWfRIpS2612079 = CELtWfRIpS72678500;     CELtWfRIpS72678500 = CELtWfRIpS67474775;     CELtWfRIpS67474775 = CELtWfRIpS52465642;     CELtWfRIpS52465642 = CELtWfRIpS72876837;     CELtWfRIpS72876837 = CELtWfRIpS99480086;     CELtWfRIpS99480086 = CELtWfRIpS11012937;     CELtWfRIpS11012937 = CELtWfRIpS49197632;     CELtWfRIpS49197632 = CELtWfRIpS54254939;     CELtWfRIpS54254939 = CELtWfRIpS80252507;     CELtWfRIpS80252507 = CELtWfRIpS10997264;     CELtWfRIpS10997264 = CELtWfRIpS83756341;     CELtWfRIpS83756341 = CELtWfRIpS1961966;     CELtWfRIpS1961966 = CELtWfRIpS22230353;     CELtWfRIpS22230353 = CELtWfRIpS97080474;     CELtWfRIpS97080474 = CELtWfRIpS66098731;     CELtWfRIpS66098731 = CELtWfRIpS14846583;     CELtWfRIpS14846583 = CELtWfRIpS90304234;     CELtWfRIpS90304234 = CELtWfRIpS75597924;     CELtWfRIpS75597924 = CELtWfRIpS62570710;     CELtWfRIpS62570710 = CELtWfRIpS6223023;     CELtWfRIpS6223023 = CELtWfRIpS8209944;     CELtWfRIpS8209944 = CELtWfRIpS77549158;     CELtWfRIpS77549158 = CELtWfRIpS74128260;     CELtWfRIpS74128260 = CELtWfRIpS59745929;     CELtWfRIpS59745929 = CELtWfRIpS13206262;     CELtWfRIpS13206262 = CELtWfRIpS92534783;     CELtWfRIpS92534783 = CELtWfRIpS94064146;     CELtWfRIpS94064146 = CELtWfRIpS2126469;     CELtWfRIpS2126469 = CELtWfRIpS91787123;     CELtWfRIpS91787123 = CELtWfRIpS5948749;     CELtWfRIpS5948749 = CELtWfRIpS73880007;     CELtWfRIpS73880007 = CELtWfRIpS18473682;     CELtWfRIpS18473682 = CELtWfRIpS26784289;     CELtWfRIpS26784289 = CELtWfRIpS15733876;     CELtWfRIpS15733876 = CELtWfRIpS71716817;     CELtWfRIpS71716817 = CELtWfRIpS82901287;     CELtWfRIpS82901287 = CELtWfRIpS72501040;     CELtWfRIpS72501040 = CELtWfRIpS35299666;     CELtWfRIpS35299666 = CELtWfRIpS76981260;     CELtWfRIpS76981260 = CELtWfRIpS18510391;     CELtWfRIpS18510391 = CELtWfRIpS64055434;     CELtWfRIpS64055434 = CELtWfRIpS1281804;     CELtWfRIpS1281804 = CELtWfRIpS83939204;     CELtWfRIpS83939204 = CELtWfRIpS23406037;     CELtWfRIpS23406037 = CELtWfRIpS53198941;     CELtWfRIpS53198941 = CELtWfRIpS2918075;     CELtWfRIpS2918075 = CELtWfRIpS11067001;     CELtWfRIpS11067001 = CELtWfRIpS12694264;     CELtWfRIpS12694264 = CELtWfRIpS7930940;     CELtWfRIpS7930940 = CELtWfRIpS23770570;     CELtWfRIpS23770570 = CELtWfRIpS74616472;     CELtWfRIpS74616472 = CELtWfRIpS26952151;     CELtWfRIpS26952151 = CELtWfRIpS54565988;     CELtWfRIpS54565988 = CELtWfRIpS5954289;     CELtWfRIpS5954289 = CELtWfRIpS94402134;     CELtWfRIpS94402134 = CELtWfRIpS95129342;     CELtWfRIpS95129342 = CELtWfRIpS93346515;     CELtWfRIpS93346515 = CELtWfRIpS92719712;     CELtWfRIpS92719712 = CELtWfRIpS59670575;     CELtWfRIpS59670575 = CELtWfRIpS6945303;     CELtWfRIpS6945303 = CELtWfRIpS16948791;     CELtWfRIpS16948791 = CELtWfRIpS47071164;     CELtWfRIpS47071164 = CELtWfRIpS62467815;     CELtWfRIpS62467815 = CELtWfRIpS74303758;     CELtWfRIpS74303758 = CELtWfRIpS37117256;     CELtWfRIpS37117256 = CELtWfRIpS65282660;     CELtWfRIpS65282660 = CELtWfRIpS75177677;     CELtWfRIpS75177677 = CELtWfRIpS6496477;     CELtWfRIpS6496477 = CELtWfRIpS25363657;     CELtWfRIpS25363657 = CELtWfRIpS83197443;     CELtWfRIpS83197443 = CELtWfRIpS42345542;     CELtWfRIpS42345542 = CELtWfRIpS55004569;     CELtWfRIpS55004569 = CELtWfRIpS98616664;     CELtWfRIpS98616664 = CELtWfRIpS44060320;     CELtWfRIpS44060320 = CELtWfRIpS42167588;     CELtWfRIpS42167588 = CELtWfRIpS6928141;     CELtWfRIpS6928141 = CELtWfRIpS93609954;     CELtWfRIpS93609954 = CELtWfRIpS50722224;     CELtWfRIpS50722224 = CELtWfRIpS6546988;     CELtWfRIpS6546988 = CELtWfRIpS10288187;     CELtWfRIpS10288187 = CELtWfRIpS81467783;     CELtWfRIpS81467783 = CELtWfRIpS81369882;     CELtWfRIpS81369882 = CELtWfRIpS94195529;     CELtWfRIpS94195529 = CELtWfRIpS68016553;     CELtWfRIpS68016553 = CELtWfRIpS29523328;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tDEGLoDGkK72644507() {     double fTyNmDESyW89119424 = -884101332;    double fTyNmDESyW14758917 = -293948957;    double fTyNmDESyW92538130 = -371156297;    double fTyNmDESyW60067469 = -543480880;    double fTyNmDESyW45696527 = -665857883;    double fTyNmDESyW34632404 = -15797450;    double fTyNmDESyW2238524 = -444615092;    double fTyNmDESyW84122636 = -476616778;    double fTyNmDESyW23588182 = -700752501;    double fTyNmDESyW57054185 = -170863323;    double fTyNmDESyW63912084 = -284364838;    double fTyNmDESyW99591908 = -908194271;    double fTyNmDESyW73304638 = -479224651;    double fTyNmDESyW75510537 = -798168444;    double fTyNmDESyW9485118 = -843349937;    double fTyNmDESyW99366332 = -938293798;    double fTyNmDESyW8639604 = -623071904;    double fTyNmDESyW32143106 = -219060350;    double fTyNmDESyW32907845 = -178482958;    double fTyNmDESyW52793946 = -290340200;    double fTyNmDESyW79941205 = 62654481;    double fTyNmDESyW79502535 = -676670944;    double fTyNmDESyW41389457 = -452604729;    double fTyNmDESyW18985178 = -448775881;    double fTyNmDESyW56230512 = -854483885;    double fTyNmDESyW5412171 = -172403533;    double fTyNmDESyW97096412 = -332766727;    double fTyNmDESyW67073134 = -52514383;    double fTyNmDESyW72014695 = -941692640;    double fTyNmDESyW35553941 = -503776972;    double fTyNmDESyW91013049 = -264966615;    double fTyNmDESyW57611842 = 74149990;    double fTyNmDESyW39386273 = -398314896;    double fTyNmDESyW58122367 = -562920044;    double fTyNmDESyW67508071 = -175523692;    double fTyNmDESyW84812919 = -319573192;    double fTyNmDESyW98841621 = -177654001;    double fTyNmDESyW75909495 = -346627940;    double fTyNmDESyW93146203 = -881894414;    double fTyNmDESyW32571584 = -737342944;    double fTyNmDESyW71424075 = -438592213;    double fTyNmDESyW62613965 = -316735051;    double fTyNmDESyW34943389 = -960314573;    double fTyNmDESyW76365973 = -9526964;    double fTyNmDESyW92775438 = 21167843;    double fTyNmDESyW70741877 = -965927668;    double fTyNmDESyW79368730 = -142599991;    double fTyNmDESyW65170075 = -409033638;    double fTyNmDESyW66173936 = -575169745;    double fTyNmDESyW30901268 = -16314691;    double fTyNmDESyW22203068 = -978082546;    double fTyNmDESyW89486440 = -125373391;    double fTyNmDESyW47916554 = -205516419;    double fTyNmDESyW8574189 = -496086587;    double fTyNmDESyW92703302 = -11427310;    double fTyNmDESyW9616889 = -107430388;    double fTyNmDESyW73369459 = -841344229;    double fTyNmDESyW73552952 = -922380416;    double fTyNmDESyW3836958 = -688996995;    double fTyNmDESyW40284356 = -393454351;    double fTyNmDESyW37535992 = -683030724;    double fTyNmDESyW35165389 = -292100709;    double fTyNmDESyW12107942 = -534924138;    double fTyNmDESyW88034240 = -96975530;    double fTyNmDESyW66041136 = -905896709;    double fTyNmDESyW6300242 = -258514828;    double fTyNmDESyW60205635 = -409879376;    double fTyNmDESyW15182272 = -916304607;    double fTyNmDESyW8002466 = -522644753;    double fTyNmDESyW24672198 = -423776746;    double fTyNmDESyW524712 = -660639797;    double fTyNmDESyW32730109 = -176443965;    double fTyNmDESyW38996903 = -337165936;    double fTyNmDESyW336262 = -441140015;    double fTyNmDESyW81369871 = -851747987;    double fTyNmDESyW17327241 = -620610469;    double fTyNmDESyW44559147 = -716356371;    double fTyNmDESyW65023483 = -343077766;    double fTyNmDESyW26209739 = -369943725;    double fTyNmDESyW85488634 = -888556217;    double fTyNmDESyW26043441 = 70196458;    double fTyNmDESyW31926337 = -923733090;    double fTyNmDESyW899199 = -477344639;    double fTyNmDESyW41113428 = -825377950;    double fTyNmDESyW13350874 = -525694427;    double fTyNmDESyW1526609 = -39593224;    double fTyNmDESyW9695289 = -720333592;    double fTyNmDESyW30812084 = -902228309;    double fTyNmDESyW65419065 = -451492735;    double fTyNmDESyW57891182 = 31906696;    double fTyNmDESyW11443461 = -478228964;    double fTyNmDESyW25288669 = -255273585;    double fTyNmDESyW72072538 = -657630945;    double fTyNmDESyW52861847 = -388440064;    double fTyNmDESyW95035592 = 45687780;    double fTyNmDESyW36258687 = -46491504;    double fTyNmDESyW50506024 = -781810914;    double fTyNmDESyW46909148 = -763339044;    double fTyNmDESyW10324838 = -103630255;    double fTyNmDESyW86475197 = -884101332;     fTyNmDESyW89119424 = fTyNmDESyW14758917;     fTyNmDESyW14758917 = fTyNmDESyW92538130;     fTyNmDESyW92538130 = fTyNmDESyW60067469;     fTyNmDESyW60067469 = fTyNmDESyW45696527;     fTyNmDESyW45696527 = fTyNmDESyW34632404;     fTyNmDESyW34632404 = fTyNmDESyW2238524;     fTyNmDESyW2238524 = fTyNmDESyW84122636;     fTyNmDESyW84122636 = fTyNmDESyW23588182;     fTyNmDESyW23588182 = fTyNmDESyW57054185;     fTyNmDESyW57054185 = fTyNmDESyW63912084;     fTyNmDESyW63912084 = fTyNmDESyW99591908;     fTyNmDESyW99591908 = fTyNmDESyW73304638;     fTyNmDESyW73304638 = fTyNmDESyW75510537;     fTyNmDESyW75510537 = fTyNmDESyW9485118;     fTyNmDESyW9485118 = fTyNmDESyW99366332;     fTyNmDESyW99366332 = fTyNmDESyW8639604;     fTyNmDESyW8639604 = fTyNmDESyW32143106;     fTyNmDESyW32143106 = fTyNmDESyW32907845;     fTyNmDESyW32907845 = fTyNmDESyW52793946;     fTyNmDESyW52793946 = fTyNmDESyW79941205;     fTyNmDESyW79941205 = fTyNmDESyW79502535;     fTyNmDESyW79502535 = fTyNmDESyW41389457;     fTyNmDESyW41389457 = fTyNmDESyW18985178;     fTyNmDESyW18985178 = fTyNmDESyW56230512;     fTyNmDESyW56230512 = fTyNmDESyW5412171;     fTyNmDESyW5412171 = fTyNmDESyW97096412;     fTyNmDESyW97096412 = fTyNmDESyW67073134;     fTyNmDESyW67073134 = fTyNmDESyW72014695;     fTyNmDESyW72014695 = fTyNmDESyW35553941;     fTyNmDESyW35553941 = fTyNmDESyW91013049;     fTyNmDESyW91013049 = fTyNmDESyW57611842;     fTyNmDESyW57611842 = fTyNmDESyW39386273;     fTyNmDESyW39386273 = fTyNmDESyW58122367;     fTyNmDESyW58122367 = fTyNmDESyW67508071;     fTyNmDESyW67508071 = fTyNmDESyW84812919;     fTyNmDESyW84812919 = fTyNmDESyW98841621;     fTyNmDESyW98841621 = fTyNmDESyW75909495;     fTyNmDESyW75909495 = fTyNmDESyW93146203;     fTyNmDESyW93146203 = fTyNmDESyW32571584;     fTyNmDESyW32571584 = fTyNmDESyW71424075;     fTyNmDESyW71424075 = fTyNmDESyW62613965;     fTyNmDESyW62613965 = fTyNmDESyW34943389;     fTyNmDESyW34943389 = fTyNmDESyW76365973;     fTyNmDESyW76365973 = fTyNmDESyW92775438;     fTyNmDESyW92775438 = fTyNmDESyW70741877;     fTyNmDESyW70741877 = fTyNmDESyW79368730;     fTyNmDESyW79368730 = fTyNmDESyW65170075;     fTyNmDESyW65170075 = fTyNmDESyW66173936;     fTyNmDESyW66173936 = fTyNmDESyW30901268;     fTyNmDESyW30901268 = fTyNmDESyW22203068;     fTyNmDESyW22203068 = fTyNmDESyW89486440;     fTyNmDESyW89486440 = fTyNmDESyW47916554;     fTyNmDESyW47916554 = fTyNmDESyW8574189;     fTyNmDESyW8574189 = fTyNmDESyW92703302;     fTyNmDESyW92703302 = fTyNmDESyW9616889;     fTyNmDESyW9616889 = fTyNmDESyW73369459;     fTyNmDESyW73369459 = fTyNmDESyW73552952;     fTyNmDESyW73552952 = fTyNmDESyW3836958;     fTyNmDESyW3836958 = fTyNmDESyW40284356;     fTyNmDESyW40284356 = fTyNmDESyW37535992;     fTyNmDESyW37535992 = fTyNmDESyW35165389;     fTyNmDESyW35165389 = fTyNmDESyW12107942;     fTyNmDESyW12107942 = fTyNmDESyW88034240;     fTyNmDESyW88034240 = fTyNmDESyW66041136;     fTyNmDESyW66041136 = fTyNmDESyW6300242;     fTyNmDESyW6300242 = fTyNmDESyW60205635;     fTyNmDESyW60205635 = fTyNmDESyW15182272;     fTyNmDESyW15182272 = fTyNmDESyW8002466;     fTyNmDESyW8002466 = fTyNmDESyW24672198;     fTyNmDESyW24672198 = fTyNmDESyW524712;     fTyNmDESyW524712 = fTyNmDESyW32730109;     fTyNmDESyW32730109 = fTyNmDESyW38996903;     fTyNmDESyW38996903 = fTyNmDESyW336262;     fTyNmDESyW336262 = fTyNmDESyW81369871;     fTyNmDESyW81369871 = fTyNmDESyW17327241;     fTyNmDESyW17327241 = fTyNmDESyW44559147;     fTyNmDESyW44559147 = fTyNmDESyW65023483;     fTyNmDESyW65023483 = fTyNmDESyW26209739;     fTyNmDESyW26209739 = fTyNmDESyW85488634;     fTyNmDESyW85488634 = fTyNmDESyW26043441;     fTyNmDESyW26043441 = fTyNmDESyW31926337;     fTyNmDESyW31926337 = fTyNmDESyW899199;     fTyNmDESyW899199 = fTyNmDESyW41113428;     fTyNmDESyW41113428 = fTyNmDESyW13350874;     fTyNmDESyW13350874 = fTyNmDESyW1526609;     fTyNmDESyW1526609 = fTyNmDESyW9695289;     fTyNmDESyW9695289 = fTyNmDESyW30812084;     fTyNmDESyW30812084 = fTyNmDESyW65419065;     fTyNmDESyW65419065 = fTyNmDESyW57891182;     fTyNmDESyW57891182 = fTyNmDESyW11443461;     fTyNmDESyW11443461 = fTyNmDESyW25288669;     fTyNmDESyW25288669 = fTyNmDESyW72072538;     fTyNmDESyW72072538 = fTyNmDESyW52861847;     fTyNmDESyW52861847 = fTyNmDESyW95035592;     fTyNmDESyW95035592 = fTyNmDESyW36258687;     fTyNmDESyW36258687 = fTyNmDESyW50506024;     fTyNmDESyW50506024 = fTyNmDESyW46909148;     fTyNmDESyW46909148 = fTyNmDESyW10324838;     fTyNmDESyW10324838 = fTyNmDESyW86475197;     fTyNmDESyW86475197 = fTyNmDESyW89119424;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bbbKfNiwUA85189696() {     double eQrhJHoVnt8587595 = -197232544;    double eQrhJHoVnt67782780 = -839826954;    double eQrhJHoVnt9375122 = -22784912;    double eQrhJHoVnt78714618 = -360055143;    double eQrhJHoVnt46143043 = -192130299;    double eQrhJHoVnt60224478 = 93717781;    double eQrhJHoVnt47070402 = -887921322;    double eQrhJHoVnt49372870 = -570424744;    double eQrhJHoVnt84274979 = -328943880;    double eQrhJHoVnt34982909 = -176449369;    double eQrhJHoVnt18135348 = -717355138;    double eQrhJHoVnt3086522 = -907496975;    double eQrhJHoVnt63676297 = -903581928;    double eQrhJHoVnt83926577 = -240454170;    double eQrhJHoVnt70011578 = -41433729;    double eQrhJHoVnt65581982 = -301485732;    double eQrhJHoVnt14601718 = -794846586;    double eQrhJHoVnt56205858 = 30184932;    double eQrhJHoVnt32542724 = -555687719;    double eQrhJHoVnt33405248 = 92123344;    double eQrhJHoVnt92397277 = -543557845;    double eQrhJHoVnt94484618 = -88474157;    double eQrhJHoVnt9562464 = -750179348;    double eQrhJHoVnt36706846 = -85319873;    double eQrhJHoVnt67434001 = -48783995;    double eQrhJHoVnt10179633 = -958198751;    double eQrhJHoVnt81024543 = 2082341;    double eQrhJHoVnt17864810 = -216247662;    double eQrhJHoVnt13759652 = -955603786;    double eQrhJHoVnt20260795 = -595215667;    double eQrhJHoVnt20817135 = -130292708;    double eQrhJHoVnt97191153 = -490199029;    double eQrhJHoVnt50862377 = -953522662;    double eQrhJHoVnt16878874 = -867523251;    double eQrhJHoVnt7438408 = -238226498;    double eQrhJHoVnt20878857 = -623141801;    double eQrhJHoVnt67225072 = -704530076;    double eQrhJHoVnt17391970 = -423836755;    double eQrhJHoVnt60459528 = -246309239;    double eQrhJHoVnt53853320 = -733874040;    double eQrhJHoVnt12906133 = -948378509;    double eQrhJHoVnt74473098 = -555631277;    double eQrhJHoVnt6076630 = -908116371;    double eQrhJHoVnt59751512 = -458599624;    double eQrhJHoVnt72803849 = -255955120;    double eQrhJHoVnt25203005 = -403259090;    double eQrhJHoVnt61358610 = -56293314;    double eQrhJHoVnt65325905 = -592320952;    double eQrhJHoVnt7309528 = -589108983;    double eQrhJHoVnt71799610 = -877327036;    double eQrhJHoVnt96638636 = -284447477;    double eQrhJHoVnt5935301 = -502726251;    double eQrhJHoVnt17741701 = -981625380;    double eQrhJHoVnt81504217 = -490680224;    double eQrhJHoVnt92792418 = -885985945;    double eQrhJHoVnt14102976 = -8758387;    double eQrhJHoVnt58220317 = 10352394;    double eQrhJHoVnt72668276 = -937465039;    double eQrhJHoVnt11280618 = -211271149;    double eQrhJHoVnt35963411 = -233931549;    double eQrhJHoVnt79199934 = -908364561;    double eQrhJHoVnt29205593 = -571673660;    double eQrhJHoVnt35613218 = -614820958;    double eQrhJHoVnt64014184 = -733728214;    double eQrhJHoVnt14165774 = 53843338;    double eQrhJHoVnt20944194 = -127156110;    double eQrhJHoVnt52224145 = -953974314;    double eQrhJHoVnt46797424 = 63941322;    double eQrhJHoVnt76488170 = 97772327;    double eQrhJHoVnt49132722 = -418291929;    double eQrhJHoVnt98356909 = -596955656;    double eQrhJHoVnt97209747 = -271009831;    double eQrhJHoVnt95746329 = -723505829;    double eQrhJHoVnt78689404 = -821813679;    double eQrhJHoVnt20499116 = 40501853;    double eQrhJHoVnt17924180 = -987926568;    double eQrhJHoVnt88407988 = -180357787;    double eQrhJHoVnt49810951 = -191579724;    double eQrhJHoVnt63902996 = -829364754;    double eQrhJHoVnt42230996 = -645524905;    double eQrhJHoVnt48821022 = -801905438;    double eQrhJHoVnt15698638 = -405596707;    double eQrhJHoVnt10555282 = -627138679;    double eQrhJHoVnt41960042 = 21723249;    double eQrhJHoVnt23622159 = -210768190;    double eQrhJHoVnt14881834 = -627566457;    double eQrhJHoVnt79449452 = -508573649;    double eQrhJHoVnt69358159 = -362842439;    double eQrhJHoVnt24086455 = -981537307;    double eQrhJHoVnt93335431 = -129468111;    double eQrhJHoVnt62658540 = -533494195;    double eQrhJHoVnt94556796 = -767065037;    double eQrhJHoVnt6111353 = -112565607;    double eQrhJHoVnt24496117 = 87622309;    double eQrhJHoVnt74653385 = -825509480;    double eQrhJHoVnt83700540 = -276704849;    double eQrhJHoVnt38859880 = -940810320;    double eQrhJHoVnt42062446 = -74388157;    double eQrhJHoVnt45585738 = -412442963;    double eQrhJHoVnt51859656 = -197232544;     eQrhJHoVnt8587595 = eQrhJHoVnt67782780;     eQrhJHoVnt67782780 = eQrhJHoVnt9375122;     eQrhJHoVnt9375122 = eQrhJHoVnt78714618;     eQrhJHoVnt78714618 = eQrhJHoVnt46143043;     eQrhJHoVnt46143043 = eQrhJHoVnt60224478;     eQrhJHoVnt60224478 = eQrhJHoVnt47070402;     eQrhJHoVnt47070402 = eQrhJHoVnt49372870;     eQrhJHoVnt49372870 = eQrhJHoVnt84274979;     eQrhJHoVnt84274979 = eQrhJHoVnt34982909;     eQrhJHoVnt34982909 = eQrhJHoVnt18135348;     eQrhJHoVnt18135348 = eQrhJHoVnt3086522;     eQrhJHoVnt3086522 = eQrhJHoVnt63676297;     eQrhJHoVnt63676297 = eQrhJHoVnt83926577;     eQrhJHoVnt83926577 = eQrhJHoVnt70011578;     eQrhJHoVnt70011578 = eQrhJHoVnt65581982;     eQrhJHoVnt65581982 = eQrhJHoVnt14601718;     eQrhJHoVnt14601718 = eQrhJHoVnt56205858;     eQrhJHoVnt56205858 = eQrhJHoVnt32542724;     eQrhJHoVnt32542724 = eQrhJHoVnt33405248;     eQrhJHoVnt33405248 = eQrhJHoVnt92397277;     eQrhJHoVnt92397277 = eQrhJHoVnt94484618;     eQrhJHoVnt94484618 = eQrhJHoVnt9562464;     eQrhJHoVnt9562464 = eQrhJHoVnt36706846;     eQrhJHoVnt36706846 = eQrhJHoVnt67434001;     eQrhJHoVnt67434001 = eQrhJHoVnt10179633;     eQrhJHoVnt10179633 = eQrhJHoVnt81024543;     eQrhJHoVnt81024543 = eQrhJHoVnt17864810;     eQrhJHoVnt17864810 = eQrhJHoVnt13759652;     eQrhJHoVnt13759652 = eQrhJHoVnt20260795;     eQrhJHoVnt20260795 = eQrhJHoVnt20817135;     eQrhJHoVnt20817135 = eQrhJHoVnt97191153;     eQrhJHoVnt97191153 = eQrhJHoVnt50862377;     eQrhJHoVnt50862377 = eQrhJHoVnt16878874;     eQrhJHoVnt16878874 = eQrhJHoVnt7438408;     eQrhJHoVnt7438408 = eQrhJHoVnt20878857;     eQrhJHoVnt20878857 = eQrhJHoVnt67225072;     eQrhJHoVnt67225072 = eQrhJHoVnt17391970;     eQrhJHoVnt17391970 = eQrhJHoVnt60459528;     eQrhJHoVnt60459528 = eQrhJHoVnt53853320;     eQrhJHoVnt53853320 = eQrhJHoVnt12906133;     eQrhJHoVnt12906133 = eQrhJHoVnt74473098;     eQrhJHoVnt74473098 = eQrhJHoVnt6076630;     eQrhJHoVnt6076630 = eQrhJHoVnt59751512;     eQrhJHoVnt59751512 = eQrhJHoVnt72803849;     eQrhJHoVnt72803849 = eQrhJHoVnt25203005;     eQrhJHoVnt25203005 = eQrhJHoVnt61358610;     eQrhJHoVnt61358610 = eQrhJHoVnt65325905;     eQrhJHoVnt65325905 = eQrhJHoVnt7309528;     eQrhJHoVnt7309528 = eQrhJHoVnt71799610;     eQrhJHoVnt71799610 = eQrhJHoVnt96638636;     eQrhJHoVnt96638636 = eQrhJHoVnt5935301;     eQrhJHoVnt5935301 = eQrhJHoVnt17741701;     eQrhJHoVnt17741701 = eQrhJHoVnt81504217;     eQrhJHoVnt81504217 = eQrhJHoVnt92792418;     eQrhJHoVnt92792418 = eQrhJHoVnt14102976;     eQrhJHoVnt14102976 = eQrhJHoVnt58220317;     eQrhJHoVnt58220317 = eQrhJHoVnt72668276;     eQrhJHoVnt72668276 = eQrhJHoVnt11280618;     eQrhJHoVnt11280618 = eQrhJHoVnt35963411;     eQrhJHoVnt35963411 = eQrhJHoVnt79199934;     eQrhJHoVnt79199934 = eQrhJHoVnt29205593;     eQrhJHoVnt29205593 = eQrhJHoVnt35613218;     eQrhJHoVnt35613218 = eQrhJHoVnt64014184;     eQrhJHoVnt64014184 = eQrhJHoVnt14165774;     eQrhJHoVnt14165774 = eQrhJHoVnt20944194;     eQrhJHoVnt20944194 = eQrhJHoVnt52224145;     eQrhJHoVnt52224145 = eQrhJHoVnt46797424;     eQrhJHoVnt46797424 = eQrhJHoVnt76488170;     eQrhJHoVnt76488170 = eQrhJHoVnt49132722;     eQrhJHoVnt49132722 = eQrhJHoVnt98356909;     eQrhJHoVnt98356909 = eQrhJHoVnt97209747;     eQrhJHoVnt97209747 = eQrhJHoVnt95746329;     eQrhJHoVnt95746329 = eQrhJHoVnt78689404;     eQrhJHoVnt78689404 = eQrhJHoVnt20499116;     eQrhJHoVnt20499116 = eQrhJHoVnt17924180;     eQrhJHoVnt17924180 = eQrhJHoVnt88407988;     eQrhJHoVnt88407988 = eQrhJHoVnt49810951;     eQrhJHoVnt49810951 = eQrhJHoVnt63902996;     eQrhJHoVnt63902996 = eQrhJHoVnt42230996;     eQrhJHoVnt42230996 = eQrhJHoVnt48821022;     eQrhJHoVnt48821022 = eQrhJHoVnt15698638;     eQrhJHoVnt15698638 = eQrhJHoVnt10555282;     eQrhJHoVnt10555282 = eQrhJHoVnt41960042;     eQrhJHoVnt41960042 = eQrhJHoVnt23622159;     eQrhJHoVnt23622159 = eQrhJHoVnt14881834;     eQrhJHoVnt14881834 = eQrhJHoVnt79449452;     eQrhJHoVnt79449452 = eQrhJHoVnt69358159;     eQrhJHoVnt69358159 = eQrhJHoVnt24086455;     eQrhJHoVnt24086455 = eQrhJHoVnt93335431;     eQrhJHoVnt93335431 = eQrhJHoVnt62658540;     eQrhJHoVnt62658540 = eQrhJHoVnt94556796;     eQrhJHoVnt94556796 = eQrhJHoVnt6111353;     eQrhJHoVnt6111353 = eQrhJHoVnt24496117;     eQrhJHoVnt24496117 = eQrhJHoVnt74653385;     eQrhJHoVnt74653385 = eQrhJHoVnt83700540;     eQrhJHoVnt83700540 = eQrhJHoVnt38859880;     eQrhJHoVnt38859880 = eQrhJHoVnt42062446;     eQrhJHoVnt42062446 = eQrhJHoVnt45585738;     eQrhJHoVnt45585738 = eQrhJHoVnt51859656;     eQrhJHoVnt51859656 = eQrhJHoVnt8587595;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fDLCVwwpAu45492354() {     double PcQCnPeSdU98713902 = -255988745;    double PcQCnPeSdU50907845 = -114753124;    double PcQCnPeSdU4867821 = -159579373;    double PcQCnPeSdU52213193 = -546226965;    double PcQCnPeSdU59199778 = -133453741;    double PcQCnPeSdU41010882 = -898915327;    double PcQCnPeSdU41733840 = -525466794;    double PcQCnPeSdU2251434 = -206872482;    double PcQCnPeSdU8086667 = -336836518;    double PcQCnPeSdU39238579 = -846323894;    double PcQCnPeSdU94287166 = -125775296;    double PcQCnPeSdU37836029 = -387085111;    double PcQCnPeSdU2022430 = -115817788;    double PcQCnPeSdU22345431 = -238615055;    double PcQCnPeSdU68085950 = -526554672;    double PcQCnPeSdU89761724 = -1865602;    double PcQCnPeSdU58563898 = 43808173;    double PcQCnPeSdU77561570 = -412664361;    double PcQCnPeSdU93457115 = 77901845;    double PcQCnPeSdU729497 = -555754965;    double PcQCnPeSdU80319679 = -247982937;    double PcQCnPeSdU92566200 = -421570793;    double PcQCnPeSdU42800882 = -56639269;    double PcQCnPeSdU44627944 = -533344249;    double PcQCnPeSdU14319189 = -692294939;    double PcQCnPeSdU28970597 = -834072486;    double PcQCnPeSdU2991878 = -857446653;    double PcQCnPeSdU41035185 = -276137720;    double PcQCnPeSdU74968650 = -617802834;    double PcQCnPeSdU68049875 = -469618058;    double PcQCnPeSdU24280537 = -456959252;    double PcQCnPeSdU96558067 = -991023448;    double PcQCnPeSdU59831418 = -153747822;    double PcQCnPeSdU40717519 = -858974409;    double PcQCnPeSdU43034942 = -988562158;    double PcQCnPeSdU74109863 = -926171211;    double PcQCnPeSdU67458641 = -220345980;    double PcQCnPeSdU41749253 = -289895999;    double PcQCnPeSdU70992545 = 46228715;    double PcQCnPeSdU98365461 = -638581813;    double PcQCnPeSdU26605806 = -654239784;    double PcQCnPeSdU29117561 = -370124490;    double PcQCnPeSdU65893471 = -283541966;    double PcQCnPeSdU90413453 = -322682813;    double PcQCnPeSdU64768267 = -368465076;    double PcQCnPeSdU45641998 = -886882995;    double PcQCnPeSdU41781900 = -704775813;    double PcQCnPeSdU55712364 = -618977205;    double PcQCnPeSdU35228181 = 74951670;    double PcQCnPeSdU1080016 = -234323373;    double PcQCnPeSdU26004160 = -658829522;    double PcQCnPeSdU49708408 = -467153084;    double PcQCnPeSdU67194155 = -693478374;    double PcQCnPeSdU34411280 = -614235505;    double PcQCnPeSdU65172674 = 85413784;    double PcQCnPeSdU6147703 = -834417952;    double PcQCnPeSdU8106964 = 41886145;    double PcQCnPeSdU60239877 = -626235125;    double PcQCnPeSdU37894004 = -853932027;    double PcQCnPeSdU30229182 = -299381256;    double PcQCnPeSdU38019004 = 58531325;    double PcQCnPeSdU698656 = -149329075;    double PcQCnPeSdU27282783 = -589069649;    double PcQCnPeSdU40036792 = -867218461;    double PcQCnPeSdU14958042 = -289364643;    double PcQCnPeSdU97729099 = -134751848;    double PcQCnPeSdU78004611 = -133337289;    double PcQCnPeSdU61304911 = -256843380;    double PcQCnPeSdU79310489 = -250052897;    double PcQCnPeSdU93976087 = -600383461;    double PcQCnPeSdU22303083 = -781519622;    double PcQCnPeSdU16814645 = -666295829;    double PcQCnPeSdU6569026 = -358893076;    double PcQCnPeSdU95091653 = -283516342;    double PcQCnPeSdU74123690 = -901515182;    double PcQCnPeSdU51202119 = -877858447;    double PcQCnPeSdU26672730 = -38028827;    double PcQCnPeSdU52387428 = -733956456;    double PcQCnPeSdU79859676 = -64879173;    double PcQCnPeSdU68677191 = -805411944;    double PcQCnPeSdU87188697 = -29296673;    double PcQCnPeSdU47279513 = -138469448;    double PcQCnPeSdU5807004 = -251089391;    double PcQCnPeSdU73888634 = -283479461;    double PcQCnPeSdU42045715 = -810788536;    double PcQCnPeSdU74572129 = -989806168;    double PcQCnPeSdU29363912 = -197545074;    double PcQCnPeSdU25420138 = -539512317;    double PcQCnPeSdU75544845 = -844388193;    double PcQCnPeSdU36887239 = -54144207;    double PcQCnPeSdU66002899 = -868057356;    double PcQCnPeSdU7218764 = -594110856;    double PcQCnPeSdU3855250 = -435963973;    double PcQCnPeSdU40763364 = -654390030;    double PcQCnPeSdU60346457 = -597113139;    double PcQCnPeSdU25907150 = -404910710;    double PcQCnPeSdU1834778 = -781054842;    double PcQCnPeSdU25856680 = -416323506;    double PcQCnPeSdU75455412 = 66681830;    double PcQCnPeSdU67039168 = -255988745;     PcQCnPeSdU98713902 = PcQCnPeSdU50907845;     PcQCnPeSdU50907845 = PcQCnPeSdU4867821;     PcQCnPeSdU4867821 = PcQCnPeSdU52213193;     PcQCnPeSdU52213193 = PcQCnPeSdU59199778;     PcQCnPeSdU59199778 = PcQCnPeSdU41010882;     PcQCnPeSdU41010882 = PcQCnPeSdU41733840;     PcQCnPeSdU41733840 = PcQCnPeSdU2251434;     PcQCnPeSdU2251434 = PcQCnPeSdU8086667;     PcQCnPeSdU8086667 = PcQCnPeSdU39238579;     PcQCnPeSdU39238579 = PcQCnPeSdU94287166;     PcQCnPeSdU94287166 = PcQCnPeSdU37836029;     PcQCnPeSdU37836029 = PcQCnPeSdU2022430;     PcQCnPeSdU2022430 = PcQCnPeSdU22345431;     PcQCnPeSdU22345431 = PcQCnPeSdU68085950;     PcQCnPeSdU68085950 = PcQCnPeSdU89761724;     PcQCnPeSdU89761724 = PcQCnPeSdU58563898;     PcQCnPeSdU58563898 = PcQCnPeSdU77561570;     PcQCnPeSdU77561570 = PcQCnPeSdU93457115;     PcQCnPeSdU93457115 = PcQCnPeSdU729497;     PcQCnPeSdU729497 = PcQCnPeSdU80319679;     PcQCnPeSdU80319679 = PcQCnPeSdU92566200;     PcQCnPeSdU92566200 = PcQCnPeSdU42800882;     PcQCnPeSdU42800882 = PcQCnPeSdU44627944;     PcQCnPeSdU44627944 = PcQCnPeSdU14319189;     PcQCnPeSdU14319189 = PcQCnPeSdU28970597;     PcQCnPeSdU28970597 = PcQCnPeSdU2991878;     PcQCnPeSdU2991878 = PcQCnPeSdU41035185;     PcQCnPeSdU41035185 = PcQCnPeSdU74968650;     PcQCnPeSdU74968650 = PcQCnPeSdU68049875;     PcQCnPeSdU68049875 = PcQCnPeSdU24280537;     PcQCnPeSdU24280537 = PcQCnPeSdU96558067;     PcQCnPeSdU96558067 = PcQCnPeSdU59831418;     PcQCnPeSdU59831418 = PcQCnPeSdU40717519;     PcQCnPeSdU40717519 = PcQCnPeSdU43034942;     PcQCnPeSdU43034942 = PcQCnPeSdU74109863;     PcQCnPeSdU74109863 = PcQCnPeSdU67458641;     PcQCnPeSdU67458641 = PcQCnPeSdU41749253;     PcQCnPeSdU41749253 = PcQCnPeSdU70992545;     PcQCnPeSdU70992545 = PcQCnPeSdU98365461;     PcQCnPeSdU98365461 = PcQCnPeSdU26605806;     PcQCnPeSdU26605806 = PcQCnPeSdU29117561;     PcQCnPeSdU29117561 = PcQCnPeSdU65893471;     PcQCnPeSdU65893471 = PcQCnPeSdU90413453;     PcQCnPeSdU90413453 = PcQCnPeSdU64768267;     PcQCnPeSdU64768267 = PcQCnPeSdU45641998;     PcQCnPeSdU45641998 = PcQCnPeSdU41781900;     PcQCnPeSdU41781900 = PcQCnPeSdU55712364;     PcQCnPeSdU55712364 = PcQCnPeSdU35228181;     PcQCnPeSdU35228181 = PcQCnPeSdU1080016;     PcQCnPeSdU1080016 = PcQCnPeSdU26004160;     PcQCnPeSdU26004160 = PcQCnPeSdU49708408;     PcQCnPeSdU49708408 = PcQCnPeSdU67194155;     PcQCnPeSdU67194155 = PcQCnPeSdU34411280;     PcQCnPeSdU34411280 = PcQCnPeSdU65172674;     PcQCnPeSdU65172674 = PcQCnPeSdU6147703;     PcQCnPeSdU6147703 = PcQCnPeSdU8106964;     PcQCnPeSdU8106964 = PcQCnPeSdU60239877;     PcQCnPeSdU60239877 = PcQCnPeSdU37894004;     PcQCnPeSdU37894004 = PcQCnPeSdU30229182;     PcQCnPeSdU30229182 = PcQCnPeSdU38019004;     PcQCnPeSdU38019004 = PcQCnPeSdU698656;     PcQCnPeSdU698656 = PcQCnPeSdU27282783;     PcQCnPeSdU27282783 = PcQCnPeSdU40036792;     PcQCnPeSdU40036792 = PcQCnPeSdU14958042;     PcQCnPeSdU14958042 = PcQCnPeSdU97729099;     PcQCnPeSdU97729099 = PcQCnPeSdU78004611;     PcQCnPeSdU78004611 = PcQCnPeSdU61304911;     PcQCnPeSdU61304911 = PcQCnPeSdU79310489;     PcQCnPeSdU79310489 = PcQCnPeSdU93976087;     PcQCnPeSdU93976087 = PcQCnPeSdU22303083;     PcQCnPeSdU22303083 = PcQCnPeSdU16814645;     PcQCnPeSdU16814645 = PcQCnPeSdU6569026;     PcQCnPeSdU6569026 = PcQCnPeSdU95091653;     PcQCnPeSdU95091653 = PcQCnPeSdU74123690;     PcQCnPeSdU74123690 = PcQCnPeSdU51202119;     PcQCnPeSdU51202119 = PcQCnPeSdU26672730;     PcQCnPeSdU26672730 = PcQCnPeSdU52387428;     PcQCnPeSdU52387428 = PcQCnPeSdU79859676;     PcQCnPeSdU79859676 = PcQCnPeSdU68677191;     PcQCnPeSdU68677191 = PcQCnPeSdU87188697;     PcQCnPeSdU87188697 = PcQCnPeSdU47279513;     PcQCnPeSdU47279513 = PcQCnPeSdU5807004;     PcQCnPeSdU5807004 = PcQCnPeSdU73888634;     PcQCnPeSdU73888634 = PcQCnPeSdU42045715;     PcQCnPeSdU42045715 = PcQCnPeSdU74572129;     PcQCnPeSdU74572129 = PcQCnPeSdU29363912;     PcQCnPeSdU29363912 = PcQCnPeSdU25420138;     PcQCnPeSdU25420138 = PcQCnPeSdU75544845;     PcQCnPeSdU75544845 = PcQCnPeSdU36887239;     PcQCnPeSdU36887239 = PcQCnPeSdU66002899;     PcQCnPeSdU66002899 = PcQCnPeSdU7218764;     PcQCnPeSdU7218764 = PcQCnPeSdU3855250;     PcQCnPeSdU3855250 = PcQCnPeSdU40763364;     PcQCnPeSdU40763364 = PcQCnPeSdU60346457;     PcQCnPeSdU60346457 = PcQCnPeSdU25907150;     PcQCnPeSdU25907150 = PcQCnPeSdU1834778;     PcQCnPeSdU1834778 = PcQCnPeSdU25856680;     PcQCnPeSdU25856680 = PcQCnPeSdU75455412;     PcQCnPeSdU75455412 = PcQCnPeSdU67039168;     PcQCnPeSdU67039168 = PcQCnPeSdU98713902;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void yDfsTzivCW58037542() {     double fXJqKecrHw18182074 = -669119956;    double fXJqKecrHw3931709 = -660631120;    double fXJqKecrHw21704813 = -911207988;    double fXJqKecrHw70860342 = -362801228;    double fXJqKecrHw59646295 = -759726157;    double fXJqKecrHw66602956 = -789400095;    double fXJqKecrHw86565718 = -968773024;    double fXJqKecrHw67501666 = -300680448;    double fXJqKecrHw68773463 = 34972103;    double fXJqKecrHw17167302 = -851909940;    double fXJqKecrHw48510430 = -558765596;    double fXJqKecrHw41330642 = -386387815;    double fXJqKecrHw92394089 = -540175065;    double fXJqKecrHw30761471 = -780900780;    double fXJqKecrHw28612412 = -824638463;    double fXJqKecrHw55977373 = -465057536;    double fXJqKecrHw64526011 = -127966508;    double fXJqKecrHw1624322 = -163419079;    double fXJqKecrHw93091994 = -299302915;    double fXJqKecrHw81340798 = -173291422;    double fXJqKecrHw92775751 = -854195263;    double fXJqKecrHw7548284 = -933374006;    double fXJqKecrHw10973888 = -354213887;    double fXJqKecrHw62349612 = -169888240;    double fXJqKecrHw25522678 = -986595048;    double fXJqKecrHw33738059 = -519867704;    double fXJqKecrHw86920008 = -522597584;    double fXJqKecrHw91826859 = -439870999;    double fXJqKecrHw16713607 = -631713980;    double fXJqKecrHw52756729 = -561056752;    double fXJqKecrHw54084622 = -322285344;    double fXJqKecrHw36137378 = -455372466;    double fXJqKecrHw71307521 = -708955589;    double fXJqKecrHw99474025 = -63577615;    double fXJqKecrHw82965277 = 48735035;    double fXJqKecrHw10175801 = -129739819;    double fXJqKecrHw35842092 = -747222055;    double fXJqKecrHw83231727 = -367104815;    double fXJqKecrHw38305870 = -418186110;    double fXJqKecrHw19647198 = -635112910;    double fXJqKecrHw68087863 = -64026080;    double fXJqKecrHw40976694 = -609020716;    double fXJqKecrHw37026712 = -231343764;    double fXJqKecrHw73798992 = -771755474;    double fXJqKecrHw44796678 = -645588039;    double fXJqKecrHw103126 = -324214416;    double fXJqKecrHw23771780 = -618469136;    double fXJqKecrHw55868194 = -802264520;    double fXJqKecrHw76363772 = 61012432;    double fXJqKecrHw41978358 = 4664282;    double fXJqKecrHw439730 = 34805547;    double fXJqKecrHw66157268 = -844505943;    double fXJqKecrHw37019302 = -369587335;    double fXJqKecrHw7341309 = -608829142;    double fXJqKecrHw65261790 = -789144851;    double fXJqKecrHw10633790 = -735745951;    double fXJqKecrHw92957821 = -206417233;    double fXJqKecrHw59355201 = -641319748;    double fXJqKecrHw45337664 = -376206180;    double fXJqKecrHw25908237 = -139858453;    double fXJqKecrHw79682947 = -166802511;    double fXJqKecrHw94738859 = -428902026;    double fXJqKecrHw50788060 = -668966469;    double fXJqKecrHw16016735 = -403971145;    double fXJqKecrHw63082679 = -429624597;    double fXJqKecrHw12373053 = -3393130;    double fXJqKecrHw70023121 = -677432227;    double fXJqKecrHw92920063 = -376597450;    double fXJqKecrHw47796193 = -729635816;    double fXJqKecrHw18436611 = -594898644;    double fXJqKecrHw20135282 = -717835481;    double fXJqKecrHw81294283 = -760861694;    double fXJqKecrHw63318452 = -745232969;    double fXJqKecrHw73444797 = -664190006;    double fXJqKecrHw13252936 = -9265342;    double fXJqKecrHw51799058 = -145174547;    double fXJqKecrHw70521571 = -602030242;    double fXJqKecrHw37174896 = -582458414;    double fXJqKecrHw17552934 = -524300202;    double fXJqKecrHw25419553 = -562380632;    double fXJqKecrHw9966279 = -901398568;    double fXJqKecrHw31051815 = -720333065;    double fXJqKecrHw15463088 = -400883431;    double fXJqKecrHw74735248 = -536378262;    double fXJqKecrHw52317000 = -495862300;    double fXJqKecrHw87927354 = -477779402;    double fXJqKecrHw99118076 = 14214869;    double fXJqKecrHw63966213 = -126447;    double fXJqKecrHw34212235 = -274432765;    double fXJqKecrHw72331488 = -215519014;    double fXJqKecrHw17217979 = -923322587;    double fXJqKecrHw76486891 = -5902308;    double fXJqKecrHw37894064 = -990898635;    double fXJqKecrHw12397634 = -178327657;    double fXJqKecrHw39964250 = -368310399;    double fXJqKecrHw73349003 = -635124055;    double fXJqKecrHw90188634 = -940054248;    double fXJqKecrHw21009978 = -827372619;    double fXJqKecrHw10716313 = -242130878;    double fXJqKecrHw32423626 = -669119956;     fXJqKecrHw18182074 = fXJqKecrHw3931709;     fXJqKecrHw3931709 = fXJqKecrHw21704813;     fXJqKecrHw21704813 = fXJqKecrHw70860342;     fXJqKecrHw70860342 = fXJqKecrHw59646295;     fXJqKecrHw59646295 = fXJqKecrHw66602956;     fXJqKecrHw66602956 = fXJqKecrHw86565718;     fXJqKecrHw86565718 = fXJqKecrHw67501666;     fXJqKecrHw67501666 = fXJqKecrHw68773463;     fXJqKecrHw68773463 = fXJqKecrHw17167302;     fXJqKecrHw17167302 = fXJqKecrHw48510430;     fXJqKecrHw48510430 = fXJqKecrHw41330642;     fXJqKecrHw41330642 = fXJqKecrHw92394089;     fXJqKecrHw92394089 = fXJqKecrHw30761471;     fXJqKecrHw30761471 = fXJqKecrHw28612412;     fXJqKecrHw28612412 = fXJqKecrHw55977373;     fXJqKecrHw55977373 = fXJqKecrHw64526011;     fXJqKecrHw64526011 = fXJqKecrHw1624322;     fXJqKecrHw1624322 = fXJqKecrHw93091994;     fXJqKecrHw93091994 = fXJqKecrHw81340798;     fXJqKecrHw81340798 = fXJqKecrHw92775751;     fXJqKecrHw92775751 = fXJqKecrHw7548284;     fXJqKecrHw7548284 = fXJqKecrHw10973888;     fXJqKecrHw10973888 = fXJqKecrHw62349612;     fXJqKecrHw62349612 = fXJqKecrHw25522678;     fXJqKecrHw25522678 = fXJqKecrHw33738059;     fXJqKecrHw33738059 = fXJqKecrHw86920008;     fXJqKecrHw86920008 = fXJqKecrHw91826859;     fXJqKecrHw91826859 = fXJqKecrHw16713607;     fXJqKecrHw16713607 = fXJqKecrHw52756729;     fXJqKecrHw52756729 = fXJqKecrHw54084622;     fXJqKecrHw54084622 = fXJqKecrHw36137378;     fXJqKecrHw36137378 = fXJqKecrHw71307521;     fXJqKecrHw71307521 = fXJqKecrHw99474025;     fXJqKecrHw99474025 = fXJqKecrHw82965277;     fXJqKecrHw82965277 = fXJqKecrHw10175801;     fXJqKecrHw10175801 = fXJqKecrHw35842092;     fXJqKecrHw35842092 = fXJqKecrHw83231727;     fXJqKecrHw83231727 = fXJqKecrHw38305870;     fXJqKecrHw38305870 = fXJqKecrHw19647198;     fXJqKecrHw19647198 = fXJqKecrHw68087863;     fXJqKecrHw68087863 = fXJqKecrHw40976694;     fXJqKecrHw40976694 = fXJqKecrHw37026712;     fXJqKecrHw37026712 = fXJqKecrHw73798992;     fXJqKecrHw73798992 = fXJqKecrHw44796678;     fXJqKecrHw44796678 = fXJqKecrHw103126;     fXJqKecrHw103126 = fXJqKecrHw23771780;     fXJqKecrHw23771780 = fXJqKecrHw55868194;     fXJqKecrHw55868194 = fXJqKecrHw76363772;     fXJqKecrHw76363772 = fXJqKecrHw41978358;     fXJqKecrHw41978358 = fXJqKecrHw439730;     fXJqKecrHw439730 = fXJqKecrHw66157268;     fXJqKecrHw66157268 = fXJqKecrHw37019302;     fXJqKecrHw37019302 = fXJqKecrHw7341309;     fXJqKecrHw7341309 = fXJqKecrHw65261790;     fXJqKecrHw65261790 = fXJqKecrHw10633790;     fXJqKecrHw10633790 = fXJqKecrHw92957821;     fXJqKecrHw92957821 = fXJqKecrHw59355201;     fXJqKecrHw59355201 = fXJqKecrHw45337664;     fXJqKecrHw45337664 = fXJqKecrHw25908237;     fXJqKecrHw25908237 = fXJqKecrHw79682947;     fXJqKecrHw79682947 = fXJqKecrHw94738859;     fXJqKecrHw94738859 = fXJqKecrHw50788060;     fXJqKecrHw50788060 = fXJqKecrHw16016735;     fXJqKecrHw16016735 = fXJqKecrHw63082679;     fXJqKecrHw63082679 = fXJqKecrHw12373053;     fXJqKecrHw12373053 = fXJqKecrHw70023121;     fXJqKecrHw70023121 = fXJqKecrHw92920063;     fXJqKecrHw92920063 = fXJqKecrHw47796193;     fXJqKecrHw47796193 = fXJqKecrHw18436611;     fXJqKecrHw18436611 = fXJqKecrHw20135282;     fXJqKecrHw20135282 = fXJqKecrHw81294283;     fXJqKecrHw81294283 = fXJqKecrHw63318452;     fXJqKecrHw63318452 = fXJqKecrHw73444797;     fXJqKecrHw73444797 = fXJqKecrHw13252936;     fXJqKecrHw13252936 = fXJqKecrHw51799058;     fXJqKecrHw51799058 = fXJqKecrHw70521571;     fXJqKecrHw70521571 = fXJqKecrHw37174896;     fXJqKecrHw37174896 = fXJqKecrHw17552934;     fXJqKecrHw17552934 = fXJqKecrHw25419553;     fXJqKecrHw25419553 = fXJqKecrHw9966279;     fXJqKecrHw9966279 = fXJqKecrHw31051815;     fXJqKecrHw31051815 = fXJqKecrHw15463088;     fXJqKecrHw15463088 = fXJqKecrHw74735248;     fXJqKecrHw74735248 = fXJqKecrHw52317000;     fXJqKecrHw52317000 = fXJqKecrHw87927354;     fXJqKecrHw87927354 = fXJqKecrHw99118076;     fXJqKecrHw99118076 = fXJqKecrHw63966213;     fXJqKecrHw63966213 = fXJqKecrHw34212235;     fXJqKecrHw34212235 = fXJqKecrHw72331488;     fXJqKecrHw72331488 = fXJqKecrHw17217979;     fXJqKecrHw17217979 = fXJqKecrHw76486891;     fXJqKecrHw76486891 = fXJqKecrHw37894064;     fXJqKecrHw37894064 = fXJqKecrHw12397634;     fXJqKecrHw12397634 = fXJqKecrHw39964250;     fXJqKecrHw39964250 = fXJqKecrHw73349003;     fXJqKecrHw73349003 = fXJqKecrHw90188634;     fXJqKecrHw90188634 = fXJqKecrHw21009978;     fXJqKecrHw21009978 = fXJqKecrHw10716313;     fXJqKecrHw10716313 = fXJqKecrHw32423626;     fXJqKecrHw32423626 = fXJqKecrHw18182074;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void vHWGsMNfWB54220702() {     double pInpTMlRqC77778170 = -897876334;    double pInpTMlRqC5437559 = -470786505;    double pInpTMlRqC58706201 = -985348910;    double pInpTMlRqC66736100 = -135412105;    double pInpTMlRqC70939521 = -660233184;    double pInpTMlRqC64280077 = -647659768;    double pInpTMlRqC83924201 = -298490610;    double pInpTMlRqC18326951 = -654891824;    double pInpTMlRqC82586907 = -497700396;    double pInpTMlRqC191817 = -793168794;    double pInpTMlRqC73805361 = -960308035;    double pInpTMlRqC76001844 = -481409065;    double pInpTMlRqC63148652 = -446353583;    double pInpTMlRqC89135309 = -685059128;    double pInpTMlRqC25920217 = -517164984;    double pInpTMlRqC52731627 = -270430427;    double pInpTMlRqC487115 = -56182789;    double pInpTMlRqC66292653 = -532755183;    double pInpTMlRqC73534197 = -438422545;    double pInpTMlRqC61257907 = -835700075;    double pInpTMlRqC73236870 = -687216087;    double pInpTMlRqC76037882 = -825775883;    double pInpTMlRqC3165713 = -118508966;    double pInpTMlRqC27079851 = -834226477;    double pInpTMlRqC1500683 = -442732638;    double pInpTMlRqC28152966 = -654485175;    double pInpTMlRqC260080 = -972077581;    double pInpTMlRqC56938028 = 38747411;    double pInpTMlRqC66497949 = -421306595;    double pInpTMlRqC91230195 = -608039994;    double pInpTMlRqC78998940 = -967504672;    double pInpTMlRqC78902638 = -872590464;    double pInpTMlRqC20389560 = -688902461;    double pInpTMlRqC81998468 = -665461546;    double pInpTMlRqC87902638 = -699474950;    double pInpTMlRqC88765697 = -441396401;    double pInpTMlRqC26473769 = 59999310;    double pInpTMlRqC81592065 = -311557204;    double pInpTMlRqC57323813 = -136892627;    double pInpTMlRqC92472851 = -908993858;    double pInpTMlRqC26305677 = -532687677;    double pInpTMlRqC11055875 = -613962135;    double pInpTMlRqC77905954 = 35211406;    double pInpTMlRqC48038497 = -95670213;    double pInpTMlRqC45784994 = -91906108;    double pInpTMlRqC64896254 = -567158575;    double pInpTMlRqC29260502 = -510324803;    double pInpTMlRqC2564589 = -35017748;    double pInpTMlRqC15753420 = -222925188;    double pInpTMlRqC57145750 = -316588179;    double pInpTMlRqC50925980 = -851302677;    double pInpTMlRqC72742421 = -815749198;    double pInpTMlRqC12434817 = -609535789;    double pInpTMlRqC80615831 = -868998097;    double pInpTMlRqC80983832 = -753078938;    double pInpTMlRqC1740289 = 27899549;    double pInpTMlRqC2271846 = -252277539;    double pInpTMlRqC31626350 = -51122434;    double pInpTMlRqC65235417 = -692679468;    double pInpTMlRqC42786556 = 94251990;    double pInpTMlRqC64019998 = -675582187;    double pInpTMlRqC26986173 = -237238021;    double pInpTMlRqC51829001 = -133585229;    double pInpTMlRqC91356711 = -889660402;    double pInpTMlRqC21192877 = -825664122;    double pInpTMlRqC94902723 = 12282428;    double pInpTMlRqC55612284 = -792506604;    double pInpTMlRqC81150184 = -780892038;    double pInpTMlRqC1232672 = -985584178;    double pInpTMlRqC37154520 = 24231416;    double pInpTMlRqC26257858 = -230429738;    double pInpTMlRqC18895050 = -744625585;    double pInpTMlRqC8968840 = -295862557;    double pInpTMlRqC81061345 = -529428687;    double pInpTMlRqC34952231 = -203012399;    double pInpTMlRqC62180995 = 26746047;    double pInpTMlRqC98131927 = -760987290;    double pInpTMlRqC55127215 = 77161246;    double pInpTMlRqC81294857 = -642320370;    double pInpTMlRqC36604429 = -875574063;    double pInpTMlRqC98892463 = -44160372;    double pInpTMlRqC97695491 = -837059834;    double pInpTMlRqC41184608 = -738327402;    double pInpTMlRqC9352199 = -4718417;    double pInpTMlRqC40304216 = -756737318;    double pInpTMlRqC6256520 = -51755474;    double pInpTMlRqC66467822 = -163054675;    double pInpTMlRqC39773728 = -819904365;    double pInpTMlRqC1014636 = -912382609;    double pInpTMlRqC86162350 = -627374500;    double pInpTMlRqC86493851 = -89118863;    double pInpTMlRqC94847419 = -888878257;    double pInpTMlRqC16356648 = -618877737;    double pInpTMlRqC14537258 = -131144618;    double pInpTMlRqC28452854 = -133411671;    double pInpTMlRqC99319503 = -195449656;    double pInpTMlRqC59226874 = -380376906;    double pInpTMlRqC86549242 = -75128192;    double pInpTMlRqC26845621 = -270006091;    double pInpTMlRqC50882270 = -897876334;     pInpTMlRqC77778170 = pInpTMlRqC5437559;     pInpTMlRqC5437559 = pInpTMlRqC58706201;     pInpTMlRqC58706201 = pInpTMlRqC66736100;     pInpTMlRqC66736100 = pInpTMlRqC70939521;     pInpTMlRqC70939521 = pInpTMlRqC64280077;     pInpTMlRqC64280077 = pInpTMlRqC83924201;     pInpTMlRqC83924201 = pInpTMlRqC18326951;     pInpTMlRqC18326951 = pInpTMlRqC82586907;     pInpTMlRqC82586907 = pInpTMlRqC191817;     pInpTMlRqC191817 = pInpTMlRqC73805361;     pInpTMlRqC73805361 = pInpTMlRqC76001844;     pInpTMlRqC76001844 = pInpTMlRqC63148652;     pInpTMlRqC63148652 = pInpTMlRqC89135309;     pInpTMlRqC89135309 = pInpTMlRqC25920217;     pInpTMlRqC25920217 = pInpTMlRqC52731627;     pInpTMlRqC52731627 = pInpTMlRqC487115;     pInpTMlRqC487115 = pInpTMlRqC66292653;     pInpTMlRqC66292653 = pInpTMlRqC73534197;     pInpTMlRqC73534197 = pInpTMlRqC61257907;     pInpTMlRqC61257907 = pInpTMlRqC73236870;     pInpTMlRqC73236870 = pInpTMlRqC76037882;     pInpTMlRqC76037882 = pInpTMlRqC3165713;     pInpTMlRqC3165713 = pInpTMlRqC27079851;     pInpTMlRqC27079851 = pInpTMlRqC1500683;     pInpTMlRqC1500683 = pInpTMlRqC28152966;     pInpTMlRqC28152966 = pInpTMlRqC260080;     pInpTMlRqC260080 = pInpTMlRqC56938028;     pInpTMlRqC56938028 = pInpTMlRqC66497949;     pInpTMlRqC66497949 = pInpTMlRqC91230195;     pInpTMlRqC91230195 = pInpTMlRqC78998940;     pInpTMlRqC78998940 = pInpTMlRqC78902638;     pInpTMlRqC78902638 = pInpTMlRqC20389560;     pInpTMlRqC20389560 = pInpTMlRqC81998468;     pInpTMlRqC81998468 = pInpTMlRqC87902638;     pInpTMlRqC87902638 = pInpTMlRqC88765697;     pInpTMlRqC88765697 = pInpTMlRqC26473769;     pInpTMlRqC26473769 = pInpTMlRqC81592065;     pInpTMlRqC81592065 = pInpTMlRqC57323813;     pInpTMlRqC57323813 = pInpTMlRqC92472851;     pInpTMlRqC92472851 = pInpTMlRqC26305677;     pInpTMlRqC26305677 = pInpTMlRqC11055875;     pInpTMlRqC11055875 = pInpTMlRqC77905954;     pInpTMlRqC77905954 = pInpTMlRqC48038497;     pInpTMlRqC48038497 = pInpTMlRqC45784994;     pInpTMlRqC45784994 = pInpTMlRqC64896254;     pInpTMlRqC64896254 = pInpTMlRqC29260502;     pInpTMlRqC29260502 = pInpTMlRqC2564589;     pInpTMlRqC2564589 = pInpTMlRqC15753420;     pInpTMlRqC15753420 = pInpTMlRqC57145750;     pInpTMlRqC57145750 = pInpTMlRqC50925980;     pInpTMlRqC50925980 = pInpTMlRqC72742421;     pInpTMlRqC72742421 = pInpTMlRqC12434817;     pInpTMlRqC12434817 = pInpTMlRqC80615831;     pInpTMlRqC80615831 = pInpTMlRqC80983832;     pInpTMlRqC80983832 = pInpTMlRqC1740289;     pInpTMlRqC1740289 = pInpTMlRqC2271846;     pInpTMlRqC2271846 = pInpTMlRqC31626350;     pInpTMlRqC31626350 = pInpTMlRqC65235417;     pInpTMlRqC65235417 = pInpTMlRqC42786556;     pInpTMlRqC42786556 = pInpTMlRqC64019998;     pInpTMlRqC64019998 = pInpTMlRqC26986173;     pInpTMlRqC26986173 = pInpTMlRqC51829001;     pInpTMlRqC51829001 = pInpTMlRqC91356711;     pInpTMlRqC91356711 = pInpTMlRqC21192877;     pInpTMlRqC21192877 = pInpTMlRqC94902723;     pInpTMlRqC94902723 = pInpTMlRqC55612284;     pInpTMlRqC55612284 = pInpTMlRqC81150184;     pInpTMlRqC81150184 = pInpTMlRqC1232672;     pInpTMlRqC1232672 = pInpTMlRqC37154520;     pInpTMlRqC37154520 = pInpTMlRqC26257858;     pInpTMlRqC26257858 = pInpTMlRqC18895050;     pInpTMlRqC18895050 = pInpTMlRqC8968840;     pInpTMlRqC8968840 = pInpTMlRqC81061345;     pInpTMlRqC81061345 = pInpTMlRqC34952231;     pInpTMlRqC34952231 = pInpTMlRqC62180995;     pInpTMlRqC62180995 = pInpTMlRqC98131927;     pInpTMlRqC98131927 = pInpTMlRqC55127215;     pInpTMlRqC55127215 = pInpTMlRqC81294857;     pInpTMlRqC81294857 = pInpTMlRqC36604429;     pInpTMlRqC36604429 = pInpTMlRqC98892463;     pInpTMlRqC98892463 = pInpTMlRqC97695491;     pInpTMlRqC97695491 = pInpTMlRqC41184608;     pInpTMlRqC41184608 = pInpTMlRqC9352199;     pInpTMlRqC9352199 = pInpTMlRqC40304216;     pInpTMlRqC40304216 = pInpTMlRqC6256520;     pInpTMlRqC6256520 = pInpTMlRqC66467822;     pInpTMlRqC66467822 = pInpTMlRqC39773728;     pInpTMlRqC39773728 = pInpTMlRqC1014636;     pInpTMlRqC1014636 = pInpTMlRqC86162350;     pInpTMlRqC86162350 = pInpTMlRqC86493851;     pInpTMlRqC86493851 = pInpTMlRqC94847419;     pInpTMlRqC94847419 = pInpTMlRqC16356648;     pInpTMlRqC16356648 = pInpTMlRqC14537258;     pInpTMlRqC14537258 = pInpTMlRqC28452854;     pInpTMlRqC28452854 = pInpTMlRqC99319503;     pInpTMlRqC99319503 = pInpTMlRqC59226874;     pInpTMlRqC59226874 = pInpTMlRqC86549242;     pInpTMlRqC86549242 = pInpTMlRqC26845621;     pInpTMlRqC26845621 = pInpTMlRqC50882270;     pInpTMlRqC50882270 = pInpTMlRqC77778170;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NWwxbhZNKU14523360() {     double SNnfyFsdvT67904478 = -956632535;    double SNnfyFsdvT88562623 = -845712675;    double SNnfyFsdvT54198900 = -22143371;    double SNnfyFsdvT40234675 = -321583927;    double SNnfyFsdvT83996256 = -601556626;    double SNnfyFsdvT45066482 = -540292876;    double SNnfyFsdvT78587639 = 63963917;    double SNnfyFsdvT71205513 = -291339562;    double SNnfyFsdvT6398595 = -505593034;    double SNnfyFsdvT4447488 = -363043319;    double SNnfyFsdvT49957181 = -368728193;    double SNnfyFsdvT10751352 = 39002800;    double SNnfyFsdvT1494785 = -758589444;    double SNnfyFsdvT27554164 = -683220012;    double SNnfyFsdvT23994589 = 97714073;    double SNnfyFsdvT76911369 = 29189703;    double SNnfyFsdvT44449295 = -317528030;    double SNnfyFsdvT87648365 = -975604476;    double SNnfyFsdvT34448589 = -904832981;    double SNnfyFsdvT28582156 = -383578384;    double SNnfyFsdvT61159273 = -391641180;    double SNnfyFsdvT74119464 = -58872519;    double SNnfyFsdvT36404131 = -524968887;    double SNnfyFsdvT35000948 = -182250853;    double SNnfyFsdvT48385871 = 13756418;    double SNnfyFsdvT46943930 = -530358910;    double SNnfyFsdvT22227415 = -731606575;    double SNnfyFsdvT80108403 = -21142648;    double SNnfyFsdvT27706948 = -83505643;    double SNnfyFsdvT39019276 = -482442386;    double SNnfyFsdvT82462343 = -194171216;    double SNnfyFsdvT78269552 = -273414883;    double SNnfyFsdvT29358601 = -989127621;    double SNnfyFsdvT5837113 = -656912704;    double SNnfyFsdvT23499174 = -349810611;    double SNnfyFsdvT41996704 = -744425811;    double SNnfyFsdvT26707338 = -555816594;    double SNnfyFsdvT5949349 = -177616448;    double SNnfyFsdvT67856830 = -944354673;    double SNnfyFsdvT36984993 = -813701631;    double SNnfyFsdvT40005350 = -238548952;    double SNnfyFsdvT65700338 = -428455348;    double SNnfyFsdvT37722796 = -440214189;    double SNnfyFsdvT78700438 = 40246598;    double SNnfyFsdvT37749411 = -204416064;    double SNnfyFsdvT85335247 = 49217519;    double SNnfyFsdvT9683793 = -58807303;    double SNnfyFsdvT92951047 = -61674001;    double SNnfyFsdvT43672074 = -658864535;    double SNnfyFsdvT86426156 = -773584516;    double SNnfyFsdvT80291503 = -125684722;    double SNnfyFsdvT16515529 = -780176031;    double SNnfyFsdvT61887271 = -321388784;    double SNnfyFsdvT33522894 = -992553379;    double SNnfyFsdvT53364087 = -881679210;    double SNnfyFsdvT93785014 = -797760016;    double SNnfyFsdvT52158493 = -220743788;    double SNnfyFsdvT19197952 = -839892519;    double SNnfyFsdvT91848804 = -235340346;    double SNnfyFsdvT37052326 = 28802283;    double SNnfyFsdvT22839067 = -808686301;    double SNnfyFsdvT98479236 = -914893436;    double SNnfyFsdvT43498566 = -107833920;    double SNnfyFsdvT67379319 = 76849351;    double SNnfyFsdvT21985144 = -68872104;    double SNnfyFsdvT71687628 = 4686690;    double SNnfyFsdvT81392751 = 28130420;    double SNnfyFsdvT95657672 = -1676740;    double SNnfyFsdvT4054991 = -233409401;    double SNnfyFsdvT81997885 = -157860116;    double SNnfyFsdvT50204031 = -414993703;    double SNnfyFsdvT38499947 = -39911583;    double SNnfyFsdvT19791536 = 68750196;    double SNnfyFsdvT97463595 = 8868650;    double SNnfyFsdvT88576805 = -45029433;    double SNnfyFsdvT95458934 = -963185832;    double SNnfyFsdvT36396669 = -618658330;    double SNnfyFsdvT57703692 = -465215486;    double SNnfyFsdvT97251537 = -977834790;    double SNnfyFsdvT63050623 = 64538898;    double SNnfyFsdvT37260138 = -371551607;    double SNnfyFsdvT29276367 = -569932575;    double SNnfyFsdvT36436330 = -362278113;    double SNnfyFsdvT41280791 = -309921127;    double SNnfyFsdvT58727772 = -256757665;    double SNnfyFsdvT65946815 = -413995185;    double SNnfyFsdvT16382281 = -952026100;    double SNnfyFsdvT95835707 = -996574242;    double SNnfyFsdvT52473025 = -775233495;    double SNnfyFsdvT29714159 = -552050595;    double SNnfyFsdvT89838211 = -423682023;    double SNnfyFsdvT7509387 = -715924075;    double SNnfyFsdvT14100545 = -942276103;    double SNnfyFsdvT30804504 = -873156956;    double SNnfyFsdvT14145927 = 94984670;    double SNnfyFsdvT41526114 = -323655517;    double SNnfyFsdvT22201772 = -220621428;    double SNnfyFsdvT70343476 = -417063541;    double SNnfyFsdvT56715294 = -890881298;    double SNnfyFsdvT66061783 = -956632535;     SNnfyFsdvT67904478 = SNnfyFsdvT88562623;     SNnfyFsdvT88562623 = SNnfyFsdvT54198900;     SNnfyFsdvT54198900 = SNnfyFsdvT40234675;     SNnfyFsdvT40234675 = SNnfyFsdvT83996256;     SNnfyFsdvT83996256 = SNnfyFsdvT45066482;     SNnfyFsdvT45066482 = SNnfyFsdvT78587639;     SNnfyFsdvT78587639 = SNnfyFsdvT71205513;     SNnfyFsdvT71205513 = SNnfyFsdvT6398595;     SNnfyFsdvT6398595 = SNnfyFsdvT4447488;     SNnfyFsdvT4447488 = SNnfyFsdvT49957181;     SNnfyFsdvT49957181 = SNnfyFsdvT10751352;     SNnfyFsdvT10751352 = SNnfyFsdvT1494785;     SNnfyFsdvT1494785 = SNnfyFsdvT27554164;     SNnfyFsdvT27554164 = SNnfyFsdvT23994589;     SNnfyFsdvT23994589 = SNnfyFsdvT76911369;     SNnfyFsdvT76911369 = SNnfyFsdvT44449295;     SNnfyFsdvT44449295 = SNnfyFsdvT87648365;     SNnfyFsdvT87648365 = SNnfyFsdvT34448589;     SNnfyFsdvT34448589 = SNnfyFsdvT28582156;     SNnfyFsdvT28582156 = SNnfyFsdvT61159273;     SNnfyFsdvT61159273 = SNnfyFsdvT74119464;     SNnfyFsdvT74119464 = SNnfyFsdvT36404131;     SNnfyFsdvT36404131 = SNnfyFsdvT35000948;     SNnfyFsdvT35000948 = SNnfyFsdvT48385871;     SNnfyFsdvT48385871 = SNnfyFsdvT46943930;     SNnfyFsdvT46943930 = SNnfyFsdvT22227415;     SNnfyFsdvT22227415 = SNnfyFsdvT80108403;     SNnfyFsdvT80108403 = SNnfyFsdvT27706948;     SNnfyFsdvT27706948 = SNnfyFsdvT39019276;     SNnfyFsdvT39019276 = SNnfyFsdvT82462343;     SNnfyFsdvT82462343 = SNnfyFsdvT78269552;     SNnfyFsdvT78269552 = SNnfyFsdvT29358601;     SNnfyFsdvT29358601 = SNnfyFsdvT5837113;     SNnfyFsdvT5837113 = SNnfyFsdvT23499174;     SNnfyFsdvT23499174 = SNnfyFsdvT41996704;     SNnfyFsdvT41996704 = SNnfyFsdvT26707338;     SNnfyFsdvT26707338 = SNnfyFsdvT5949349;     SNnfyFsdvT5949349 = SNnfyFsdvT67856830;     SNnfyFsdvT67856830 = SNnfyFsdvT36984993;     SNnfyFsdvT36984993 = SNnfyFsdvT40005350;     SNnfyFsdvT40005350 = SNnfyFsdvT65700338;     SNnfyFsdvT65700338 = SNnfyFsdvT37722796;     SNnfyFsdvT37722796 = SNnfyFsdvT78700438;     SNnfyFsdvT78700438 = SNnfyFsdvT37749411;     SNnfyFsdvT37749411 = SNnfyFsdvT85335247;     SNnfyFsdvT85335247 = SNnfyFsdvT9683793;     SNnfyFsdvT9683793 = SNnfyFsdvT92951047;     SNnfyFsdvT92951047 = SNnfyFsdvT43672074;     SNnfyFsdvT43672074 = SNnfyFsdvT86426156;     SNnfyFsdvT86426156 = SNnfyFsdvT80291503;     SNnfyFsdvT80291503 = SNnfyFsdvT16515529;     SNnfyFsdvT16515529 = SNnfyFsdvT61887271;     SNnfyFsdvT61887271 = SNnfyFsdvT33522894;     SNnfyFsdvT33522894 = SNnfyFsdvT53364087;     SNnfyFsdvT53364087 = SNnfyFsdvT93785014;     SNnfyFsdvT93785014 = SNnfyFsdvT52158493;     SNnfyFsdvT52158493 = SNnfyFsdvT19197952;     SNnfyFsdvT19197952 = SNnfyFsdvT91848804;     SNnfyFsdvT91848804 = SNnfyFsdvT37052326;     SNnfyFsdvT37052326 = SNnfyFsdvT22839067;     SNnfyFsdvT22839067 = SNnfyFsdvT98479236;     SNnfyFsdvT98479236 = SNnfyFsdvT43498566;     SNnfyFsdvT43498566 = SNnfyFsdvT67379319;     SNnfyFsdvT67379319 = SNnfyFsdvT21985144;     SNnfyFsdvT21985144 = SNnfyFsdvT71687628;     SNnfyFsdvT71687628 = SNnfyFsdvT81392751;     SNnfyFsdvT81392751 = SNnfyFsdvT95657672;     SNnfyFsdvT95657672 = SNnfyFsdvT4054991;     SNnfyFsdvT4054991 = SNnfyFsdvT81997885;     SNnfyFsdvT81997885 = SNnfyFsdvT50204031;     SNnfyFsdvT50204031 = SNnfyFsdvT38499947;     SNnfyFsdvT38499947 = SNnfyFsdvT19791536;     SNnfyFsdvT19791536 = SNnfyFsdvT97463595;     SNnfyFsdvT97463595 = SNnfyFsdvT88576805;     SNnfyFsdvT88576805 = SNnfyFsdvT95458934;     SNnfyFsdvT95458934 = SNnfyFsdvT36396669;     SNnfyFsdvT36396669 = SNnfyFsdvT57703692;     SNnfyFsdvT57703692 = SNnfyFsdvT97251537;     SNnfyFsdvT97251537 = SNnfyFsdvT63050623;     SNnfyFsdvT63050623 = SNnfyFsdvT37260138;     SNnfyFsdvT37260138 = SNnfyFsdvT29276367;     SNnfyFsdvT29276367 = SNnfyFsdvT36436330;     SNnfyFsdvT36436330 = SNnfyFsdvT41280791;     SNnfyFsdvT41280791 = SNnfyFsdvT58727772;     SNnfyFsdvT58727772 = SNnfyFsdvT65946815;     SNnfyFsdvT65946815 = SNnfyFsdvT16382281;     SNnfyFsdvT16382281 = SNnfyFsdvT95835707;     SNnfyFsdvT95835707 = SNnfyFsdvT52473025;     SNnfyFsdvT52473025 = SNnfyFsdvT29714159;     SNnfyFsdvT29714159 = SNnfyFsdvT89838211;     SNnfyFsdvT89838211 = SNnfyFsdvT7509387;     SNnfyFsdvT7509387 = SNnfyFsdvT14100545;     SNnfyFsdvT14100545 = SNnfyFsdvT30804504;     SNnfyFsdvT30804504 = SNnfyFsdvT14145927;     SNnfyFsdvT14145927 = SNnfyFsdvT41526114;     SNnfyFsdvT41526114 = SNnfyFsdvT22201772;     SNnfyFsdvT22201772 = SNnfyFsdvT70343476;     SNnfyFsdvT70343476 = SNnfyFsdvT56715294;     SNnfyFsdvT56715294 = SNnfyFsdvT66061783;     SNnfyFsdvT66061783 = SNnfyFsdvT67904478;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void iWwpMNOUCb27068549() {     double ZacbnXPQal87372648 = -269763747;    double ZacbnXPQal41586487 = -291590671;    double ZacbnXPQal71035891 = -773771986;    double ZacbnXPQal58881824 = -138158190;    double ZacbnXPQal84442772 = -127829042;    double ZacbnXPQal70658555 = -430777645;    double ZacbnXPQal23419518 = -379342313;    double ZacbnXPQal36455747 = -385147528;    double ZacbnXPQal67085392 = -133784413;    double ZacbnXPQal82376210 = -368629365;    double ZacbnXPQal4180445 = -801718493;    double ZacbnXPQal14245965 = 39700095;    double ZacbnXPQal91866444 = -82946720;    double ZacbnXPQal35970204 = -125505738;    double ZacbnXPQal84521050 = -200369718;    double ZacbnXPQal43127018 = -434002231;    double ZacbnXPQal50411408 = -489302711;    double ZacbnXPQal11711117 = -726359194;    double ZacbnXPQal34083468 = -182037742;    double ZacbnXPQal9193458 = -1114840;    double ZacbnXPQal73615345 = -997853505;    double ZacbnXPQal89101547 = -570675732;    double ZacbnXPQal4577137 = -822543506;    double ZacbnXPQal52722617 = -918794845;    double ZacbnXPQal59589360 = -280543691;    double ZacbnXPQal51711392 = -216154128;    double ZacbnXPQal6155546 = -396757507;    double ZacbnXPQal30900078 = -184875927;    double ZacbnXPQal69451904 = -97416789;    double ZacbnXPQal23726130 = -573881080;    double ZacbnXPQal12266429 = -59497309;    double ZacbnXPQal17848863 = -837763901;    double ZacbnXPQal40834704 = -444335387;    double ZacbnXPQal64593620 = -961515911;    double ZacbnXPQal63429509 = -412513417;    double ZacbnXPQal78062641 = 52005580;    double ZacbnXPQal95090788 = 17307331;    double ZacbnXPQal47431823 = -254825264;    double ZacbnXPQal35170155 = -308769498;    double ZacbnXPQal58266729 = -810232728;    double ZacbnXPQal81487406 = -748335248;    double ZacbnXPQal77559471 = -667351574;    double ZacbnXPQal8856037 = -388015987;    double ZacbnXPQal62085977 = -408826062;    double ZacbnXPQal17777823 = -481539027;    double ZacbnXPQal39796375 = -488113902;    double ZacbnXPQal91673672 = 27499374;    double ZacbnXPQal93106877 = -244961316;    double ZacbnXPQal84807665 = -672803773;    double ZacbnXPQal27324499 = -534596861;    double ZacbnXPQal54727072 = -532049653;    double ZacbnXPQal32964388 = -57528891;    double ZacbnXPQal31712418 = 2502255;    double ZacbnXPQal6452923 = -987147015;    double ZacbnXPQal53453204 = -656237845;    double ZacbnXPQal98271101 = -699088015;    double ZacbnXPQal37009351 = -469047166;    double ZacbnXPQal18313275 = -854977142;    double ZacbnXPQal99292463 = -857614499;    double ZacbnXPQal32731381 = -911674914;    double ZacbnXPQal64503010 = 65979862;    double ZacbnXPQal92519439 = -94466387;    double ZacbnXPQal67003842 = -187730740;    double ZacbnXPQal43359263 = -559903333;    double ZacbnXPQal70109782 = -209132057;    double ZacbnXPQal86331581 = -963954592;    double ZacbnXPQal73411261 = -515964518;    double ZacbnXPQal27272825 = -121430810;    double ZacbnXPQal72540694 = -712992321;    double ZacbnXPQal6458410 = -152375299;    double ZacbnXPQal48036230 = -351309562;    double ZacbnXPQal2979586 = -134477448;    double ZacbnXPQal76540962 = -317589697;    double ZacbnXPQal75816738 = -371805014;    double ZacbnXPQal27706051 = -252779593;    double ZacbnXPQal96055873 = -230501932;    double ZacbnXPQal80245510 = -82659746;    double ZacbnXPQal42491160 = -313717444;    double ZacbnXPQal34944795 = -337255819;    double ZacbnXPQal19792986 = -792429790;    double ZacbnXPQal60037719 = -143653503;    double ZacbnXPQal13048668 = -51796192;    double ZacbnXPQal46092413 = -512072154;    double ZacbnXPQal42127406 = -562819928;    double ZacbnXPQal68999057 = 58168572;    double ZacbnXPQal79302040 = 98031581;    double ZacbnXPQal86136445 = -740266157;    double ZacbnXPQal34381782 = -457188373;    double ZacbnXPQal11140416 = -205278066;    double ZacbnXPQal65158407 = -713425402;    double ZacbnXPQal41053290 = -478947254;    double ZacbnXPQal76777514 = -127715527;    double ZacbnXPQal48139359 = -397210765;    double ZacbnXPQal2438774 = -397094584;    double ZacbnXPQal93763719 = -776212590;    double ZacbnXPQal88967967 = -553868862;    double ZacbnXPQal10555629 = -379620834;    double ZacbnXPQal65496774 = -828112654;    double ZacbnXPQal91976195 = -99694006;    double ZacbnXPQal31446241 = -269763747;     ZacbnXPQal87372648 = ZacbnXPQal41586487;     ZacbnXPQal41586487 = ZacbnXPQal71035891;     ZacbnXPQal71035891 = ZacbnXPQal58881824;     ZacbnXPQal58881824 = ZacbnXPQal84442772;     ZacbnXPQal84442772 = ZacbnXPQal70658555;     ZacbnXPQal70658555 = ZacbnXPQal23419518;     ZacbnXPQal23419518 = ZacbnXPQal36455747;     ZacbnXPQal36455747 = ZacbnXPQal67085392;     ZacbnXPQal67085392 = ZacbnXPQal82376210;     ZacbnXPQal82376210 = ZacbnXPQal4180445;     ZacbnXPQal4180445 = ZacbnXPQal14245965;     ZacbnXPQal14245965 = ZacbnXPQal91866444;     ZacbnXPQal91866444 = ZacbnXPQal35970204;     ZacbnXPQal35970204 = ZacbnXPQal84521050;     ZacbnXPQal84521050 = ZacbnXPQal43127018;     ZacbnXPQal43127018 = ZacbnXPQal50411408;     ZacbnXPQal50411408 = ZacbnXPQal11711117;     ZacbnXPQal11711117 = ZacbnXPQal34083468;     ZacbnXPQal34083468 = ZacbnXPQal9193458;     ZacbnXPQal9193458 = ZacbnXPQal73615345;     ZacbnXPQal73615345 = ZacbnXPQal89101547;     ZacbnXPQal89101547 = ZacbnXPQal4577137;     ZacbnXPQal4577137 = ZacbnXPQal52722617;     ZacbnXPQal52722617 = ZacbnXPQal59589360;     ZacbnXPQal59589360 = ZacbnXPQal51711392;     ZacbnXPQal51711392 = ZacbnXPQal6155546;     ZacbnXPQal6155546 = ZacbnXPQal30900078;     ZacbnXPQal30900078 = ZacbnXPQal69451904;     ZacbnXPQal69451904 = ZacbnXPQal23726130;     ZacbnXPQal23726130 = ZacbnXPQal12266429;     ZacbnXPQal12266429 = ZacbnXPQal17848863;     ZacbnXPQal17848863 = ZacbnXPQal40834704;     ZacbnXPQal40834704 = ZacbnXPQal64593620;     ZacbnXPQal64593620 = ZacbnXPQal63429509;     ZacbnXPQal63429509 = ZacbnXPQal78062641;     ZacbnXPQal78062641 = ZacbnXPQal95090788;     ZacbnXPQal95090788 = ZacbnXPQal47431823;     ZacbnXPQal47431823 = ZacbnXPQal35170155;     ZacbnXPQal35170155 = ZacbnXPQal58266729;     ZacbnXPQal58266729 = ZacbnXPQal81487406;     ZacbnXPQal81487406 = ZacbnXPQal77559471;     ZacbnXPQal77559471 = ZacbnXPQal8856037;     ZacbnXPQal8856037 = ZacbnXPQal62085977;     ZacbnXPQal62085977 = ZacbnXPQal17777823;     ZacbnXPQal17777823 = ZacbnXPQal39796375;     ZacbnXPQal39796375 = ZacbnXPQal91673672;     ZacbnXPQal91673672 = ZacbnXPQal93106877;     ZacbnXPQal93106877 = ZacbnXPQal84807665;     ZacbnXPQal84807665 = ZacbnXPQal27324499;     ZacbnXPQal27324499 = ZacbnXPQal54727072;     ZacbnXPQal54727072 = ZacbnXPQal32964388;     ZacbnXPQal32964388 = ZacbnXPQal31712418;     ZacbnXPQal31712418 = ZacbnXPQal6452923;     ZacbnXPQal6452923 = ZacbnXPQal53453204;     ZacbnXPQal53453204 = ZacbnXPQal98271101;     ZacbnXPQal98271101 = ZacbnXPQal37009351;     ZacbnXPQal37009351 = ZacbnXPQal18313275;     ZacbnXPQal18313275 = ZacbnXPQal99292463;     ZacbnXPQal99292463 = ZacbnXPQal32731381;     ZacbnXPQal32731381 = ZacbnXPQal64503010;     ZacbnXPQal64503010 = ZacbnXPQal92519439;     ZacbnXPQal92519439 = ZacbnXPQal67003842;     ZacbnXPQal67003842 = ZacbnXPQal43359263;     ZacbnXPQal43359263 = ZacbnXPQal70109782;     ZacbnXPQal70109782 = ZacbnXPQal86331581;     ZacbnXPQal86331581 = ZacbnXPQal73411261;     ZacbnXPQal73411261 = ZacbnXPQal27272825;     ZacbnXPQal27272825 = ZacbnXPQal72540694;     ZacbnXPQal72540694 = ZacbnXPQal6458410;     ZacbnXPQal6458410 = ZacbnXPQal48036230;     ZacbnXPQal48036230 = ZacbnXPQal2979586;     ZacbnXPQal2979586 = ZacbnXPQal76540962;     ZacbnXPQal76540962 = ZacbnXPQal75816738;     ZacbnXPQal75816738 = ZacbnXPQal27706051;     ZacbnXPQal27706051 = ZacbnXPQal96055873;     ZacbnXPQal96055873 = ZacbnXPQal80245510;     ZacbnXPQal80245510 = ZacbnXPQal42491160;     ZacbnXPQal42491160 = ZacbnXPQal34944795;     ZacbnXPQal34944795 = ZacbnXPQal19792986;     ZacbnXPQal19792986 = ZacbnXPQal60037719;     ZacbnXPQal60037719 = ZacbnXPQal13048668;     ZacbnXPQal13048668 = ZacbnXPQal46092413;     ZacbnXPQal46092413 = ZacbnXPQal42127406;     ZacbnXPQal42127406 = ZacbnXPQal68999057;     ZacbnXPQal68999057 = ZacbnXPQal79302040;     ZacbnXPQal79302040 = ZacbnXPQal86136445;     ZacbnXPQal86136445 = ZacbnXPQal34381782;     ZacbnXPQal34381782 = ZacbnXPQal11140416;     ZacbnXPQal11140416 = ZacbnXPQal65158407;     ZacbnXPQal65158407 = ZacbnXPQal41053290;     ZacbnXPQal41053290 = ZacbnXPQal76777514;     ZacbnXPQal76777514 = ZacbnXPQal48139359;     ZacbnXPQal48139359 = ZacbnXPQal2438774;     ZacbnXPQal2438774 = ZacbnXPQal93763719;     ZacbnXPQal93763719 = ZacbnXPQal88967967;     ZacbnXPQal88967967 = ZacbnXPQal10555629;     ZacbnXPQal10555629 = ZacbnXPQal65496774;     ZacbnXPQal65496774 = ZacbnXPQal91976195;     ZacbnXPQal91976195 = ZacbnXPQal31446241;     ZacbnXPQal31446241 = ZacbnXPQal87372648;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void iMHjMXQuFX87371206() {     double UePekgSsRN77498957 = -328519947;    double UePekgSsRN24711552 = -666516841;    double UePekgSsRN66528590 = -910566447;    double UePekgSsRN32380399 = -324330012;    double UePekgSsRN97499508 = -69152484;    double UePekgSsRN51444960 = -323410753;    double UePekgSsRN18082956 = -16887785;    double UePekgSsRN89334310 = -21595267;    double UePekgSsRN90897079 = -141677051;    double UePekgSsRN86631880 = 61496109;    double UePekgSsRN80332263 = -210138650;    double UePekgSsRN48995473 = -539888040;    double UePekgSsRN30212577 = -395182581;    double UePekgSsRN74389057 = -123666622;    double UePekgSsRN82595422 = -685490661;    double UePekgSsRN67306760 = -134382101;    double UePekgSsRN94373588 = -750647953;    double UePekgSsRN33066830 = -69208486;    double UePekgSsRN94997858 = -648448177;    double UePekgSsRN76517705 = -648993150;    double UePekgSsRN61537747 = -702278598;    double UePekgSsRN87183129 = -903772367;    double UePekgSsRN37815555 = -129003427;    double UePekgSsRN60643714 = -266819220;    double UePekgSsRN6474549 = -924054635;    double UePekgSsRN70502356 = -92027863;    double UePekgSsRN28122880 = -156286501;    double UePekgSsRN54070453 = -244765985;    double UePekgSsRN30660902 = -859615837;    double UePekgSsRN71515209 = -448283471;    double UePekgSsRN15729832 = -386163853;    double UePekgSsRN17215777 = -238588321;    double UePekgSsRN49803745 = -744560547;    double UePekgSsRN88432264 = -952967069;    double UePekgSsRN99026043 = -62849078;    double UePekgSsRN31293648 = -251023830;    double UePekgSsRN95324357 = -598508573;    double UePekgSsRN71789106 = -120884507;    double UePekgSsRN45703172 = -16231543;    double UePekgSsRN2778872 = -714940501;    double UePekgSsRN95187079 = -454196523;    double UePekgSsRN32203935 = -481844787;    double UePekgSsRN68672877 = -863441582;    double UePekgSsRN92747917 = -272909251;    double UePekgSsRN9742240 = -594048983;    double UePekgSsRN60235368 = -971737807;    double UePekgSsRN72096963 = -620983126;    double UePekgSsRN83493336 = -271617569;    double UePekgSsRN12726319 = -8743120;    double UePekgSsRN56604904 = -991593199;    double UePekgSsRN84092596 = -906431698;    double UePekgSsRN76737495 = -21955724;    double UePekgSsRN81164872 = -809350740;    double UePekgSsRN59359984 = -10702297;    double UePekgSsRN25833459 = -784838116;    double UePekgSsRN90315828 = -424747580;    double UePekgSsRN86895997 = -437513415;    double UePekgSsRN5884877 = -543747228;    double UePekgSsRN25905851 = -400275377;    double UePekgSsRN26997152 = -977124621;    double UePekgSsRN23322080 = -67124252;    double UePekgSsRN64012502 = -772121801;    double UePekgSsRN58673408 = -161979431;    double UePekgSsRN19381870 = -693393580;    double UePekgSsRN70902049 = -552340038;    double UePekgSsRN63116486 = -971550330;    double UePekgSsRN99191727 = -795327493;    double UePekgSsRN41780312 = -442215513;    double UePekgSsRN75363013 = 39182455;    double UePekgSsRN51301774 = -334466832;    double UePekgSsRN71982403 = -535873528;    double UePekgSsRN22584483 = -529763446;    double UePekgSsRN87363657 = 47023057;    double UePekgSsRN92218987 = -933507677;    double UePekgSsRN81330625 = -94796627;    double UePekgSsRN29333813 = -120433811;    double UePekgSsRN18510252 = 59669214;    double UePekgSsRN45067637 = -856094176;    double UePekgSsRN50901474 = -672770238;    double UePekgSsRN46239180 = -952316829;    double UePekgSsRN98405393 = -471044738;    double UePekgSsRN44629544 = -884668933;    double UePekgSsRN41344135 = -136022866;    double UePekgSsRN74055997 = -868022639;    double UePekgSsRN87422613 = -541851774;    double UePekgSsRN38992336 = -264208130;    double UePekgSsRN36050904 = -429237582;    double UePekgSsRN90443760 = -633858251;    double UePekgSsRN62598805 = -68128953;    double UePekgSsRN8710216 = -638101498;    double UePekgSsRN44397650 = -813510415;    double UePekgSsRN89439481 = 45238654;    double UePekgSsRN45883256 = -720609131;    double UePekgSsRN18706020 = -39106923;    double UePekgSsRN79456791 = -547816249;    double UePekgSsRN31174578 = -682074723;    double UePekgSsRN73530526 = -219865357;    double UePekgSsRN49291008 = -70048003;    double UePekgSsRN21845869 = -720569213;    double UePekgSsRN46625753 = -328519947;     UePekgSsRN77498957 = UePekgSsRN24711552;     UePekgSsRN24711552 = UePekgSsRN66528590;     UePekgSsRN66528590 = UePekgSsRN32380399;     UePekgSsRN32380399 = UePekgSsRN97499508;     UePekgSsRN97499508 = UePekgSsRN51444960;     UePekgSsRN51444960 = UePekgSsRN18082956;     UePekgSsRN18082956 = UePekgSsRN89334310;     UePekgSsRN89334310 = UePekgSsRN90897079;     UePekgSsRN90897079 = UePekgSsRN86631880;     UePekgSsRN86631880 = UePekgSsRN80332263;     UePekgSsRN80332263 = UePekgSsRN48995473;     UePekgSsRN48995473 = UePekgSsRN30212577;     UePekgSsRN30212577 = UePekgSsRN74389057;     UePekgSsRN74389057 = UePekgSsRN82595422;     UePekgSsRN82595422 = UePekgSsRN67306760;     UePekgSsRN67306760 = UePekgSsRN94373588;     UePekgSsRN94373588 = UePekgSsRN33066830;     UePekgSsRN33066830 = UePekgSsRN94997858;     UePekgSsRN94997858 = UePekgSsRN76517705;     UePekgSsRN76517705 = UePekgSsRN61537747;     UePekgSsRN61537747 = UePekgSsRN87183129;     UePekgSsRN87183129 = UePekgSsRN37815555;     UePekgSsRN37815555 = UePekgSsRN60643714;     UePekgSsRN60643714 = UePekgSsRN6474549;     UePekgSsRN6474549 = UePekgSsRN70502356;     UePekgSsRN70502356 = UePekgSsRN28122880;     UePekgSsRN28122880 = UePekgSsRN54070453;     UePekgSsRN54070453 = UePekgSsRN30660902;     UePekgSsRN30660902 = UePekgSsRN71515209;     UePekgSsRN71515209 = UePekgSsRN15729832;     UePekgSsRN15729832 = UePekgSsRN17215777;     UePekgSsRN17215777 = UePekgSsRN49803745;     UePekgSsRN49803745 = UePekgSsRN88432264;     UePekgSsRN88432264 = UePekgSsRN99026043;     UePekgSsRN99026043 = UePekgSsRN31293648;     UePekgSsRN31293648 = UePekgSsRN95324357;     UePekgSsRN95324357 = UePekgSsRN71789106;     UePekgSsRN71789106 = UePekgSsRN45703172;     UePekgSsRN45703172 = UePekgSsRN2778872;     UePekgSsRN2778872 = UePekgSsRN95187079;     UePekgSsRN95187079 = UePekgSsRN32203935;     UePekgSsRN32203935 = UePekgSsRN68672877;     UePekgSsRN68672877 = UePekgSsRN92747917;     UePekgSsRN92747917 = UePekgSsRN9742240;     UePekgSsRN9742240 = UePekgSsRN60235368;     UePekgSsRN60235368 = UePekgSsRN72096963;     UePekgSsRN72096963 = UePekgSsRN83493336;     UePekgSsRN83493336 = UePekgSsRN12726319;     UePekgSsRN12726319 = UePekgSsRN56604904;     UePekgSsRN56604904 = UePekgSsRN84092596;     UePekgSsRN84092596 = UePekgSsRN76737495;     UePekgSsRN76737495 = UePekgSsRN81164872;     UePekgSsRN81164872 = UePekgSsRN59359984;     UePekgSsRN59359984 = UePekgSsRN25833459;     UePekgSsRN25833459 = UePekgSsRN90315828;     UePekgSsRN90315828 = UePekgSsRN86895997;     UePekgSsRN86895997 = UePekgSsRN5884877;     UePekgSsRN5884877 = UePekgSsRN25905851;     UePekgSsRN25905851 = UePekgSsRN26997152;     UePekgSsRN26997152 = UePekgSsRN23322080;     UePekgSsRN23322080 = UePekgSsRN64012502;     UePekgSsRN64012502 = UePekgSsRN58673408;     UePekgSsRN58673408 = UePekgSsRN19381870;     UePekgSsRN19381870 = UePekgSsRN70902049;     UePekgSsRN70902049 = UePekgSsRN63116486;     UePekgSsRN63116486 = UePekgSsRN99191727;     UePekgSsRN99191727 = UePekgSsRN41780312;     UePekgSsRN41780312 = UePekgSsRN75363013;     UePekgSsRN75363013 = UePekgSsRN51301774;     UePekgSsRN51301774 = UePekgSsRN71982403;     UePekgSsRN71982403 = UePekgSsRN22584483;     UePekgSsRN22584483 = UePekgSsRN87363657;     UePekgSsRN87363657 = UePekgSsRN92218987;     UePekgSsRN92218987 = UePekgSsRN81330625;     UePekgSsRN81330625 = UePekgSsRN29333813;     UePekgSsRN29333813 = UePekgSsRN18510252;     UePekgSsRN18510252 = UePekgSsRN45067637;     UePekgSsRN45067637 = UePekgSsRN50901474;     UePekgSsRN50901474 = UePekgSsRN46239180;     UePekgSsRN46239180 = UePekgSsRN98405393;     UePekgSsRN98405393 = UePekgSsRN44629544;     UePekgSsRN44629544 = UePekgSsRN41344135;     UePekgSsRN41344135 = UePekgSsRN74055997;     UePekgSsRN74055997 = UePekgSsRN87422613;     UePekgSsRN87422613 = UePekgSsRN38992336;     UePekgSsRN38992336 = UePekgSsRN36050904;     UePekgSsRN36050904 = UePekgSsRN90443760;     UePekgSsRN90443760 = UePekgSsRN62598805;     UePekgSsRN62598805 = UePekgSsRN8710216;     UePekgSsRN8710216 = UePekgSsRN44397650;     UePekgSsRN44397650 = UePekgSsRN89439481;     UePekgSsRN89439481 = UePekgSsRN45883256;     UePekgSsRN45883256 = UePekgSsRN18706020;     UePekgSsRN18706020 = UePekgSsRN79456791;     UePekgSsRN79456791 = UePekgSsRN31174578;     UePekgSsRN31174578 = UePekgSsRN73530526;     UePekgSsRN73530526 = UePekgSsRN49291008;     UePekgSsRN49291008 = UePekgSsRN21845869;     UePekgSsRN21845869 = UePekgSsRN46625753;     UePekgSsRN46625753 = UePekgSsRN77498957;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qloonLILwJ83554366() {     double UysHgwtJtE37095054 = -557276325;    double UysHgwtJtE26217402 = -476672226;    double UysHgwtJtE3529979 = -984707370;    double UysHgwtJtE28256157 = -96940890;    double UysHgwtJtE8792735 = 30340489;    double UysHgwtJtE49122081 = -181670426;    double UysHgwtJtE15441439 = -446605371;    double UysHgwtJtE40159594 = -375806642;    double UysHgwtJtE4710524 = -674349550;    double UysHgwtJtE69656395 = -979762744;    double UysHgwtJtE5627195 = -611681090;    double UysHgwtJtE83666674 = -634909289;    double UysHgwtJtE967140 = -301361099;    double UysHgwtJtE32762896 = -27824969;    double UysHgwtJtE79903227 = -378017182;    double UysHgwtJtE64061015 = 60245008;    double UysHgwtJtE30334693 = -678864233;    double UysHgwtJtE97735160 = -438544591;    double UysHgwtJtE75440061 = -787567807;    double UysHgwtJtE56434815 = -211401803;    double UysHgwtJtE41998866 = -535299422;    double UysHgwtJtE55672727 = -796174245;    double UysHgwtJtE30007380 = -993298506;    double UysHgwtJtE25373953 = -931157457;    double UysHgwtJtE82452553 = -380192225;    double UysHgwtJtE64917263 = -226645334;    double UysHgwtJtE41462951 = -605766498;    double UysHgwtJtE19181623 = -866147575;    double UysHgwtJtE80445245 = -649208452;    double UysHgwtJtE9988677 = -495266714;    double UysHgwtJtE40644150 = 68616819;    double UysHgwtJtE59981037 = -655806318;    double UysHgwtJtE98885783 = -724507419;    double UysHgwtJtE70956707 = -454851000;    double UysHgwtJtE3963405 = -811059063;    double UysHgwtJtE9883544 = -562680412;    double UysHgwtJtE85956035 = -891287208;    double UysHgwtJtE70149443 = -65336897;    double UysHgwtJtE64721114 = -834938060;    double UysHgwtJtE75604525 = -988821449;    double UysHgwtJtE53404893 = -922858120;    double UysHgwtJtE2283116 = -486786205;    double UysHgwtJtE9552120 = -596886411;    double UysHgwtJtE66987423 = -696823990;    double UysHgwtJtE10730556 = -40367051;    double UysHgwtJtE25028498 = -114681966;    double UysHgwtJtE77585685 = -512838793;    double UysHgwtJtE30189731 = -604370797;    double UysHgwtJtE52115966 = -292680739;    double UysHgwtJtE71772297 = -212845659;    double UysHgwtJtE34578847 = -692539922;    double UysHgwtJtE83322648 = 6801021;    double UysHgwtJtE56580387 = 50700807;    double UysHgwtJtE32634508 = -270871252;    double UysHgwtJtE41555501 = -748772203;    double UysHgwtJtE81422326 = -761102080;    double UysHgwtJtE96210021 = -483373721;    double UysHgwtJtE78156025 = 46450086;    double UysHgwtJtE45803604 = -716748665;    double UysHgwtJtE43875471 = -743014178;    double UysHgwtJtE7659131 = -575903928;    double UysHgwtJtE96259816 = -580457797;    double UysHgwtJtE59714349 = -726598191;    double UysHgwtJtE94721847 = -79082837;    double UysHgwtJtE29012246 = -948379564;    double UysHgwtJtE45646157 = -955874772;    double UysHgwtJtE84780890 = -910401870;    double UysHgwtJtE30010433 = -846510100;    double UysHgwtJtE28799491 = -216765906;    double UysHgwtJtE70019683 = -815336771;    double UysHgwtJtE78104979 = -48467785;    double UysHgwtJtE60185249 = -513527337;    double UysHgwtJtE33014046 = -603606531;    double UysHgwtJtE99835536 = -798746359;    double UysHgwtJtE3029922 = -288543684;    double UysHgwtJtE39715750 = 51486783;    double UysHgwtJtE46120608 = -99287834;    double UysHgwtJtE63019957 = -196474516;    double UysHgwtJtE14643398 = -790790406;    double UysHgwtJtE57424056 = -165510260;    double UysHgwtJtE87331578 = -713806542;    double UysHgwtJtE11273221 = 98604299;    double UysHgwtJtE67065656 = -473466836;    double UysHgwtJtE8672949 = -336362793;    double UysHgwtJtE75409829 = -802726793;    double UysHgwtJtE57321501 = -938184202;    double UysHgwtJtE3400651 = -606507125;    double UysHgwtJtE66251276 = -353636168;    double UysHgwtJtE29401206 = -706078797;    double UysHgwtJtE22541078 = 50043016;    double UysHgwtJtE13673523 = 20693309;    double UysHgwtJtE7800010 = -837737295;    double UysHgwtJtE24345840 = -348588233;    double UysHgwtJtE20845644 = 8076117;    double UysHgwtJtE67945395 = -312917521;    double UysHgwtJtE57145077 = -242400323;    double UysHgwtJtE42568767 = -760188015;    double UysHgwtJtE14830273 = -417803575;    double UysHgwtJtE37975177 = -748444426;    double UysHgwtJtE65084398 = -557276325;     UysHgwtJtE37095054 = UysHgwtJtE26217402;     UysHgwtJtE26217402 = UysHgwtJtE3529979;     UysHgwtJtE3529979 = UysHgwtJtE28256157;     UysHgwtJtE28256157 = UysHgwtJtE8792735;     UysHgwtJtE8792735 = UysHgwtJtE49122081;     UysHgwtJtE49122081 = UysHgwtJtE15441439;     UysHgwtJtE15441439 = UysHgwtJtE40159594;     UysHgwtJtE40159594 = UysHgwtJtE4710524;     UysHgwtJtE4710524 = UysHgwtJtE69656395;     UysHgwtJtE69656395 = UysHgwtJtE5627195;     UysHgwtJtE5627195 = UysHgwtJtE83666674;     UysHgwtJtE83666674 = UysHgwtJtE967140;     UysHgwtJtE967140 = UysHgwtJtE32762896;     UysHgwtJtE32762896 = UysHgwtJtE79903227;     UysHgwtJtE79903227 = UysHgwtJtE64061015;     UysHgwtJtE64061015 = UysHgwtJtE30334693;     UysHgwtJtE30334693 = UysHgwtJtE97735160;     UysHgwtJtE97735160 = UysHgwtJtE75440061;     UysHgwtJtE75440061 = UysHgwtJtE56434815;     UysHgwtJtE56434815 = UysHgwtJtE41998866;     UysHgwtJtE41998866 = UysHgwtJtE55672727;     UysHgwtJtE55672727 = UysHgwtJtE30007380;     UysHgwtJtE30007380 = UysHgwtJtE25373953;     UysHgwtJtE25373953 = UysHgwtJtE82452553;     UysHgwtJtE82452553 = UysHgwtJtE64917263;     UysHgwtJtE64917263 = UysHgwtJtE41462951;     UysHgwtJtE41462951 = UysHgwtJtE19181623;     UysHgwtJtE19181623 = UysHgwtJtE80445245;     UysHgwtJtE80445245 = UysHgwtJtE9988677;     UysHgwtJtE9988677 = UysHgwtJtE40644150;     UysHgwtJtE40644150 = UysHgwtJtE59981037;     UysHgwtJtE59981037 = UysHgwtJtE98885783;     UysHgwtJtE98885783 = UysHgwtJtE70956707;     UysHgwtJtE70956707 = UysHgwtJtE3963405;     UysHgwtJtE3963405 = UysHgwtJtE9883544;     UysHgwtJtE9883544 = UysHgwtJtE85956035;     UysHgwtJtE85956035 = UysHgwtJtE70149443;     UysHgwtJtE70149443 = UysHgwtJtE64721114;     UysHgwtJtE64721114 = UysHgwtJtE75604525;     UysHgwtJtE75604525 = UysHgwtJtE53404893;     UysHgwtJtE53404893 = UysHgwtJtE2283116;     UysHgwtJtE2283116 = UysHgwtJtE9552120;     UysHgwtJtE9552120 = UysHgwtJtE66987423;     UysHgwtJtE66987423 = UysHgwtJtE10730556;     UysHgwtJtE10730556 = UysHgwtJtE25028498;     UysHgwtJtE25028498 = UysHgwtJtE77585685;     UysHgwtJtE77585685 = UysHgwtJtE30189731;     UysHgwtJtE30189731 = UysHgwtJtE52115966;     UysHgwtJtE52115966 = UysHgwtJtE71772297;     UysHgwtJtE71772297 = UysHgwtJtE34578847;     UysHgwtJtE34578847 = UysHgwtJtE83322648;     UysHgwtJtE83322648 = UysHgwtJtE56580387;     UysHgwtJtE56580387 = UysHgwtJtE32634508;     UysHgwtJtE32634508 = UysHgwtJtE41555501;     UysHgwtJtE41555501 = UysHgwtJtE81422326;     UysHgwtJtE81422326 = UysHgwtJtE96210021;     UysHgwtJtE96210021 = UysHgwtJtE78156025;     UysHgwtJtE78156025 = UysHgwtJtE45803604;     UysHgwtJtE45803604 = UysHgwtJtE43875471;     UysHgwtJtE43875471 = UysHgwtJtE7659131;     UysHgwtJtE7659131 = UysHgwtJtE96259816;     UysHgwtJtE96259816 = UysHgwtJtE59714349;     UysHgwtJtE59714349 = UysHgwtJtE94721847;     UysHgwtJtE94721847 = UysHgwtJtE29012246;     UysHgwtJtE29012246 = UysHgwtJtE45646157;     UysHgwtJtE45646157 = UysHgwtJtE84780890;     UysHgwtJtE84780890 = UysHgwtJtE30010433;     UysHgwtJtE30010433 = UysHgwtJtE28799491;     UysHgwtJtE28799491 = UysHgwtJtE70019683;     UysHgwtJtE70019683 = UysHgwtJtE78104979;     UysHgwtJtE78104979 = UysHgwtJtE60185249;     UysHgwtJtE60185249 = UysHgwtJtE33014046;     UysHgwtJtE33014046 = UysHgwtJtE99835536;     UysHgwtJtE99835536 = UysHgwtJtE3029922;     UysHgwtJtE3029922 = UysHgwtJtE39715750;     UysHgwtJtE39715750 = UysHgwtJtE46120608;     UysHgwtJtE46120608 = UysHgwtJtE63019957;     UysHgwtJtE63019957 = UysHgwtJtE14643398;     UysHgwtJtE14643398 = UysHgwtJtE57424056;     UysHgwtJtE57424056 = UysHgwtJtE87331578;     UysHgwtJtE87331578 = UysHgwtJtE11273221;     UysHgwtJtE11273221 = UysHgwtJtE67065656;     UysHgwtJtE67065656 = UysHgwtJtE8672949;     UysHgwtJtE8672949 = UysHgwtJtE75409829;     UysHgwtJtE75409829 = UysHgwtJtE57321501;     UysHgwtJtE57321501 = UysHgwtJtE3400651;     UysHgwtJtE3400651 = UysHgwtJtE66251276;     UysHgwtJtE66251276 = UysHgwtJtE29401206;     UysHgwtJtE29401206 = UysHgwtJtE22541078;     UysHgwtJtE22541078 = UysHgwtJtE13673523;     UysHgwtJtE13673523 = UysHgwtJtE7800010;     UysHgwtJtE7800010 = UysHgwtJtE24345840;     UysHgwtJtE24345840 = UysHgwtJtE20845644;     UysHgwtJtE20845644 = UysHgwtJtE67945395;     UysHgwtJtE67945395 = UysHgwtJtE57145077;     UysHgwtJtE57145077 = UysHgwtJtE42568767;     UysHgwtJtE42568767 = UysHgwtJtE14830273;     UysHgwtJtE14830273 = UysHgwtJtE37975177;     UysHgwtJtE37975177 = UysHgwtJtE65084398;     UysHgwtJtE65084398 = UysHgwtJtE37095054;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OdqywQrgrd79737526() {     int vrCFTbnwPt96691150 = -786032702;    int vrCFTbnwPt27723252 = -286827611;    int vrCFTbnwPt40531366 = 41151707;    int vrCFTbnwPt24131916 = -969551767;    int vrCFTbnwPt20085961 = -970166538;    int vrCFTbnwPt46799201 = -39930099;    int vrCFTbnwPt12799922 = -876322957;    int vrCFTbnwPt90984878 = -730018018;    int vrCFTbnwPt18523967 = -107022049;    int vrCFTbnwPt52680911 = -921021598;    int vrCFTbnwPt30922126 = 86776471;    int vrCFTbnwPt18337876 = -729930539;    int vrCFTbnwPt71721703 = -207539618;    int vrCFTbnwPt91136734 = 68016684;    int vrCFTbnwPt77211033 = -70543704;    int vrCFTbnwPt60815269 = -845127883;    int vrCFTbnwPt66295796 = -607080514;    int vrCFTbnwPt62403491 = -807880696;    int vrCFTbnwPt55882265 = -926687437;    int vrCFTbnwPt36351924 = -873810456;    int vrCFTbnwPt22459984 = -368320247;    int vrCFTbnwPt24162326 = -688576123;    int vrCFTbnwPt22199205 = -757593585;    int vrCFTbnwPt90104191 = -495495694;    int vrCFTbnwPt58430558 = -936329816;    int vrCFTbnwPt59332170 = -361262805;    int vrCFTbnwPt54803021 = 44753505;    int vrCFTbnwPt84292791 = -387529165;    int vrCFTbnwPt30229588 = -438801067;    int vrCFTbnwPt48462143 = -542249956;    int vrCFTbnwPt65558468 = -576602509;    int vrCFTbnwPt2746298 = 26975684;    int vrCFTbnwPt47967823 = -704454292;    int vrCFTbnwPt53481149 = 43265069;    int vrCFTbnwPt8900766 = -459269049;    int vrCFTbnwPt88473440 = -874336994;    int vrCFTbnwPt76587712 = -84065843;    int vrCFTbnwPt68509781 = -9789287;    int vrCFTbnwPt83739057 = -553644577;    int vrCFTbnwPt48430180 = -162702397;    int vrCFTbnwPt11622707 = -291519716;    int vrCFTbnwPt72362296 = -491727624;    int vrCFTbnwPt50431362 = -330331241;    int vrCFTbnwPt41226928 = -20738729;    int vrCFTbnwPt11718871 = -586685120;    int vrCFTbnwPt89821626 = -357626125;    int vrCFTbnwPt83074407 = -404694460;    int vrCFTbnwPt76886124 = -937124026;    int vrCFTbnwPt91505614 = -576618359;    int vrCFTbnwPt86939689 = -534098120;    int vrCFTbnwPt85065096 = -478648146;    int vrCFTbnwPt89907801 = 35557766;    int vrCFTbnwPt31995901 = -189247647;    int vrCFTbnwPt5909031 = -531040207;    int vrCFTbnwPt57277542 = -712706290;    int vrCFTbnwPt72528825 = 2543420;    int vrCFTbnwPt5524047 = -529234027;    int vrCFTbnwPt50427174 = -463352600;    int vrCFTbnwPt65701357 = 66778048;    int vrCFTbnwPt60753790 = -508903734;    int vrCFTbnwPt91996180 = 15316396;    int vrCFTbnwPt28507131 = -388793793;    int vrCFTbnwPt60755290 = -191216951;    int vrCFTbnwPt70061824 = -564772094;    int vrCFTbnwPt87122443 = -244419090;    int vrCFTbnwPt28175829 = -940199214;    int vrCFTbnwPt70370053 = 74523753;    int vrCFTbnwPt18240554 = -150804687;    int vrCFTbnwPt82235969 = -472714268;    int vrCFTbnwPt88737593 = -196206710;    int vrCFTbnwPt84227556 = -661062041;    int vrCFTbnwPt97786014 = -497291227;    int vrCFTbnwPt78664434 = -154236120;    int vrCFTbnwPt7452085 = -663985041;    int vrCFTbnwPt24729217 = -482290740;    int vrCFTbnwPt50097688 = -876592623;    int vrCFTbnwPt73730964 = -258244882;    int vrCFTbnwPt80972277 = -636854857;    int vrCFTbnwPt78385321 = -908810574;    int vrCFTbnwPt68608932 = -478703691;    int vrCFTbnwPt76257763 = -956568345;    int vrCFTbnwPt77916897 = -18122470;    int vrCFTbnwPt92787177 = -810910807;    int vrCFTbnwPt43289899 = -904702947;    int vrCFTbnwPt63397046 = 36398189;    int vrCFTbnwPt75650666 = -512160275;    int vrCFTbnwPt70750396 = -783776669;    int vrCFTbnwPt42058792 = -73414085;    int vrCFTbnwPt96203606 = -244028641;    int vrCFTbnwPt36371941 = -361812470;    int vrCFTbnwPt82949394 = -245102967;    int vrCFTbnwPt26160539 = -620713243;    int vrCFTbnwPt2808424 = 23432665;    int vrCFTbnwPt22985267 = 55259157;    int vrCFTbnwPt56434000 = -78018793;    int vrCFTbnwPt83115576 = -902725924;    int vrCFTbnwPt11607007 = -200510673;    int vrCFTbnwPt80369538 = -765559148;    int vrCFTbnwPt54104485 = -776319640;    int vrCFTbnwPt83543042 = -786032702;     vrCFTbnwPt96691150 = vrCFTbnwPt27723252;     vrCFTbnwPt27723252 = vrCFTbnwPt40531366;     vrCFTbnwPt40531366 = vrCFTbnwPt24131916;     vrCFTbnwPt24131916 = vrCFTbnwPt20085961;     vrCFTbnwPt20085961 = vrCFTbnwPt46799201;     vrCFTbnwPt46799201 = vrCFTbnwPt12799922;     vrCFTbnwPt12799922 = vrCFTbnwPt90984878;     vrCFTbnwPt90984878 = vrCFTbnwPt18523967;     vrCFTbnwPt18523967 = vrCFTbnwPt52680911;     vrCFTbnwPt52680911 = vrCFTbnwPt30922126;     vrCFTbnwPt30922126 = vrCFTbnwPt18337876;     vrCFTbnwPt18337876 = vrCFTbnwPt71721703;     vrCFTbnwPt71721703 = vrCFTbnwPt91136734;     vrCFTbnwPt91136734 = vrCFTbnwPt77211033;     vrCFTbnwPt77211033 = vrCFTbnwPt60815269;     vrCFTbnwPt60815269 = vrCFTbnwPt66295796;     vrCFTbnwPt66295796 = vrCFTbnwPt62403491;     vrCFTbnwPt62403491 = vrCFTbnwPt55882265;     vrCFTbnwPt55882265 = vrCFTbnwPt36351924;     vrCFTbnwPt36351924 = vrCFTbnwPt22459984;     vrCFTbnwPt22459984 = vrCFTbnwPt24162326;     vrCFTbnwPt24162326 = vrCFTbnwPt22199205;     vrCFTbnwPt22199205 = vrCFTbnwPt90104191;     vrCFTbnwPt90104191 = vrCFTbnwPt58430558;     vrCFTbnwPt58430558 = vrCFTbnwPt59332170;     vrCFTbnwPt59332170 = vrCFTbnwPt54803021;     vrCFTbnwPt54803021 = vrCFTbnwPt84292791;     vrCFTbnwPt84292791 = vrCFTbnwPt30229588;     vrCFTbnwPt30229588 = vrCFTbnwPt48462143;     vrCFTbnwPt48462143 = vrCFTbnwPt65558468;     vrCFTbnwPt65558468 = vrCFTbnwPt2746298;     vrCFTbnwPt2746298 = vrCFTbnwPt47967823;     vrCFTbnwPt47967823 = vrCFTbnwPt53481149;     vrCFTbnwPt53481149 = vrCFTbnwPt8900766;     vrCFTbnwPt8900766 = vrCFTbnwPt88473440;     vrCFTbnwPt88473440 = vrCFTbnwPt76587712;     vrCFTbnwPt76587712 = vrCFTbnwPt68509781;     vrCFTbnwPt68509781 = vrCFTbnwPt83739057;     vrCFTbnwPt83739057 = vrCFTbnwPt48430180;     vrCFTbnwPt48430180 = vrCFTbnwPt11622707;     vrCFTbnwPt11622707 = vrCFTbnwPt72362296;     vrCFTbnwPt72362296 = vrCFTbnwPt50431362;     vrCFTbnwPt50431362 = vrCFTbnwPt41226928;     vrCFTbnwPt41226928 = vrCFTbnwPt11718871;     vrCFTbnwPt11718871 = vrCFTbnwPt89821626;     vrCFTbnwPt89821626 = vrCFTbnwPt83074407;     vrCFTbnwPt83074407 = vrCFTbnwPt76886124;     vrCFTbnwPt76886124 = vrCFTbnwPt91505614;     vrCFTbnwPt91505614 = vrCFTbnwPt86939689;     vrCFTbnwPt86939689 = vrCFTbnwPt85065096;     vrCFTbnwPt85065096 = vrCFTbnwPt89907801;     vrCFTbnwPt89907801 = vrCFTbnwPt31995901;     vrCFTbnwPt31995901 = vrCFTbnwPt5909031;     vrCFTbnwPt5909031 = vrCFTbnwPt57277542;     vrCFTbnwPt57277542 = vrCFTbnwPt72528825;     vrCFTbnwPt72528825 = vrCFTbnwPt5524047;     vrCFTbnwPt5524047 = vrCFTbnwPt50427174;     vrCFTbnwPt50427174 = vrCFTbnwPt65701357;     vrCFTbnwPt65701357 = vrCFTbnwPt60753790;     vrCFTbnwPt60753790 = vrCFTbnwPt91996180;     vrCFTbnwPt91996180 = vrCFTbnwPt28507131;     vrCFTbnwPt28507131 = vrCFTbnwPt60755290;     vrCFTbnwPt60755290 = vrCFTbnwPt70061824;     vrCFTbnwPt70061824 = vrCFTbnwPt87122443;     vrCFTbnwPt87122443 = vrCFTbnwPt28175829;     vrCFTbnwPt28175829 = vrCFTbnwPt70370053;     vrCFTbnwPt70370053 = vrCFTbnwPt18240554;     vrCFTbnwPt18240554 = vrCFTbnwPt82235969;     vrCFTbnwPt82235969 = vrCFTbnwPt88737593;     vrCFTbnwPt88737593 = vrCFTbnwPt84227556;     vrCFTbnwPt84227556 = vrCFTbnwPt97786014;     vrCFTbnwPt97786014 = vrCFTbnwPt78664434;     vrCFTbnwPt78664434 = vrCFTbnwPt7452085;     vrCFTbnwPt7452085 = vrCFTbnwPt24729217;     vrCFTbnwPt24729217 = vrCFTbnwPt50097688;     vrCFTbnwPt50097688 = vrCFTbnwPt73730964;     vrCFTbnwPt73730964 = vrCFTbnwPt80972277;     vrCFTbnwPt80972277 = vrCFTbnwPt78385321;     vrCFTbnwPt78385321 = vrCFTbnwPt68608932;     vrCFTbnwPt68608932 = vrCFTbnwPt76257763;     vrCFTbnwPt76257763 = vrCFTbnwPt77916897;     vrCFTbnwPt77916897 = vrCFTbnwPt92787177;     vrCFTbnwPt92787177 = vrCFTbnwPt43289899;     vrCFTbnwPt43289899 = vrCFTbnwPt63397046;     vrCFTbnwPt63397046 = vrCFTbnwPt75650666;     vrCFTbnwPt75650666 = vrCFTbnwPt70750396;     vrCFTbnwPt70750396 = vrCFTbnwPt42058792;     vrCFTbnwPt42058792 = vrCFTbnwPt96203606;     vrCFTbnwPt96203606 = vrCFTbnwPt36371941;     vrCFTbnwPt36371941 = vrCFTbnwPt82949394;     vrCFTbnwPt82949394 = vrCFTbnwPt26160539;     vrCFTbnwPt26160539 = vrCFTbnwPt2808424;     vrCFTbnwPt2808424 = vrCFTbnwPt22985267;     vrCFTbnwPt22985267 = vrCFTbnwPt56434000;     vrCFTbnwPt56434000 = vrCFTbnwPt83115576;     vrCFTbnwPt83115576 = vrCFTbnwPt11607007;     vrCFTbnwPt11607007 = vrCFTbnwPt80369538;     vrCFTbnwPt80369538 = vrCFTbnwPt54104485;     vrCFTbnwPt54104485 = vrCFTbnwPt83543042;     vrCFTbnwPt83543042 = vrCFTbnwPt96691150;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EvalPoWOMIAynfPMPwgNze92282715() {     int NxDdRynaYQ16159321 = -99163914;    int NxDdRynaYQ80747115 = -832705607;    int NxDdRynaYQ57368358 = -710476908;    int NxDdRynaYQ42779064 = -786126030;    int NxDdRynaYQ20532477 = -496438954;    int NxDdRynaYQ72391275 = 69585133;    int NxDdRynaYQ57631800 = -219629187;    int NxDdRynaYQ56235111 = -823825984;    int NxDdRynaYQ79210764 = -835213428;    int NxDdRynaYQ30609634 = -926607643;    int NxDdRynaYQ85145389 = -346213829;    int NxDdRynaYQ21832490 = -729233243;    int NxDdRynaYQ62093362 = -631896894;    int NxDdRynaYQ99552775 = -474269042;    int NxDdRynaYQ37737495 = -368627495;    int NxDdRynaYQ27030918 = -208319817;    int NxDdRynaYQ72257909 = -778855195;    int NxDdRynaYQ86466242 = -558635414;    int NxDdRynaYQ55517144 = -203892198;    int NxDdRynaYQ16963226 = -491346912;    int NxDdRynaYQ34916056 = -974532572;    int NxDdRynaYQ39144409 = -100379336;    int NxDdRynaYQ90372211 = 44831797;    int NxDdRynaYQ7825861 = -132039685;    int NxDdRynaYQ69634047 = -130629925;    int NxDdRynaYQ64099632 = -47058023;    int NxDdRynaYQ38731152 = -720397427;    int NxDdRynaYQ35084466 = -551262444;    int NxDdRynaYQ71974545 = -452712213;    int NxDdRynaYQ33168997 = -633688650;    int NxDdRynaYQ95362552 = -441928601;    int NxDdRynaYQ42325608 = -537373334;    int NxDdRynaYQ59443926 = -159662059;    int NxDdRynaYQ12237657 = -261338137;    int NxDdRynaYQ48831102 = -521971855;    int NxDdRynaYQ24539378 = -77905602;    int NxDdRynaYQ44971163 = -610941917;    int NxDdRynaYQ9992256 = -86998102;    int NxDdRynaYQ51052382 = 81940598;    int NxDdRynaYQ69711916 = -159233494;    int NxDdRynaYQ53104764 = -801306012;    int NxDdRynaYQ84221429 = -730623850;    int NxDdRynaYQ21564604 = -278133039;    int NxDdRynaYQ24612467 = -469811389;    int NxDdRynaYQ91747281 = -863808083;    int NxDdRynaYQ44282753 = -894957546;    int NxDdRynaYQ65064287 = -318387783;    int NxDdRynaYQ77041954 = -20411340;    int NxDdRynaYQ32641205 = -590557597;    int NxDdRynaYQ27838032 = -295110465;    int NxDdRynaYQ59500666 = -885013077;    int NxDdRynaYQ6356662 = -341795093;    int NxDdRynaYQ1821048 = -965356608;    int NxDdRynaYQ78839059 = -525633843;    int NxDdRynaYQ57366659 = -487264925;    int NxDdRynaYQ77014912 = -998784579;    int NxDdRynaYQ90374904 = -777537405;    int NxDdRynaYQ49542498 = -478437223;    int NxDdRynaYQ73145017 = -555496106;    int NxDdRynaYQ56432845 = -349380931;    int NxDdRynaYQ33660124 = -210017441;    int NxDdRynaYQ22547334 = -668366743;    int NxDdRynaYQ84260566 = -271113771;    int NxDdRynaYQ46041768 = -101524778;    int NxDdRynaYQ35247081 = -384679043;    int NxDdRynaYQ42819782 = -808840496;    int NxDdRynaYQ62388563 = -469571185;    int NxDdRynaYQ49855706 = -270558757;    int NxDdRynaYQ50721673 = -952297188;    int NxDdRynaYQ13198117 = -190721894;    int NxDdRynaYQ82059754 = -597377900;    int NxDdRynaYQ62265654 = -591857093;    int NxDdRynaYQ35413861 = -540576013;    int NxDdRynaYQ85805227 = 55341295;    int NxDdRynaYQ63858462 = -690040901;    int NxDdRynaYQ50694627 = -143908723;    int NxDdRynaYQ17579806 = -822246298;    int NxDdRynaYQ65759744 = -485356814;    int NxDdRynaYQ16078579 = -268231603;    int NxDdRynaYQ25351294 = -235672379;    int NxDdRynaYQ99035344 = -728670241;    int NxDdRynaYQ61689198 = -599986088;    int NxDdRynaYQ2443261 = -960704847;    int NxDdRynaYQ44136513 = -57601748;    int NxDdRynaYQ73668331 = -748675574;    int NxDdRynaYQ89005891 = -133508;    int NxDdRynaYQ40504561 = -572016726;    int NxDdRynaYQ80604866 = -634028216;    int NxDdRynaYQ54870997 = -774073212;    int NxDdRynaYQ71816190 = -523187277;    int NxDdRynaYQ34164474 = -300368198;    int NxDdRynaYQ95428665 = -32504695;    int NxDdRynaYQ36847238 = -531501997;    int NxDdRynaYQ94619537 = -568678471;    int NxDdRynaYQ36051793 = -949216053;    int NxDdRynaYQ30557430 = -32939269;    int NxDdRynaYQ99960863 = -359510079;    int NxDdRynaYQ75522836 = -76608261;    int NxDdRynaYQ89365386 = 14867653;    int NxDdRynaYQ48927500 = -99163914;     NxDdRynaYQ16159321 = NxDdRynaYQ80747115;     NxDdRynaYQ80747115 = NxDdRynaYQ57368358;     NxDdRynaYQ57368358 = NxDdRynaYQ42779064;     NxDdRynaYQ42779064 = NxDdRynaYQ20532477;     NxDdRynaYQ20532477 = NxDdRynaYQ72391275;     NxDdRynaYQ72391275 = NxDdRynaYQ57631800;     NxDdRynaYQ57631800 = NxDdRynaYQ56235111;     NxDdRynaYQ56235111 = NxDdRynaYQ79210764;     NxDdRynaYQ79210764 = NxDdRynaYQ30609634;     NxDdRynaYQ30609634 = NxDdRynaYQ85145389;     NxDdRynaYQ85145389 = NxDdRynaYQ21832490;     NxDdRynaYQ21832490 = NxDdRynaYQ62093362;     NxDdRynaYQ62093362 = NxDdRynaYQ99552775;     NxDdRynaYQ99552775 = NxDdRynaYQ37737495;     NxDdRynaYQ37737495 = NxDdRynaYQ27030918;     NxDdRynaYQ27030918 = NxDdRynaYQ72257909;     NxDdRynaYQ72257909 = NxDdRynaYQ86466242;     NxDdRynaYQ86466242 = NxDdRynaYQ55517144;     NxDdRynaYQ55517144 = NxDdRynaYQ16963226;     NxDdRynaYQ16963226 = NxDdRynaYQ34916056;     NxDdRynaYQ34916056 = NxDdRynaYQ39144409;     NxDdRynaYQ39144409 = NxDdRynaYQ90372211;     NxDdRynaYQ90372211 = NxDdRynaYQ7825861;     NxDdRynaYQ7825861 = NxDdRynaYQ69634047;     NxDdRynaYQ69634047 = NxDdRynaYQ64099632;     NxDdRynaYQ64099632 = NxDdRynaYQ38731152;     NxDdRynaYQ38731152 = NxDdRynaYQ35084466;     NxDdRynaYQ35084466 = NxDdRynaYQ71974545;     NxDdRynaYQ71974545 = NxDdRynaYQ33168997;     NxDdRynaYQ33168997 = NxDdRynaYQ95362552;     NxDdRynaYQ95362552 = NxDdRynaYQ42325608;     NxDdRynaYQ42325608 = NxDdRynaYQ59443926;     NxDdRynaYQ59443926 = NxDdRynaYQ12237657;     NxDdRynaYQ12237657 = NxDdRynaYQ48831102;     NxDdRynaYQ48831102 = NxDdRynaYQ24539378;     NxDdRynaYQ24539378 = NxDdRynaYQ44971163;     NxDdRynaYQ44971163 = NxDdRynaYQ9992256;     NxDdRynaYQ9992256 = NxDdRynaYQ51052382;     NxDdRynaYQ51052382 = NxDdRynaYQ69711916;     NxDdRynaYQ69711916 = NxDdRynaYQ53104764;     NxDdRynaYQ53104764 = NxDdRynaYQ84221429;     NxDdRynaYQ84221429 = NxDdRynaYQ21564604;     NxDdRynaYQ21564604 = NxDdRynaYQ24612467;     NxDdRynaYQ24612467 = NxDdRynaYQ91747281;     NxDdRynaYQ91747281 = NxDdRynaYQ44282753;     NxDdRynaYQ44282753 = NxDdRynaYQ65064287;     NxDdRynaYQ65064287 = NxDdRynaYQ77041954;     NxDdRynaYQ77041954 = NxDdRynaYQ32641205;     NxDdRynaYQ32641205 = NxDdRynaYQ27838032;     NxDdRynaYQ27838032 = NxDdRynaYQ59500666;     NxDdRynaYQ59500666 = NxDdRynaYQ6356662;     NxDdRynaYQ6356662 = NxDdRynaYQ1821048;     NxDdRynaYQ1821048 = NxDdRynaYQ78839059;     NxDdRynaYQ78839059 = NxDdRynaYQ57366659;     NxDdRynaYQ57366659 = NxDdRynaYQ77014912;     NxDdRynaYQ77014912 = NxDdRynaYQ90374904;     NxDdRynaYQ90374904 = NxDdRynaYQ49542498;     NxDdRynaYQ49542498 = NxDdRynaYQ73145017;     NxDdRynaYQ73145017 = NxDdRynaYQ56432845;     NxDdRynaYQ56432845 = NxDdRynaYQ33660124;     NxDdRynaYQ33660124 = NxDdRynaYQ22547334;     NxDdRynaYQ22547334 = NxDdRynaYQ84260566;     NxDdRynaYQ84260566 = NxDdRynaYQ46041768;     NxDdRynaYQ46041768 = NxDdRynaYQ35247081;     NxDdRynaYQ35247081 = NxDdRynaYQ42819782;     NxDdRynaYQ42819782 = NxDdRynaYQ62388563;     NxDdRynaYQ62388563 = NxDdRynaYQ49855706;     NxDdRynaYQ49855706 = NxDdRynaYQ50721673;     NxDdRynaYQ50721673 = NxDdRynaYQ13198117;     NxDdRynaYQ13198117 = NxDdRynaYQ82059754;     NxDdRynaYQ82059754 = NxDdRynaYQ62265654;     NxDdRynaYQ62265654 = NxDdRynaYQ35413861;     NxDdRynaYQ35413861 = NxDdRynaYQ85805227;     NxDdRynaYQ85805227 = NxDdRynaYQ63858462;     NxDdRynaYQ63858462 = NxDdRynaYQ50694627;     NxDdRynaYQ50694627 = NxDdRynaYQ17579806;     NxDdRynaYQ17579806 = NxDdRynaYQ65759744;     NxDdRynaYQ65759744 = NxDdRynaYQ16078579;     NxDdRynaYQ16078579 = NxDdRynaYQ25351294;     NxDdRynaYQ25351294 = NxDdRynaYQ99035344;     NxDdRynaYQ99035344 = NxDdRynaYQ61689198;     NxDdRynaYQ61689198 = NxDdRynaYQ2443261;     NxDdRynaYQ2443261 = NxDdRynaYQ44136513;     NxDdRynaYQ44136513 = NxDdRynaYQ73668331;     NxDdRynaYQ73668331 = NxDdRynaYQ89005891;     NxDdRynaYQ89005891 = NxDdRynaYQ40504561;     NxDdRynaYQ40504561 = NxDdRynaYQ80604866;     NxDdRynaYQ80604866 = NxDdRynaYQ54870997;     NxDdRynaYQ54870997 = NxDdRynaYQ71816190;     NxDdRynaYQ71816190 = NxDdRynaYQ34164474;     NxDdRynaYQ34164474 = NxDdRynaYQ95428665;     NxDdRynaYQ95428665 = NxDdRynaYQ36847238;     NxDdRynaYQ36847238 = NxDdRynaYQ94619537;     NxDdRynaYQ94619537 = NxDdRynaYQ36051793;     NxDdRynaYQ36051793 = NxDdRynaYQ30557430;     NxDdRynaYQ30557430 = NxDdRynaYQ99960863;     NxDdRynaYQ99960863 = NxDdRynaYQ75522836;     NxDdRynaYQ75522836 = NxDdRynaYQ89365386;     NxDdRynaYQ89365386 = NxDdRynaYQ48927500;     NxDdRynaYQ48927500 = NxDdRynaYQ16159321;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ivSKFrpPtUcaULSTdXJJmX88465875() {     int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq75755418 = -327920292;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82252964 = -642860992;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94369745 = -784617830;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38654823 = -558736908;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31825703 = -396945982;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70068396 = -888674541;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54990283 = -649346773;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7060396 = -78037359;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93024208 = -267885928;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13634149 = -867866497;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq10440321 = -747756269;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56503691 = -824254493;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq32847926 = -538075413;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq57926614 = -378427389;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35045301 = -61154016;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23785173 = -13692709;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8219013 = -707071475;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq51134574 = -927971519;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35959347 = -343011828;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96880335 = -53755565;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15377175 = -807553397;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7634008 = 7218786;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82564036 = -819463282;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72556099 = -796377922;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45612052 = -686767515;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq58514539 = -181675494;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52071223 = -69877424;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq195635 = -72644034;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21758888 = -242304828;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq71642463 = -680671893;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq20276871 = 12852071;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85090868 = -954591331;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8525965 = -139608931;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94762098 = -863222068;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq53768463 = -170181840;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3129275 = -389562184;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35602841 = -903720552;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8352593 = -31450492;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70070325 = -736765918;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq42537571 = -433114442;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq11322578 = -169967609;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54300611 = -735565268;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq62443846 = -11577868;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq98851971 = -893726128;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq92735597 = -310126151;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9075882 = -37901705;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70553009 = -210243450;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23738348 = -353164568;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72030853 = -874495217;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq43005424 = -616362926;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9986917 = -671121301;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq12941815 = -313038349;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq77236562 = -105305062;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52113582 = -785802799;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73088701 = -451199012;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68121410 = -235139078;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99688928 = -823397711;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21813647 = -988239909;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93042770 = -871969393;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73311164 = -115270488;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq17997174 = -718797117;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54794648 = -476702739;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85301507 = -835732531;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21381745 = -587214036;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93357277 = -780718568;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq25349453 = -793164938;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq47977727 = -584645562;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38085827 = -674853345;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq4158151 = -108245549;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31916026 = -671591833;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq88182331 = -109972157;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99866419 = -575620984;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq81064248 = -91205601;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93421776 = -909897386;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85557757 = -883787957;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61076564 = 28011871;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45190162 = -981203346;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq83712064 = -925737154;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq79820502 = -386251771;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq36536170 = -548865810;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq87961529 = -971432045;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28332875 = -716712856;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28164782 = -198148818;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq78753463 = -625941903;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61655547 = 90449408;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7335057 = -674109581;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7854307 = -749286270;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56412382 = -353806133;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21673398 = -312023057;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85647052 = -935042763;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3440346 = -566164473;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13789195 = -915480644;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15309822 = -159481099;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96759160 = -521495431;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq24540397 = -714317325;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56527929 = -693264870;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68999103 = -899832737;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq41062101 = -424363833;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq5494695 = -13007560;    int aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq67386145 = -327920292;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq75755418 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82252964;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82252964 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94369745;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94369745 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38654823;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38654823 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31825703;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31825703 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70068396;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70068396 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54990283;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54990283 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7060396;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7060396 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93024208;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93024208 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13634149;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13634149 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq10440321;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq10440321 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56503691;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56503691 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq32847926;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq32847926 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq57926614;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq57926614 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35045301;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35045301 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23785173;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23785173 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8219013;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8219013 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq51134574;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq51134574 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35959347;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35959347 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96880335;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96880335 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15377175;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15377175 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7634008;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7634008 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82564036;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq82564036 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72556099;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72556099 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45612052;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45612052 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq58514539;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq58514539 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52071223;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52071223 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq195635;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq195635 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21758888;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21758888 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq71642463;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq71642463 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq20276871;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq20276871 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85090868;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85090868 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8525965;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8525965 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94762098;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq94762098 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq53768463;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq53768463 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3129275;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3129275 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35602841;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq35602841 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8352593;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq8352593 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70070325;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70070325 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq42537571;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq42537571 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq11322578;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq11322578 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54300611;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54300611 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq62443846;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq62443846 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq98851971;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq98851971 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq92735597;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq92735597 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9075882;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9075882 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70553009;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq70553009 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23738348;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq23738348 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72030853;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq72030853 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq43005424;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq43005424 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9986917;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq9986917 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq12941815;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq12941815 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq77236562;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq77236562 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52113582;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq52113582 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73088701;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73088701 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68121410;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68121410 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99688928;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99688928 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21813647;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21813647 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93042770;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93042770 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73311164;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq73311164 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq17997174;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq17997174 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54794648;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq54794648 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85301507;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85301507 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21381745;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21381745 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93357277;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93357277 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq25349453;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq25349453 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq47977727;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq47977727 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38085827;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq38085827 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq4158151;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq4158151 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31916026;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq31916026 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq88182331;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq88182331 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99866419;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq99866419 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq81064248;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq81064248 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93421776;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq93421776 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85557757;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85557757 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61076564;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61076564 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45190162;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq45190162 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq83712064;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq83712064 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq79820502;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq79820502 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq36536170;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq36536170 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq87961529;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq87961529 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28332875;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28332875 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28164782;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq28164782 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq78753463;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq78753463 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61655547;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq61655547 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7335057;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7335057 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7854307;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq7854307 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56412382;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56412382 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21673398;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq21673398 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85647052;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq85647052 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3440346;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq3440346 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13789195;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq13789195 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15309822;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq15309822 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96759160;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq96759160 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq24540397;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq24540397 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56527929;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq56527929 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68999103;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq68999103 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq41062101;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq41062101 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq5494695;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq5494695 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq67386145;     aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq67386145 = aQagGyGHDmpLUmUKCMzLtAfMkHRlNqrjeLUCkYkq75755418;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GEXeAYLzXJSClBlTwjandO1011065() {     int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95223588 = -741051503;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35276829 = -88738989;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr11206738 = -436246445;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57301971 = -375311170;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32272220 = 76781603;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95660470 = -779159309;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr99822161 = 7346997;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72310628 = -171845325;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53711005 = -996077307;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr91562871 = -873452543;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64663584 = -80746569;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59998305 = -823557198;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23219585 = -962432689;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66342654 = -920713115;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95571761 = -359237808;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90000821 = -476884642;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr14181126 = -878846157;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr75197325 = -678726237;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35594226 = -720216588;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77491637 = -771292021;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr27833247 = -313765722;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr22616091 = -504584427;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50737042 = -17037900;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90277768 = -432921914;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56815541 = -981067624;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63282000 = -967470713;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35999354 = -835028356;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50987310 = -236377313;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63503844 = -256215974;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56349317 = -772110587;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50080956 = -952474022;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24670179 = -418940349;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20002068 = -694816698;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53518606 = -67825275;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93698799 = -232884647;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39195212 = -693130792;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3986292 = -330596627;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49835067 = -108659307;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37383650 = -101180744;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63819307 = -429645538;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52804634 = -679753904;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66159743 = -974461494;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr33577087 = 40620334;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr82237510 = -242798789;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72764008 = -587249114;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63537009 = -575233126;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52542889 = -123936773;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23894178 = -536451883;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr13166444 = -888434456;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83903766 = -377375271;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84422485 = 22513768;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr29390675 = -690391208;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr47061708 = -881414023;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr25043611 = -780396435;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr73177817 = -225757647;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72607497 = -136467077;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84539786 = 28298911;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20928970 = 96675468;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr486431 = -394243547;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68990219 = 44252315;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59661117 = -944130954;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr48834852 = -756275690;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr8806784 = -915629351;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr97361687 = -123966720;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr41481916 = -920978521;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39993406 = -661806220;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39996237 = -28740500;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr69700979 = -794607415;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72643855 = -587828469;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56376550 = -666107016;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr86014529 = -46288016;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64346059 = -670186850;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37813675 = -477545494;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71774919 = -190571050;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24687003 = 8461882;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr61673503 = -339304229;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr89039003 = -445204762;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68499531 = -774239112;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr17513760 = -845672800;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93278531 = -305834499;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr10739111 = -743533940;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr12105176 = -198576474;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37820866 = -347942858;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr79600078 = -878840703;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71926832 = -694624356;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20690282 = -162082815;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77608471 = -537526327;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr94958457 = -914420263;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr80340788 = -842067628;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr21091302 = 3582430;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr54655425 = -621429704;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83057321 = -327272096;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49348637 = -714415761;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68393431 = -45433059;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr4158190 = -485514585;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3969783 = -923478215;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57352960 = 41167857;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr36215399 = -835412946;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr40755595 = -321820268;    int aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32770603 = -741051503;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95223588 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35276829;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35276829 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr11206738;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr11206738 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57301971;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57301971 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32272220;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32272220 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95660470;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95660470 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr99822161;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr99822161 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72310628;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72310628 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53711005;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53711005 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr91562871;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr91562871 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64663584;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64663584 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59998305;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59998305 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23219585;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23219585 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66342654;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66342654 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95571761;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95571761 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90000821;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90000821 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr14181126;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr14181126 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr75197325;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr75197325 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35594226;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35594226 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77491637;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77491637 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr27833247;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr27833247 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr22616091;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr22616091 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50737042;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50737042 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90277768;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr90277768 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56815541;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56815541 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63282000;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63282000 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35999354;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr35999354 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50987310;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50987310 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63503844;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63503844 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56349317;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56349317 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50080956;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr50080956 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24670179;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24670179 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20002068;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20002068 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53518606;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr53518606 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93698799;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93698799 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39195212;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39195212 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3986292;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3986292 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49835067;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49835067 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37383650;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37383650 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63819307;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63819307 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52804634;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52804634 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66159743;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr66159743 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr33577087;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr33577087 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr82237510;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr82237510 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72764008;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72764008 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63537009;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr63537009 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52542889;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr52542889 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23894178;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr23894178 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr13166444;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr13166444 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83903766;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83903766 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84422485;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84422485 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr29390675;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr29390675 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr47061708;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr47061708 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr25043611;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr25043611 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr73177817;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr73177817 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72607497;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72607497 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84539786;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr84539786 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20928970;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20928970 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr486431;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr486431 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68990219;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68990219 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59661117;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr59661117 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr48834852;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr48834852 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr8806784;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr8806784 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr97361687;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr97361687 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr41481916;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr41481916 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39993406;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39993406 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39996237;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr39996237 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr69700979;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr69700979 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72643855;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr72643855 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56376550;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr56376550 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr86014529;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr86014529 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64346059;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr64346059 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37813675;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37813675 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71774919;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71774919 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24687003;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr24687003 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr61673503;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr61673503 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr89039003;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr89039003 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68499531;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68499531 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr17513760;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr17513760 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93278531;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr93278531 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr10739111;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr10739111 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr12105176;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr12105176 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37820866;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr37820866 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr79600078;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr79600078 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71926832;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr71926832 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20690282;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr20690282 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77608471;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr77608471 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr94958457;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr94958457 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr80340788;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr80340788 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr21091302;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr21091302 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr54655425;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr54655425 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83057321;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr83057321 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49348637;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr49348637 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68393431;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr68393431 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr4158190;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr4158190 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3969783;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr3969783 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57352960;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr57352960 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr36215399;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr36215399 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr40755595;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr40755595 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32770603;     aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr32770603 = aruInTlOAHEqKXDNFtGeMwsWbVaUqWhkLsdfkrlr95223588;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void paxbWAiclfHSuxLFwKWGlg97194224() {     int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa54819685 = -969807881;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36782678 = -998894374;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48208126 = -510387368;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa53177730 = -147922048;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43565446 = -923725425;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93337591 = -637418982;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa97180643 = -422370589;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23135913 = -526056701;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67524449 = -428749806;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74587387 = -814711396;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa89958516 = -482289008;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94669506 = -918578447;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93974147 = -868611207;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa24716493 = -824871462;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92879567 = -51764329;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86755075 = -282257534;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa50142230 = -807062437;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39865656 = 51937659;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16036429 = -859336218;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57408746 = -333700674;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa8294366 = -146786547;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa91105689 = -396986305;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa42928867 = -881332979;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa55008007 = 2739849;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa32793546 = -437205215;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57696907 = -2088184;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa49339424 = -184508353;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16098479 = -857758903;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa13288188 = -45808589;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94822784 = -819093829;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74995274 = -497693350;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67435439 = -836158346;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa69084107 = -674763570;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36043048 = -669709206;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98636160 = -981094632;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa17785108 = 95212626;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94617969 = -623375262;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48195405 = -53111697;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56401593 = -919887260;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36644961 = -703526487;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa11022448 = -48415501;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36238925 = -979402912;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74456329 = -792824495;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56477016 = -666713527;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa73752324 = -33567183;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa28330138 = -818177285;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa58031611 = -15792440;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70590572 = -869205111;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa52556092 = -72372075;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99071158 = -698627732;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34908736 = -863594456;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa35975828 = -661634463;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22477223 = -21362477;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98318134 = 59434610;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa88899859 = -189691735;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63713996 = -472821577;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93853811 = -17561395;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93200118 = -413127217;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa20384184 = -710716834;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa85868538 = -821637242;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43998167 = -352910630;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81082165 = -564611686;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa9847725 = -380248112;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72701665 = -609655977;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99592112 = -217018047;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22523077 = -646130662;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa25585400 = -143814877;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57931100 = -98902002;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26080333 = -843776831;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa75094459 = -46976955;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92137106 = -658882272;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1946825 = -653950741;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa83464063 = -28175082;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa79391468 = -55809732;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa46386298 = -185285174;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72055440 = -167383635;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16649360 = -604161810;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86451851 = -114619452;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81255683 = -963692968;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa4463408 = -619027930;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99665295 = -986295744;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa78748852 = -315303243;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63542387 = -685386829;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa14217029 = -347180858;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa59914048 = -955499374;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39019447 = -836058887;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa44958217 = -714795870;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70765973 = -634198180;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa47143189 = -380017472;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34922165 = -408273056;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23931297 = -887225980;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1417851 = -110248045;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa27811221 = -342394864;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70533054 = 1749981;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92646794 = -250615858;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa29940283 = -483803815;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26391200 = -499154801;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1754665 = -83168518;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56884903 = -349695481;    int hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa51229247 = -969807881;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa54819685 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36782678;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36782678 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48208126;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48208126 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa53177730;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa53177730 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43565446;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43565446 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93337591;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93337591 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa97180643;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa97180643 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23135913;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23135913 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67524449;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67524449 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74587387;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74587387 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa89958516;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa89958516 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94669506;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94669506 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93974147;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93974147 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa24716493;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa24716493 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92879567;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92879567 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86755075;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86755075 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa50142230;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa50142230 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39865656;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39865656 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16036429;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16036429 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57408746;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57408746 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa8294366;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa8294366 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa91105689;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa91105689 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa42928867;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa42928867 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa55008007;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa55008007 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa32793546;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa32793546 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57696907;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57696907 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa49339424;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa49339424 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16098479;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16098479 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa13288188;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa13288188 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94822784;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94822784 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74995274;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74995274 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67435439;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa67435439 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa69084107;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa69084107 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36043048;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36043048 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98636160;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98636160 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa17785108;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa17785108 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94617969;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa94617969 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48195405;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa48195405 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56401593;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56401593 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36644961;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36644961 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa11022448;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa11022448 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36238925;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa36238925 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74456329;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa74456329 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56477016;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56477016 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa73752324;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa73752324 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa28330138;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa28330138 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa58031611;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa58031611 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70590572;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70590572 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa52556092;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa52556092 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99071158;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99071158 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34908736;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34908736 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa35975828;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa35975828 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22477223;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22477223 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98318134;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa98318134 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa88899859;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa88899859 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63713996;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63713996 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93853811;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93853811 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93200118;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa93200118 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa20384184;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa20384184 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa85868538;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa85868538 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43998167;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa43998167 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81082165;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81082165 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa9847725;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa9847725 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72701665;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72701665 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99592112;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99592112 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22523077;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa22523077 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa25585400;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa25585400 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57931100;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa57931100 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26080333;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26080333 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa75094459;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa75094459 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92137106;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92137106 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1946825;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1946825 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa83464063;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa83464063 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa79391468;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa79391468 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa46386298;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa46386298 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72055440;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa72055440 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16649360;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa16649360 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86451851;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa86451851 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81255683;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa81255683 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa4463408;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa4463408 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99665295;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa99665295 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa78748852;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa78748852 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63542387;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa63542387 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa14217029;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa14217029 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa59914048;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa59914048 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39019447;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa39019447 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa44958217;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa44958217 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70765973;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70765973 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa47143189;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa47143189 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34922165;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa34922165 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23931297;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa23931297 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1417851;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1417851 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa27811221;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa27811221 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70533054;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa70533054 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92646794;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa92646794 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa29940283;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa29940283 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26391200;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa26391200 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1754665;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa1754665 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56884903;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa56884903 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa51229247;     hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa51229247 = hakSDHqnRJzLnTnnADujWsHkwDMyFICuPJsXqDwa54819685;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JvBqsJNuyukxfpgflGqkOz93377384() {     int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14415782 = -98564258;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu38288528 = -809049758;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85209513 = -584528290;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu49053488 = 79467075;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54858672 = -824232452;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91014711 = -495678656;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu94539126 = -852088175;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73961196 = -880268076;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81337892 = -961422305;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57611902 = -755970250;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15253448 = -883831448;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29340708 = 86400304;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu64728711 = -774789726;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83090331 = -729029810;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu90187373 = -844290850;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83509330 = -87630425;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu86103333 = -735278717;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4533987 = -317398446;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96478632 = -998455848;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu37325855 = -996109327;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88755483 = 20192629;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu59595288 = -289388182;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu35120693 = -645628058;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19738246 = -661598388;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu8771551 = -993342805;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu52111814 = -136705655;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu62679494 = -633988350;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81209647 = -379140494;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63072530 = -935401205;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu33296251 = -866077071;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu99909592 = -42912678;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10200700 = -153376344;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18166146 = -654710442;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18567491 = -171593137;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3573522 = -629304618;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96375004 = -216443956;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85249646 = -916153896;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46555743 = 2435913;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu75419535 = -638593777;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu9470616 = -977407435;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69240261 = -517077097;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6318106 = -984344331;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15335572 = -526269325;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu30716521 = 9371734;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu74740639 = -579885252;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93123266 = 38878556;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63520333 = 92351893;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu17286966 = -101958340;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91945739 = -356309695;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14238551 = 80119807;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85394986 = -649702680;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu42560981 = -632877718;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu97892736 = -261310930;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu71592657 = -200734345;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4621901 = -153625822;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54820494 = -809176076;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3167836 = -63421701;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu65471268 = -922929903;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu40281938 = 72809879;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu2746858 = -587526798;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu28335217 = -861690306;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13329480 = -372947681;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10888666 = -944866872;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48041642 = 4654766;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57702309 = -613057572;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu5052748 = -630455105;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu11174563 = -258889254;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46161221 = -503196589;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu79516810 = 274808;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93812368 = -527846894;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu98259683 = -171476529;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu39547591 = -637714631;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29114451 = -678804670;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu87008016 = 78951586;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu68085594 = -379032231;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu82437378 = 4536959;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44259716 = -763118858;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4404172 = -554999793;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44997607 = 18286864;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15648284 = -932221361;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88591480 = -129057548;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu45392529 = -432030011;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu89263908 = 77169201;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48833979 = -915521012;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu47901265 = -116374392;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57348612 = -410034960;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu12307963 = -892065414;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46573488 = -353976097;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13945590 = 82032684;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48753027 = -820128542;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93207169 = -53022256;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19778379 = -993223993;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6273805 = 29626034;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu72672678 = 48933021;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81135398 = -15717130;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu55910782 = -44129416;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu95429439 = 60522540;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu67293929 = -430924091;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73014211 = -377570694;    int frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69687891 = -98564258;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14415782 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu38288528;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu38288528 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85209513;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85209513 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu49053488;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu49053488 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54858672;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54858672 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91014711;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91014711 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu94539126;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu94539126 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73961196;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73961196 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81337892;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81337892 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57611902;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57611902 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15253448;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15253448 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29340708;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29340708 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu64728711;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu64728711 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83090331;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83090331 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu90187373;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu90187373 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83509330;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu83509330 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu86103333;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu86103333 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4533987;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4533987 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96478632;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96478632 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu37325855;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu37325855 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88755483;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88755483 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu59595288;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu59595288 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu35120693;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu35120693 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19738246;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19738246 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu8771551;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu8771551 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu52111814;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu52111814 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu62679494;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu62679494 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81209647;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81209647 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63072530;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63072530 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu33296251;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu33296251 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu99909592;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu99909592 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10200700;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10200700 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18166146;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18166146 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18567491;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu18567491 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3573522;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3573522 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96375004;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu96375004 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85249646;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85249646 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46555743;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46555743 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu75419535;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu75419535 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu9470616;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu9470616 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69240261;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69240261 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6318106;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6318106 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15335572;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15335572 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu30716521;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu30716521 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu74740639;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu74740639 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93123266;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93123266 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63520333;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu63520333 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu17286966;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu17286966 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91945739;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu91945739 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14238551;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14238551 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85394986;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu85394986 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu42560981;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu42560981 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu97892736;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu97892736 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu71592657;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu71592657 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4621901;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4621901 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54820494;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu54820494 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3167836;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu3167836 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu65471268;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu65471268 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu40281938;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu40281938 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu2746858;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu2746858 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu28335217;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu28335217 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13329480;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13329480 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10888666;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu10888666 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48041642;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48041642 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57702309;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57702309 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu5052748;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu5052748 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu11174563;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu11174563 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46161221;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46161221 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu79516810;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu79516810 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93812368;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93812368 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu98259683;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu98259683 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu39547591;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu39547591 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29114451;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu29114451 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu87008016;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu87008016 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu68085594;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu68085594 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu82437378;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu82437378 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44259716;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44259716 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4404172;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu4404172 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44997607;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu44997607 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15648284;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu15648284 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88591480;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu88591480 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu45392529;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu45392529 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu89263908;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu89263908 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48833979;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48833979 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu47901265;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu47901265 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57348612;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu57348612 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu12307963;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu12307963 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46573488;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu46573488 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13945590;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu13945590 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48753027;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu48753027 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93207169;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu93207169 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19778379;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu19778379 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6273805;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu6273805 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu72672678;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu72672678 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81135398;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu81135398 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu55910782;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu55910782 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu95429439;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu95429439 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu67293929;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu67293929 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73014211;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu73014211 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69687891;     frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu69687891 = frbkRTenpeQVvDJLylsRYCXhjVgIBtrFOJPKPIsu14415782;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gSbWDmHxjGKbkubzhHKEEO53680042() {     int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4542091 = -157320459;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21413593 = -83975929;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80702212 = -721322752;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22552064 = -106704747;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE67915407 = -765555894;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE71801116 = -388311764;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE89202564 = -489633647;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26839760 = -516715815;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE5149581 = -969314943;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61867572 = -325844775;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE91405266 = -292251605;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE64090215 = -493187831;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3074844 = 12974414;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21509186 = -727190694;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88261745 = -229411793;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7689072 = -888010295;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE30065514 = -996623959;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE25889700 = -760247739;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57393023 = -364866284;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4650104 = -543987637;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76677886 = -784232464;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57676870 = -622484818;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE68359110 = 47912021;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27659343 = -9622763;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE55656739 = -536853749;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70902779 = -12579389;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84646829 = -393517344;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4380023 = -439030552;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24281528 = -597600253;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81085330 = -740479463;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3372996 = -369579222;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE9567614 = -654200763;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27135187 = -954935602;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42406135 = -163044295;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39170056 = -279640278;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE49606011 = -519473366;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85483215 = -431969801;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70913026 = -963623330;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85952552 = -346055823;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53982757 = -882115208;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82939934 = -222938373;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60962569 = -798837544;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE75152412 = 98305080;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61378462 = -954711455;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66705057 = -692395208;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE13562261 = -444745350;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43943624 = -556130607;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7673425 = -128614593;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE19864393 = -792249041;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43518957 = -376876530;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE14760510 = 75915275;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE86334088 = -597304551;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE47345192 = 26836075;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24499720 = -324289627;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE77002156 = -282226093;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE46865220 = -534835642;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53054482 = -31887950;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53042869 = -611699989;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66895324 = -569850999;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE97012628 = -652976505;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE87154286 = -994794420;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84822542 = 49396904;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2558232 = -919115562;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24064250 = -128835481;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58494577 = -956265554;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81837652 = -638050842;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE36955029 = -538252230;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60668708 = -823981292;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82339129 = -347550416;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE38655734 = -709938427;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22205857 = -356040495;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE59152488 = 66999371;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39937147 = -314191917;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3410266 = -482751076;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21710169 = -221049265;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE15715318 = -985394920;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82524457 = -620789898;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE6980649 = 2623475;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60954286 = -317227556;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42094479 = 7891601;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26959155 = -456448783;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76973404 = -164902752;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84515629 = -646781511;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80762571 = -120723723;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66324821 = -716394739;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE17038908 = -772274671;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE62222422 = -581036839;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2635468 = -530645975;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE65403979 = -880818203;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE92304835 = -744804637;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE96551529 = -387585417;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE32440346 = -820269812;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4017702 = -293772332;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88939924 = -693079318;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66828470 = -887320789;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE98117392 = -172335277;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58404337 = -879721982;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE51088163 = -772859440;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2883886 = -998445901;    int ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84867404 = -157320459;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4542091 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21413593;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21413593 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80702212;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80702212 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22552064;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22552064 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE67915407;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE67915407 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE71801116;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE71801116 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE89202564;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE89202564 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26839760;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26839760 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE5149581;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE5149581 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61867572;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61867572 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE91405266;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE91405266 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE64090215;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE64090215 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3074844;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3074844 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21509186;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21509186 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88261745;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88261745 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7689072;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7689072 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE30065514;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE30065514 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE25889700;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE25889700 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57393023;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57393023 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4650104;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4650104 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76677886;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76677886 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57676870;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE57676870 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE68359110;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE68359110 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27659343;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27659343 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE55656739;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE55656739 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70902779;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70902779 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84646829;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84646829 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4380023;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4380023 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24281528;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24281528 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81085330;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81085330 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3372996;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3372996 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE9567614;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE9567614 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27135187;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE27135187 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42406135;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42406135 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39170056;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39170056 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE49606011;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE49606011 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85483215;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85483215 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70913026;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE70913026 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85952552;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE85952552 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53982757;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53982757 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82939934;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82939934 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60962569;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60962569 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE75152412;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE75152412 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61378462;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE61378462 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66705057;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66705057 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE13562261;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE13562261 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43943624;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43943624 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7673425;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE7673425 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE19864393;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE19864393 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43518957;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE43518957 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE14760510;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE14760510 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE86334088;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE86334088 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE47345192;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE47345192 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24499720;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24499720 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE77002156;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE77002156 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE46865220;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE46865220 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53054482;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53054482 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53042869;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE53042869 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66895324;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66895324 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE97012628;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE97012628 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE87154286;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE87154286 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84822542;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84822542 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2558232;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2558232 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24064250;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE24064250 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58494577;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58494577 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81837652;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE81837652 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE36955029;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE36955029 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60668708;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60668708 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82339129;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82339129 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE38655734;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE38655734 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22205857;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE22205857 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE59152488;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE59152488 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39937147;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE39937147 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3410266;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE3410266 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21710169;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE21710169 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE15715318;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE15715318 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82524457;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE82524457 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE6980649;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE6980649 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60954286;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE60954286 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42094479;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE42094479 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26959155;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE26959155 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76973404;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE76973404 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84515629;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84515629 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80762571;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE80762571 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66324821;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66324821 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE17038908;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE17038908 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE62222422;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE62222422 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2635468;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2635468 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE65403979;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE65403979 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE92304835;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE92304835 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE96551529;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE96551529 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE32440346;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE32440346 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4017702;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4017702 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88939924;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE88939924 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66828470;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE66828470 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE98117392;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE98117392 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58404337;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE58404337 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE51088163;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE51088163 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2883886;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE2883886 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84867404;     ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE84867404 = ruhwYDNKyXwnVRDCPmmVdIIJHexkJMRXWRagoHNE4542091;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kslUWgSNIMFOAtllUiQJqd66225231() {     int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24010261 = -570451671;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74437456 = -629853925;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97539204 = -372951366;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41199212 = 76720990;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68361924 = -291828310;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97393190 = -278796532;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx34034443 = -932939877;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92089993 = -610523781;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65836377 = -597506322;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx39796295 = -331430821;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45628530 = -725241905;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx67584829 = -492490536;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx93446502 = -411382863;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx29925226 = -169476420;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx48788206 = -527495584;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx73904721 = -251202229;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36027627 = -68398640;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49952451 = -511002457;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx57027902 = -742071044;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85261405 = -161524093;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89133958 = -290444789;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72658953 = -34288031;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36532117 = -249662598;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45381012 = -746166755;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66860228 = -831153858;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75670240 = -798374608;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68574960 = -58668276;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx55171697 = -602763831;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66026485 = -611511399;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65792185 = -831918157;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx33177081 = -234905315;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49146924 = -118549782;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38611290 = -410143369;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1162643 = -467647501;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx79100391 = -342343085;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85671948 = -823041975;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53866666 = -958845876;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx12395500 = 59167854;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53265878 = -810470648;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75264493 = -878646304;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24421992 = -732724668;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72821702 = 62266230;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46285654 = -949496718;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44764001 = -303784116;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46733468 = -969518171;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68023387 = -982076771;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx25933504 = -469823930;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx7829255 = -311901907;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60999984 = -806188280;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx84417299 = -137888875;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89196078 = -330449656;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx2782949 = -974657411;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx17170338 = -749272886;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97429747 = -318883264;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx77091272 = -56784728;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx51351308 = -436163641;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx37905340 = -280191328;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx52158193 = -626784612;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74338984 = -92125153;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92691683 = -493453703;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28818230 = -120128256;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx78862746 = -230176047;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26063508 = -999012383;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44193 = -765588165;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx6619215 = 3474493;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96481605 = -506692124;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28973539 = 17652832;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92283860 = -943735362;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50824834 = -827133336;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx63116258 = -704453610;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx20038055 = -292356354;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx23632127 = -27566495;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96686573 = -700531809;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81763409 = -863424740;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60839413 = -428799425;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx16312257 = -252711020;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26373299 = -84791314;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx91768116 = -945878482;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98647543 = -776648585;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98836840 = -849077088;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49736737 = -228550679;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60745705 = -746766369;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx94171713 = -796575551;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81609185 = -373622524;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx76596106 = -401468502;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx30394133 = -260247904;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx31976587 = -369276896;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41181542 = 8739894;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24071370 = -310862774;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx27749084 = -906179444;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx47766609 = -442850648;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1708474 = -232061264;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38056516 = -848706994;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60574194 = -217016946;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46446263 = -658518049;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45559246 = -402548622;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46758194 = 61278612;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46241461 = -83908553;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38144786 = -207258609;    int WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50251862 = -570451671;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24010261 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74437456;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74437456 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97539204;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97539204 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41199212;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41199212 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68361924;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68361924 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97393190;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97393190 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx34034443;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx34034443 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92089993;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92089993 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65836377;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65836377 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx39796295;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx39796295 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45628530;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45628530 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx67584829;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx67584829 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx93446502;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx93446502 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx29925226;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx29925226 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx48788206;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx48788206 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx73904721;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx73904721 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36027627;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36027627 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49952451;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49952451 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx57027902;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx57027902 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85261405;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85261405 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89133958;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89133958 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72658953;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72658953 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36532117;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx36532117 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45381012;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45381012 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66860228;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66860228 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75670240;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75670240 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68574960;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68574960 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx55171697;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx55171697 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66026485;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx66026485 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65792185;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx65792185 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx33177081;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx33177081 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49146924;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49146924 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38611290;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38611290 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1162643;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1162643 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx79100391;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx79100391 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85671948;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx85671948 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53866666;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53866666 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx12395500;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx12395500 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53265878;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx53265878 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75264493;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx75264493 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24421992;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24421992 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72821702;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx72821702 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46285654;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46285654 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44764001;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44764001 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46733468;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46733468 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68023387;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx68023387 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx25933504;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx25933504 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx7829255;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx7829255 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60999984;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60999984 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx84417299;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx84417299 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89196078;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx89196078 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx2782949;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx2782949 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx17170338;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx17170338 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97429747;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx97429747 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx77091272;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx77091272 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx51351308;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx51351308 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx37905340;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx37905340 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx52158193;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx52158193 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74338984;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx74338984 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92691683;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92691683 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28818230;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28818230 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx78862746;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx78862746 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26063508;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26063508 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44193;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx44193 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx6619215;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx6619215 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96481605;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96481605 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28973539;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx28973539 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92283860;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx92283860 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50824834;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50824834 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx63116258;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx63116258 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx20038055;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx20038055 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx23632127;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx23632127 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96686573;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx96686573 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81763409;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81763409 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60839413;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60839413 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx16312257;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx16312257 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26373299;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx26373299 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx91768116;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx91768116 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98647543;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98647543 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98836840;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx98836840 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49736737;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx49736737 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60745705;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60745705 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx94171713;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx94171713 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81609185;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx81609185 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx76596106;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx76596106 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx30394133;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx30394133 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx31976587;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx31976587 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41181542;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx41181542 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24071370;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24071370 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx27749084;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx27749084 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx47766609;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx47766609 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1708474;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx1708474 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38056516;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38056516 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60574194;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx60574194 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46446263;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46446263 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45559246;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx45559246 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46758194;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46758194 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46241461;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx46241461 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38144786;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx38144786 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50251862;     WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx50251862 = WgOSOVRHpoKKgmzdNqNfoBVYysHZfyfRJGWFFDRx24010261;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void sKLmWYpXKqDjbPPaPIVfpp26527889() {     int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14136569 = -629207872;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy57562521 = 95219905;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy93031903 = -509745828;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14697787 = -109450832;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81418659 = -233151752;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78179595 = -171429640;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy28697882 = -570485350;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44968556 = -246971519;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89648065 = -605398960;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44051966 = 98694653;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy21780349 = -133662063;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy2334337 = 27921329;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy31792635 = -723618723;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68344079 = -167637304;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46862578 = 87383473;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98084462 = 48417901;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy79989807 = -329743882;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71308164 = -953851749;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17942294 = -108481480;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy52585653 = -809402403;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy77056360 = 5130118;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy70740535 = -367384666;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy69770535 = -656122519;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53302109 = -94191130;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13745416 = -374664802;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94461205 = -674248343;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90542295 = -918197270;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78342072 = -662653889;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27235483 = -273710447;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13581265 = -706320548;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36640483 = -561571858;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy48513838 = -619374201;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy47580331 = -710368528;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25001287 = -459098659;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14696927 = 7321255;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38902955 = -26071385;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54100235 = -474661780;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36752783 = -906891390;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy63798895 = -517932693;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy19776635 = -783354078;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38121665 = -438585944;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27466165 = -852226983;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6102495 = -324922313;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75425941 = -167867305;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38697885 = 17971873;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88462381 = -365700676;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6356795 = -18306429;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98215714 = -338558160;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88918638 = -142127626;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13697705 = -594885213;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy18561603 = -704831700;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46556055 = -939084244;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy66622793 = -461125881;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50336810 = -442438545;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49471528 = -185385000;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43396034 = -161823206;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87791986 = -248657577;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy39729794 = -315554698;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy952371 = -734786031;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy86957454 = -558903410;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87637299 = -253232370;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50355809 = -907831461;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17733074 = -973261073;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76066800 = -899078412;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7411483 = -339733489;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy73266510 = -514287862;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54754006 = -261710143;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6791349 = -164520064;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53647153 = -74958559;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7959623 = -886545143;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43984228 = -476920320;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43237024 = -422852492;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7509269 = -335919056;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98165658 = -325127403;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14463989 = -270816459;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49590196 = -142642899;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy64638040 = 57537646;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94344593 = -388255215;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14604224 = -12163004;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25283035 = 91035874;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88104411 = -555941914;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy92326581 = -479639110;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89423434 = -420526263;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13537778 = -678825234;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy95019662 = 98511152;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90084428 = -622487615;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81891045 = -58248321;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy97243520 = -167929984;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75529759 = -173713660;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71300892 = -830855540;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy51110968 = -777413809;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14370441 = -59107083;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy35800413 = -72105359;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76841440 = -959029284;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy32139336 = -430121708;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87765856 = -530754483;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy9733092 = -878965910;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy30035695 = -425843902;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68014459 = -828133816;    int rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy65431374 = -629207872;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14136569 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy57562521;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy57562521 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy93031903;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy93031903 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14697787;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14697787 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81418659;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81418659 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78179595;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78179595 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy28697882;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy28697882 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44968556;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44968556 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89648065;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89648065 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44051966;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy44051966 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy21780349;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy21780349 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy2334337;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy2334337 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy31792635;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy31792635 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68344079;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68344079 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46862578;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46862578 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98084462;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98084462 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy79989807;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy79989807 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71308164;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71308164 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17942294;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17942294 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy52585653;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy52585653 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy77056360;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy77056360 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy70740535;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy70740535 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy69770535;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy69770535 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53302109;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53302109 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13745416;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13745416 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94461205;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94461205 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90542295;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90542295 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78342072;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy78342072 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27235483;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27235483 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13581265;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13581265 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36640483;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36640483 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy48513838;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy48513838 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy47580331;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy47580331 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25001287;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25001287 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14696927;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14696927 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38902955;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38902955 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54100235;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54100235 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36752783;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy36752783 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy63798895;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy63798895 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy19776635;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy19776635 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38121665;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38121665 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27466165;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy27466165 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6102495;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6102495 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75425941;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75425941 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38697885;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy38697885 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88462381;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88462381 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6356795;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6356795 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98215714;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98215714 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88918638;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88918638 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13697705;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13697705 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy18561603;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy18561603 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46556055;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy46556055 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy66622793;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy66622793 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50336810;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50336810 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49471528;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49471528 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43396034;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43396034 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87791986;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87791986 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy39729794;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy39729794 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy952371;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy952371 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy86957454;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy86957454 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87637299;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87637299 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50355809;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy50355809 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17733074;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy17733074 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76066800;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76066800 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7411483;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7411483 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy73266510;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy73266510 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54754006;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy54754006 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6791349;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy6791349 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53647153;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy53647153 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7959623;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7959623 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43984228;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43984228 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43237024;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy43237024 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7509269;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy7509269 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98165658;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy98165658 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14463989;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14463989 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49590196;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy49590196 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy64638040;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy64638040 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94344593;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy94344593 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14604224;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14604224 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25283035;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy25283035 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88104411;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy88104411 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy92326581;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy92326581 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89423434;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy89423434 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13537778;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy13537778 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy95019662;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy95019662 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90084428;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy90084428 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81891045;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy81891045 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy97243520;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy97243520 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75529759;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy75529759 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71300892;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy71300892 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy51110968;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy51110968 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14370441;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14370441 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy35800413;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy35800413 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76841440;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy76841440 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy32139336;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy32139336 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87765856;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy87765856 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy9733092;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy9733092 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy30035695;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy30035695 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68014459;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy68014459 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy65431374;     rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy65431374 = rNWhEqZTsUallcQBvEawXTVJozBXKuMDsCTxPpUy14136569;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NaTcLTDIDjtjKNIKwkcAcf22711049() {     int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73732665 = -857964249;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59068371 = -814935480;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM30033291 = -583886750;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM10573546 = -982061710;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92711885 = -133658779;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM75856715 = -29689313;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26056364 = 99797064;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95793840 = -601182895;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3461509 = -38071459;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM27076481 = -942564200;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM47075281 = -535204502;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM37005538 = -67099921;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM2547199 = -629797242;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26717918 = -71795651;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44170384 = -705143048;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM94838717 = -856954990;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15950912 = -257960162;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35976495 = -223187854;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM98384496 = -247601110;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32502763 = -371811056;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM57517479 = -927890706;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39230133 = -259786544;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61962360 = -420417598;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18032348 = -758529367;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM89723420 = -930802392;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM88876112 = -808865814;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3882366 = -267677267;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM43453242 = -184035479;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77019825 = -63303062;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM52054731 = -753303791;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61554801 = -106791186;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM91279098 = 63407802;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96662369 = -690315401;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7525730 = 39017409;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM19634288 = -740888731;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM17492852 = -337727967;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44731913 = -767440414;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35113121 = -851343780;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82816837 = -236639210;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92602289 = 42764974;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96339478 = -907247541;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97545346 = -857168401;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM46981737 = -58367143;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49665447 = -591782043;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39686201 = -528346195;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53255510 = -608644835;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM11845517 = 89837903;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44912108 = -671311389;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28308286 = -426065246;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28865098 = -916137674;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM69047853 = -490939925;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53141208 = -910327499;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42038308 = -701074335;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM23611334 = -702607500;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65193569 = -149319087;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM34502533 = -498177706;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97106011 = -294517883;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12000944 = -825357383;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20850125 = 48740682;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3835774 = -324792966;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM71974349 = -762012046;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82603122 = -716167457;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18774015 = -437879833;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM51406777 = -284767669;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65521679 = -735773014;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM55796182 = -498612304;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM40343169 = -376784520;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95021469 = -568814652;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7083631 = -330906921;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26677532 = -267415082;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM50106805 = 10485424;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM80837790 = -406616383;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53159657 = -986548644;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM5782207 = -190366085;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36163284 = -464563516;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59972133 = 29277695;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92248396 = -101419402;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12296913 = -828635555;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78346147 = -130183173;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36467911 = -222157557;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77030596 = -798703717;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM58970258 = -596365879;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15144956 = -757970234;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM48154728 = -147165389;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83006878 = -162363867;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM8413594 = -196463688;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49240791 = -235517864;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73051036 = -987707901;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42332160 = -811663504;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM85131755 = -142711026;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20386841 = 56789916;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32730970 = -942083032;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM14262997 = -800084462;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78981064 = -911846245;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20627940 = -195222980;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM13736356 = -91080084;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78771331 = -319288569;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95574959 = -773599474;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM84143767 = -856009030;    int uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83890019 = -857964249;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73732665 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59068371;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59068371 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM30033291;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM30033291 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM10573546;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM10573546 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92711885;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92711885 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM75856715;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM75856715 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26056364;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26056364 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95793840;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95793840 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3461509;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3461509 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM27076481;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM27076481 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM47075281;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM47075281 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM37005538;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM37005538 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM2547199;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM2547199 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26717918;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26717918 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44170384;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44170384 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM94838717;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM94838717 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15950912;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15950912 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35976495;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35976495 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM98384496;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM98384496 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32502763;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32502763 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM57517479;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM57517479 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39230133;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39230133 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61962360;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61962360 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18032348;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18032348 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM89723420;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM89723420 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM88876112;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM88876112 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3882366;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3882366 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM43453242;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM43453242 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77019825;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77019825 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM52054731;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM52054731 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61554801;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM61554801 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM91279098;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM91279098 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96662369;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96662369 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7525730;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7525730 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM19634288;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM19634288 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM17492852;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM17492852 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44731913;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44731913 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35113121;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM35113121 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82816837;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82816837 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92602289;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92602289 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96339478;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM96339478 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97545346;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97545346 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM46981737;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM46981737 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49665447;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49665447 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39686201;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM39686201 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53255510;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53255510 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM11845517;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM11845517 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44912108;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM44912108 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28308286;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28308286 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28865098;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM28865098 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM69047853;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM69047853 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53141208;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53141208 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42038308;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42038308 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM23611334;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM23611334 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65193569;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65193569 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM34502533;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM34502533 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97106011;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM97106011 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12000944;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12000944 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20850125;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20850125 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3835774;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM3835774 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM71974349;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM71974349 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82603122;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM82603122 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18774015;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM18774015 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM51406777;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM51406777 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65521679;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM65521679 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM55796182;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM55796182 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM40343169;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM40343169 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95021469;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95021469 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7083631;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM7083631 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26677532;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM26677532 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM50106805;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM50106805 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM80837790;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM80837790 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53159657;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM53159657 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM5782207;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM5782207 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36163284;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36163284 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59972133;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM59972133 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92248396;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM92248396 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12296913;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM12296913 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78346147;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78346147 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36467911;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM36467911 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77030596;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM77030596 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM58970258;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM58970258 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15144956;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM15144956 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM48154728;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM48154728 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83006878;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83006878 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM8413594;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM8413594 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49240791;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM49240791 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73051036;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73051036 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42332160;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM42332160 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM85131755;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM85131755 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20386841;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20386841 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32730970;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM32730970 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM14262997;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM14262997 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78981064;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78981064 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20627940;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM20627940 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM13736356;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM13736356 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78771331;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM78771331 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95574959;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM95574959 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM84143767;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM84143767 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83890019;     uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM83890019 = uHqVurxKFckoLtGsKDuwilWoKGyyDENTdigMmqZM73732665;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void NOGWoycchaACdDfNJLTUqa61433456() {     int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2792080 = -29244945;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh17527322 = -102915205;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh9856580 = -552502748;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13906348 = -161652473;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11081705 = -461704713;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh25229985 = -653008364;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh94657227 = -826629102;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13779896 = -277335224;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90016872 = -809169890;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85509354 = -892014253;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41833930 = -789341296;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85890111 = -513032647;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37563106 = -151576892;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh58890962 = -227104513;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85883732 = -667788000;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh38732031 = -116553;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh99763697 = -772662051;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh66957976 = -916082393;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18782781 = -677412201;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97086496 = -560774504;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10186738 = -599973636;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh56424014 = -221485547;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49985988 = -1505677;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83221836 = -420101988;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23236932 = -726260481;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh75489038 = -10432949;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78816753 = -607907981;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85908728 = -875875590;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh28057961 = -626359559;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh57302454 = -648299258;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41332714 = -357656533;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh62166563 = -662025535;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh71309829 = -551928202;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49018807 = 50018972;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh76270513 = -646286966;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh64269828 = -737777467;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37703067 = -836835158;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh77394192 = -869451994;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh45633303 = -679271614;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh65614350 = -209720835;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86931100 = -26653357;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh68756906 = -146350108;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29206741 = -708961460;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26714414 = -32492775;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh33716467 = -881731778;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2830742 = -422953918;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh70097463 = -626671553;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23302018 = -818922949;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97827316 = -121765000;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49964899 = -688671144;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53914200 = -367329335;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37085665 = -170532925;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18865230 = -261172256;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27503588 = -531309980;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh51246718 = -805486267;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46368065 = -807759398;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh67541333 = -1409529;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26634744 = -32400761;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90669416 = -435391992;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh35592667 = -351271765;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46413231 = 54899617;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh8748499 = -950753513;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85721934 = -650975665;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh32714419 = -60870633;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh44176640 = -434357720;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh79667366 = -27315761;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh14580283 = -961104446;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88544299 = -101595865;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82620449 = -580817548;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21613905 = -930010534;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh1028965 = -163281396;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh22369506 = -903210058;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21324674 = -136810780;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53168431 = -367691366;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10155397 = -434121148;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41429832 = -353623529;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27217274 = -512524088;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23271574 = -969012902;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49505370 = -538370210;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh20406190 = -203306564;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh5391576 = -383761396;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh55514736 = -788985033;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88081412 = -654110590;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78093061 = -937688415;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh3388255 = -180969923;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh4247050 = -87123609;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43301334 = -300853280;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43806241 = 79381778;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97772088 = -144494761;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29902448 = -838527569;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96728494 = -636367938;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11068324 = -704434397;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86724776 = -334060002;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10040637 = -227999850;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh19201119 = -164620452;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78182601 = -75899844;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83034971 = -495374443;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96492322 = -548090828;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82537774 = -598135055;    int ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh54049100 = -29244945;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2792080 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh17527322;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh17527322 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh9856580;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh9856580 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13906348;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13906348 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11081705;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11081705 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh25229985;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh25229985 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh94657227;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh94657227 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13779896;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh13779896 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90016872;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90016872 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85509354;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85509354 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41833930;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41833930 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85890111;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85890111 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37563106;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37563106 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh58890962;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh58890962 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85883732;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85883732 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh38732031;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh38732031 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh99763697;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh99763697 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh66957976;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh66957976 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18782781;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18782781 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97086496;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97086496 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10186738;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10186738 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh56424014;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh56424014 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49985988;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49985988 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83221836;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83221836 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23236932;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23236932 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh75489038;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh75489038 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78816753;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78816753 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85908728;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85908728 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh28057961;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh28057961 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh57302454;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh57302454 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41332714;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41332714 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh62166563;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh62166563 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh71309829;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh71309829 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49018807;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49018807 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh76270513;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh76270513 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh64269828;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh64269828 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37703067;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37703067 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh77394192;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh77394192 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh45633303;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh45633303 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh65614350;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh65614350 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86931100;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86931100 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh68756906;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh68756906 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29206741;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29206741 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26714414;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26714414 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh33716467;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh33716467 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2830742;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2830742 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh70097463;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh70097463 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23302018;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23302018 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97827316;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97827316 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49964899;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49964899 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53914200;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53914200 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37085665;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh37085665 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18865230;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh18865230 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27503588;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27503588 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh51246718;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh51246718 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46368065;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46368065 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh67541333;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh67541333 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26634744;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh26634744 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90669416;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh90669416 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh35592667;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh35592667 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46413231;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh46413231 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh8748499;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh8748499 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85721934;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh85721934 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh32714419;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh32714419 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh44176640;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh44176640 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh79667366;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh79667366 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh14580283;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh14580283 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88544299;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88544299 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82620449;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82620449 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21613905;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21613905 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh1028965;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh1028965 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh22369506;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh22369506 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21324674;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh21324674 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53168431;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh53168431 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10155397;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10155397 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41429832;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh41429832 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27217274;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh27217274 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23271574;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh23271574 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49505370;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh49505370 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh20406190;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh20406190 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh5391576;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh5391576 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh55514736;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh55514736 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88081412;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh88081412 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78093061;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78093061 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh3388255;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh3388255 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh4247050;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh4247050 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43301334;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43301334 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43806241;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh43806241 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97772088;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh97772088 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29902448;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh29902448 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96728494;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96728494 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11068324;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh11068324 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86724776;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh86724776 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10040637;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh10040637 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh19201119;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh19201119 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78182601;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh78182601 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83034971;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh83034971 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96492322;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh96492322 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82537774;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh82537774 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh54049100;     ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh54049100 = ujlwquCajiuJhkXsouvVQKBmahYoBdbuxmUWkrIh2792080;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DXvqsxKoluaZuXiJjxXpNw34281302() {     int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12386559 = -501132357;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53676251 = 76280629;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22186271 = -340925824;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6052072 = -164398558;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24584957 = 70699429;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31608463 = -436126240;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34152544 = -907480804;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31908692 = -7590929;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74515357 = -445253906;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67693747 = -467474824;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ72209012 = -630751753;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24134233 = 8076513;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66280898 = -888170029;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5725856 = -767551123;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ44484566 = -350992734;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ29127422 = -163688357;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ49687991 = -105781974;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12376441 = -9686403;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ79332051 = -421027397;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ45022046 = -826189269;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10565213 = -910611054;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ69487679 = 33614604;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51397413 = -705540216;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8864603 = -504670355;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ81325609 = -564071535;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ99047464 = -672101902;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84712219 = -32587906;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ59870779 = 501073;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31011916 = -302469753;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ89798388 = -614140343;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74600202 = -549649169;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ1112788 = -627198973;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ91754973 = -307361128;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31613958 = -246035392;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51797383 = -359325433;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53566772 = -244375485;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6320087 = -879527137;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ43233950 = -812720053;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23479645 = -851148485;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31408228 = -110959705;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42112830 = -242300928;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ35260502 = -199739547;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ60156823 = -32188853;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ40761894 = -345648625;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5709295 = -171364697;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77730862 = -343909245;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32510633 = -88847376;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13844307 = 71133484;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66881561 = -571643585;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ20143648 = -906679827;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ57715292 = -48076311;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97307632 = -512312617;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38142831 = -749134211;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53340679 = -649458898;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23716090 = -708645174;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42898879 = -434746962;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2278839 = -218179156;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13321669 = -836255469;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24726463 = -600327024;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ25537492 = -257198669;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ46896244 = -303538334;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74281765 = -807981878;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ896777 = -705121176;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84716969 = -831113564;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ93093545 = -917825655;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ71096225 = 96447219;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32379259 = -684562359;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34666940 = -542134638;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53928472 = -308225691;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ90917794 = -6617249;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22807336 = -284161221;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6454042 = -293061921;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ88896796 = -158537919;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47923824 = -210067693;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2909216 = -483888342;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75304710 = -610871508;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ9330857 = -934196543;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10635519 = -259891592;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3155308 = -233305659;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3594747 = -120162290;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66536831 = -483254527;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ70867913 = -3721391;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92989217 = -427855342;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10868268 = -395789927;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32083096 = -466064033;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77292570 = 62663447;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ62969957 = -878064762;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38414295 = -657902230;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ7897869 = -537390219;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8898505 = -924578471;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51287934 = 73803670;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92998417 = 56728332;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ18507488 = -112393030;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97942152 = -493949816;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84511983 = -807421371;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67831065 = -434319050;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34363726 = -494618371;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75439854 = -201075290;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47668348 = -427822970;    int iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34613070 = -501132357;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12386559 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53676251;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53676251 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22186271;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22186271 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6052072;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6052072 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24584957;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24584957 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31608463;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31608463 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34152544;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34152544 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31908692;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31908692 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74515357;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74515357 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67693747;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67693747 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ72209012;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ72209012 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24134233;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24134233 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66280898;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66280898 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5725856;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5725856 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ44484566;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ44484566 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ29127422;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ29127422 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ49687991;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ49687991 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12376441;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12376441 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ79332051;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ79332051 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ45022046;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ45022046 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10565213;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10565213 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ69487679;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ69487679 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51397413;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51397413 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8864603;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8864603 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ81325609;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ81325609 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ99047464;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ99047464 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84712219;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84712219 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ59870779;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ59870779 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31011916;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31011916 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ89798388;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ89798388 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74600202;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74600202 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ1112788;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ1112788 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ91754973;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ91754973 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31613958;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31613958 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51797383;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51797383 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53566772;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53566772 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6320087;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6320087 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ43233950;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ43233950 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23479645;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23479645 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31408228;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ31408228 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42112830;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42112830 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ35260502;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ35260502 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ60156823;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ60156823 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ40761894;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ40761894 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5709295;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ5709295 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77730862;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77730862 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32510633;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32510633 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13844307;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13844307 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66881561;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66881561 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ20143648;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ20143648 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ57715292;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ57715292 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97307632;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97307632 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38142831;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38142831 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53340679;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53340679 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23716090;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ23716090 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42898879;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ42898879 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2278839;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2278839 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13321669;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ13321669 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24726463;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ24726463 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ25537492;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ25537492 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ46896244;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ46896244 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74281765;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ74281765 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ896777;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ896777 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84716969;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84716969 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ93093545;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ93093545 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ71096225;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ71096225 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32379259;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32379259 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34666940;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34666940 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53928472;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ53928472 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ90917794;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ90917794 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22807336;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ22807336 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6454042;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ6454042 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ88896796;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ88896796 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47923824;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47923824 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2909216;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ2909216 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75304710;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75304710 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ9330857;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ9330857 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10635519;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10635519 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3155308;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3155308 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3594747;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ3594747 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66536831;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ66536831 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ70867913;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ70867913 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92989217;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92989217 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10868268;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ10868268 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32083096;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ32083096 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77292570;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ77292570 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ62969957;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ62969957 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38414295;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ38414295 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ7897869;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ7897869 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8898505;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ8898505 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51287934;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ51287934 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92998417;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ92998417 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ18507488;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ18507488 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97942152;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ97942152 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84511983;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ84511983 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67831065;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ67831065 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34363726;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34363726 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75439854;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ75439854 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47668348;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ47668348 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34613070;     iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ34613070 = iGrsYAGoxfYgDrUNoniHDSeLyLVlGBgjUHppyAZJ12386559;}
// Junk Finished
