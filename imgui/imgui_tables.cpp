// dear imgui, v1.83 WIP
// (tables and columns code)

/*

Index of this file:

// [SECTION] Commentary
// [SECTION] Header mess
// [SECTION] Tables: Main code
// [SECTION] Tables: Simple accessors
// [SECTION] Tables: Row changes
// [SECTION] Tables: Columns changes
// [SECTION] Tables: Columns width management
// [SECTION] Tables: Drawing
// [SECTION] Tables: Sorting
// [SECTION] Tables: Headers
// [SECTION] Tables: Context Menu
// [SECTION] Tables: Settings (.ini data)
// [SECTION] Tables: Garbage Collection
// [SECTION] Tables: Debugging
// [SECTION] Columns, BeginColumns, EndColumns, etc.

*/

// Navigating this file:
// - In Visual Studio IDE: CTRL+comma ("Edit.NavigateTo") can follow symbols in comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
// - With Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols in comments.

//-----------------------------------------------------------------------------
// [SECTION] Commentary
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Typical tables call flow: (root level is generally public API):
//-----------------------------------------------------------------------------
// - BeginTable()                               user begin into a table
//    | BeginChild()                            - (if ScrollX/ScrollY is set)
//    | TableBeginInitMemory()                  - first time table is used
//    | TableResetSettings()                    - on settings reset
//    | TableLoadSettings()                     - on settings load
//    | TableBeginApplyRequests()               - apply queued resizing/reordering/hiding requests
//    | - TableSetColumnWidth()                 - apply resizing width (for mouse resize, often requested by previous frame)
//    |    - TableUpdateColumnsWeightFromWidth()- recompute columns weights (of stretch columns) from their respective width
// - TableSetupColumn()                         user submit columns details (optional)
// - TableSetupScrollFreeze()                   user submit scroll freeze information (optional)
//-----------------------------------------------------------------------------
// - TableUpdateLayout() [Internal]             followup to BeginTable(): setup everything: widths, columns positions, clipping rectangles. Automatically called by the FIRST call to TableNextRow() or TableHeadersRow().
//    | TableSetupDrawChannels()                - setup ImDrawList channels
//    | TableUpdateBorders()                    - detect hovering columns for resize, ahead of contents submission
//    | TableDrawContextMenu()                  - draw right-click context menu
//-----------------------------------------------------------------------------
// - TableHeadersRow() or TableHeader()         user submit a headers row (optional)
//    | TableSortSpecsClickColumn()             - when left-clicked: alter sort order and sort direction
//    | TableOpenContextMenu()                  - when right-clicked: trigger opening of the default context menu
// - TableGetSortSpecs()                        user queries updated sort specs (optional, generally after submitting headers)
// - TableNextRow()                             user begin into a new row (also automatically called by TableHeadersRow())
//    | TableEndRow()                           - finish existing row
//    | TableBeginRow()                         - add a new row
// - TableSetColumnIndex() / TableNextColumn()  user begin into a cell
//    | TableEndCell()                          - close existing column/cell
//    | TableBeginCell()                        - enter into current column/cell
// - [...]                                      user emit contents
//-----------------------------------------------------------------------------
// - EndTable()                                 user ends the table
//    | TableDrawBorders()                      - draw outer borders, inner vertical borders
//    | TableMergeDrawChannels()                - merge draw channels if clipping isn't required
//    | EndChild()                              - (if ScrollX/ScrollY is set)
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// TABLE SIZING
//-----------------------------------------------------------------------------
// (Read carefully because this is subtle but it does make sense!)
//-----------------------------------------------------------------------------
// About 'outer_size':
// Its meaning needs to differ slightly depending on if we are using ScrollX/ScrollY flags.
// Default value is ImVec2(0.0f, 0.0f).
//   X
//   - outer_size.x <= 0.0f  ->  Right-align from window/work-rect right-most edge. With -FLT_MIN or 0.0f will align exactly on right-most edge.
//   - outer_size.x  > 0.0f  ->  Set Fixed width.
//   Y with ScrollX/ScrollY disabled: we output table directly in current window
//   - outer_size.y  < 0.0f  ->  Bottom-align (but will auto extend, unless _NoHostExtendY is set). Not meaningful is parent window can vertically scroll.
//   - outer_size.y  = 0.0f  ->  No minimum height (but will auto extend, unless _NoHostExtendY is set)
//   - outer_size.y  > 0.0f  ->  Set Minimum height (but will auto extend, unless _NoHostExtenY is set)
//   Y with ScrollX/ScrollY enabled: using a child window for scrolling
//   - outer_size.y  < 0.0f  ->  Bottom-align. Not meaningful is parent window can vertically scroll.
//   - outer_size.y  = 0.0f  ->  Bottom-align, consistent with BeginChild(). Not recommended unless table is last item in parent window.
//   - outer_size.y  > 0.0f  ->  Set Exact height. Recommended when using Scrolling on any axis.
//-----------------------------------------------------------------------------
// Outer size is also affected by the NoHostExtendX/NoHostExtendY flags.
// Important to that note how the two flags have slightly different behaviors!
//   - ImGuiTableFlags_NoHostExtendX -> Make outer width auto-fit to columns (overriding outer_size.x value). Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
//   - ImGuiTableFlags_NoHostExtendY -> Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY is disabled. Data below the limit will be clipped and not visible.
// In theory ImGuiTableFlags_NoHostExtendY could be the default and any non-scrolling tables with outer_size.y != 0.0f would use exact height.
// This would be consistent but perhaps less useful and more confusing (as vertically clipped items are not easily noticeable)
//-----------------------------------------------------------------------------
// About 'inner_width':
//   With ScrollX disabled:
//   - inner_width          ->  *ignored*
//   With ScrollX enabled:
//   - inner_width  < 0.0f  ->  *illegal* fit in known width (right align from outer_size.x) <-- weird
//   - inner_width  = 0.0f  ->  fit in outer_width: Fixed size columns will take space they need (if avail, otherwise shrink down), Stretch columns becomes Fixed columns.
//   - inner_width  > 0.0f  ->  override scrolling width, generally to be larger than outer_size.x. Fixed column take space they need (if avail, otherwise shrink down), Stretch columns share remaining space!
//-----------------------------------------------------------------------------
// Details:
// - If you want to use Stretch columns with ScrollX, you generally need to specify 'inner_width' otherwise the concept
//   of "available space" doesn't make sense.
// - Even if not really useful, we allow 'inner_width < outer_size.x' for consistency and to facilitate understanding
//   of what the value does.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// COLUMNS SIZING POLICIES
//-----------------------------------------------------------------------------
// About overriding column sizing policy and width/weight with TableSetupColumn():
// We use a default parameter of 'init_width_or_weight == -1'.
//   - with ImGuiTableColumnFlags_WidthFixed,    init_width  <= 0 (default)  --> width is automatic
//   - with ImGuiTableColumnFlags_WidthFixed,    init_width  >  0 (explicit) --> width is custom
//   - with ImGuiTableColumnFlags_WidthStretch,  init_weight <= 0 (default)  --> weight is 1.0f
//   - with ImGuiTableColumnFlags_WidthStretch,  init_weight >  0 (explicit) --> weight is custom
// Widths are specified _without_ CellPadding. If you specify a width of 100.0f, the column will be cover (100.0f + Padding * 2.0f)
// and you can fit a 100.0f wide item in it without clipping and with full padding.
//-----------------------------------------------------------------------------
// About default sizing policy (if you don't specify a ImGuiTableColumnFlags_WidthXXXX flag)
//   - with Table policy ImGuiTableFlags_SizingFixedFit      --> default Column policy is ImGuiTableColumnFlags_WidthFixed, default Width is equal to contents width
//   - with Table policy ImGuiTableFlags_SizingFixedSame     --> default Column policy is ImGuiTableColumnFlags_WidthFixed, default Width is max of all contents width
//   - with Table policy ImGuiTableFlags_SizingStretchSame   --> default Column policy is ImGuiTableColumnFlags_WidthStretch, default Weight is 1.0f
//   - with Table policy ImGuiTableFlags_SizingStretchWeight --> default Column policy is ImGuiTableColumnFlags_WidthStretch, default Weight is proportional to contents
// Default Width and default Weight can be overridden when calling TableSetupColumn().
//-----------------------------------------------------------------------------
// About mixing Fixed/Auto and Stretch columns together:
//   - the typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns.
//   - using mixed policies with ScrollX does not make much sense, as using Stretch columns with ScrollX does not make much sense in the first place!
//     that is, unless 'inner_width' is passed to BeginTable() to explicitly provide a total width to layout columns in.
//   - when using ImGuiTableFlags_SizingFixedSame with mixed columns, only the Fixed/Auto columns will match their widths to the width of the maximum contents.
//   - when using ImGuiTableFlags_SizingStretchSame with mixed columns, only the Stretch columns will match their weight/widths.
//-----------------------------------------------------------------------------
// About using column width:
// If a column is manual resizable or has a width specified with TableSetupColumn():
//   - you may use GetContentRegionAvail().x to query the width available in a given column.
//   - right-side alignment features such as SetNextItemWidth(-x) or PushItemWidth(-x) will rely on this width.
// If the column is not resizable and has no width specified with TableSetupColumn():
//   - its width will be automatic and be set to the max of items submitted.
//   - therefore you generally cannot have ALL items of the columns use e.g. SetNextItemWidth(-FLT_MIN).
//   - but if the column has one or more items of known/fixed size, this will become the reference width used by SetNextItemWidth(-FLT_MIN).
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// TABLES CLIPPING/CULLING
//-----------------------------------------------------------------------------
// About clipping/culling of Rows in Tables:
// - For large numbers of rows, it is recommended you use ImGuiListClipper to only submit visible rows.
//   ImGuiListClipper is reliant on the fact that rows are of equal height.
//   See 'Demo->Tables->Vertical Scrolling' or 'Demo->Tables->Advanced' for a demo of using the clipper.
// - Note that auto-resizing columns don't play well with using the clipper.
//   By default a table with _ScrollX but without _Resizable will have column auto-resize.
//   So, if you want to use the clipper, make sure to either enable _Resizable, either setup columns width explicitly with _WidthFixed.
//-----------------------------------------------------------------------------
// About clipping/culling of Columns in Tables:
// - Both TableSetColumnIndex() and TableNextColumn() return true when the column is visible or performing
//   width measurements. Otherwise, you may skip submitting the contents of a cell/column, BUT ONLY if you know
//   it is not going to contribute to row height.
//   In many situations, you may skip submitting contents for every column but one (e.g. the first one).
// - Case A: column is not hidden by user, and at least partially in sight (most common case).
// - Case B: column is clipped / out of sight (because of scrolling or parent ClipRect): TableNextColumn() return false as a hint but we still allow layout output.
// - Case C: column is hidden explicitly by the user (e.g. via the context menu, or _DefaultHide column flag, etc.).
//
//                        [A]         [B]          [C]
//  TableNextColumn():    true        false        false       -> [userland] when TableNextColumn() / TableSetColumnIndex() return false, user can skip submitting items but only if the column doesn't contribute to row height.
//          SkipItems:    false       false        true        -> [internal] when SkipItems is true, most widgets will early out if submitted, resulting is no layout output.
//           ClipRect:    normal      zero-width   zero-width  -> [internal] when ClipRect is zero, ItemAdd() will return false and most widgets will early out mid-way.
//  ImDrawList output:    normal      dummy        dummy       -> [internal] when using the dummy channel, ImDrawList submissions (if any) will be wasted (because cliprect is zero-width anyway).
//
// - We need to distinguish those cases because non-hidden columns that are clipped outside of scrolling bounds should still contribute their height to the row.
//   However, in the majority of cases, the contribution to row height is the same for all columns, or the tallest cells are known by the programmer.
//-----------------------------------------------------------------------------
// About clipping/culling of whole Tables:
// - Scrolling tables with a known outer size can be clipped earlier as BeginTable() will return false.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// [SECTION] Header mess
//-----------------------------------------------------------------------------

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DISABLE

#ifndef IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include "imgui_internal.h"

// System includes
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127)     // condition expression is constant
#pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#if defined(_MSC_VER) && _MSC_VER >= 1922 // MSVC 2019 16.2 or later
#pragma warning (disable: 5054)     // operator '|': deprecated between enumerations of different types
#endif
#pragma warning (disable: 26451)    // [Static Analyzer] Arithmetic overflow : Using operator 'xxx' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator 'xxx' to avoid overflow(io.2).
#pragma warning (disable: 26812)    // [Static Analyzer] The enum type 'xxx' is unscoped. Prefer 'enum class' over 'enum' (Enum.3).
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#if __has_warning("-Wunknown-warning-option")
#pragma clang diagnostic ignored "-Wunknown-warning-option"         // warning: unknown warning group 'xxx'                      // not all warnings are known by all Clang versions and they tend to be rename-happy.. so ignoring warnings triggers new warnings on some configuration. Great!
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"                // warning: unknown warning group 'xxx'
#pragma clang diagnostic ignored "-Wold-style-cast"                 // warning: use of old-style cast                            // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"                    // warning: comparing floating point with == or != is unsafe // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"              // warning: format string is not a string literal            // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wsign-conversion"                // warning: implicit conversion changes signedness
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0
#pragma clang diagnostic ignored "-Wdouble-promotion"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#pragma clang diagnostic ignored "-Wenum-enum-conversion"           // warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_')
#pragma clang diagnostic ignored "-Wdeprecated-enum-enum-conversion"// warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_') is deprecated
#pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"  // warning: implicit conversion from 'xxx' to 'float' may lose precision
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                          // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wformat-nonliteral"                // warning: format not a string literal, format string not checked
#pragma GCC diagnostic ignored "-Wclass-memaccess"                  // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

//-----------------------------------------------------------------------------
// [SECTION] Tables: Main code
//-----------------------------------------------------------------------------
// - TableFixFlags() [Internal]
// - TableFindByID() [Internal]
// - BeginTable()
// - BeginTableEx() [Internal]
// - TableBeginInitMemory() [Internal]
// - TableBeginApplyRequests() [Internal]
// - TableSetupColumnFlags() [Internal]
// - TableUpdateLayout() [Internal]
// - TableUpdateBorders() [Internal]
// - EndTable()
// - TableSetupColumn()
// - TableSetupScrollFreeze()
//-----------------------------------------------------------------------------

// Configuration
static const int TABLE_DRAW_CHANNEL_BG0 = 0;
static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;
static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     // When using ImGuiTableFlags_NoClip (this becomes the last visible channel)
static const float TABLE_BORDER_SIZE                     = 1.0f;    // FIXME-TABLE: Currently hard-coded because of clipping assumptions with outer borders rendering.
static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    // Extend outside inner borders.
static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   // Delay/timer before making the hover feedback (color+cursor) visible because tables/columns tends to be more cramped.

// Helper
inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)
{
    // Adjust flags: set default sizing policy
    if ((flags & ImGuiTableFlags_SizingMask_) == 0)
        flags |= ((flags & ImGuiTableFlags_ScrollX) || (outer_window->Flags & ImGuiWindowFlags_AlwaysAutoResize)) ? ImGuiTableFlags_SizingFixedFit : ImGuiTableFlags_SizingStretchSame;

    // Adjust flags: enable NoKeepColumnsVisible when using ImGuiTableFlags_SizingFixedSame
    if ((flags & ImGuiTableFlags_SizingMask_) == ImGuiTableFlags_SizingFixedSame)
        flags |= ImGuiTableFlags_NoKeepColumnsVisible;

    // Adjust flags: enforce borders when resizable
    if (flags & ImGuiTableFlags_Resizable)
        flags |= ImGuiTableFlags_BordersInnerV;

    // Adjust flags: disable NoHostExtendX/NoHostExtendY if we have any scrolling going on
    if (flags & (ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY))
        flags &= ~(ImGuiTableFlags_NoHostExtendX | ImGuiTableFlags_NoHostExtendY);

    // Adjust flags: NoBordersInBodyUntilResize takes priority over NoBordersInBody
    if (flags & ImGuiTableFlags_NoBordersInBodyUntilResize)
        flags &= ~ImGuiTableFlags_NoBordersInBody;

    // Adjust flags: disable saved settings if there's nothing to save
    if ((flags & (ImGuiTableFlags_Resizable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Sortable)) == 0)
        flags |= ImGuiTableFlags_NoSavedSettings;

    // Inherit _NoSavedSettings from top-level window (child windows always have _NoSavedSettings set)
    if (outer_window->RootWindow->Flags & ImGuiWindowFlags_NoSavedSettings)
        flags |= ImGuiTableFlags_NoSavedSettings;

    return flags;
}

ImGuiTable* ImGui::TableFindByID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    return g.Tables.GetByKey(id);
}

// Read about "TABLE SIZING" at the top of this file.
bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width)
{
    ImGuiID id = GetID(str_id);
    return BeginTableEx(str_id, id, columns_count, flags, outer_size, inner_width);
}

bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* outer_window = GetCurrentWindow();
    if (outer_window->SkipItems) // Consistent with other tables + beneficial side effect that assert on miscalling EndTable() will be more visible.
        return false;

    // Sanity checks
    IM_ASSERT(columns_count > 0 && columns_count <= IMGUI_TABLE_MAX_COLUMNS && "Only 1..64 columns allowed!");
    if (flags & ImGuiTableFlags_ScrollX)
        IM_ASSERT(inner_width >= 0.0f);

    // If an outer size is specified ahead we will be able to early out when not visible. Exact clipping rules may evolve.
    const bool use_child_window = (flags & (ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY)) != 0;
    const ImVec2 avail_size = GetContentRegionAvail();
    ImVec2 actual_outer_size = CalcItemSize(outer_size, ImMax(avail_size.x, 1.0f), use_child_window ? ImMax(avail_size.y, 1.0f) : 0.0f);
    ImRect outer_rect(outer_window->DC.CursorPos, outer_window->DC.CursorPos + actual_outer_size);
    if (use_child_window && IsClippedEx(outer_rect, 0, false))
    {
        ItemSize(outer_rect);
        return false;
    }

    // Acquire storage for the table
    ImGuiTable* table = g.Tables.GetOrAddByKey(id);
    const int instance_no = (table->LastFrameActive != g.FrameCount) ? 0 : table->InstanceCurrent + 1;
    const ImGuiID instance_id = id + instance_no;
    const ImGuiTableFlags table_last_flags = table->Flags;
    if (instance_no > 0)
        IM_ASSERT(table->ColumnsCount == columns_count && "BeginTable(): Cannot change columns count mid-frame while preserving same ID");

    // Fix flags
    table->IsDefaultSizingPolicy = (flags & ImGuiTableFlags_SizingMask_) == 0;
    flags = TableFixFlags(flags, outer_window);

    // Initialize
    table->ID = id;
    table->Flags = flags;
    table->InstanceCurrent = (ImS16)instance_no;
    table->LastFrameActive = g.FrameCount;
    table->OuterWindow = table->InnerWindow = outer_window;
    table->ColumnsCount = columns_count;
    table->IsLayoutLocked = false;
    table->InnerWidth = inner_width;
    table->UserOuterSize = outer_size;

    // When not using a child window, WorkRect.Max will grow as we append contents.
    if (use_child_window)
    {
        // Ensure no vertical scrollbar appears if we only want horizontal one, to make flag consistent
        // (we have no other way to disable vertical scrollbar of a window while keeping the horizontal one showing)
        ImVec2 override_content_size(FLT_MAX, FLT_MAX);
        if ((flags & ImGuiTableFlags_ScrollX) && !(flags & ImGuiTableFlags_ScrollY))
            override_content_size.y = FLT_MIN;

        // Ensure specified width (when not specified, Stretched columns will act as if the width == OuterWidth and
        // never lead to any scrolling). We don't handle inner_width < 0.0f, we could potentially use it to right-align
        // based on the right side of the child window work rect, which would require knowing ahead if we are going to
        // have decoration taking horizontal spaces (typically a vertical scrollbar).
        if ((flags & ImGuiTableFlags_ScrollX) && inner_width > 0.0f)
            override_content_size.x = inner_width;

        if (override_content_size.x != FLT_MAX || override_content_size.y != FLT_MAX)
            SetNextWindowContentSize(ImVec2(override_content_size.x != FLT_MAX ? override_content_size.x : 0.0f, override_content_size.y != FLT_MAX ? override_content_size.y : 0.0f));

        // Reset scroll if we are reactivating it
        if ((table_last_flags & (ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY)) == 0)
            SetNextWindowScroll(ImVec2(0.0f, 0.0f));

        // Create scrolling region (without border and zero window padding)
        ImGuiWindowFlags child_flags = (flags & ImGuiTableFlags_ScrollX) ? ImGuiWindowFlags_HorizontalScrollbar : ImGuiWindowFlags_None;
        BeginChildEx(name, instance_id, outer_rect.GetSize(), false, child_flags);
        table->InnerWindow = g.CurrentWindow;
        table->WorkRect = table->InnerWindow->WorkRect;
        table->OuterRect = table->InnerWindow->Rect();
        table->InnerRect = table->InnerWindow->InnerRect;
        IM_ASSERT(table->InnerWindow->WindowPadding.x == 0.0f && table->InnerWindow->WindowPadding.y == 0.0f && table->InnerWindow->WindowBorderSize == 0.0f);
    }
    else
    {
        // For non-scrolling tables, WorkRect == OuterRect == InnerRect.
        // But at this point we do NOT have a correct value for .Max.y (unless a height has been explicitly passed in). It will only be updated in EndTable().
        table->WorkRect = table->OuterRect = table->InnerRect = outer_rect;
    }

    // Push a standardized ID for both child-using and not-child-using tables
    PushOverrideID(instance_id);

    // Backup a copy of host window members we will modify
    ImGuiWindow* inner_window = table->InnerWindow;
    table->HostIndentX = inner_window->DC.Indent.x;
    table->HostClipRect = inner_window->ClipRect;
    table->HostSkipItems = inner_window->SkipItems;
    table->HostBackupWorkRect = inner_window->WorkRect;
    table->HostBackupParentWorkRect = inner_window->ParentWorkRect;
    table->HostBackupColumnsOffset = outer_window->DC.ColumnsOffset;
    table->HostBackupPrevLineSize = inner_window->DC.PrevLineSize;
    table->HostBackupCurrLineSize = inner_window->DC.CurrLineSize;
    table->HostBackupCursorMaxPos = inner_window->DC.CursorMaxPos;
    table->HostBackupItemWidth = outer_window->DC.ItemWidth;
    table->HostBackupItemWidthStackSize = outer_window->DC.ItemWidthStack.Size;
    inner_window->DC.PrevLineSize = inner_window->DC.CurrLineSize = ImVec2(0.0f, 0.0f);

    // Padding and Spacing
    // - None               ........Content..... Pad .....Content........
    // - PadOuter           | Pad ..Content..... Pad .....Content.. Pad |
    // - PadInner           ........Content.. Pad | Pad ..Content........
    // - PadOuter+PadInner  | Pad ..Content.. Pad | Pad ..Content.. Pad |
    const bool pad_outer_x = (flags & ImGuiTableFlags_NoPadOuterX) ? false : (flags & ImGuiTableFlags_PadOuterX) ? true : (flags & ImGuiTableFlags_BordersOuterV) != 0;
    const bool pad_inner_x = (flags & ImGuiTableFlags_NoPadInnerX) ? false : true;
    const float inner_spacing_for_border = (flags & ImGuiTableFlags_BordersInnerV) ? TABLE_BORDER_SIZE : 0.0f;
    const float inner_spacing_explicit = (pad_inner_x && (flags & ImGuiTableFlags_BordersInnerV) == 0) ? g.Style.CellPadding.x : 0.0f;
    const float inner_padding_explicit = (pad_inner_x && (flags & ImGuiTableFlags_BordersInnerV) != 0) ? g.Style.CellPadding.x : 0.0f;
    table->CellSpacingX1 = inner_spacing_explicit + inner_spacing_for_border;
    table->CellSpacingX2 = inner_spacing_explicit;
    table->CellPaddingX = inner_padding_explicit;
    table->CellPaddingY = g.Style.CellPadding.y;

    const float outer_padding_for_border = (flags & ImGuiTableFlags_BordersOuterV) ? TABLE_BORDER_SIZE : 0.0f;
    const float outer_padding_explicit = pad_outer_x ? g.Style.CellPadding.x : 0.0f;
    table->OuterPaddingX = (outer_padding_for_border + outer_padding_explicit) - table->CellPaddingX;

    table->CurrentColumn = -1;
    table->CurrentRow = -1;
    table->RowBgColorCounter = 0;
    table->LastRowFlags = ImGuiTableRowFlags_None;
    table->InnerClipRect = (inner_window == outer_window) ? table->WorkRect : inner_window->ClipRect;
    table->InnerClipRect.ClipWith(table->WorkRect);     // We need this to honor inner_width
    table->InnerClipRect.ClipWithFull(table->HostClipRect);
    table->InnerClipRect.Max.y = (flags & ImGuiTableFlags_NoHostExtendY) ? ImMin(table->InnerClipRect.Max.y, inner_window->WorkRect.Max.y) : inner_window->ClipRect.Max.y;

    table->RowPosY1 = table->RowPosY2 = table->WorkRect.Min.y; // This is needed somehow
    table->RowTextBaseline = 0.0f; // This will be cleared again by TableBeginRow()
    table->FreezeRowsRequest = table->FreezeRowsCount = 0; // This will be setup by TableSetupScrollFreeze(), if any
    table->FreezeColumnsRequest = table->FreezeColumnsCount = 0;
    table->IsUnfrozenRows = true;
    table->DeclColumnsCount = 0;

    // Using opaque colors facilitate overlapping elements of the grid
    table->BorderColorStrong = GetColorU32(ImGuiCol_TableBorderStrong);
    table->BorderColorLight = GetColorU32(ImGuiCol_TableBorderLight);

    // Make table current
    const int table_idx = g.Tables.GetIndex(table);
    g.CurrentTableStack.push_back(ImGuiPtrOrIndex(table_idx));
    g.CurrentTable = table;
    outer_window->DC.CurrentTableIdx = table_idx;
    if (inner_window != outer_window) // So EndChild() within the inner window can restore the table properly.
        inner_window->DC.CurrentTableIdx = table_idx;

    if ((table_last_flags & ImGuiTableFlags_Reorderable) && (flags & ImGuiTableFlags_Reorderable) == 0)
        table->IsResetDisplayOrderRequest = true;

    // Mark as used
    if (table_idx >= g.TablesLastTimeActive.Size)
        g.TablesLastTimeActive.resize(table_idx + 1, -1.0f);
    g.TablesLastTimeActive[table_idx] = (float)g.Time;
    table->MemoryCompacted = false;

    // Setup memory buffer (clear data if columns count changed)
    ImGuiTableColumn* old_columns_to_preserve = NULL;
    void* old_columns_raw_data = NULL;
    const int old_columns_count = table->Columns.size();
    if (old_columns_count != 0 && old_columns_count != columns_count)
    {
        // Attempt to preserve width on column count change (#4046)
        old_columns_to_preserve = table->Columns.Data;
        old_columns_raw_data = table->RawData;
        table->RawData = NULL;
    }
    if (table->RawData == NULL)
    {
        TableBeginInitMemory(table, columns_count);
        table->IsInitializing = table->IsSettingsRequestLoad = true;
    }
    if (table->IsResetAllRequest)
        TableResetSettings(table);
    if (table->IsInitializing)
    {
        // Initialize
        table->SettingsOffset = -1;
        table->IsSortSpecsDirty = true;
        table->InstanceInteracted = -1;
        table->ContextPopupColumn = -1;
        table->ReorderColumn = table->ResizedColumn = table->LastResizedColumn = -1;
        table->AutoFitSingleColumn = -1;
        table->HoveredColumnBody = table->HoveredColumnBorder = -1;
        for (int n = 0; n < columns_count; n++)
        {
            ImGuiTableColumn* column = &table->Columns[n];
            if (old_columns_to_preserve && n < old_columns_count)
            {
                // FIXME: We don't attempt to preserve column order in this path.
                *column = old_columns_to_preserve[n];
            }
            else
            {
                float width_auto = column->WidthAuto;
                *column = ImGuiTableColumn();
                column->WidthAuto = width_auto;
                column->IsPreserveWidthAuto = true; // Preserve WidthAuto when reinitializing a live table: not technically necessary but remove a visible flicker
                column->IsEnabled = column->IsEnabledNextFrame = true;
            }
            column->DisplayOrder = table->DisplayOrderToIndex[n] = (ImGuiTableColumnIdx)n;
        }
    }
    if (old_columns_raw_data)
        IM_FREE(old_columns_raw_data);

    // Load settings
    if (table->IsSettingsRequestLoad)
        TableLoadSettings(table);

    // Handle DPI/font resize
    // This is designed to facilitate DPI changes with the assumption that e.g. style.CellPadding has been scaled as well.
    // It will also react to changing fonts with mixed results. It doesn't need to be perfect but merely provide a decent transition.
    // FIXME-DPI: Provide consistent standards for reference size. Perhaps using g.CurrentDpiScale would be more self explanatory.
    // This is will lead us to non-rounded WidthRequest in columns, which should work but is a poorly tested path.
    const float new_ref_scale_unit = g.FontSize; // g.Font->GetCharAdvance('A') ?
    if (table->RefScale != 0.0f && table->RefScale != new_ref_scale_unit)
    {
        const float scale_factor = new_ref_scale_unit / table->RefScale;
        //IMGUI_DEBUG_LOG("[table] %08X RefScaleUnit %.3f -> %.3f, scaling width by %.3f\n", table->ID, table->RefScaleUnit, new_ref_scale_unit, scale_factor);
        for (int n = 0; n < columns_count; n++)
            table->Columns[n].WidthRequest = table->Columns[n].WidthRequest * scale_factor;
    }
    table->RefScale = new_ref_scale_unit;

    // Disable output until user calls TableNextRow() or TableNextColumn() leading to the TableUpdateLayout() call..
    // This is not strictly necessary but will reduce cases were "out of table" output will be misleading to the user.
    // Because we cannot safely assert in EndTable() when no rows have been created, this seems like our best option.
    inner_window->SkipItems = true;

    // Clear names
    // At this point the ->NameOffset field of each column will be invalid until TableUpdateLayout() or the first call to TableSetupColumn()
    if (table->ColumnsNames.Buf.Size > 0)
        table->ColumnsNames.Buf.resize(0);

    // Apply queued resizing/reordering/hiding requests
    TableBeginApplyRequests(table);

    return true;
}

// For reference, the average total _allocation count_ for a table is:
// + 0 (for ImGuiTable instance, we are pooling allocations in g.Tables)
// + 1 (for table->RawData allocated below)
// + 1 (for table->ColumnsNames, if names are used)
// + 1 (for table->Splitter._Channels)
// + 2 * active_channels_count (for ImDrawCmd and ImDrawIdx buffers inside channels)
// Where active_channels_count is variable but often == columns_count or columns_count + 1, see TableSetupDrawChannels() for details.
// Unused channels don't perform their +2 allocations.
void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)
{
    // Allocate single buffer for our arrays
    ImSpanAllocator<3> span_allocator;
    span_allocator.Reserve(0, columns_count * sizeof(ImGuiTableColumn));
    span_allocator.Reserve(1, columns_count * sizeof(ImGuiTableColumnIdx));
    span_allocator.Reserve(2, columns_count * sizeof(ImGuiTableCellData), 4);
    table->RawData = IM_ALLOC(span_allocator.GetArenaSizeInBytes());
    memset(table->RawData, 0, span_allocator.GetArenaSizeInBytes());
    span_allocator.SetArenaBasePtr(table->RawData);
    span_allocator.GetSpan(0, &table->Columns);
    span_allocator.GetSpan(1, &table->DisplayOrderToIndex);
    span_allocator.GetSpan(2, &table->RowCellData);
}

// Apply queued resizing/reordering/hiding requests
void ImGui::TableBeginApplyRequests(ImGuiTable* table)
{
    // Handle resizing request
    // (We process this at the first TableBegin of the frame)
    // FIXME-TABLE: Contains columns if our work area doesn't allow for scrolling?
    if (table->InstanceCurrent == 0)
    {
        if (table->ResizedColumn != -1 && table->ResizedColumnNextWidth != FLT_MAX)
            TableSetColumnWidth(table->ResizedColumn, table->ResizedColumnNextWidth);
        table->LastResizedColumn = table->ResizedColumn;
        table->ResizedColumnNextWidth = FLT_MAX;
        table->ResizedColumn = -1;

        // Process auto-fit for single column, which is a special case for stretch columns and fixed columns with FixedSame policy.
        // FIXME-TABLE: Would be nice to redistribute available stretch space accordingly to other weights, instead of giving it all to siblings.
        if (table->AutoFitSingleColumn != -1)
        {
            TableSetColumnWidth(table->AutoFitSingleColumn, table->Columns[table->AutoFitSingleColumn].WidthAuto);
            table->AutoFitSingleColumn = -1;
        }
    }

    // Handle reordering request
    // Note: we don't clear ReorderColumn after handling the request.
    if (table->InstanceCurrent == 0)
    {
        if (table->HeldHeaderColumn == -1 && table->ReorderColumn != -1)
            table->ReorderColumn = -1;
        table->HeldHeaderColumn = -1;
        if (table->ReorderColumn != -1 && table->ReorderColumnDir != 0)
        {
            // We need to handle reordering across hidden columns.
            // In the configuration below, moving C to the right of E will lead to:
            //    ... C [D] E  --->  ... [D] E  C   (Column name/index)
            //    ... 2  3  4        ...  2  3  4   (Display order)
            const int reorder_dir = table->ReorderColumnDir;
            IM_ASSERT(reorder_dir == -1 || reorder_dir == +1);
            IM_ASSERT(table->Flags & ImGuiTableFlags_Reorderable);
            ImGuiTableColumn* src_column = &table->Columns[table->ReorderColumn];
            ImGuiTableColumn* dst_column = &table->Columns[(reorder_dir == -1) ? src_column->PrevEnabledColumn : src_column->NextEnabledColumn];
            IM_UNUSED(dst_column);
            const int src_order = src_column->DisplayOrder;
            const int dst_order = dst_column->DisplayOrder;
            src_column->DisplayOrder = (ImGuiTableColumnIdx)dst_order;
            for (int order_n = src_order + reorder_dir; order_n != dst_order + reorder_dir; order_n += reorder_dir)
                table->Columns[table->DisplayOrderToIndex[order_n]].DisplayOrder -= (ImGuiTableColumnIdx)reorder_dir;
            IM_ASSERT(dst_column->DisplayOrder == dst_order - reorder_dir);

            // Display order is stored in both columns->IndexDisplayOrder and table->DisplayOrder[],
            // rebuild the later from the former.
            for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
                table->DisplayOrderToIndex[table->Columns[column_n].DisplayOrder] = (ImGuiTableColumnIdx)column_n;
            table->ReorderColumnDir = 0;
            table->IsSettingsDirty = true;
        }
    }

    // Handle display order reset request
    if (table->IsResetDisplayOrderRequest)
    {
        for (int n = 0; n < table->ColumnsCount; n++)
            table->DisplayOrderToIndex[n] = table->Columns[n].DisplayOrder = (ImGuiTableColumnIdx)n;
        table->IsResetDisplayOrderRequest = false;
        table->IsSettingsDirty = true;
    }
}

// Adjust flags: default width mode + stretch columns are not allowed when auto extending
static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnFlags flags_in)
{
    ImGuiTableColumnFlags flags = flags_in;

    // Sizing Policy
    if ((flags & ImGuiTableColumnFlags_WidthMask_) == 0)
    {
        const ImGuiTableFlags table_sizing_policy = (table->Flags & ImGuiTableFlags_SizingMask_);
        if (table_sizing_policy == ImGuiTableFlags_SizingFixedFit || table_sizing_policy == ImGuiTableFlags_SizingFixedSame)
            flags |= ImGuiTableColumnFlags_WidthFixed;
        else
            flags |= ImGuiTableColumnFlags_WidthStretch;
    }
    else
    {
        IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiTableColumnFlags_WidthMask_)); // Check that only 1 of each set is used.
    }

    // Resize
    if ((table->Flags & ImGuiTableFlags_Resizable) == 0)
        flags |= ImGuiTableColumnFlags_NoResize;

    // Sorting
    if ((flags & ImGuiTableColumnFlags_NoSortAscending) && (flags & ImGuiTableColumnFlags_NoSortDescending))
        flags |= ImGuiTableColumnFlags_NoSort;

    // Indentation
    if ((flags & ImGuiTableColumnFlags_IndentMask_) == 0)
        flags |= (table->Columns.index_from_ptr(column) == 0) ? ImGuiTableColumnFlags_IndentEnable : ImGuiTableColumnFlags_IndentDisable;

    // Alignment
    //if ((flags & ImGuiTableColumnFlags_AlignMask_) == 0)
    //    flags |= ImGuiTableColumnFlags_AlignCenter;
    //IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiTableColumnFlags_AlignMask_)); // Check that only 1 of each set is used.

    // Preserve status flags
    column->Flags = flags | (column->Flags & ImGuiTableColumnFlags_StatusMask_);

    // Build an ordered list of available sort directions
    column->SortDirectionsAvailCount = column->SortDirectionsAvailMask = column->SortDirectionsAvailList = 0;
    if (table->Flags & ImGuiTableFlags_Sortable)
    {
        int count = 0, mask = 0, list = 0;
        if ((flags & ImGuiTableColumnFlags_PreferSortAscending)  != 0 && (flags & ImGuiTableColumnFlags_NoSortAscending)  == 0) { mask |= 1 << ImGuiSortDirection_Ascending;  list |= ImGuiSortDirection_Ascending  << (count << 1); count++; }
        if ((flags & ImGuiTableColumnFlags_PreferSortDescending) != 0 && (flags & ImGuiTableColumnFlags_NoSortDescending) == 0) { mask |= 1 << ImGuiSortDirection_Descending; list |= ImGuiSortDirection_Descending << (count << 1); count++; }
        if ((flags & ImGuiTableColumnFlags_PreferSortAscending)  == 0 && (flags & ImGuiTableColumnFlags_NoSortAscending)  == 0) { mask |= 1 << ImGuiSortDirection_Ascending;  list |= ImGuiSortDirection_Ascending  << (count << 1); count++; }
        if ((flags & ImGuiTableColumnFlags_PreferSortDescending) == 0 && (flags & ImGuiTableColumnFlags_NoSortDescending) == 0) { mask |= 1 << ImGuiSortDirection_Descending; list |= ImGuiSortDirection_Descending << (count << 1); count++; }
        if ((table->Flags & ImGuiTableFlags_SortTristate) || count == 0) { mask |= 1 << ImGuiSortDirection_None; count++; }
        column->SortDirectionsAvailList = (ImU8)list;
        column->SortDirectionsAvailMask = (ImU8)mask;
        column->SortDirectionsAvailCount = (ImU8)count;
        ImGui::TableFixColumnSortDirection(table, column);
    }
}

// Layout columns for the frame. This is in essence the followup to BeginTable().
// Runs on the first call to TableNextRow(), to give a chance for TableSetupColumn() to be called first.
// FIXME-TABLE: Our width (and therefore our WorkRect) will be minimal in the first frame for _WidthAuto columns.
// Increase feedback side-effect with widgets relying on WorkRect.Max.x... Maybe provide a default distribution for _WidthAuto columns?
void ImGui::TableUpdateLayout(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(table->IsLayoutLocked == false);

    const ImGuiTableFlags table_sizing_policy = (table->Flags & ImGuiTableFlags_SizingMask_);
    table->IsDefaultDisplayOrder = true;
    table->ColumnsEnabledCount = 0;
    table->EnabledMaskByIndex = 0x00;
    table->EnabledMaskByDisplayOrder = 0x00;
    table->LeftMostEnabledColumn = -1;
    table->MinColumnWidth = ImMax(1.0f, g.Style.FramePadding.x * 1.0f); // g.Style.ColumnsMinSpacing; // FIXME-TABLE

    // [Part 1] Apply/lock Enabled and Order states. Calculate auto/ideal width for columns. Count fixed/stretch columns.
    // Process columns in their visible orders as we are building the Prev/Next indices.
    int count_fixed = 0;                // Number of columns that have fixed sizing policies
    int count_stretch = 0;              // Number of columns that have stretch sizing policies
    int prev_visible_column_idx = -1;
    bool has_auto_fit_request = false;
    bool has_resizable = false;
    float stretch_sum_width_auto = 0.0f;
    float fixed_max_width_auto = 0.0f;
    for (int order_n = 0; order_n < table->ColumnsCount; order_n++)
    {
        const int column_n = table->DisplayOrderToIndex[order_n];
        if (column_n != order_n)
            table->IsDefaultDisplayOrder = false;
        ImGuiTableColumn* column = &table->Columns[column_n];

        // Clear column setup if not submitted by user. Currently we make it mandatory to call TableSetupColumn() every frame.
        // It would easily work without but we're not ready to guarantee it since e.g. names need resubmission anyway.
        // We take a slight shortcut but in theory we could be calling TableSetupColumn() here with dummy values, it should yield the same effect.
        if (table->DeclColumnsCount <= column_n)
        {
            TableSetupColumnFlags(table, column, ImGuiTableColumnFlags_None);
            column->NameOffset = -1;
            column->UserID = 0;
            column->InitStretchWeightOrWidth = -1.0f;
        }

        // Update Enabled state, mark settings/sortspecs dirty
        if (!(table->Flags & ImGuiTableFlags_Hideable) || (column->Flags & ImGuiTableColumnFlags_NoHide))
            column->IsEnabledNextFrame = true;
        if (column->IsEnabled != column->IsEnabledNextFrame)
        {
            column->IsEnabled = column->IsEnabledNextFrame;
            table->IsSettingsDirty = true;
            if (!column->IsEnabled && column->SortOrder != -1)
                table->IsSortSpecsDirty = true;
        }
        if (column->SortOrder > 0 && !(table->Flags & ImGuiTableFlags_SortMulti))
            table->IsSortSpecsDirty = true;

        // Auto-fit unsized columns
        const bool start_auto_fit = (column->Flags & ImGuiTableColumnFlags_WidthFixed) ? (column->WidthRequest < 0.0f) : (column->StretchWeight < 0.0f);
        if (start_auto_fit)
            column->AutoFitQueue = column->CannotSkipItemsQueue = (1 << 3) - 1; // Fit for three frames

        if (!column->IsEnabled)
        {
            column->IndexWithinEnabledSet = -1;
            continue;
        }

        // Mark as enabled and link to previous/next enabled column
        column->PrevEnabledColumn = (ImGuiTableColumnIdx)prev_visible_column_idx;
        column->NextEnabledColumn = -1;
        if (prev_visible_column_idx != -1)
            table->Columns[prev_visible_column_idx].NextEnabledColumn = (ImGuiTableColumnIdx)column_n;
        else
            table->LeftMostEnabledColumn = (ImGuiTableColumnIdx)column_n;
        column->IndexWithinEnabledSet = table->ColumnsEnabledCount++;
        table->EnabledMaskByIndex |= (ImU64)1 << column_n;
        table->EnabledMaskByDisplayOrder |= (ImU64)1 << column->DisplayOrder;
        prev_visible_column_idx = column_n;
        IM_ASSERT(column->IndexWithinEnabledSet <= column->DisplayOrder);

        // Calculate ideal/auto column width (that's the width required for all contents to be visible without clipping)
        // Combine width from regular rows + width from headers unless requested not to.
        if (!column->IsPreserveWidthAuto)
            column->WidthAuto = TableGetColumnWidthAuto(table, column);

        // Non-resizable columns keep their requested width (apply user value regardless of IsPreserveWidthAuto)
        const bool column_is_resizable = (column->Flags & ImGuiTableColumnFlags_NoResize) == 0;
        if (column_is_resizable)
            has_resizable = true;
        if ((column->Flags & ImGuiTableColumnFlags_WidthFixed) && column->InitStretchWeightOrWidth > 0.0f && !column_is_resizable)
            column->WidthAuto = column->InitStretchWeightOrWidth;

        if (column->AutoFitQueue != 0x00)
            has_auto_fit_request = true;
        if (column->Flags & ImGuiTableColumnFlags_WidthStretch)
        {
            stretch_sum_width_auto += column->WidthAuto;
            count_stretch++;
        }
        else
        {
            fixed_max_width_auto = ImMax(fixed_max_width_auto, column->WidthAuto);
            count_fixed++;
        }
    }
    if ((table->Flags & ImGuiTableFlags_Sortable) && table->SortSpecsCount == 0 && !(table->Flags & ImGuiTableFlags_SortTristate))
        table->IsSortSpecsDirty = true;
    table->RightMostEnabledColumn = (ImGuiTableColumnIdx)prev_visible_column_idx;
    IM_ASSERT(table->LeftMostEnabledColumn >= 0 && table->RightMostEnabledColumn >= 0);

    // [Part 2] Disable child window clipping while fitting columns. This is not strictly necessary but makes it possible
    // to avoid the column fitting having to wait until the first visible frame of the child container (may or not be a good thing).
    // FIXME-TABLE: for always auto-resizing columns may not want to do that all the time.
    if (has_auto_fit_request && table->OuterWindow != table->InnerWindow)
        table->InnerWindow->SkipItems = false;
    if (has_auto_fit_request)
        table->IsSettingsDirty = true;

    // [Part 3] Fix column flags and record a few extra information.
    float sum_width_requests = 0.0f;        // Sum of all width for fixed and auto-resize columns, excluding width contributed by Stretch columns but including spacing/padding.
    float stretch_sum_weights = 0.0f;       // Sum of all weights for stretch columns.
    table->LeftMostStretchedColumn = table->RightMostStretchedColumn = -1;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        if (!(table->EnabledMaskByIndex & ((ImU64)1 << column_n)))
            continue;
        ImGuiTableColumn* column = &table->Columns[column_n];

        const bool column_is_resizable = (column->Flags & ImGuiTableColumnFlags_NoResize) == 0;
        if (column->Flags & ImGuiTableColumnFlags_WidthFixed)
        {
            // Apply same widths policy
            float width_auto = column->WidthAuto;
            if (table_sizing_policy == ImGuiTableFlags_SizingFixedSame && (column->AutoFitQueue != 0x00 || !column_is_resizable))
                width_auto = fixed_max_width_auto;

            // Apply automatic width
            // Latch initial size for fixed columns and update it constantly for auto-resizing column (unless clipped!)
            if (column->AutoFitQueue != 0x00)
                column->WidthRequest = width_auto;
            else if ((column->Flags & ImGuiTableColumnFlags_WidthFixed) && !column_is_resizable && (table->RequestOutputMaskByIndex & ((ImU64)1 << column_n)))
                column->WidthRequest = width_auto;

            // FIXME-TABLE: Increase minimum size during init frame to avoid biasing auto-fitting widgets
            // (e.g. TextWrapped) too much. Otherwise what tends to happen is that TextWrapped would output a very
            // large height (= first frame scrollbar display very off + clipper would skip lots of items).
            // This is merely making the side-effect less extreme, but doesn't properly fixes it.
            // FIXME: Move this to ->WidthGiven to avoid temporary lossyless?
            // FIXME: This break IsPreserveWidthAuto from not flickering if the stored WidthAuto was smaller.
            if (column->AutoFitQueue > 0x01 && table->IsInitializing && !column->IsPreserveWidthAuto)
                column->WidthRequest = ImMax(column->WidthRequest, table->MinColumnWidth * 4.0f); // FIXME-TABLE: Another constant/scale?
            sum_width_requests += column->WidthRequest;
        }
        else
        {
            // Initialize stretch weight
            if (column->AutoFitQueue != 0x00 || column->StretchWeight < 0.0f || !column_is_resizable)
            {
                if (column->InitStretchWeightOrWidth > 0.0f)
                    column->StretchWeight = column->InitStretchWeightOrWidth;
                else if (table_sizing_policy == ImGuiTableFlags_SizingStretchProp)
                    column->StretchWeight = (column->WidthAuto / stretch_sum_width_auto) * count_stretch;
                else
                    column->StretchWeight = 1.0f;
            }

            stretch_sum_weights += column->StretchWeight;
            if (table->LeftMostStretchedColumn == -1 || table->Columns[table->LeftMostStretchedColumn].DisplayOrder > column->DisplayOrder)
                table->LeftMostStretchedColumn = (ImGuiTableColumnIdx)column_n;
            if (table->RightMostStretchedColumn == -1 || table->Columns[table->RightMostStretchedColumn].DisplayOrder < column->DisplayOrder)
                table->RightMostStretchedColumn = (ImGuiTableColumnIdx)column_n;
        }
        column->IsPreserveWidthAuto = false;
        sum_width_requests += table->CellPaddingX * 2.0f;
    }
    table->ColumnsEnabledFixedCount = (ImGuiTableColumnIdx)count_fixed;

    // [Part 4] Apply final widths based on requested widths
    const ImRect work_rect = table->WorkRect;
    const float width_spacings = (table->OuterPaddingX * 2.0f) + (table->CellSpacingX1 + table->CellSpacingX2) * (table->ColumnsEnabledCount - 1);
    const float width_avail = ((table->Flags & ImGuiTableFlags_ScrollX) && table->InnerWidth == 0.0f) ? table->InnerClipRect.GetWidth() : work_rect.GetWidth();
    const float width_avail_for_stretched_columns = width_avail - width_spacings - sum_width_requests;
    float width_remaining_for_stretched_columns = width_avail_for_stretched_columns;
    table->ColumnsGivenWidth = width_spacings + (table->CellPaddingX * 2.0f) * table->ColumnsEnabledCount;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        if (!(table->EnabledMaskByIndex & ((ImU64)1 << column_n)))
            continue;
        ImGuiTableColumn* column = &table->Columns[column_n];

        // Allocate width for stretched/weighted columns (StretchWeight gets converted into WidthRequest)
        if (column->Flags & ImGuiTableColumnFlags_WidthStretch)
        {
            float weight_ratio = column->StretchWeight / stretch_sum_weights;
            column->WidthRequest = IM_FLOOR(ImMax(width_avail_for_stretched_columns * weight_ratio, table->MinColumnWidth) + 0.01f);
            width_remaining_for_stretched_columns -= column->WidthRequest;
        }

        // [Resize Rule 1] The right-most Visible column is not resizable if there is at least one Stretch column
        // See additional comments in TableSetColumnWidth().
        if (column->NextEnabledColumn == -1 && table->LeftMostStretchedColumn != -1)
            column->Flags |= ImGuiTableColumnFlags_NoDirectResize_;

        // Assign final width, record width in case we will need to shrink
        column->WidthGiven = ImFloor(ImMax(column->WidthRequest, table->MinColumnWidth));
        table->ColumnsGivenWidth += column->WidthGiven;
    }

    // [Part 5] Redistribute stretch remainder width due to rounding (remainder width is < 1.0f * number of Stretch column).
    // Using right-to-left distribution (more likely to match resizing cursor).
    if (width_remaining_for_stretched_columns >= 1.0f && !(table->Flags & ImGuiTableFlags_PreciseWidths))
        for (int order_n = table->ColumnsCount - 1; stretch_sum_weights > 0.0f && width_remaining_for_stretched_columns >= 1.0f && order_n >= 0; order_n--)
        {
            if (!(table->EnabledMaskByDisplayOrder & ((ImU64)1 << order_n)))
                continue;
            ImGuiTableColumn* column = &table->Columns[table->DisplayOrderToIndex[order_n]];
            if (!(column->Flags & ImGuiTableColumnFlags_WidthStretch))
                continue;
            column->WidthRequest += 1.0f;
            column->WidthGiven += 1.0f;
            width_remaining_for_stretched_columns -= 1.0f;
        }

    table->HoveredColumnBody = -1;
    table->HoveredColumnBorder = -1;
    const ImRect mouse_hit_rect(table->OuterRect.Min.x, table->OuterRect.Min.y, table->OuterRect.Max.x, ImMax(table->OuterRect.Max.y, table->OuterRect.Min.y + table->LastOuterHeight));
    const bool is_hovering_table = ItemHoverable(mouse_hit_rect, 0);

    // [Part 6] Setup final position, offset, skip/clip states and clipping rectangles, detect hovered column
    // Process columns in their visible orders as we are comparing the visible order and adjusting host_clip_rect while looping.
    int visible_n = 0;
    bool offset_x_frozen = (table->FreezeColumnsCount > 0);
    float offset_x = ((table->FreezeColumnsCount > 0) ? table->OuterRect.Min.x : work_rect.Min.x) + table->OuterPaddingX - table->CellSpacingX1;
    ImRect host_clip_rect = table->InnerClipRect;
    //host_clip_rect.Max.x += table->CellPaddingX + table->CellSpacingX2;
    table->VisibleMaskByIndex = 0x00;
    table->RequestOutputMaskByIndex = 0x00;
    for (int order_n = 0; order_n < table->ColumnsCount; order_n++)
    {
        const int column_n = table->DisplayOrderToIndex[order_n];
        ImGuiTableColumn* column = &table->Columns[column_n];

        column->NavLayerCurrent = (ImS8)((table->FreezeRowsCount > 0 || column_n < table->FreezeColumnsCount) ? ImGuiNavLayer_Menu : ImGuiNavLayer_Main);

        if (offset_x_frozen && table->FreezeColumnsCount == visible_n)
        {
            offset_x += work_rect.Min.x - table->OuterRect.Min.x;
            offset_x_frozen = false;
        }

        // Clear status flags
        column->Flags &= ~ImGuiTableColumnFlags_StatusMask_;

        if ((table->EnabledMaskByDisplayOrder & ((ImU64)1 << order_n)) == 0)
        {
            // Hidden column: clear a few fields and we are done with it for the remainder of the function.
            // We set a zero-width clip rect but set Min.y/Max.y properly to not interfere with the clipper.
            column->MinX = column->MaxX = column->WorkMinX = column->ClipRect.Min.x = column->ClipRect.Max.x = offset_x;
            column->WidthGiven = 0.0f;
            column->ClipRect.Min.y = work_rect.Min.y;
            column->ClipRect.Max.y = FLT_MAX;
            column->ClipRect.ClipWithFull(host_clip_rect);
            column->IsVisibleX = column->IsVisibleY = column->IsRequestOutput = false;
            column->IsSkipItems = true;
            column->ItemWidth = 1.0f;
            continue;
        }

        // Detect hovered column
        if (is_hovering_table && g.IO.MousePos.x >= column->ClipRect.Min.x && g.IO.MousePos.x < column->ClipRect.Max.x)
            table->HoveredColumnBody = (ImGuiTableColumnIdx)column_n;

        // Lock start position
        column->MinX = offset_x;

        // Lock width based on start position and minimum/maximum width for this position
        float max_width = TableGetMaxColumnWidth(table, column_n);
        column->WidthGiven = ImMin(column->WidthGiven, max_width);
        column->WidthGiven = ImMax(column->WidthGiven, ImMin(column->WidthRequest, table->MinColumnWidth));
        column->MaxX = offset_x + column->WidthGiven + table->CellSpacingX1 + table->CellSpacingX2 + table->CellPaddingX * 2.0f;

        // Lock other positions
        // - ClipRect.Min.x: Because merging draw commands doesn't compare min boundaries, we make ClipRect.Min.x match left bounds to be consistent regardless of merging.
        // - ClipRect.Max.x: using WorkMaxX instead of MaxX (aka including padding) makes things more consistent when resizing down, tho slightly detrimental to visibility in very-small column.
        // - ClipRect.Max.x: using MaxX makes it easier for header to receive hover highlight with no discontinuity and display sorting arrow.
        // - FIXME-TABLE: We want equal width columns to have equal (ClipRect.Max.x - WorkMinX) width, which means ClipRect.max.x cannot stray off host_clip_rect.Max.x else right-most column may appear shorter.
        column->WorkMinX = column->MinX + table->CellPaddingX + table->CellSpacingX1;
        column->WorkMaxX = column->MaxX - table->CellPaddingX - table->CellSpacingX2; // Expected max
        column->ItemWidth = ImFloor(column->WidthGiven * 0.65f);
        column->ClipRect.Min.x = column->MinX;
        column->ClipRect.Min.y = work_rect.Min.y;
        column->ClipRect.Max.x = column->MaxX; //column->WorkMaxX;
        column->ClipRect.Max.y = FLT_MAX;
        column->ClipRect.ClipWithFull(host_clip_rect);

        // Mark column as Clipped (not in sight)
        // Note that scrolling tables (where inner_window != outer_window) handle Y clipped earlier in BeginTable() so IsVisibleY really only applies to non-scrolling tables.
        // FIXME-TABLE: Because InnerClipRect.Max.y is conservatively ==outer_window->ClipRect.Max.y, we never can mark columns _Above_ the scroll line as not IsVisibleY.
        // Taking advantage of LastOuterHeight would yield good results there...
        // FIXME-TABLE: Y clipping is disabled because it effectively means not submitting will reduce contents width which is fed to outer_window->DC.CursorMaxPos.x,
        // and this may be used (e.g. typically by outer_window using AlwaysAutoResize or outer_window's horizontal scrollbar, but could be something else).
        // Possible solution to preserve last known content width for clipped column. Test 'table_reported_size' fails when enabling Y clipping and window is resized small.
        column->IsVisibleX = (column->ClipRect.Max.x > column->ClipRect.Min.x);
        column->IsVisibleY = true; // (column->ClipRect.Max.y > column->ClipRect.Min.y);
        const bool is_visible = column->IsVisibleX; //&& column->IsVisibleY;
        if (is_visible)
            table->VisibleMaskByIndex |= ((ImU64)1 << column_n);

        // Mark column as requesting output from user. Note that fixed + non-resizable sets are auto-fitting at all times and therefore always request output.
        column->IsRequestOutput = is_visible || column->AutoFitQueue != 0 || column->CannotSkipItemsQueue != 0;
        if (column->IsRequestOutput)
            table->RequestOutputMaskByIndex |= ((ImU64)1 << column_n);

        // Mark column as SkipItems (ignoring all items/layout)
        column->IsSkipItems = !column->IsEnabled || table->HostSkipItems;
        if (column->IsSkipItems)
            IM_ASSERT(!is_visible);

        // Update status flags
        column->Flags |= ImGuiTableColumnFlags_IsEnabled;
        if (is_visible)
            column->Flags |= ImGuiTableColumnFlags_IsVisible;
        if (column->SortOrder != -1)
            column->Flags |= ImGuiTableColumnFlags_IsSorted;
        if (table->HoveredColumnBody == column_n)
            column->Flags |= ImGuiTableColumnFlags_IsHovered;

        // Alignment
        // FIXME-TABLE: This align based on the whole column width, not per-cell, and therefore isn't useful in
        // many cases (to be able to honor this we might be able to store a log of cells width, per row, for
        // visible rows, but nav/programmatic scroll would have visible artifacts.)
        //if (column->Flags & ImGuiTableColumnFlags_AlignRight)
        //    column->WorkMinX = ImMax(column->WorkMinX, column->MaxX - column->ContentWidthRowsUnfrozen);
        //else if (column->Flags & ImGuiTableColumnFlags_AlignCenter)
        //    column->WorkMinX = ImLerp(column->WorkMinX, ImMax(column->StartX, column->MaxX - column->ContentWidthRowsUnfrozen), 0.5f);

        // Reset content width variables
        column->ContentMaxXFrozen = column->ContentMaxXUnfrozen = column->WorkMinX;
        column->ContentMaxXHeadersUsed = column->ContentMaxXHeadersIdeal = column->WorkMinX;

        // Don't decrement auto-fit counters until container window got a chance to submit its items
        if (table->HostSkipItems == false)
        {
            column->AutoFitQueue >>= 1;
            column->CannotSkipItemsQueue >>= 1;
        }

        if (visible_n < table->FreezeColumnsCount)
            host_clip_rect.Min.x = ImClamp(column->MaxX + TABLE_BORDER_SIZE, host_clip_rect.Min.x, host_clip_rect.Max.x);

        offset_x += column->WidthGiven + table->CellSpacingX1 + table->CellSpacingX2 + table->CellPaddingX * 2.0f;
        visible_n++;
    }

    // [Part 7] Detect/store when we are hovering the unused space after the right-most column (so e.g. context menus can react on it)
    // Clear Resizable flag if none of our column are actually resizable (either via an explicit _NoResize flag, either
    // because of using _WidthAuto/_WidthStretch). This will hide the resizing option from the context menu.
    const float unused_x1 = ImMax(table->WorkRect.Min.x, table->Columns[table->RightMostEnabledColumn].ClipRect.Max.x);
    if (is_hovering_table && table->HoveredColumnBody == -1)
    {
        if (g.IO.MousePos.x >= unused_x1)
            table->HoveredColumnBody = (ImGuiTableColumnIdx)table->ColumnsCount;
    }
    if (has_resizable == false && (table->Flags & ImGuiTableFlags_Resizable))
        table->Flags &= ~ImGuiTableFlags_Resizable;

    // [Part 8] Lock actual OuterRect/WorkRect right-most position.
    // This is done late to handle the case of fixed-columns tables not claiming more widths that they need.
    // Because of this we are careful with uses of WorkRect and InnerClipRect before this point.
    if (table->RightMostStretchedColumn != -1)
        table->Flags &= ~ImGuiTableFlags_NoHostExtendX;
    if (table->Flags & ImGuiTableFlags_NoHostExtendX)
    {
        table->OuterRect.Max.x = table->WorkRect.Max.x = unused_x1;
        table->InnerClipRect.Max.x = ImMin(table->InnerClipRect.Max.x, unused_x1);
    }
    table->InnerWindow->ParentWorkRect = table->WorkRect;
    table->BorderX1 = table->InnerClipRect.Min.x;// +((table->Flags & ImGuiTableFlags_BordersOuter) ? 0.0f : -1.0f);
    table->BorderX2 = table->InnerClipRect.Max.x;// +((table->Flags & ImGuiTableFlags_BordersOuter) ? 0.0f : +1.0f);

    // [Part 9] Allocate draw channels and setup background cliprect
    TableSetupDrawChannels(table);

    // [Part 10] Hit testing on borders
    if (table->Flags & ImGuiTableFlags_Resizable)
        TableUpdateBorders(table);
    table->LastFirstRowHeight = 0.0f;
    table->IsLayoutLocked = true;
    table->IsUsingHeaders = false;

    // [Part 11] Context menu
    if (table->IsContextPopupOpen && table->InstanceCurrent == table->InstanceInteracted)
    {
        const ImGuiID context_menu_id = ImHashStr("##ContextMenu", 0, table->ID);
        if (BeginPopupEx(context_menu_id, ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings))
        {
            TableDrawContextMenu(table);
            EndPopup();
        }
        else
        {
            table->IsContextPopupOpen = false;
        }
    }

    // [Part 13] Sanitize and build sort specs before we have a change to use them for display.
    // This path will only be exercised when sort specs are modified before header rows (e.g. init or visibility change)
    if (table->IsSortSpecsDirty && (table->Flags & ImGuiTableFlags_Sortable))
        TableSortSpecsBuild(table);

    // Initial state
    ImGuiWindow* inner_window = table->InnerWindow;
    if (table->Flags & ImGuiTableFlags_NoClip)
        table->DrawSplitter.SetCurrentChannel(inner_window->DrawList, TABLE_DRAW_CHANNEL_NOCLIP);
    else
        inner_window->DrawList->PushClipRect(inner_window->ClipRect.Min, inner_window->ClipRect.Max, false);
}

// Process hit-testing on resizing borders. Actual size change will be applied in EndTable()
// - Set table->HoveredColumnBorder with a short delay/timer to reduce feedback noise
// - Submit ahead of table contents and header, use ImGuiButtonFlags_AllowItemOverlap to prioritize widgets
//   overlapping the same area.
void ImGui::TableUpdateBorders(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(table->Flags & ImGuiTableFlags_Resizable);

    // At this point OuterRect height may be zero or under actual final height, so we rely on temporal coherency and
    // use the final height from last frame. Because this is only affecting _interaction_ with columns, it is not
    // really problematic (whereas the actual visual will be displayed in EndTable() and using the current frame height).
    // Actual columns highlight/render will be performed in EndTable() and not be affected.
    const float hit_half_width = TABLE_RESIZE_SEPARATOR_HALF_THICKNESS;
    const float hit_y1 = table->OuterRect.Min.y;
    const float hit_y2_body = ImMax(table->OuterRect.Max.y, hit_y1 + table->LastOuterHeight);
    const float hit_y2_head = hit_y1 + table->LastFirstRowHeight;

    for (int order_n = 0; order_n < table->ColumnsCount; order_n++)
    {
        if (!(table->EnabledMaskByDisplayOrder & ((ImU64)1 << order_n)))
            continue;

        const int column_n = table->DisplayOrderToIndex[order_n];
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (column->Flags & (ImGuiTableColumnFlags_NoResize | ImGuiTableColumnFlags_NoDirectResize_))
            continue;

        // ImGuiTableFlags_NoBordersInBodyUntilResize will be honored in TableDrawBorders()
        const float border_y2_hit = (table->Flags & ImGuiTableFlags_NoBordersInBody) ? hit_y2_head : hit_y2_body;
        if ((table->Flags & ImGuiTableFlags_NoBordersInBody) && table->IsUsingHeaders == false)
            continue;

        if (table->FreezeColumnsCount > 0)
            if (column->MaxX < table->Columns[table->DisplayOrderToIndex[table->FreezeColumnsCount - 1]].MaxX)
                continue;

        ImGuiID column_id = TableGetColumnResizeID(table, column_n, table->InstanceCurrent);
        ImRect hit_rect(column->MaxX - hit_half_width, hit_y1, column->MaxX + hit_half_width, border_y2_hit);
        //GetForegroundDrawList()->AddRect(hit_rect.Min, hit_rect.Max, IM_COL32(255, 0, 0, 100));
        KeepAliveID(column_id);

        bool hovered = false, held = false;
        bool pressed = ButtonBehavior(hit_rect, column_id, &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_AllowItemOverlap | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnDoubleClick);
        if (pressed && IsMouseDoubleClicked(0))
        {
            TableSetColumnWidthAutoSingle(table, column_n);
            ClearActiveID();
            held = hovered = false;
        }
        if (held)
        {
            if (table->LastResizedColumn == -1)
                table->ResizeLockMinContentsX2 = table->RightMostEnabledColumn != -1 ? table->Columns[table->RightMostEnabledColumn].MaxX : -FLT_MAX;
            table->ResizedColumn = (ImGuiTableColumnIdx)column_n;
            table->InstanceInteracted = table->InstanceCurrent;
        }
        if ((hovered && g.HoveredIdTimer > TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER) || held)
        {
            table->HoveredColumnBorder = (ImGuiTableColumnIdx)column_n;
            SetMouseCursor(ImGuiMouseCursor_ResizeEW);
        }
    }
}

void    ImGui::EndTable()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && "Only call EndTable() if BeginTable() returns true!");

    // This assert would be very useful to catch a common error... unfortunately it would probably trigger in some
    // cases, and for consistency user may sometimes output empty tables (and still benefit from e.g. outer border)
    //IM_ASSERT(table->IsLayoutLocked && "Table unused: never called TableNextRow(), is that the intent?");

    // If the user never got to call TableNextRow() or TableNextColumn(), we call layout ourselves to ensure all our
    // code paths are consistent (instead of just hoping that TableBegin/TableEnd will work), get borders drawn, etc.
    if (!table->IsLayoutLocked)
        TableUpdateLayout(table);

    const ImGuiTableFlags flags = table->Flags;
    ImGuiWindow* inner_window = table->InnerWindow;
    ImGuiWindow* outer_window = table->OuterWindow;
    IM_ASSERT(inner_window == g.CurrentWindow);
    IM_ASSERT(outer_window == inner_window || outer_window == inner_window->ParentWindow);

    if (table->IsInsideRow)
        TableEndRow(table);

    // Context menu in columns body
    if (flags & ImGuiTableFlags_ContextMenuInBody)
        if (table->HoveredColumnBody != -1 && !IsAnyItemHovered() && IsMouseReleased(ImGuiMouseButton_Right))
            TableOpenContextMenu((int)table->HoveredColumnBody);

    // Finalize table height
    inner_window->DC.PrevLineSize = table->HostBackupPrevLineSize;
    inner_window->DC.CurrLineSize = table->HostBackupCurrLineSize;
    inner_window->DC.CursorMaxPos = table->HostBackupCursorMaxPos;
    const float inner_content_max_y = table->RowPosY2;
    IM_ASSERT(table->RowPosY2 == inner_window->DC.CursorPos.y);
    if (inner_window != outer_window)
        inner_window->DC.CursorMaxPos.y = inner_content_max_y;
    else if (!(flags & ImGuiTableFlags_NoHostExtendY))
        table->OuterRect.Max.y = table->InnerRect.Max.y = ImMax(table->OuterRect.Max.y, inner_content_max_y); // Patch OuterRect/InnerRect height
    table->WorkRect.Max.y = ImMax(table->WorkRect.Max.y, table->OuterRect.Max.y);
    table->LastOuterHeight = table->OuterRect.GetHeight();

    // Setup inner scrolling range
    // FIXME: This ideally should be done earlier, in BeginTable() SetNextWindowContentSize call, just like writing to inner_window->DC.CursorMaxPos.y,
    // but since the later is likely to be impossible to do we'd rather update both axises together.
    if (table->Flags & ImGuiTableFlags_ScrollX)
    {
        const float outer_padding_for_border = (table->Flags & ImGuiTableFlags_BordersOuterV) ? TABLE_BORDER_SIZE : 0.0f;
        float max_pos_x = table->InnerWindow->DC.CursorMaxPos.x;
        if (table->RightMostEnabledColumn != -1)
            max_pos_x = ImMax(max_pos_x, table->Columns[table->RightMostEnabledColumn].WorkMaxX + table->CellPaddingX + table->OuterPaddingX - outer_padding_for_border);
        if (table->ResizedColumn != -1)
            max_pos_x = ImMax(max_pos_x, table->ResizeLockMinContentsX2);
        table->InnerWindow->DC.CursorMaxPos.x = max_pos_x;
    }

    // Pop clipping rect
    if (!(flags & ImGuiTableFlags_NoClip))
        inner_window->DrawList->PopClipRect();
    inner_window->ClipRect = inner_window->DrawList->_ClipRectStack.back();

    // Draw borders
    if ((flags & ImGuiTableFlags_Borders) != 0)
        TableDrawBorders(table);

#if 0
    // Strip out dummy channel draw calls
    // We have no way to prevent user submitting direct ImDrawList calls into a hidden column (but ImGui:: calls will be clipped out)
    // Pros: remove draw calls which will have no effect. since they'll have zero-size cliprect they may be early out anyway.
    // Cons: making it harder for users watching metrics/debugger to spot the wasted vertices.
    if (table->DummyDrawChannel != (ImGuiTableColumnIdx)-1)
    {
        ImDrawChannel* dummy_channel = &table->DrawSplitter._Channels[table->DummyDrawChannel];
        dummy_channel->_CmdBuffer.resize(0);
        dummy_channel->_IdxBuffer.resize(0);
    }
#endif

    // Flatten channels and merge draw calls
    table->DrawSplitter.SetCurrentChannel(inner_window->DrawList, 0);
    if ((table->Flags & ImGuiTableFlags_NoClip) == 0)
        TableMergeDrawChannels(table);
    table->DrawSplitter.Merge(inner_window->DrawList);

    // Update ColumnsAutoFitWidth to get us ahead for host using our size to auto-resize without waiting for next BeginTable()
    const float width_spacings = (table->OuterPaddingX * 2.0f) + (table->CellSpacingX1 + table->CellSpacingX2) * (table->ColumnsEnabledCount - 1);
    table->ColumnsAutoFitWidth = width_spacings + (table->CellPaddingX * 2.0f) * table->ColumnsEnabledCount;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        if (table->EnabledMaskByIndex & ((ImU64)1 << column_n))
        {
            ImGuiTableColumn* column = &table->Columns[column_n];
            if ((column->Flags & ImGuiTableColumnFlags_WidthFixed) && !(column->Flags & ImGuiTableColumnFlags_NoResize))
                table->ColumnsAutoFitWidth += column->WidthRequest;
            else
                table->ColumnsAutoFitWidth += TableGetColumnWidthAuto(table, column);
        }

    // Update scroll
    if ((table->Flags & ImGuiTableFlags_ScrollX) == 0 && inner_window != outer_window)
    {
        inner_window->Scroll.x = 0.0f;
    }
    else if (table->LastResizedColumn != -1 && table->ResizedColumn == -1 && inner_window->ScrollbarX && table->InstanceInteracted == table->InstanceCurrent)
    {
        // When releasing a column being resized, scroll to keep the resulting column in sight
        const float neighbor_width_to_keep_visible = table->MinColumnWidth + table->CellPaddingX * 2.0f;
        ImGuiTableColumn* column = &table->Columns[table->LastResizedColumn];
        if (column->MaxX < table->InnerClipRect.Min.x)
            SetScrollFromPosX(inner_window, column->MaxX - inner_window->Pos.x - neighbor_width_to_keep_visible, 1.0f);
        else if (column->MaxX > table->InnerClipRect.Max.x)
            SetScrollFromPosX(inner_window, column->MaxX - inner_window->Pos.x + neighbor_width_to_keep_visible, 1.0f);
    }

    // Apply resizing/dragging at the end of the frame
    if (table->ResizedColumn != -1 && table->InstanceCurrent == table->InstanceInteracted)
    {
        ImGuiTableColumn* column = &table->Columns[table->ResizedColumn];
        const float new_x2 = (g.IO.MousePos.x - g.ActiveIdClickOffset.x + TABLE_RESIZE_SEPARATOR_HALF_THICKNESS);
        const float new_width = ImFloor(new_x2 - column->MinX - table->CellSpacingX1 - table->CellPaddingX * 2.0f);
        table->ResizedColumnNextWidth = new_width;
    }

    // Pop from id stack
    IM_ASSERT_USER_ERROR(inner_window->IDStack.back() == table->ID + table->InstanceCurrent, "Mismatching PushID/PopID!");
    IM_ASSERT_USER_ERROR(outer_window->DC.ItemWidthStack.Size >= table->HostBackupItemWidthStackSize, "Too many PopItemWidth!");
    PopID();

    // Restore window data that we modified
    const ImVec2 backup_outer_max_pos = outer_window->DC.CursorMaxPos;
    inner_window->WorkRect = table->HostBackupWorkRect;
    inner_window->ParentWorkRect = table->HostBackupParentWorkRect;
    inner_window->SkipItems = table->HostSkipItems;
    outer_window->DC.CursorPos = table->OuterRect.Min;
    outer_window->DC.ItemWidth = table->HostBackupItemWidth;
    outer_window->DC.ItemWidthStack.Size = table->HostBackupItemWidthStackSize;
    outer_window->DC.ColumnsOffset = table->HostBackupColumnsOffset;

    // Layout in outer window
    // (FIXME: To allow auto-fit and allow desirable effect of SameLine() we dissociate 'used' vs 'ideal' size by overriding
    // CursorPosPrevLine and CursorMaxPos manually. That should be a more general layout feature, see same problem e.g. #3414)
    if (inner_window != outer_window)
    {
        EndChild();
    }
    else
    {
        ItemSize(table->OuterRect.GetSize());
        ItemAdd(table->OuterRect, 0);
    }

    // Override declared contents width/height to enable auto-resize while not needlessly adding a scrollbar
    if (table->Flags & ImGuiTableFlags_NoHostExtendX)
    {
        // FIXME-TABLE: Could we remove this section?
        // ColumnsAutoFitWidth may be one frame ahead here since for Fixed+NoResize is calculated from latest contents
        IM_ASSERT((table->Flags & ImGuiTableFlags_ScrollX) == 0);
        outer_window->DC.CursorMaxPos.x = ImMax(backup_outer_max_pos.x, table->OuterRect.Min.x + table->ColumnsAutoFitWidth);
    }
    else if (table->UserOuterSize.x <= 0.0f)
    {
        const float decoration_size = (table->Flags & ImGuiTableFlags_ScrollX) ? inner_window->ScrollbarSizes.x : 0.0f;
        outer_window->DC.IdealMaxPos.x = ImMax(outer_window->DC.IdealMaxPos.x, table->OuterRect.Min.x + table->ColumnsAutoFitWidth + decoration_size - table->UserOuterSize.x);
        outer_window->DC.CursorMaxPos.x = ImMax(backup_outer_max_pos.x, ImMin(table->OuterRect.Max.x, table->OuterRect.Min.x + table->ColumnsAutoFitWidth));
    }
    else
    {
        outer_window->DC.CursorMaxPos.x = ImMax(backup_outer_max_pos.x, table->OuterRect.Max.x);
    }
    if (table->UserOuterSize.y <= 0.0f)
    {
        const float decoration_size = (table->Flags & ImGuiTableFlags_ScrollY) ? inner_window->ScrollbarSizes.y : 0.0f;
        outer_window->DC.IdealMaxPos.y = ImMax(outer_window->DC.IdealMaxPos.y, inner_content_max_y + decoration_size - table->UserOuterSize.y);
        outer_window->DC.CursorMaxPos.y = ImMax(backup_outer_max_pos.y, ImMin(table->OuterRect.Max.y, inner_content_max_y));
    }
    else
    {
        // OuterRect.Max.y may already have been pushed downward from the initial value (unless ImGuiTableFlags_NoHostExtendY is set)
        outer_window->DC.CursorMaxPos.y = ImMax(backup_outer_max_pos.y, table->OuterRect.Max.y);
    }

    // Save settings
    if (table->IsSettingsDirty)
        TableSaveSettings(table);
    table->IsInitializing = false;

    // Clear or restore current table, if any
    IM_ASSERT(g.CurrentWindow == outer_window && g.CurrentTable == table);
    g.CurrentTableStack.pop_back();
    g.CurrentTable = g.CurrentTableStack.Size ? g.Tables.GetByIndex(g.CurrentTableStack.back().Index) : NULL;
    outer_window->DC.CurrentTableIdx = g.CurrentTable ? g.Tables.GetIndex(g.CurrentTable) : -1;
}

// See "COLUMN SIZING POLICIES" comments at the top of this file
// If (init_width_or_weight <= 0.0f) it is ignored
void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && "Need to call TableSetupColumn() after BeginTable()!");
    IM_ASSERT(table->IsLayoutLocked == false && "Need to call call TableSetupColumn() before first row!");
    IM_ASSERT((flags & ImGuiTableColumnFlags_StatusMask_) == 0 && "Illegal to pass StatusMask values to TableSetupColumn()");
    if (table->DeclColumnsCount >= table->ColumnsCount)
    {
        IM_ASSERT_USER_ERROR(table->DeclColumnsCount < table->ColumnsCount, "Called TableSetupColumn() too many times!");
        return;
    }

    ImGuiTableColumn* column = &table->Columns[table->DeclColumnsCount];
    table->DeclColumnsCount++;

    // Assert when passing a width or weight if policy is entirely left to default, to avoid storing width into weight and vice-versa.
    // Give a grace to users of ImGuiTableFlags_ScrollX.
    if (table->IsDefaultSizingPolicy && (flags & ImGuiTableColumnFlags_WidthMask_) == 0 && (flags & ImGuiTableFlags_ScrollX) == 0)
        IM_ASSERT(init_width_or_weight <= 0.0f && "Can only specify width/weight if sizing policy is set explicitly in either Table or Column.");

    // When passing a width automatically enforce WidthFixed policy
    // (whereas TableSetupColumnFlags would default to WidthAuto if table is not Resizable)
    if ((flags & ImGuiTableColumnFlags_WidthMask_) == 0 && init_width_or_weight > 0.0f)
        if ((table->Flags & ImGuiTableFlags_SizingMask_) == ImGuiTableFlags_SizingFixedFit || (table->Flags & ImGuiTableFlags_SizingMask_) == ImGuiTableFlags_SizingFixedSame)
            flags |= ImGuiTableColumnFlags_WidthFixed;

    TableSetupColumnFlags(table, column, flags);
    column->UserID = user_id;
    flags = column->Flags;

    // Initialize defaults
    column->InitStretchWeightOrWidth = init_width_or_weight;
    if (table->IsInitializing)
    {
        // Init width or weight
        if (column->WidthRequest < 0.0f && column->StretchWeight < 0.0f)
        {
            if ((flags & ImGuiTableColumnFlags_WidthFixed) && init_width_or_weight > 0.0f)
                column->WidthRequest = init_width_or_weight;
            if (flags & ImGuiTableColumnFlags_WidthStretch)
                column->StretchWeight = (init_width_or_weight > 0.0f) ? init_width_or_weight : -1.0f;

            // Disable auto-fit if an explicit width/weight has been specified
            if (init_width_or_weight > 0.0f)
                column->AutoFitQueue = 0x00;
        }

        // Init default visibility/sort state
        if ((flags & ImGuiTableColumnFlags_DefaultHide) && (table->SettingsLoadedFlags & ImGuiTableFlags_Hideable) == 0)
            column->IsEnabled = column->IsEnabledNextFrame = false;
        if (flags & ImGuiTableColumnFlags_DefaultSort && (table->SettingsLoadedFlags & ImGuiTableFlags_Sortable) == 0)
        {
            column->SortOrder = 0; // Multiple columns using _DefaultSort will be reassigned unique SortOrder values when building the sort specs.
            column->SortDirection = (column->Flags & ImGuiTableColumnFlags_PreferSortDescending) ? (ImS8)ImGuiSortDirection_Descending : (ImU8)(ImGuiSortDirection_Ascending);
        }
    }

    // Store name (append with zero-terminator in contiguous buffer)
    column->NameOffset = -1;
    if (label != NULL && label[0] != 0)
    {
        column->NameOffset = (ImS16)table->ColumnsNames.size();
        table->ColumnsNames.append(label, label + strlen(label) + 1);
    }
}

// [Public]
void ImGui::TableSetupScrollFreeze(int columns, int rows)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && "Need to call TableSetupColumn() after BeginTable()!");
    IM_ASSERT(table->IsLayoutLocked == false && "Need to call TableSetupColumn() before first row!");
    IM_ASSERT(columns >= 0 && columns < IMGUI_TABLE_MAX_COLUMNS);
    IM_ASSERT(rows >= 0 && rows < 128); // Arbitrary limit

    table->FreezeColumnsRequest = (table->Flags & ImGuiTableFlags_ScrollX) ? (ImGuiTableColumnIdx)columns : 0;
    table->FreezeColumnsCount = (table->InnerWindow->Scroll.x != 0.0f) ? table->FreezeColumnsRequest : 0;
    table->FreezeRowsRequest = (table->Flags & ImGuiTableFlags_ScrollY) ? (ImGuiTableColumnIdx)rows : 0;
    table->FreezeRowsCount = (table->InnerWindow->Scroll.y != 0.0f) ? table->FreezeRowsRequest : 0;
    table->IsUnfrozenRows = (table->FreezeRowsCount == 0); // Make sure this is set before TableUpdateLayout() so ImGuiListClipper can benefit from it.b
}

//-----------------------------------------------------------------------------
// [SECTION] Tables: Simple accessors
//-----------------------------------------------------------------------------
// - TableGetColumnCount()
// - TableGetColumnName()
// - TableGetColumnName() [Internal]
// - TableSetColumnEnabled() [Internal]
// - TableGetColumnFlags()
// - TableGetCellBgRect() [Internal]
// - TableGetColumnResizeID() [Internal]
// - TableGetHoveredColumn() [Internal]
// - TableSetBgColor()
//-----------------------------------------------------------------------------

int ImGui::TableGetColumnCount()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    return table ? table->ColumnsCount : 0;
}

const char* ImGui::TableGetColumnName(int column_n)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return NULL;
    if (column_n < 0)
        column_n = table->CurrentColumn;
    return TableGetColumnName(table, column_n);
}

const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)
{
    if (table->IsLayoutLocked == false && column_n >= table->DeclColumnsCount)
        return ""; // NameOffset is invalid at this point
    const ImGuiTableColumn* column = &table->Columns[column_n];
    if (column->NameOffset == -1)
        return "";
    return &table->ColumnsNames.Buf[column->NameOffset];
}

// Request enabling/disabling a column (often perceived as "showing/hiding" from users point of view)
// Note that end-user can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
// Request will be applied during next layout, which happens on the first call to TableNextRow() after BeginTable()
// For the getter you can use (TableGetColumnFlags() & ImGuiTableColumnFlags_IsEnabled)
void ImGui::TableSetColumnEnabled(int column_n, bool enabled)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL);
    if (!table)
        return;
    if (column_n < 0)
        column_n = table->CurrentColumn;
    IM_ASSERT(column_n >= 0 && column_n < table->ColumnsCount);
    ImGuiTableColumn* column = &table->Columns[column_n];
    column->IsEnabledNextFrame = enabled;
}

// We allow querying for an extra column in order to poll the IsHovered state of the right-most section
ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return ImGuiTableColumnFlags_None;
    if (column_n < 0)
        column_n = table->CurrentColumn;
    if (column_n == table->ColumnsCount)
        return (table->HoveredColumnBody == column_n) ? ImGuiTableColumnFlags_IsHovered : ImGuiTableColumnFlags_None;
    return table->Columns[column_n].Flags;
}

// Return the cell rectangle based on currently known height.
// - Important: we generally don't know our row height until the end of the row, so Max.y will be incorrect in many situations.
//   The only case where this is correct is if we provided a min_row_height to TableNextRow() and don't go below it.
// - Important: if ImGuiTableFlags_PadOuterX is set but ImGuiTableFlags_PadInnerX is not set, the outer-most left and right
//   columns report a small offset so their CellBgRect can extend up to the outer border.
ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)
{
    const ImGuiTableColumn* column = &table->Columns[column_n];
    float x1 = column->MinX;
    float x2 = column->MaxX;
    if (column->PrevEnabledColumn == -1)
        x1 -= table->CellSpacingX1;
    if (column->NextEnabledColumn == -1)
        x2 += table->CellSpacingX2;
    return ImRect(x1, table->RowPosY1, x2, table->RowPosY2);
}

// Return the resizing ID for the right-side of the given column.
ImGuiID ImGui::TableGetColumnResizeID(const ImGuiTable* table, int column_n, int instance_no)
{
    IM_ASSERT(column_n >= 0 && column_n < table->ColumnsCount);
    ImGuiID id = table->ID + 1 + (instance_no * table->ColumnsCount) + column_n;
    return id;
}

// Return -1 when table is not hovered. return columns_count if the unused space at the right of visible columns is hovered.
int ImGui::TableGetHoveredColumn()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return -1;
    return (int)table->HoveredColumnBody;
}

void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(target != ImGuiTableBgTarget_None);

    if (color == IM_COL32_DISABLE)
        color = 0;

    // We cannot draw neither the cell or row background immediately as we don't know the row height at this point in time.
    switch (target)
    {
    case ImGuiTableBgTarget_CellBg:
    {
        if (table->RowPosY1 > table->InnerClipRect.Max.y) // Discard
            return;
        if (column_n == -1)
            column_n = table->CurrentColumn;
        if ((table->VisibleMaskByIndex & ((ImU64)1 << column_n)) == 0)
            return;
        if (table->RowCellDataCurrent < 0 || table->RowCellData[table->RowCellDataCurrent].Column != column_n)
            table->RowCellDataCurrent++;
        ImGuiTableCellData* cell_data = &table->RowCellData[table->RowCellDataCurrent];
        cell_data->BgColor = color;
        cell_data->Column = (ImGuiTableColumnIdx)column_n;
        break;
    }
    case ImGuiTableBgTarget_RowBg0:
    case ImGuiTableBgTarget_RowBg1:
    {
        if (table->RowPosY1 > table->InnerClipRect.Max.y) // Discard
            return;
        IM_ASSERT(column_n == -1);
        int bg_idx = (target == ImGuiTableBgTarget_RowBg1) ? 1 : 0;
        table->RowBgColor[bg_idx] = color;
        break;
    }
    default:
        IM_ASSERT(0);
    }
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Row changes
//-------------------------------------------------------------------------
// - TableGetRowIndex()
// - TableNextRow()
// - TableBeginRow() [Internal]
// - TableEndRow() [Internal]
//-------------------------------------------------------------------------

// [Public] Note: for row coloring we use ->RowBgColorCounter which is the same value without counting header rows
int ImGui::TableGetRowIndex()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return 0;
    return table->CurrentRow;
}

// [Public] Starts into the first cell of a new row
void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;

    if (!table->IsLayoutLocked)
        TableUpdateLayout(table);
    if (table->IsInsideRow)
        TableEndRow(table);

    table->LastRowFlags = table->RowFlags;
    table->RowFlags = row_flags;
    table->RowMinHeight = row_min_height;
    TableBeginRow(table);

    // We honor min_row_height requested by user, but cannot guarantee per-row maximum height,
    // because that would essentially require a unique clipping rectangle per-cell.
    table->RowPosY2 += table->CellPaddingY * 2.0f;
    table->RowPosY2 = ImMax(table->RowPosY2, table->RowPosY1 + row_min_height);

    // Disable output until user calls TableNextColumn()
    table->InnerWindow->SkipItems = true;
}

// [Internal] Called by TableNextRow()
void ImGui::TableBeginRow(ImGuiTable* table)
{
    ImGuiWindow* window = table->InnerWindow;
    IM_ASSERT(!table->IsInsideRow);

    // New row
    table->CurrentRow++;
    table->CurrentColumn = -1;
    table->RowBgColor[0] = table->RowBgColor[1] = IM_COL32_DISABLE;
    table->RowCellDataCurrent = -1;
    table->IsInsideRow = true;

    // Begin frozen rows
    float next_y1 = table->RowPosY2;
    if (table->CurrentRow == 0 && table->FreezeRowsCount > 0)
        next_y1 = window->DC.CursorPos.y = table->OuterRect.Min.y;

    table->RowPosY1 = table->RowPosY2 = next_y1;
    table->RowTextBaseline = 0.0f;
    table->RowIndentOffsetX = window->DC.Indent.x - table->HostIndentX; // Lock indent
    window->DC.PrevLineTextBaseOffset = 0.0f;
    window->DC.CursorMaxPos.y = next_y1;

    // Making the header BG color non-transparent will allow us to overlay it multiple times when handling smooth dragging.
    if (table->RowFlags & ImGuiTableRowFlags_Headers)
    {
        TableSetBgColor(ImGuiTableBgTarget_RowBg0, GetColorU32(ImGuiCol_TableHeaderBg));
        if (table->CurrentRow == 0)
            table->IsUsingHeaders = true;
    }
}

// [Internal] Called by TableNextRow()
void ImGui::TableEndRow(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(window == table->InnerWindow);
    IM_ASSERT(table->IsInsideRow);

    if (table->CurrentColumn != -1)
        TableEndCell(table);

    // Logging
    if (g.LogEnabled)
        LogRenderedText(NULL, "|");

    // Position cursor at the bottom of our row so it can be used for e.g. clipping calculation. However it is
    // likely that the next call to TableBeginCell() will reposition the cursor to take account of vertical padding.
    window->DC.CursorPos.y = table->RowPosY2;

    // Row background fill
    const float bg_y1 = table->RowPosY1;
    const float bg_y2 = table->RowPosY2;
    const bool unfreeze_rows_actual = (table->CurrentRow + 1 == table->FreezeRowsCount);
    const bool unfreeze_rows_request = (table->CurrentRow + 1 == table->FreezeRowsRequest);
    if (table->CurrentRow == 0)
        table->LastFirstRowHeight = bg_y2 - bg_y1;

    const bool is_visible = (bg_y2 >= table->InnerClipRect.Min.y && bg_y1 <= table->InnerClipRect.Max.y);
    if (is_visible)
    {
        // Decide of background color for the row
        ImU32 bg_col0 = 0;
        ImU32 bg_col1 = 0;
        if (table->RowBgColor[0] != IM_COL32_DISABLE)
            bg_col0 = table->RowBgColor[0];
        else if (table->Flags & ImGuiTableFlags_RowBg)
            bg_col0 = GetColorU32((table->RowBgColorCounter & 1) ? ImGuiCol_TableRowBgAlt : ImGuiCol_TableRowBg);
        if (table->RowBgColor[1] != IM_COL32_DISABLE)
            bg_col1 = table->RowBgColor[1];

        // Decide of top border color
        ImU32 border_col = 0;
        const float border_size = TABLE_BORDER_SIZE;
        if (table->CurrentRow > 0 || table->InnerWindow == table->OuterWindow)
            if (table->Flags & ImGuiTableFlags_BordersInnerH)
                border_col = (table->LastRowFlags & ImGuiTableRowFlags_Headers) ? table->BorderColorStrong : table->BorderColorLight;

        const bool draw_cell_bg_color = table->RowCellDataCurrent >= 0;
        const bool draw_strong_bottom_border = unfreeze_rows_actual;
        if ((bg_col0 | bg_col1 | border_col) != 0 || draw_strong_bottom_border || draw_cell_bg_color)
        {
            // In theory we could call SetWindowClipRectBeforeSetChannel() but since we know TableEndRow() is
            // always followed by a change of clipping rectangle we perform the smallest overwrite possible here.
            if ((table->Flags & ImGuiTableFlags_NoClip) == 0)
                window->DrawList->_CmdHeader.ClipRect = table->Bg0ClipRectForDrawCmd.ToVec4();
            table->DrawSplitter.SetCurrentChannel(window->DrawList, TABLE_DRAW_CHANNEL_BG0);
        }

        // Draw row background
        // We soft/cpu clip this so all backgrounds and borders can share the same clipping rectangle
        if (bg_col0 || bg_col1)
        {
            ImRect row_rect(table->WorkRect.Min.x, bg_y1, table->WorkRect.Max.x, bg_y2);
            row_rect.ClipWith(table->BgClipRect);
            if (bg_col0 != 0 && row_rect.Min.y < row_rect.Max.y)
                window->DrawList->AddRectFilled(row_rect.Min, row_rect.Max, bg_col0);
            if (bg_col1 != 0 && row_rect.Min.y < row_rect.Max.y)
                window->DrawList->AddRectFilled(row_rect.Min, row_rect.Max, bg_col1);
        }

        // Draw cell background color
        if (draw_cell_bg_color)
        {
            ImGuiTableCellData* cell_data_end = &table->RowCellData[table->RowCellDataCurrent];
            for (ImGuiTableCellData* cell_data = &table->RowCellData[0]; cell_data <= cell_data_end; cell_data++)
            {
                const ImGuiTableColumn* column = &table->Columns[cell_data->Column];
                ImRect cell_bg_rect = TableGetCellBgRect(table, cell_data->Column);
                cell_bg_rect.ClipWith(table->BgClipRect);
                cell_bg_rect.Min.x = ImMax(cell_bg_rect.Min.x, column->ClipRect.Min.x);     // So that first column after frozen one gets clipped
                cell_bg_rect.Max.x = ImMin(cell_bg_rect.Max.x, column->MaxX);
                window->DrawList->AddRectFilled(cell_bg_rect.Min, cell_bg_rect.Max, cell_data->BgColor);
            }
        }

        // Draw top border
        if (border_col && bg_y1 >= table->BgClipRect.Min.y && bg_y1 < table->BgClipRect.Max.y)
            window->DrawList->AddLine(ImVec2(table->BorderX1, bg_y1), ImVec2(table->BorderX2, bg_y1), border_col, border_size);

        // Draw bottom border at the row unfreezing mark (always strong)
        if (draw_strong_bottom_border && bg_y2 >= table->BgClipRect.Min.y && bg_y2 < table->BgClipRect.Max.y)
            window->DrawList->AddLine(ImVec2(table->BorderX1, bg_y2), ImVec2(table->BorderX2, bg_y2), table->BorderColorStrong, border_size);
    }

    // End frozen rows (when we are past the last frozen row line, teleport cursor and alter clipping rectangle)
    // We need to do that in TableEndRow() instead of TableBeginRow() so the list clipper can mark end of row and
    // get the new cursor position.
    if (unfreeze_rows_request)
        for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        {
            ImGuiTableColumn* column = &table->Columns[column_n];
            column->NavLayerCurrent = (ImS8)((column_n < table->FreezeColumnsCount) ? ImGuiNavLayer_Menu : ImGuiNavLayer_Main);
        }
    if (unfreeze_rows_actual)
    {
        IM_ASSERT(table->IsUnfrozenRows == false);
        table->IsUnfrozenRows = true;

        // BgClipRect starts as table->InnerClipRect, reduce it now and make BgClipRectForDrawCmd == BgClipRect
        float y0 = ImMax(table->RowPosY2 + 1, window->InnerClipRect.Min.y);
        table->BgClipRect.Min.y = table->Bg2ClipRectForDrawCmd.Min.y = ImMin(y0, window->InnerClipRect.Max.y);
        table->BgClipRect.Max.y = table->Bg2ClipRectForDrawCmd.Max.y = window->InnerClipRect.Max.y;
        table->Bg2DrawChannelCurrent = table->Bg2DrawChannelUnfrozen;
        IM_ASSERT(table->Bg2ClipRectForDrawCmd.Min.y <= table->Bg2ClipRectForDrawCmd.Max.y);

        float row_height = table->RowPosY2 - table->RowPosY1;
        table->RowPosY2 = window->DC.CursorPos.y = table->WorkRect.Min.y + table->RowPosY2 - table->OuterRect.Min.y;
        table->RowPosY1 = table->RowPosY2 - row_height;
        for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        {
            ImGuiTableColumn* column = &table->Columns[column_n];
            column->DrawChannelCurrent = column->DrawChannelUnfrozen;
            column->ClipRect.Min.y = table->Bg2ClipRectForDrawCmd.Min.y;
        }

        // Update cliprect ahead of TableBeginCell() so clipper can access to new ClipRect->Min.y
        SetWindowClipRectBeforeSetChannel(window, table->Columns[0].ClipRect);
        table->DrawSplitter.SetCurrentChannel(window->DrawList, table->Columns[0].DrawChannelCurrent);
    }

    if (!(table->RowFlags & ImGuiTableRowFlags_Headers))
        table->RowBgColorCounter++;
    table->IsInsideRow = false;
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Columns changes
//-------------------------------------------------------------------------
// - TableGetColumnIndex()
// - TableSetColumnIndex()
// - TableNextColumn()
// - TableBeginCell() [Internal]
// - TableEndCell() [Internal]
//-------------------------------------------------------------------------

int ImGui::TableGetColumnIndex()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return 0;
    return table->CurrentColumn;
}

// [Public] Append into a specific column
bool ImGui::TableSetColumnIndex(int column_n)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return false;

    if (table->CurrentColumn != column_n)
    {
        if (table->CurrentColumn != -1)
            TableEndCell(table);
        IM_ASSERT(column_n >= 0 && table->ColumnsCount);
        TableBeginCell(table, column_n);
    }

    // Return whether the column is visible. User may choose to skip submitting items based on this return value,
    // however they shouldn't skip submitting for columns that may have the tallest contribution to row height.
    return (table->RequestOutputMaskByIndex & ((ImU64)1 << column_n)) != 0;
}

// [Public] Append into the next column, wrap and create a new row when already on last column
bool ImGui::TableNextColumn()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (!table)
        return false;

    if (table->IsInsideRow && table->CurrentColumn + 1 < table->ColumnsCount)
    {
        if (table->CurrentColumn != -1)
            TableEndCell(table);
        TableBeginCell(table, table->CurrentColumn + 1);
    }
    else
    {
        TableNextRow();
        TableBeginCell(table, 0);
    }

    // Return whether the column is visible. User may choose to skip submitting items based on this return value,
    // however they shouldn't skip submitting for columns that may have the tallest contribution to row height.
    int column_n = table->CurrentColumn;
    return (table->RequestOutputMaskByIndex & ((ImU64)1 << column_n)) != 0;
}


// [Internal] Called by TableSetColumnIndex()/TableNextColumn()
// This is called very frequently, so we need to be mindful of unnecessary overhead.
// FIXME-TABLE FIXME-OPT: Could probably shortcut some things for non-active or clipped columns.
void ImGui::TableBeginCell(ImGuiTable* table, int column_n)
{
    ImGuiTableColumn* column = &table->Columns[column_n];
    ImGuiWindow* window = table->InnerWindow;
    table->CurrentColumn = column_n;

    // Start position is roughly ~~ CellRect.Min + CellPadding + Indent
    float start_x = column->WorkMinX;
    if (column->Flags & ImGuiTableColumnFlags_IndentEnable)
        start_x += table->RowIndentOffsetX; // ~~ += window.DC.Indent.x - table->HostIndentX, except we locked it for the row.

    window->DC.CursorPos.x = start_x;
    window->DC.CursorPos.y = table->RowPosY1 + table->CellPaddingY;
    window->DC.CursorMaxPos.x = window->DC.CursorPos.x;
    window->DC.ColumnsOffset.x = start_x - window->Pos.x - window->DC.Indent.x; // FIXME-WORKRECT
    window->DC.CurrLineTextBaseOffset = table->RowTextBaseline;
    window->DC.NavLayerCurrent = (ImGuiNavLayer)column->NavLayerCurrent;

    window->WorkRect.Min.y = window->DC.CursorPos.y;
    window->WorkRect.Min.x = column->WorkMinX;
    window->WorkRect.Max.x = column->WorkMaxX;
    window->DC.ItemWidth = column->ItemWidth;

    // To allow ImGuiListClipper to function we propagate our row height
    if (!column->IsEnabled)
        window->DC.CursorPos.y = ImMax(window->DC.CursorPos.y, table->RowPosY2);

    window->SkipItems = column->IsSkipItems;
    if (column->IsSkipItems)
    {
        window->DC.LastItemId = 0;
        window->DC.LastItemStatusFlags = 0;
    }

    if (table->Flags & ImGuiTableFlags_NoClip)
    {
        // FIXME: if we end up drawing all borders/bg in EndTable, could remove this and just assert that channel hasn't changed.
        table->DrawSplitter.SetCurrentChannel(window->DrawList, TABLE_DRAW_CHANNEL_NOCLIP);
        //IM_ASSERT(table->DrawSplitter._Current == TABLE_DRAW_CHANNEL_NOCLIP);
    }
    else
    {
        // FIXME-TABLE: Could avoid this if draw channel is dummy channel?
        SetWindowClipRectBeforeSetChannel(window, column->ClipRect);
        table->DrawSplitter.SetCurrentChannel(window->DrawList, column->DrawChannelCurrent);
    }

    // Logging
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled && !column->IsSkipItems)
    {
        LogRenderedText(&window->DC.CursorPos, "|");
        g.LogLinePosY = FLT_MAX;
    }
}

// [Internal] Called by TableNextRow()/TableSetColumnIndex()/TableNextColumn()
void ImGui::TableEndCell(ImGuiTable* table)
{
    ImGuiTableColumn* column = &table->Columns[table->CurrentColumn];
    ImGuiWindow* window = table->InnerWindow;

    // Report maximum position so we can infer content size per column.
    float* p_max_pos_x;
    if (table->RowFlags & ImGuiTableRowFlags_Headers)
        p_max_pos_x = &column->ContentMaxXHeadersUsed;  // Useful in case user submit contents in header row that is not a TableHeader() call
    else
        p_max_pos_x = table->IsUnfrozenRows ? &column->ContentMaxXUnfrozen : &column->ContentMaxXFrozen;
    *p_max_pos_x = ImMax(*p_max_pos_x, window->DC.CursorMaxPos.x);
    table->RowPosY2 = ImMax(table->RowPosY2, window->DC.CursorMaxPos.y + table->CellPaddingY);
    column->ItemWidth = window->DC.ItemWidth;

    // Propagate text baseline for the entire row
    // FIXME-TABLE: Here we propagate text baseline from the last line of the cell.. instead of the first one.
    table->RowTextBaseline = ImMax(table->RowTextBaseline, window->DC.PrevLineTextBaseOffset);
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Columns width management
//-------------------------------------------------------------------------
// - TableGetMaxColumnWidth() [Internal]
// - TableGetColumnWidthAuto() [Internal]
// - TableSetColumnWidth()
// - TableSetColumnWidthAutoSingle() [Internal]
// - TableSetColumnWidthAutoAll() [Internal]
// - TableUpdateColumnsWeightFromWidth() [Internal]
//-------------------------------------------------------------------------

// Maximum column content width given current layout. Use column->MinX so this value on a per-column basis.
float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)
{
    const ImGuiTableColumn* column = &table->Columns[column_n];
    float max_width = FLT_MAX;
    const float min_column_distance = table->MinColumnWidth + table->CellPaddingX * 2.0f + table->CellSpacingX1 + table->CellSpacingX2;
    if (table->Flags & ImGuiTableFlags_ScrollX)
    {
        // Frozen columns can't reach beyond visible width else scrolling will naturally break.
        if (column->DisplayOrder < table->FreezeColumnsRequest)
        {
            max_width = (table->InnerClipRect.Max.x - (table->FreezeColumnsRequest - column->DisplayOrder) * min_column_distance) - column->MinX;
            max_width = max_width - table->OuterPaddingX - table->CellPaddingX - table->CellSpacingX2;
        }
    }
    else if ((table->Flags & ImGuiTableFlags_NoKeepColumnsVisible) == 0)
    {
        // If horizontal scrolling if disabled, we apply a final lossless shrinking of columns in order to make
        // sure they are all visible. Because of this we also know that all of the columns will always fit in
        // table->WorkRect and therefore in table->InnerRect (because ScrollX is off)
        // FIXME-TABLE: This is solved incorrectly but also quite a difficult problem to fix as we also want ClipRect width to match.
        // See "table_width_distrib" and "table_width_keep_visible" tests
        max_width = table->WorkRect.Max.x - (table->ColumnsEnabledCount - column->IndexWithinEnabledSet - 1) * min_column_distance - column->MinX;
        //max_width -= table->CellSpacingX1;
        max_width -= table->CellSpacingX2;
        max_width -= table->CellPaddingX * 2.0f;
        max_width -= table->OuterPaddingX;
    }
    return max_width;
}

// Note this is meant to be stored in column->WidthAuto, please generally use the WidthAuto field
float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)
{
    const float content_width_body = ImMax(column->ContentMaxXFrozen, column->ContentMaxXUnfrozen) - column->WorkMinX;
    const float content_width_headers = column->ContentMaxXHeadersIdeal - column->WorkMinX;
    float width_auto = content_width_body;
    if (!(column->Flags & ImGuiTableColumnFlags_NoHeaderWidth))
        width_auto = ImMax(width_auto, content_width_headers);

    // Non-resizable fixed columns preserve their requested width
    if ((column->Flags & ImGuiTableColumnFlags_WidthFixed) && column->InitStretchWeightOrWidth > 0.0f)
        if (!(table->Flags & ImGuiTableFlags_Resizable) || (column->Flags & ImGuiTableColumnFlags_NoResize))
            width_auto = column->InitStretchWeightOrWidth;

    return ImMax(width_auto, table->MinColumnWidth);
}

// 'width' = inner column width, without padding
void ImGui::TableSetColumnWidth(int column_n, float width)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && table->IsLayoutLocked == false);
    IM_ASSERT(column_n >= 0 && column_n < table->ColumnsCount);
    ImGuiTableColumn* column_0 = &table->Columns[column_n];
    float column_0_width = width;

    // Apply constraints early
    // Compare both requested and actual given width to avoid overwriting requested width when column is stuck (minimum size, bounded)
    IM_ASSERT(table->MinColumnWidth > 0.0f);
    const float min_width = table->MinColumnWidth;
    const float max_width = ImMax(min_width, TableGetMaxColumnWidth(table, column_n));
    column_0_width = ImClamp(column_0_width, min_width, max_width);
    if (column_0->WidthGiven == column_0_width || column_0->WidthRequest == column_0_width)
        return;

    //IMGUI_DEBUG_LOG("TableSetColumnWidth(%d, %.1f->%.1f)\n", column_0_idx, column_0->WidthGiven, column_0_width);
    ImGuiTableColumn* column_1 = (column_0->NextEnabledColumn != -1) ? &table->Columns[column_0->NextEnabledColumn] : NULL;

    // In this surprisingly not simple because of how we support mixing Fixed and multiple Stretch columns.
    // - All fixed: easy.
    // - All stretch: easy.
    // - One or more fixed + one stretch: easy.
    // - One or more fixed + more than one stretch: tricky.
    // Qt when manual resize is enabled only support a single _trailing_ stretch column.

    // When forwarding resize from Wn| to Fn+1| we need to be considerate of the _NoResize flag on Fn+1.
    // FIXME-TABLE: Find a way to rewrite all of this so interactions feel more consistent for the user.
    // Scenarios:
    // - F1 F2 F3  resize from F1| or F2|   --> ok: alter ->WidthRequested of Fixed column. Subsequent columns will be offset.
    // - F1 F2 F3  resize from F3|          --> ok: alter ->WidthRequested of Fixed column. If active, ScrollX extent can be altered.
    // - F1 F2 W3  resize from F1| or F2|   --> ok: alter ->WidthRequested of Fixed column. If active, ScrollX extent can be altered, but it doesn't make much sense as the Stretch column will always be minimal size.
    // - F1 F2 W3  resize from W3|          --> ok: no-op (disabled by Resize Rule 1)
    // - W1 W2 W3  resize from W1| or W2|   --> ok
    // - W1 W2 W3  resize from W3|          --> ok: no-op (disabled by Resize Rule 1)
    // - W1 F2 F3  resize from F3|          --> ok: no-op (disabled by Resize Rule 1)
    // - W1 F2     resize from F2|          --> ok: no-op (disabled by Resize Rule 1)
    // - W1 W2 F3  resize from W1| or W2|   --> ok
    // - W1 F2 W3  resize from W1| or F2|   --> ok
    // - F1 W2 F3  resize from W2|          --> ok
    // - F1 W3 F2  resize from W3|          --> ok
    // - W1 F2 F3  resize from W1|          --> ok: equivalent to resizing |F2. F3 will not move.
    // - W1 F2 F3  resize from F2|          --> ok
    // All resizes from a Wx columns are locking other columns.

    // Possible improvements:
    // - W1 W2 W3  resize W1|               --> to not be stuck, both W2 and W3 would stretch down. Seems possible to fix. Would be most beneficial to simplify resize of all-weighted columns.
    // - W3 F1 F2  resize W3|               --> to not be stuck past F1|, both F1 and F2 would need to stretch down, which would be lossy or ambiguous. Seems hard to fix.

    // [Resize Rule 1] Can't resize from right of right-most visible column if there is any Stretch column. Implemented in TableUpdateLayout().

    // If we have all Fixed columns OR resizing a Fixed column that doesn't come after a Stretch one, we can do an offsetting resize.
    // This is the preferred resize path
    if (column_0->Flags & ImGuiTableColumnFlags_WidthFixed)
        if (!column_1 || table->LeftMostStretchedColumn == -1 || table->Columns[table->LeftMostStretchedColumn].DisplayOrder >= column_0->DisplayOrder)
        {
            column_0->WidthRequest = column_0_width;
            table->IsSettingsDirty = true;
            return;
        }

    // We can also use previous column if there's no next one (this is used when doing an auto-fit on the right-most stretch column)
    if (column_1 == NULL)
        column_1 = (column_0->PrevEnabledColumn != -1) ? &table->Columns[column_0->PrevEnabledColumn] : NULL;
    if (column_1 == NULL)
        return;

    // Resizing from right-side of a Stretch column before a Fixed column forward sizing to left-side of fixed column.
    // (old_a + old_b == new_a + new_b) --> (new_a == old_a + old_b - new_b)
    float column_1_width = ImMax(column_1->WidthRequest - (column_0_width - column_0->WidthRequest), min_width);
    column_0_width = column_0->WidthRequest + column_1->WidthRequest - column_1_width;
    IM_ASSERT(column_0_width > 0.0f && column_1_width > 0.0f);
    column_0->WidthRequest = column_0_width;
    column_1->WidthRequest = column_1_width;
    if ((column_0->Flags | column_1->Flags) & ImGuiTableColumnFlags_WidthStretch)
        TableUpdateColumnsWeightFromWidth(table);
    table->IsSettingsDirty = true;
}

// Disable clipping then auto-fit, will take 2 frames
// (we don't take a shortcut for unclipped columns to reduce inconsistencies when e.g. resizing multiple columns)
void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)
{
    // Single auto width uses auto-fit
    ImGuiTableColumn* column = &table->Columns[column_n];
    if (!column->IsEnabled)
        return;
    column->CannotSkipItemsQueue = (1 << 0);
    table->AutoFitSingleColumn = (ImGuiTableColumnIdx)column_n;
}

void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)
{
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (!column->IsEnabled && !(column->Flags & ImGuiTableColumnFlags_WidthStretch)) // Cannot reset weight of hidden stretch column
            continue;
        column->CannotSkipItemsQueue = (1 << 0);
        column->AutoFitQueue = (1 << 1);
    }
}

void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)
{
    IM_ASSERT(table->LeftMostStretchedColumn != -1 && table->RightMostStretchedColumn != -1);

    // Measure existing quantity
    float visible_weight = 0.0f;
    float visible_width = 0.0f;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (!column->IsEnabled || !(column->Flags & ImGuiTableColumnFlags_WidthStretch))
            continue;
        IM_ASSERT(column->StretchWeight > 0.0f);
        visible_weight += column->StretchWeight;
        visible_width += column->WidthRequest;
    }
    IM_ASSERT(visible_weight > 0.0f && visible_width > 0.0f);

    // Apply new weights
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (!column->IsEnabled || !(column->Flags & ImGuiTableColumnFlags_WidthStretch))
            continue;
        column->StretchWeight = (column->WidthRequest / visible_width) * visible_weight;
        IM_ASSERT(column->StretchWeight > 0.0f);
    }
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Drawing
//-------------------------------------------------------------------------
// - TablePushBackgroundChannel() [Internal]
// - TablePopBackgroundChannel() [Internal]
// - TableSetupDrawChannels() [Internal]
// - TableMergeDrawChannels() [Internal]
// - TableDrawBorders() [Internal]
//-------------------------------------------------------------------------

// Bg2 is used by Selectable (and possibly other widgets) to render to the background.
// Unlike our Bg0/1 channel which we uses for RowBg/CellBg/Borders and where we guarantee all shapes to be CPU-clipped, the Bg2 channel being widgets-facing will rely on regular ClipRect.
void ImGui::TablePushBackgroundChannel()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiTable* table = g.CurrentTable;

    // Optimization: avoid SetCurrentChannel() + PushClipRect()
    table->HostBackupInnerClipRect = window->ClipRect;
    SetWindowClipRectBeforeSetChannel(window, table->Bg2ClipRectForDrawCmd);
    table->DrawSplitter.SetCurrentChannel(window->DrawList, table->Bg2DrawChannelCurrent);
}

void ImGui::TablePopBackgroundChannel()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiTable* table = g.CurrentTable;
    ImGuiTableColumn* column = &table->Columns[table->CurrentColumn];

    // Optimization: avoid PopClipRect() + SetCurrentChannel()
    SetWindowClipRectBeforeSetChannel(window, table->HostBackupInnerClipRect);
    table->DrawSplitter.SetCurrentChannel(window->DrawList, column->DrawChannelCurrent);
}

// Allocate draw channels. Called by TableUpdateLayout()
// - We allocate them following storage order instead of display order so reordering columns won't needlessly
//   increase overall dormant memory cost.
// - We isolate headers draw commands in their own channels instead of just altering clip rects.
//   This is in order to facilitate merging of draw commands.
// - After crossing FreezeRowsCount, all columns see their current draw channel changed to a second set of channels.
// - We only use the dummy draw channel so we can push a null clipping rectangle into it without affecting other
//   channels, while simplifying per-row/per-cell overhead. It will be empty and discarded when merged.
// - We allocate 1 or 2 background draw channels. This is because we know TablePushBackgroundChannel() is only used for
//   horizontal spanning. If we allowed vertical spanning we'd need one background draw channel per merge group (1-4).
// Draw channel allocation (before merging):
// - NoClip                       --> 2+D+1 channels: bg0/1 + bg2 + foreground (same clip rect == always 1 draw call)
// - Clip                         --> 2+D+N channels
// - FreezeRows                   --> 2+D+N*2 (unless scrolling value is zero)
// - FreezeRows || FreezeColunns  --> 3+D+N*2 (unless scrolling value is zero)
// Where D is 1 if any column is clipped or hidden (dummy channel) otherwise 0.
void ImGui::TableSetupDrawChannels(ImGuiTable* table)
{
    const int freeze_row_multiplier = (table->FreezeRowsCount > 0) ? 2 : 1;
    const int channels_for_row = (table->Flags & ImGuiTableFlags_NoClip) ? 1 : table->ColumnsEnabledCount;
    const int channels_for_bg = 1 + 1 * freeze_row_multiplier;
    const int channels_for_dummy = (table->ColumnsEnabledCount < table->ColumnsCount || table->VisibleMaskByIndex != table->EnabledMaskByIndex) ? +1 : 0;
    const int channels_total = channels_for_bg + (channels_for_row * freeze_row_multiplier) + channels_for_dummy;
    table->DrawSplitter.Split(table->InnerWindow->DrawList, channels_total);
    table->DummyDrawChannel = (ImGuiTableDrawChannelIdx)((channels_for_dummy > 0) ? channels_total - 1 : -1);
    table->Bg2DrawChannelCurrent = TABLE_DRAW_CHANNEL_BG2_FROZEN;
    table->Bg2DrawChannelUnfrozen = (ImGuiTableDrawChannelIdx)((table->FreezeRowsCount > 0) ? 2 + channels_for_row : TABLE_DRAW_CHANNEL_BG2_FROZEN);

    int draw_channel_current = 2;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (column->IsVisibleX && column->IsVisibleY)
        {
            column->DrawChannelFrozen = (ImGuiTableDrawChannelIdx)(draw_channel_current);
            column->DrawChannelUnfrozen = (ImGuiTableDrawChannelIdx)(draw_channel_current + (table->FreezeRowsCount > 0 ? channels_for_row + 1 : 0));
            if (!(table->Flags & ImGuiTableFlags_NoClip))
                draw_channel_current++;
        }
        else
        {
            column->DrawChannelFrozen = column->DrawChannelUnfrozen = table->DummyDrawChannel;
        }
        column->DrawChannelCurrent = column->DrawChannelFrozen;
    }

    // Initial draw cmd starts with a BgClipRect that matches the one of its host, to facilitate merge draw commands by default.
    // All our cell highlight are manually clipped with BgClipRect. When unfreezing it will be made smaller to fit scrolling rect.
    // (This technically isn't part of setting up draw channels, but is reasonably related to be done here)
    table->BgClipRect = table->InnerClipRect;
    table->Bg0ClipRectForDrawCmd = table->OuterWindow->ClipRect;
    table->Bg2ClipRectForDrawCmd = table->HostClipRect;
    IM_ASSERT(table->BgClipRect.Min.y <= table->BgClipRect.Max.y);
}

// This function reorder draw channels based on matching clip rectangle, to facilitate merging them. Called by EndTable().
// For simplicity we call it TableMergeDrawChannels() but in fact it only reorder channels + overwrite ClipRect,
// actual merging is done by table->DrawSplitter.Merge() which is called right after TableMergeDrawChannels().
//
// Columns where the contents didn't stray off their local clip rectangle can be merged. To achieve
// this we merge their clip rect and make them contiguous in the channel list, so they can be merged
// by the call to DrawSplitter.Merge() following to the call to this function.
// We reorder draw commands by arranging them into a maximum of 4 distinct groups:
//
//   1 group:               2 groups:              2 groups:              4 groups:
//   [ 0. ] no freeze       [ 0. ] row freeze      [ 01 ] col freeze      [ 01 ] row+col freeze
//   [ .. ]  or no scroll   [ 2. ]  and v-scroll   [ .. ]  and h-scroll   [ 23 ]  and v+h-scroll
//
// Each column itself can use 1 channel (row freeze disabled) or 2 channels (row freeze enabled).
// When the contents of a column didn't stray off its limit, we move its channels into the corresponding group
// based on its position (within frozen rows/columns groups or not).
// At the end of the operation our 1-4 groups will each have a ImDrawCmd using the same ClipRect.
// This function assume that each column are pointing to a distinct draw channel,
// otherwise merge_group->ChannelsCount will not match set bit count of merge_group->ChannelsMask.
//
// Column channels will not be merged into one of the 1-4 groups in the following cases:
// - The contents stray off its clipping rectangle (we only compare the MaxX value, not the MinX value).
//   Direct ImDrawList calls won't be taken into account by default, if you use them make sure the ImGui:: bounds
//   matches, by e.g. calling SetCursorScreenPos().
// - The channel uses more than one draw command itself. We drop all our attempt at merging stuff here..
//   we could do better but it's going to be rare and probably not worth the hassle.
// Columns for which the draw channel(s) haven't been merged with other will use their own ImDrawCmd.
//
// This function is particularly tricky to understand.. take a breath.
void ImGui::TableMergeDrawChannels(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    ImDrawListSplitter* splitter = &table->DrawSplitter;
    const bool has_freeze_v = (table->FreezeRowsCount > 0);
    const bool has_freeze_h = (table->FreezeColumnsCount > 0);
    IM_ASSERT(splitter->_Current == 0);

    // Track which groups we are going to attempt to merge, and which channels goes into each group.
    struct MergeGroup
    {
        ImRect  ClipRect;
        int     ChannelsCount;
        ImBitArray<IMGUI_TABLE_MAX_DRAW_CHANNELS> ChannelsMask;

        MergeGroup() { ChannelsCount = 0; }
    };
    int merge_group_mask = 0x00;
    MergeGroup merge_groups[4];

    // 1. Scan channels and take note of those which can be merged
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        if ((table->VisibleMaskByIndex & ((ImU64)1 << column_n)) == 0)
            continue;
        ImGuiTableColumn* column = &table->Columns[column_n];

        const int merge_group_sub_count = has_freeze_v ? 2 : 1;
        for (int merge_group_sub_n = 0; merge_group_sub_n < merge_group_sub_count; merge_group_sub_n++)
        {
            const int channel_no = (merge_group_sub_n == 0) ? column->DrawChannelFrozen : column->DrawChannelUnfrozen;

            // Don't attempt to merge if there are multiple draw calls within the column
            ImDrawChannel* src_channel = &splitter->_Channels[channel_no];
            if (src_channel->_CmdBuffer.Size > 0 && src_channel->_CmdBuffer.back().ElemCount == 0)
                src_channel->_CmdBuffer.pop_back();
            if (src_channel->_CmdBuffer.Size != 1)
                continue;

            // Find out the width of this merge group and check if it will fit in our column
            // (note that we assume that rendering didn't stray on the left direction. we should need a CursorMinPos to detect it)
            if (!(column->Flags & ImGuiTableColumnFlags_NoClip))
            {
                float content_max_x;
                if (!has_freeze_v)
                    content_max_x = ImMax(column->ContentMaxXUnfrozen, column->ContentMaxXHeadersUsed); // No row freeze
                else if (merge_group_sub_n == 0)
                    content_max_x = ImMax(column->ContentMaxXFrozen, column->ContentMaxXHeadersUsed);   // Row freeze: use width before freeze
                else
                    content_max_x = column->ContentMaxXUnfrozen;                                        // Row freeze: use width after freeze
                if (content_max_x > column->ClipRect.Max.x)
                    continue;
            }

            const int merge_group_n = (has_freeze_h && column_n < table->FreezeColumnsCount ? 0 : 1) + (has_freeze_v && merge_group_sub_n == 0 ? 0 : 2);
            IM_ASSERT(channel_no < IMGUI_TABLE_MAX_DRAW_CHANNELS);
            MergeGroup* merge_group = &merge_groups[merge_group_n];
            if (merge_group->ChannelsCount == 0)
                merge_group->ClipRect = ImRect(+FLT_MAX, +FLT_MAX, -FLT_MAX, -FLT_MAX);
            merge_group->ChannelsMask.SetBit(channel_no);
            merge_group->ChannelsCount++;
            merge_group->ClipRect.Add(src_channel->_CmdBuffer[0].ClipRect);
            merge_group_mask |= (1 << merge_group_n);
        }

        // Invalidate current draw channel
        // (we don't clear DrawChannelFrozen/DrawChannelUnfrozen solely to facilitate debugging/later inspection of data)
        column->DrawChannelCurrent = (ImGuiTableDrawChannelIdx)-1;
    }

    // [DEBUG] Display merge groups
#if 0
    if (g.IO.KeyShift)
        for (int merge_group_n = 0; merge_group_n < IM_ARRAYSIZE(merge_groups); merge_group_n++)
        {
            MergeGroup* merge_group = &merge_groups[merge_group_n];
            if (merge_group->ChannelsCount == 0)
                continue;
            char buf[32];
            ImFormatString(buf, 32, "MG%d:%d", merge_group_n, merge_group->ChannelsCount);
            ImVec2 text_pos = merge_group->ClipRect.Min + ImVec2(4, 4);
            ImVec2 text_size = CalcTextSize(buf, NULL);
            GetForegroundDrawList()->AddRectFilled(text_pos, text_pos + text_size, IM_COL32(0, 0, 0, 255));
            GetForegroundDrawList()->AddText(text_pos, IM_COL32(255, 255, 0, 255), buf, NULL);
            GetForegroundDrawList()->AddRect(merge_group->ClipRect.Min, merge_group->ClipRect.Max, IM_COL32(255, 255, 0, 255));
        }
#endif

    // 2. Rewrite channel list in our preferred order
    if (merge_group_mask != 0)
    {
        // We skip channel 0 (Bg0/Bg1) and 1 (Bg2 frozen) from the shuffling since they won't move - see channels allocation in TableSetupDrawChannels().
        const int LEADING_DRAW_CHANNELS = 2;
        g.DrawChannelsTempMergeBuffer.resize(splitter->_Count - LEADING_DRAW_CHANNELS); // Use shared temporary storage so the allocation gets amortized
        ImDrawChannel* dst_tmp = g.DrawChannelsTempMergeBuffer.Data;
        ImBitArray<IMGUI_TABLE_MAX_DRAW_CHANNELS> remaining_mask;                       // We need 132-bit of storage
        remaining_mask.SetBitRange(LEADING_DRAW_CHANNELS, splitter->_Count);
        remaining_mask.ClearBit(table->Bg2DrawChannelUnfrozen);
        IM_ASSERT(has_freeze_v == false || table->Bg2DrawChannelUnfrozen != TABLE_DRAW_CHANNEL_BG2_FROZEN);
        int remaining_count = splitter->_Count - (has_freeze_v ? LEADING_DRAW_CHANNELS + 1 : LEADING_DRAW_CHANNELS);
        //ImRect host_rect = (table->InnerWindow == table->OuterWindow) ? table->InnerClipRect : table->HostClipRect;
        ImRect host_rect = table->HostClipRect;
        for (int merge_group_n = 0; merge_group_n < IM_ARRAYSIZE(merge_groups); merge_group_n++)
        {
            if (int merge_channels_count = merge_groups[merge_group_n].ChannelsCount)
            {
                MergeGroup* merge_group = &merge_groups[merge_group_n];
                ImRect merge_clip_rect = merge_group->ClipRect;

                // Extend outer-most clip limits to match those of host, so draw calls can be merged even if
                // outer-most columns have some outer padding offsetting them from their parent ClipRect.
                // The principal cases this is dealing with are:
                // - On a same-window table (not scrolling = single group), all fitting columns ClipRect -> will extend and match host ClipRect -> will merge
                // - Columns can use padding and have left-most ClipRect.Min.x and right-most ClipRect.Max.x != from host ClipRect -> will extend and match host ClipRect -> will merge
                // FIXME-TABLE FIXME-WORKRECT: We are wasting a merge opportunity on tables without scrolling if column doesn't fit
                // within host clip rect, solely because of the half-padding difference between window->WorkRect and window->InnerClipRect.
                if ((merge_group_n & 1) == 0 || !has_freeze_h)
                    merge_clip_rect.Min.x = ImMin(merge_clip_rect.Min.x, host_rect.Min.x);
                if ((merge_group_n & 2) == 0 || !has_freeze_v)
                    merge_clip_rect.Min.y = ImMin(merge_clip_rect.Min.y, host_rect.Min.y);
                if ((merge_group_n & 1) != 0)
                    merge_clip_rect.Max.x = ImMax(merge_clip_rect.Max.x, host_rect.Max.x);
                if ((merge_group_n & 2) != 0 && (table->Flags & ImGuiTableFlags_NoHostExtendY) == 0)
                    merge_clip_rect.Max.y = ImMax(merge_clip_rect.Max.y, host_rect.Max.y);
#if 0
                GetOverlayDrawList()->AddRect(merge_group->ClipRect.Min, merge_group->ClipRect.Max, IM_COL32(255, 0, 0, 200), 0.0f, 0, 1.0f);
                GetOverlayDrawList()->AddLine(merge_group->ClipRect.Min, merge_clip_rect.Min, IM_COL32(255, 100, 0, 200));
                GetOverlayDrawList()->AddLine(merge_group->ClipRect.Max, merge_clip_rect.Max, IM_COL32(255, 100, 0, 200));
#endif
                remaining_count -= merge_group->ChannelsCount;
                for (int n = 0; n < IM_ARRAYSIZE(remaining_mask.Storage); n++)
                    remaining_mask.Storage[n] &= ~merge_group->ChannelsMask.Storage[n];
                for (int n = 0; n < splitter->_Count && merge_channels_count != 0; n++)
                {
                    // Copy + overwrite new clip rect
                    if (!merge_group->ChannelsMask.TestBit(n))
                        continue;
                    merge_group->ChannelsMask.ClearBit(n);
                    merge_channels_count--;

                    ImDrawChannel* channel = &splitter->_Channels[n];
                    IM_ASSERT(channel->_CmdBuffer.Size == 1 && merge_clip_rect.Contains(ImRect(channel->_CmdBuffer[0].ClipRect)));
                    channel->_CmdBuffer[0].ClipRect = merge_clip_rect.ToVec4();
                    memcpy(dst_tmp++, channel, sizeof(ImDrawChannel));
                }
            }

            // Make sure Bg2DrawChannelUnfrozen appears in the middle of our groups (whereas Bg0/Bg1 and Bg2 frozen are fixed to 0 and 1)
            if (merge_group_n == 1 && has_freeze_v)
                memcpy(dst_tmp++, &splitter->_Channels[table->Bg2DrawChannelUnfrozen], sizeof(ImDrawChannel));
        }

        // Append unmergeable channels that we didn't reorder at the end of the list
        for (int n = 0; n < splitter->_Count && remaining_count != 0; n++)
        {
            if (!remaining_mask.TestBit(n))
                continue;
            ImDrawChannel* channel = &splitter->_Channels[n];
            memcpy(dst_tmp++, channel, sizeof(ImDrawChannel));
            remaining_count--;
        }
        IM_ASSERT(dst_tmp == g.DrawChannelsTempMergeBuffer.Data + g.DrawChannelsTempMergeBuffer.Size);
        memcpy(splitter->_Channels.Data + LEADING_DRAW_CHANNELS, g.DrawChannelsTempMergeBuffer.Data, (splitter->_Count - LEADING_DRAW_CHANNELS) * sizeof(ImDrawChannel));
    }
}

// FIXME-TABLE: This is a mess, need to redesign how we render borders (as some are also done in TableEndRow)
void ImGui::TableDrawBorders(ImGuiTable* table)
{
    ImGuiWindow* inner_window = table->InnerWindow;
    if (!table->OuterWindow->ClipRect.Overlaps(table->OuterRect))
        return;

    ImDrawList* inner_drawlist = inner_window->DrawList;
    table->DrawSplitter.SetCurrentChannel(inner_drawlist, TABLE_DRAW_CHANNEL_BG0);
    inner_drawlist->PushClipRect(table->Bg0ClipRectForDrawCmd.Min, table->Bg0ClipRectForDrawCmd.Max, false);

    // Draw inner border and resizing feedback
    const float border_size = TABLE_BORDER_SIZE;
    const float draw_y1 = table->InnerRect.Min.y;
    const float draw_y2_body = table->InnerRect.Max.y;
    const float draw_y2_head = table->IsUsingHeaders ? ImMin(table->InnerRect.Max.y, (table->FreezeRowsCount >= 1 ? table->InnerRect.Min.y : table->WorkRect.Min.y) + table->LastFirstRowHeight) : draw_y1;
    if (table->Flags & ImGuiTableFlags_BordersInnerV)
    {
        for (int order_n = 0; order_n < table->ColumnsCount; order_n++)
        {
            if (!(table->EnabledMaskByDisplayOrder & ((ImU64)1 << order_n)))
                continue;

            const int column_n = table->DisplayOrderToIndex[order_n];
            ImGuiTableColumn* column = &table->Columns[column_n];
            const bool is_hovered = (table->HoveredColumnBorder == column_n);
            const bool is_resized = (table->ResizedColumn == column_n) && (table->InstanceInteracted == table->InstanceCurrent);
            const bool is_resizable = (column->Flags & (ImGuiTableColumnFlags_NoResize | ImGuiTableColumnFlags_NoDirectResize_)) == 0;
            const bool is_frozen_separator = (table->FreezeColumnsCount != -1 && table->FreezeColumnsCount == order_n + 1);
            if (column->MaxX > table->InnerClipRect.Max.x && !is_resized)
                continue;

            // Decide whether right-most column is visible
            if (column->NextEnabledColumn == -1 && !is_resizable)
                if ((table->Flags & ImGuiTableFlags_SizingMask_) != ImGuiTableFlags_SizingFixedSame || (table->Flags & ImGuiTableFlags_NoHostExtendX))
                    continue;
            if (column->MaxX <= column->ClipRect.Min.x) // FIXME-TABLE FIXME-STYLE: Assume BorderSize==1, this is problematic if we want to increase the border size..
                continue;

            // Draw in outer window so right-most column won't be clipped
            // Always draw full height border when being resized/hovered, or on the delimitation of frozen column scrolling.
            ImU32 col;
            float draw_y2;
            if (is_hovered || is_resized || is_frozen_separator)
            {
                draw_y2 = draw_y2_body;
                col = is_resized ? GetColorU32(ImGuiCol_SeparatorActive) : is_hovered ? GetColorU32(ImGuiCol_SeparatorHovered) : table->BorderColorStrong;
            }
            else
            {
                draw_y2 = (table->Flags & (ImGuiTableFlags_NoBordersInBody | ImGuiTableFlags_NoBordersInBodyUntilResize)) ? draw_y2_head : draw_y2_body;
                col = (table->Flags & (ImGuiTableFlags_NoBordersInBody | ImGuiTableFlags_NoBordersInBodyUntilResize)) ? table->BorderColorStrong : table->BorderColorLight;
            }

            if (draw_y2 > draw_y1)
                inner_drawlist->AddLine(ImVec2(column->MaxX, draw_y1), ImVec2(column->MaxX, draw_y2), col, border_size);
        }
    }

    // Draw outer border
    // FIXME: could use AddRect or explicit VLine/HLine helper?
    if (table->Flags & ImGuiTableFlags_BordersOuter)
    {
        // Display outer border offset by 1 which is a simple way to display it without adding an extra draw call
        // (Without the offset, in outer_window it would be rendered behind cells, because child windows are above their
        // parent. In inner_window, it won't reach out over scrollbars. Another weird solution would be to display part
        // of it in inner window, and the part that's over scrollbars in the outer window..)
        // Either solution currently won't allow us to use a larger border size: the border would clipped.
        const ImRect outer_border = table->OuterRect;
        const ImU32 outer_col = table->BorderColorStrong;
        if ((table->Flags & ImGuiTableFlags_BordersOuter) == ImGuiTableFlags_BordersOuter)
        {
            inner_drawlist->AddRect(outer_border.Min, outer_border.Max, outer_col, 0.0f, 0, border_size);
        }
        else if (table->Flags & ImGuiTableFlags_BordersOuterV)
        {
            inner_drawlist->AddLine(outer_border.Min, ImVec2(outer_border.Min.x, outer_border.Max.y), outer_col, border_size);
            inner_drawlist->AddLine(ImVec2(outer_border.Max.x, outer_border.Min.y), outer_border.Max, outer_col, border_size);
        }
        else if (table->Flags & ImGuiTableFlags_BordersOuterH)
        {
            inner_drawlist->AddLine(outer_border.Min, ImVec2(outer_border.Max.x, outer_border.Min.y), outer_col, border_size);
            inner_drawlist->AddLine(ImVec2(outer_border.Min.x, outer_border.Max.y), outer_border.Max, outer_col, border_size);
        }
    }
    if ((table->Flags & ImGuiTableFlags_BordersInnerH) && table->RowPosY2 < table->OuterRect.Max.y)
    {
        // Draw bottom-most row border
        const float border_y = table->RowPosY2;
        if (border_y >= table->BgClipRect.Min.y && border_y < table->BgClipRect.Max.y)
            inner_drawlist->AddLine(ImVec2(table->BorderX1, border_y), ImVec2(table->BorderX2, border_y), table->BorderColorLight, border_size);
    }

    inner_drawlist->PopClipRect();
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Sorting
//-------------------------------------------------------------------------
// - TableGetSortSpecs()
// - TableFixColumnSortDirection() [Internal]
// - TableGetColumnNextSortDirection() [Internal]
// - TableSetColumnSortDirection() [Internal]
// - TableSortSpecsSanitize() [Internal]
// - TableSortSpecsBuild() [Internal]
//-------------------------------------------------------------------------

// Return NULL if no sort specs (most often when ImGuiTableFlags_Sortable is not set)
// You can sort your data again when 'SpecsChanged == true'. It will be true with sorting specs have changed since
// last call, or the first time.
// Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable()!
ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL);

    if (!(table->Flags & ImGuiTableFlags_Sortable))
        return NULL;

    // Require layout (in case TableHeadersRow() hasn't been called) as it may alter IsSortSpecsDirty in some paths.
    if (!table->IsLayoutLocked)
        TableUpdateLayout(table);

    if (table->IsSortSpecsDirty)
        TableSortSpecsBuild(table);

    return &table->SortSpecs;
}

static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int n)
{
    IM_ASSERT(n < column->SortDirectionsAvailCount);
    return (column->SortDirectionsAvailList >> (n << 1)) & 0x03;
}

// Fix sort direction if currently set on a value which is unavailable (e.g. activating NoSortAscending/NoSortDescending)
void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)
{
    if (column->SortOrder == -1 || (column->SortDirectionsAvailMask & (1 << column->SortDirection)) != 0)
        return;
    column->SortDirection = (ImU8)TableGetColumnAvailSortDirection(column, 0);
    table->IsSortSpecsDirty = true;
}

// Calculate next sort direction that would be set after clicking the column
// - If the PreferSortDescending flag is set, we will default to a Descending direction on the first click.
// - Note that the PreferSortAscending flag is never checked, it is essentially the default and therefore a no-op.
IM_STATIC_ASSERT(ImGuiSortDirection_None == 0 && ImGuiSortDirection_Ascending == 1 && ImGuiSortDirection_Descending == 2);
ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)
{
    IM_ASSERT(column->SortDirectionsAvailCount > 0);
    if (column->SortOrder == -1)
        return TableGetColumnAvailSortDirection(column, 0);
    for (int n = 0; n < 3; n++)
        if (column->SortDirection == TableGetColumnAvailSortDirection(column, n))
            return TableGetColumnAvailSortDirection(column, (n + 1) % column->SortDirectionsAvailCount);
    IM_ASSERT(0);
    return ImGuiSortDirection_None;
}

// Note that the NoSortAscending/NoSortDescending flags are processed in TableSortSpecsSanitize(), and they may change/revert
// the value of SortDirection. We could technically also do it here but it would be unnecessary and duplicate code.
void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;

    if (!(table->Flags & ImGuiTableFlags_SortMulti))
        append_to_sort_specs = false;
    if (!(table->Flags & ImGuiTableFlags_SortTristate))
        IM_ASSERT(sort_direction != ImGuiSortDirection_None);

    ImGuiTableColumnIdx sort_order_max = 0;
    if (append_to_sort_specs)
        for (int other_column_n = 0; other_column_n < table->ColumnsCount; other_column_n++)
            sort_order_max = ImMax(sort_order_max, table->Columns[other_column_n].SortOrder);

    ImGuiTableColumn* column = &table->Columns[column_n];
    column->SortDirection = (ImU8)sort_direction;
    if (column->SortDirection == ImGuiSortDirection_None)
        column->SortOrder = -1;
    else if (column->SortOrder == -1 || !append_to_sort_specs)
        column->SortOrder = append_to_sort_specs ? sort_order_max + 1 : 0;

    for (int other_column_n = 0; other_column_n < table->ColumnsCount; other_column_n++)
    {
        ImGuiTableColumn* other_column = &table->Columns[other_column_n];
        if (other_column != column && !append_to_sort_specs)
            other_column->SortOrder = -1;
        TableFixColumnSortDirection(table, other_column);
    }
    table->IsSettingsDirty = true;
    table->IsSortSpecsDirty = true;
}

void ImGui::TableSortSpecsSanitize(ImGuiTable* table)
{
    IM_ASSERT(table->Flags & ImGuiTableFlags_Sortable);

    // Clear SortOrder from hidden column and verify that there's no gap or duplicate.
    int sort_order_count = 0;
    ImU64 sort_order_mask = 0x00;
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
    {
        ImGuiTableColumn* column = &table->Columns[column_n];
        if (column->SortOrder != -1 && !column->IsEnabled)
            column->SortOrder = -1;
        if (column->SortOrder == -1)
            continue;
        sort_order_count++;
        sort_order_mask |= ((ImU64)1 << column->SortOrder);
        IM_ASSERT(sort_order_count < (int)sizeof(sort_order_mask) * 8);
    }

    const bool need_fix_linearize = ((ImU64)1 << sort_order_count) != (sort_order_mask + 1);
    const bool need_fix_single_sort_order = (sort_order_count > 1) && !(table->Flags & ImGuiTableFlags_SortMulti);
    if (need_fix_linearize || need_fix_single_sort_order)
    {
        ImU64 fixed_mask = 0x00;
        for (int sort_n = 0; sort_n < sort_order_count; sort_n++)
        {
            // Fix: Rewrite sort order fields if needed so they have no gap or duplicate.
            // (e.g. SortOrder 0 disappeared, SortOrder 1..2 exists --> rewrite then as SortOrder 0..1)
            int column_with_smallest_sort_order = -1;
            for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
                if ((fixed_mask & ((ImU64)1 << (ImU64)column_n)) == 0 && table->Columns[column_n].SortOrder != -1)
                    if (column_with_smallest_sort_order == -1 || table->Columns[column_n].SortOrder < table->Columns[column_with_smallest_sort_order].SortOrder)
                        column_with_smallest_sort_order = column_n;
            IM_ASSERT(column_with_smallest_sort_order != -1);
            fixed_mask |= ((ImU64)1 << column_with_smallest_sort_order);
            table->Columns[column_with_smallest_sort_order].SortOrder = (ImGuiTableColumnIdx)sort_n;

            // Fix: Make sure only one column has a SortOrder if ImGuiTableFlags_MultiSortable is not set.
            if (need_fix_single_sort_order)
            {
                sort_order_count = 1;
                for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
                    if (column_n != column_with_smallest_sort_order)
                        table->Columns[column_n].SortOrder = -1;
                break;
            }
        }
    }

    // Fallback default sort order (if no column had the ImGuiTableColumnFlags_DefaultSort flag)
    if (sort_order_count == 0 && !(table->Flags & ImGuiTableFlags_SortTristate))
        for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        {
            ImGuiTableColumn* column = &table->Columns[column_n];
            if (column->IsEnabled && !(column->Flags & ImGuiTableColumnFlags_NoSort))
            {
                sort_order_count = 1;
                column->SortOrder = 0;
                column->SortDirection = (ImU8)TableGetColumnAvailSortDirection(column, 0);
                break;
            }
        }

    table->SortSpecsCount = (ImGuiTableColumnIdx)sort_order_count;
}

void ImGui::TableSortSpecsBuild(ImGuiTable* table)
{
    IM_ASSERT(table->IsSortSpecsDirty);
    TableSortSpecsSanitize(table);

    // Write output
    table->SortSpecsMulti.resize(table->SortSpecsCount <= 1 ? 0 : table->SortSpecsCount);
    ImGuiTableColumnSortSpecs* sort_specs = (table->SortSpecsCount == 0) ? NULL : (table->SortSpecsCount == 1) ? &table->SortSpecsSingle : table->SortSpecsMulti.Data;
    if (sort_specs != NULL)
        for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        {
            ImGuiTableColumn* column = &table->Columns[column_n];
            if (column->SortOrder == -1)
                continue;
            IM_ASSERT(column->SortOrder < table->SortSpecsCount);
            ImGuiTableColumnSortSpecs* sort_spec = &sort_specs[column->SortOrder];
            sort_spec->ColumnUserID = column->UserID;
            sort_spec->ColumnIndex = (ImGuiTableColumnIdx)column_n;
            sort_spec->SortOrder = (ImGuiTableColumnIdx)column->SortOrder;
            sort_spec->SortDirection = column->SortDirection;
        }
    table->SortSpecs.Specs = sort_specs;
    table->SortSpecs.SpecsCount = table->SortSpecsCount;
    table->SortSpecs.SpecsDirty = true; // Mark as dirty for user
    table->IsSortSpecsDirty = false; // Mark as not dirty for us
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Headers
//-------------------------------------------------------------------------
// - TableGetHeaderRowHeight() [Internal]
// - TableHeadersRow()
// - TableHeader()
//-------------------------------------------------------------------------

float ImGui::TableGetHeaderRowHeight()
{
    // Caring for a minor edge case:
    // Calculate row height, for the unlikely case that some labels may be taller than others.
    // If we didn't do that, uneven header height would highlight but smaller one before the tallest wouldn't catch input for all height.
    // In your custom header row you may omit this all together and just call TableNextRow() without a height...
    float row_height = GetTextLineHeight();
    int columns_count = TableGetColumnCount();
    for (int column_n = 0; column_n < columns_count; column_n++)
        if (TableGetColumnFlags(column_n) & ImGuiTableColumnFlags_IsEnabled)
            row_height = ImMax(row_height, CalcTextSize(TableGetColumnName(column_n)).y);
    row_height += GetStyle().CellPadding.y * 2.0f;
    return row_height;
}

// [Public] This is a helper to output TableHeader() calls based on the column names declared in TableSetupColumn().
// The intent is that advanced users willing to create customized headers would not need to use this helper
// and can create their own! For example: TableHeader() may be preceeded by Checkbox() or other custom widgets.
// See 'Demo->Tables->Custom headers' for a demonstration of implementing a custom version of this.
// This code is constructed to not make much use of internal functions, as it is intended to be a template to copy.
// FIXME-TABLE: TableOpenContextMenu() and TableGetHeaderRowHeight() are not public.
void ImGui::TableHeadersRow()
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && "Need to call TableHeadersRow() after BeginTable()!");

    // Layout if not already done (this is automatically done by TableNextRow, we do it here solely to facilitate stepping in debugger as it is frequent to step in TableUpdateLayout)
    if (!table->IsLayoutLocked)
        TableUpdateLayout(table);

    // Open row
    const float row_y1 = GetCursorScreenPos().y;
    const float row_height = TableGetHeaderRowHeight();
    TableNextRow(ImGuiTableRowFlags_Headers, row_height);
    if (table->HostSkipItems) // Merely an optimization, you may skip in your own code.
        return;

    const int columns_count = TableGetColumnCount();
    for (int column_n = 0; column_n < columns_count; column_n++)
    {
        if (!TableSetColumnIndex(column_n))
            continue;

        // Push an id to allow unnamed labels (generally accidental, but let's behave nicely with them)
        // - in your own code you may omit the PushID/PopID all-together, provided you know they won't collide
        // - table->InstanceCurrent is only >0 when we use multiple BeginTable/EndTable calls with same identifier.
        const char* name = TableGetColumnName(column_n);
        PushID(table->InstanceCurrent * table->ColumnsCount + column_n);
        TableHeader(name);
        PopID();
    }

    // Allow opening popup from the right-most section after the last column.
    ImVec2 mouse_pos = ImGui::GetMousePos();
    if (IsMouseReleased(1) && TableGetHoveredColumn() == columns_count)
        if (mouse_pos.y >= row_y1 && mouse_pos.y < row_y1 + row_height)
            TableOpenContextMenu(-1); // Will open a non-column-specific popup.
}

// Emit a column header (text + optional sort order)
// We cpu-clip text here so that all columns headers can be merged into a same draw call.
// Note that because of how we cpu-clip and display sorting indicators, you _cannot_ use SameLine() after a TableHeader()
void ImGui::TableHeader(const char* label)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    ImGuiTable* table = g.CurrentTable;
    IM_ASSERT(table != NULL && "Need to call TableHeader() after BeginTable()!");
    IM_ASSERT(table->CurrentColumn != -1);
    const int column_n = table->CurrentColumn;
    ImGuiTableColumn* column = &table->Columns[column_n];

    // Label
    if (label == NULL)
        label = "";
    const char* label_end = FindRenderedTextEnd(label);
    ImVec2 label_size = CalcTextSize(label, label_end, true);
    ImVec2 label_pos = window->DC.CursorPos;

    // If we already got a row height, there's use that.
    // FIXME-TABLE: Padding problem if the correct outer-padding CellBgRect strays off our ClipRect?
    ImRect cell_r = TableGetCellBgRect(table, column_n);
    float label_height = ImMax(label_size.y, table->RowMinHeight - table->CellPaddingY * 2.0f);

    // Calculate ideal size for sort order arrow
    float w_arrow = 0.0f;
    float w_sort_text = 0.0f;
    char sort_order_suf[4] = "";
    const float ARROW_SCALE = 0.65f;
    if ((table->Flags & ImGuiTableFlags_Sortable) && !(column->Flags & ImGuiTableColumnFlags_NoSort))
    {
        w_arrow = ImFloor(g.FontSize * ARROW_SCALE + g.Style.FramePadding.x);
        if (column->SortOrder > 0)
        {
            ImFormatString(sort_order_suf, IM_ARRAYSIZE(sort_order_suf), "%d", column->SortOrder + 1);
            w_sort_text = g.Style.ItemInnerSpacing.x + CalcTextSize(sort_order_suf).x;
        }
    }

    // We feed our unclipped width to the column without writing on CursorMaxPos, so that column is still considering for merging.
    float max_pos_x = label_pos.x + label_size.x + w_sort_text + w_arrow;
    column->ContentMaxXHeadersUsed = ImMax(column->ContentMaxXHeadersUsed, column->WorkMaxX);
    column->ContentMaxXHeadersIdeal = ImMax(column->ContentMaxXHeadersIdeal, max_pos_x);

    // Keep header highlighted when context menu is open.
    const bool selected = (table->IsContextPopupOpen && table->ContextPopupColumn == column_n && table->InstanceInteracted == table->InstanceCurrent);
    ImGuiID id = window->GetID(label);
    ImRect bb(cell_r.Min.x, cell_r.Min.y, cell_r.Max.x, ImMax(cell_r.Max.y, cell_r.Min.y + label_height + g.Style.CellPadding.y * 2.0f));
    ItemSize(ImVec2(0.0f, label_height)); // Don't declare unclipped width, it'll be fed ContentMaxPosHeadersIdeal
    if (!ItemAdd(bb, id))
        return;

    //GetForegroundDrawList()->AddRect(cell_r.Min, cell_r.Max, IM_COL32(255, 0, 0, 255)); // [DEBUG]
    //GetForegroundDrawList()->AddRect(bb.Min, bb.Max, IM_COL32(255, 0, 0, 255)); // [DEBUG]

    // Using AllowItemOverlap mode because we cover the whole cell, and we want user to be able to submit subsequent items.
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_AllowItemOverlap);
    if (g.ActiveId != id)
        SetItemAllowOverlap();
    if (held || hovered || selected)
    {
        const ImU32 col = GetColorU32(held ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        //RenderFrame(bb.Min, bb.Max, col, false, 0.0f);
        TableSetBgColor(ImGuiTableBgTarget_CellBg, col, table->CurrentColumn);
        RenderNavHighlight(bb, id, ImGuiNavHighlightFlags_TypeThin | ImGuiNavHighlightFlags_NoRounding);
    }
    else
    {
        // Submit single cell bg color in the case we didn't submit a full header row
        if ((table->RowFlags & ImGuiTableRowFlags_Headers) == 0)
            TableSetBgColor(ImGuiTableBgTarget_CellBg, GetColorU32(ImGuiCol_TableHeaderBg), table->CurrentColumn);
    }
    if (held)
        table->HeldHeaderColumn = (ImGuiTableColumnIdx)column_n;
    window->DC.CursorPos.y -= g.Style.ItemSpacing.y * 0.5f;

    // Drag and drop to re-order columns.
    // FIXME-TABLE: Scroll request while reordering a column and it lands out of the scrolling zone.
    if (held && (table->Flags & ImGuiTableFlags_Reorderable) && IsMouseDragging(0) && !g.DragDropActive)
    {
        // While moving a column it will jump on the other side of the mouse, so we also test for MouseDelta.x
        table->ReorderColumn = (ImGuiTableColumnIdx)column_n;
        table->InstanceInteracted = table->InstanceCurrent;

        // We don't reorder: through the frozen<>unfrozen line, or through a column that is marked with ImGuiTableColumnFlags_NoReorder.
        if (g.IO.MouseDelta.x < 0.0f && g.IO.MousePos.x < cell_r.Min.x)
            if (ImGuiTableColumn* prev_column = (column->PrevEnabledColumn != -1) ? &table->Columns[column->PrevEnabledColumn] : NULL)
                if (!((column->Flags | prev_column->Flags) & ImGuiTableColumnFlags_NoReorder))
                    if ((column->IndexWithinEnabledSet < table->FreezeColumnsRequest) == (prev_column->IndexWithinEnabledSet < table->FreezeColumnsRequest))
                        table->ReorderColumnDir = -1;
        if (g.IO.MouseDelta.x > 0.0f && g.IO.MousePos.x > cell_r.Max.x)
            if (ImGuiTableColumn* next_column = (column->NextEnabledColumn != -1) ? &table->Columns[column->NextEnabledColumn] : NULL)
                if (!((column->Flags | next_column->Flags) & ImGuiTableColumnFlags_NoReorder))
                    if ((column->IndexWithinEnabledSet < table->FreezeColumnsRequest) == (next_column->IndexWithinEnabledSet < table->FreezeColumnsRequest))
                        table->ReorderColumnDir = +1;
    }

    // Sort order arrow
    const float ellipsis_max = cell_r.Max.x - w_arrow - w_sort_text;
    if ((table->Flags & ImGuiTableFlags_Sortable) && !(column->Flags & ImGuiTableColumnFlags_NoSort))
    {
        if (column->SortOrder != -1)
        {
            float x = ImMax(cell_r.Min.x, cell_r.Max.x - w_arrow - w_sort_text);
            float y = label_pos.y;
            if (column->SortOrder > 0)
            {
                PushStyleColor(ImGuiCol_Text, GetColorU32(ImGuiCol_Text, 0.70f));
                RenderText(ImVec2(x + g.Style.ItemInnerSpacing.x, y), sort_order_suf);
                PopStyleColor();
                x += w_sort_text;
            }
            RenderArrow(window->DrawList, ImVec2(x, y), GetColorU32(ImGuiCol_Text), column->SortDirection == ImGuiSortDirection_Ascending ? ImGuiDir_Up : ImGuiDir_Down, ARROW_SCALE);
        }

        // Handle clicking on column header to adjust Sort Order
        if (pressed && table->ReorderColumn != column_n)
        {
            ImGuiSortDirection sort_direction = TableGetColumnNextSortDirection(column);
            TableSetColumnSortDirection(column_n, sort_direction, g.IO.KeyShift);
        }
    }

    // Render clipped label. Clipping here ensure that in the majority of situations, all our header cells will
    // be merged into a single draw call.
    //window->DrawList->AddCircleFilled(ImVec2(ellipsis_max, label_pos.y), 40, IM_COL32_WHITE);
    RenderTextEllipsis(window->DrawList, label_pos, ImVec2(ellipsis_max, label_pos.y + label_height + g.Style.FramePadding.y), ellipsis_max, ellipsis_max, label, label_end, &label_size);

    const bool text_clipped = label_size.x > (ellipsis_max - label_pos.x);
    if (text_clipped && hovered && g.HoveredIdNotActiveTimer > g.TooltipSlowDelay)
        SetTooltip("%.*s", (int)(label_end - label), label);

    // We don't use BeginPopupContextItem() because we want the popup to stay up even after the column is hidden
    if (IsMouseReleased(1) && IsItemHovered())
        TableOpenContextMenu(column_n);
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Context Menu
//-------------------------------------------------------------------------
// - TableOpenContextMenu() [Internal]
// - TableDrawContextMenu() [Internal]
//-------------------------------------------------------------------------

// Use -1 to open menu not specific to a given column.
void ImGui::TableOpenContextMenu(int column_n)
{
    ImGuiContext& g = *GImGui;
    ImGuiTable* table = g.CurrentTable;
    if (column_n == -1 && table->CurrentColumn != -1)   // When called within a column automatically use this one (for consistency)
        column_n = table->CurrentColumn;
    if (column_n == table->ColumnsCount)                // To facilitate using with TableGetHoveredColumn()
        column_n = -1;
    IM_ASSERT(column_n >= -1 && column_n < table->ColumnsCount);
    if (table->Flags & (ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
    {
        table->IsContextPopupOpen = true;
        table->ContextPopupColumn = (ImGuiTableColumnIdx)column_n;
        table->InstanceInteracted = table->InstanceCurrent;
        const ImGuiID context_menu_id = ImHashStr("##ContextMenu", 0, table->ID);
        OpenPopupEx(context_menu_id, ImGuiPopupFlags_None);
    }
}

// Output context menu into current window (generally a popup)
// FIXME-TABLE: Ideally this should be writable by the user. Full programmatic access to that data?
void ImGui::TableDrawContextMenu(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    bool want_separator = false;
    const int column_n = (table->ContextPopupColumn >= 0 && table->ContextPopupColumn < table->ColumnsCount) ? table->ContextPopupColumn : -1;
    ImGuiTableColumn* column = (column_n != -1) ? &table->Columns[column_n] : NULL;

    // Sizing
    if (table->Flags & ImGuiTableFlags_Resizable)
    {
        if (column != NULL)
        {
            const bool can_resize = !(column->Flags & ImGuiTableColumnFlags_NoResize) && column->IsEnabled;
            if (MenuItem("Size column to fit###SizeOne", NULL, false, can_resize))
                TableSetColumnWidthAutoSingle(table, column_n);
        }

        const char* size_all_desc;
        if (table->ColumnsEnabledFixedCount == table->ColumnsEnabledCount && (table->Flags & ImGuiTableFlags_SizingMask_) != ImGuiTableFlags_SizingFixedSame)
            size_all_desc = "Size all columns to fit###SizeAll";        // All fixed
        else
            size_all_desc = "Size all columns to default###SizeAll";    // All stretch or mixed
        if (MenuItem(size_all_desc, NULL))
            TableSetColumnWidthAutoAll(table);
        want_separator = true;
    }

    // Ordering
    if (table->Flags & ImGuiTableFlags_Reorderable)
    {
        if (MenuItem("Reset order", NULL, false, !table->IsDefaultDisplayOrder))
            table->IsResetDisplayOrderRequest = true;
        want_separator = true;
    }

    // Reset all (should work but seems unnecessary/noisy to expose?)
    //if (MenuItem("Reset all"))
    //    table->IsResetAllRequest = true;

    // Sorting
    // (modify TableOpenContextMenu() to add _Sortable flag if enabling this)
#if 0
    if ((table->Flags & ImGuiTableFlags_Sortable) && column != NULL && (column->Flags & ImGuiTableColumnFlags_NoSort) == 0)
    {
        if (want_separator)
            Separator();
        want_separator = true;

        bool append_to_sort_specs = g.IO.KeyShift;
        if (MenuItem("Sort in Ascending Order", NULL, column->SortOrder != -1 && column->SortDirection == ImGuiSortDirection_Ascending, (column->Flags & ImGuiTableColumnFlags_NoSortAscending) == 0))
            TableSetColumnSortDirection(table, column_n, ImGuiSortDirection_Ascending, append_to_sort_specs);
        if (MenuItem("Sort in Descending Order", NULL, column->SortOrder != -1 && column->SortDirection == ImGuiSortDirection_Descending, (column->Flags & ImGuiTableColumnFlags_NoSortDescending) == 0))
            TableSetColumnSortDirection(table, column_n, ImGuiSortDirection_Descending, append_to_sort_specs);
    }
#endif

    // Hiding / Visibility
    if (table->Flags & ImGuiTableFlags_Hideable)
    {
        if (want_separator)
            Separator();
        want_separator = true;

        PushItemFlag(ImGuiItemFlags_SelectableDontClosePopup, true);
        for (int other_column_n = 0; other_column_n < table->ColumnsCount; other_column_n++)
        {
            ImGuiTableColumn* other_column = &table->Columns[other_column_n];
            const char* name = TableGetColumnName(table, other_column_n);
            if (name == NULL || name[0] == 0)
                name = "<Unknown>";

            // Make sure we can't hide the last active column
            bool menu_item_active = (other_column->Flags & ImGuiTableColumnFlags_NoHide) ? false : true;
            if (other_column->IsEnabled && table->ColumnsEnabledCount <= 1)
                menu_item_active = false;
            if (MenuItem(name, NULL, other_column->IsEnabled, menu_item_active))
                other_column->IsEnabledNextFrame = !other_column->IsEnabled;
        }
        PopItemFlag();
    }
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Settings (.ini data)
//-------------------------------------------------------------------------
// FIXME: The binding/finding/creating flow are too confusing.
//-------------------------------------------------------------------------
// - TableSettingsInit() [Internal]
// - TableSettingsCalcChunkSize() [Internal]
// - TableSettingsCreate() [Internal]
// - TableSettingsFindByID() [Internal]
// - TableGetBoundSettings() [Internal]
// - TableResetSettings()
// - TableSaveSettings() [Internal]
// - TableLoadSettings() [Internal]
// - TableSettingsHandler_ClearAll() [Internal]
// - TableSettingsHandler_ApplyAll() [Internal]
// - TableSettingsHandler_ReadOpen() [Internal]
// - TableSettingsHandler_ReadLine() [Internal]
// - TableSettingsHandler_WriteAll() [Internal]
// - TableSettingsInstallHandler() [Internal]
//-------------------------------------------------------------------------
// [Init] 1: TableSettingsHandler_ReadXXXX()   Load and parse .ini file into TableSettings.
// [Main] 2: TableLoadSettings()               When table is created, bind Table to TableSettings, serialize TableSettings data into Table.
// [Main] 3: TableSaveSettings()               When table properties are modified, serialize Table data into bound or new TableSettings, mark .ini as dirty.
// [Main] 4: TableSettingsHandler_WriteAll()   When .ini file is dirty (which can come from other source), save TableSettings into .ini file.
//-------------------------------------------------------------------------

// Clear and initialize empty settings instance
static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int columns_count_max)
{
    IM_PLACEMENT_NEW(settings) ImGuiTableSettings();
    ImGuiTableColumnSettings* settings_column = settings->GetColumnSettings();
    for (int n = 0; n < columns_count_max; n++, settings_column++)
        IM_PLACEMENT_NEW(settings_column) ImGuiTableColumnSettings();
    settings->ID = id;
    settings->ColumnsCount = (ImGuiTableColumnIdx)columns_count;
    settings->ColumnsCountMax = (ImGuiTableColumnIdx)columns_count_max;
    settings->WantApply = true;
}

static size_t TableSettingsCalcChunkSize(int columns_count)
{
    return sizeof(ImGuiTableSettings) + (size_t)columns_count * sizeof(ImGuiTableColumnSettings);
}

ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)
{
    ImGuiContext& g = *GImGui;
    ImGuiTableSettings* settings = g.SettingsTables.alloc_chunk(TableSettingsCalcChunkSize(columns_count));
    TableSettingsInit(settings, id, columns_count, columns_count);
    return settings;
}

// Find existing settings
ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)
{
    // FIXME-OPT: Might want to store a lookup map for this?
    ImGuiContext& g = *GImGui;
    for (ImGuiTableSettings* settings = g.SettingsTables.begin(); settings != NULL; settings = g.SettingsTables.next_chunk(settings))
        if (settings->ID == id)
            return settings;
    return NULL;
}

// Get settings for a given table, NULL if none
ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)
{
    if (table->SettingsOffset != -1)
    {
        ImGuiContext& g = *GImGui;
        ImGuiTableSettings* settings = g.SettingsTables.ptr_from_offset(table->SettingsOffset);
        IM_ASSERT(settings->ID == table->ID);
        if (settings->ColumnsCountMax >= table->ColumnsCount)
            return settings; // OK
        settings->ID = 0; // Invalidate storage, we won't fit because of a count change
    }
    return NULL;
}

// Restore initial state of table (with or without saved settings)
void ImGui::TableResetSettings(ImGuiTable* table)
{
    table->IsInitializing = table->IsSettingsDirty = true;
    table->IsResetAllRequest = false;
    table->IsSettingsRequestLoad = false;                   // Don't reload from ini
    table->SettingsLoadedFlags = ImGuiTableFlags_None;      // Mark as nothing loaded so our initialized data becomes authoritative
}

void ImGui::TableSaveSettings(ImGuiTable* table)
{
    table->IsSettingsDirty = false;
    if (table->Flags & ImGuiTableFlags_NoSavedSettings)
        return;

    // Bind or create settings data
    ImGuiContext& g = *GImGui;
    ImGuiTableSettings* settings = TableGetBoundSettings(table);
    if (settings == NULL)
    {
        settings = TableSettingsCreate(table->ID, table->ColumnsCount);
        table->SettingsOffset = g.SettingsTables.offset_from_ptr(settings);
    }
    settings->ColumnsCount = (ImGuiTableColumnIdx)table->ColumnsCount;

    // Serialize ImGuiTable/ImGuiTableColumn into ImGuiTableSettings/ImGuiTableColumnSettings
    IM_ASSERT(settings->ID == table->ID);
    IM_ASSERT(settings->ColumnsCount == table->ColumnsCount && settings->ColumnsCountMax >= settings->ColumnsCount);
    ImGuiTableColumn* column = table->Columns.Data;
    ImGuiTableColumnSettings* column_settings = settings->GetColumnSettings();

    bool save_ref_scale = false;
    settings->SaveFlags = ImGuiTableFlags_None;
    for (int n = 0; n < table->ColumnsCount; n++, column++, column_settings++)
    {
        const float width_or_weight = (column->Flags & ImGuiTableColumnFlags_WidthStretch) ? column->StretchWeight : column->WidthRequest;
        column_settings->WidthOrWeight = width_or_weight;
        column_settings->Index = (ImGuiTableColumnIdx)n;
        column_settings->DisplayOrder = column->DisplayOrder;
        column_settings->SortOrder = column->SortOrder;
        column_settings->SortDirection = column->SortDirection;
        column_settings->IsEnabled = column->IsEnabled;
        column_settings->IsStretch = (column->Flags & ImGuiTableColumnFlags_WidthStretch) ? 1 : 0;
        if ((column->Flags & ImGuiTableColumnFlags_WidthStretch) == 0)
            save_ref_scale = true;

        // We skip saving some data in the .ini file when they are unnecessary to restore our state.
        // Note that fixed width where initial width was derived from auto-fit will always be saved as InitStretchWeightOrWidth will be 0.0f.
        // FIXME-TABLE: We don't have logic to easily compare SortOrder to DefaultSortOrder yet so it's always saved when present.
        if (width_or_weight != column->InitStretchWeightOrWidth)
            settings->SaveFlags |= ImGuiTableFlags_Resizable;
        if (column->DisplayOrder != n)
            settings->SaveFlags |= ImGuiTableFlags_Reorderable;
        if (column->SortOrder != -1)
            settings->SaveFlags |= ImGuiTableFlags_Sortable;
        if (column->IsEnabled != ((column->Flags & ImGuiTableColumnFlags_DefaultHide) == 0))
            settings->SaveFlags |= ImGuiTableFlags_Hideable;
    }
    settings->SaveFlags &= table->Flags;
    settings->RefScale = save_ref_scale ? table->RefScale : 0.0f;

    MarkIniSettingsDirty();
}

void ImGui::TableLoadSettings(ImGuiTable* table)
{
    ImGuiContext& g = *GImGui;
    table->IsSettingsRequestLoad = false;
    if (table->Flags & ImGuiTableFlags_NoSavedSettings)
        return;

    // Bind settings
    ImGuiTableSettings* settings;
    if (table->SettingsOffset == -1)
    {
        settings = TableSettingsFindByID(table->ID);
        if (settings == NULL)
            return;
        if (settings->ColumnsCount != table->ColumnsCount) // Allow settings if columns count changed. We could otherwise decide to return...
            table->IsSettingsDirty = true;
        table->SettingsOffset = g.SettingsTables.offset_from_ptr(settings);
    }
    else
    {
        settings = TableGetBoundSettings(table);
    }

    table->SettingsLoadedFlags = settings->SaveFlags;
    table->RefScale = settings->RefScale;

    // Serialize ImGuiTableSettings/ImGuiTableColumnSettings into ImGuiTable/ImGuiTableColumn
    ImGuiTableColumnSettings* column_settings = settings->GetColumnSettings();
    ImU64 display_order_mask = 0;
    for (int data_n = 0; data_n < settings->ColumnsCount; data_n++, column_settings++)
    {
        int column_n = column_settings->Index;
        if (column_n < 0 || column_n >= table->ColumnsCount)
            continue;

        ImGuiTableColumn* column = &table->Columns[column_n];
        if (settings->SaveFlags & ImGuiTableFlags_Resizable)
        {
            if (column_settings->IsStretch)
                column->StretchWeight = column_settings->WidthOrWeight;
            else
                column->WidthRequest = column_settings->WidthOrWeight;
            column->AutoFitQueue = 0x00;
        }
        if (settings->SaveFlags & ImGuiTableFlags_Reorderable)
            column->DisplayOrder = column_settings->DisplayOrder;
        else
            column->DisplayOrder = (ImGuiTableColumnIdx)column_n;
        display_order_mask |= (ImU64)1 << column->DisplayOrder;
        column->IsEnabled = column->IsEnabledNextFrame = column_settings->IsEnabled;
        column->SortOrder = column_settings->SortOrder;
        column->SortDirection = column_settings->SortDirection;
    }

    // Validate and fix invalid display order data
    const ImU64 expected_display_order_mask = (settings->ColumnsCount == 64) ? ~0 : ((ImU64)1 << settings->ColumnsCount) - 1;
    if (display_order_mask != expected_display_order_mask)
        for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
            table->Columns[column_n].DisplayOrder = (ImGuiTableColumnIdx)column_n;

    // Rebuild index
    for (int column_n = 0; column_n < table->ColumnsCount; column_n++)
        table->DisplayOrderToIndex[table->Columns[column_n].DisplayOrder] = (ImGuiTableColumnIdx)column_n;
}

static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)
{
    ImGuiContext& g = *ctx;
    for (int i = 0; i != g.Tables.GetSize(); i++)
        g.Tables.GetByIndex(i)->SettingsOffset = -1;
    g.SettingsTables.clear();
}

// Apply to existing windows (if any)
static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)
{
    ImGuiContext& g = *ctx;
    for (int i = 0; i != g.Tables.GetSize(); i++)
    {
        ImGuiTable* table = g.Tables.GetByIndex(i);
        table->IsSettingsRequestLoad = true;
        table->SettingsOffset = -1;
    }
}

static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name)
{
    ImGuiID id = 0;
    int columns_count = 0;
    if (sscanf(name, "0x%08X,%d", &id, &columns_count) < 2)
        return NULL;

    if (ImGuiTableSettings* settings = ImGui::TableSettingsFindByID(id))
    {
        if (settings->ColumnsCountMax >= columns_count)
        {
            TableSettingsInit(settings, id, columns_count, settings->ColumnsCountMax); // Recycle
            return settings;
        }
        settings->ID = 0; // Invalidate storage, we won't fit because of a count change
    }
    return ImGui::TableSettingsCreate(id, columns_count);
}

static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line)
{
    // "Column 0  UserID=0x42AD2D21 Width=100 Visible=1 Order=0 Sort=0v"
    ImGuiTableSettings* settings = (ImGuiTableSettings*)entry;
    float f = 0.0f;
    int column_n = 0, r = 0, n = 0;

    if (sscanf(line, "RefScale=%f", &f) == 1) { settings->RefScale = f; return; }

    if (sscanf(line, "Column %d%n", &column_n, &r) == 1)
    {
        if (column_n < 0 || column_n >= settings->ColumnsCount)
            return;
        line = ImStrSkipBlank(line + r);
        char c = 0;
        ImGuiTableColumnSettings* column = settings->GetColumnSettings() + column_n;
        column->Index = (ImGuiTableColumnIdx)column_n;
        if (sscanf(line, "UserID=0x%08X%n", (ImU32*)&n, &r)==1) { line = ImStrSkipBlank(line + r); column->UserID = (ImGuiID)n; }
        if (sscanf(line, "Width=%d%n", &n, &r) == 1)            { line = ImStrSkipBlank(line + r); column->WidthOrWeight = (float)n; column->IsStretch = 0; settings->SaveFlags |= ImGuiTableFlags_Resizable; }
        if (sscanf(line, "Weight=%f%n", &f, &r) == 1)           { line = ImStrSkipBlank(line + r); column->WidthOrWeight = f; column->IsStretch = 1; settings->SaveFlags |= ImGuiTableFlags_Resizable; }
        if (sscanf(line, "Visible=%d%n", &n, &r) == 1)          { line = ImStrSkipBlank(line + r); column->IsEnabled = (ImU8)n; settings->SaveFlags |= ImGuiTableFlags_Hideable; }
        if (sscanf(line, "Order=%d%n", &n, &r) == 1)            { line = ImStrSkipBlank(line + r); column->DisplayOrder = (ImGuiTableColumnIdx)n; settings->SaveFlags |= ImGuiTableFlags_Reorderable; }
        if (sscanf(line, "Sort=%d%c%n", &n, &c, &r) == 2)       { line = ImStrSkipBlank(line + r); column->SortOrder = (ImGuiTableColumnIdx)n; column->SortDirection = (c == '^') ? ImGuiSortDirection_Descending : ImGuiSortDirection_Ascending; settings->SaveFlags |= ImGuiTableFlags_Sortable; }
    }
}

static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* buf)
{
    ImGuiContext& g = *ctx;
    for (ImGuiTableSettings* settings = g.SettingsTables.begin(); settings != NULL; settings = g.SettingsTables.next_chunk(settings))
    {
        if (settings->ID == 0) // Skip ditched settings
            continue;

        // TableSaveSettings() may clear some of those flags when we establish that the data can be stripped
        // (e.g. Order was unchanged)
        const bool save_size    = (settings->SaveFlags & ImGuiTableFlags_Resizable) != 0;
        const bool save_visible = (settings->SaveFlags & ImGuiTableFlags_Hideable) != 0;
        const bool save_order   = (settings->SaveFlags & ImGuiTableFlags_Reorderable) != 0;
        const bool save_sort    = (settings->SaveFlags & ImGuiTableFlags_Sortable) != 0;
        if (!save_size && !save_visible && !save_order && !save_sort)
            continue;

        buf->reserve(buf->size() + 30 + settings->ColumnsCount * 50); // ballpark reserve
        buf->appendf("[%s][0x%08X,%d]\n", handler->TypeName, settings->ID, settings->ColumnsCount);
        if (settings->RefScale != 0.0f)
            buf->appendf("RefScale=%g\n", settings->RefScale);
        ImGuiTableColumnSettings* column = settings->GetColumnSettings();
        for (int column_n = 0; column_n < settings->ColumnsCount; column_n++, column++)
        {
            // "Column 0  UserID=0x42AD2D21 Width=100 Visible=1 Order=0 Sort=0v"
            bool save_column = column->UserID != 0 || save_size || save_visible || save_order || (save_sort && column->SortOrder != -1);
            if (!save_column)
                continue;
            buf->appendf("Column %-2d", column_n);
            if (column->UserID != 0)                    buf->appendf(" UserID=%08X", column->UserID);
            if (save_size && column->IsStretch)         buf->appendf(" Weight=%.4f", column->WidthOrWeight);
            if (save_size && !column->IsStretch)        buf->appendf(" Width=%d", (int)column->WidthOrWeight);
            if (save_visible)                           buf->appendf(" Visible=%d", column->IsEnabled);
            if (save_order)                             buf->appendf(" Order=%d", column->DisplayOrder);
            if (save_sort && column->SortOrder != -1)   buf->appendf(" Sort=%d%c", column->SortOrder, (column->SortDirection == ImGuiSortDirection_Ascending) ? 'v' : '^');
            buf->append("\n");
        }
        buf->append("\n");
    }
}

void ImGui::TableSettingsInstallHandler(ImGuiContext* context)
{
    ImGuiContext& g = *context;
    ImGuiSettingsHandler ini_handler;
    ini_handler.TypeName = "Table";
    ini_handler.TypeHash = ImHashStr("Table");
    ini_handler.ClearAllFn = TableSettingsHandler_ClearAll;
    ini_handler.ReadOpenFn = TableSettingsHandler_ReadOpen;
    ini_handler.ReadLineFn = TableSettingsHandler_ReadLine;
    ini_handler.ApplyAllFn = TableSettingsHandler_ApplyAll;
    ini_handler.WriteAllFn = TableSettingsHandler_WriteAll;
    g.SettingsHandlers.push_back(ini_handler);
}

//-------------------------------------------------------------------------
// [SECTION] Tables: Garbage Collection
//-------------------------------------------------------------------------
// - TableRemove() [Internal]
// - TableGcCompactTransientBuffers() [Internal]
// - TableGcCompactSettings() [Internal]
//-------------------------------------------------------------------------

// Remove Table (currently only used by TestEngine)
void ImGui::TableRemove(ImGuiTable* table)
{
    //IMGUI_DEBUG_LOG("TableRemove() id=0x%08X\n", table->ID);
    ImGuiContext& g = *GImGui;
    int table_idx = g.Tables.GetIndex(table);
    //memset(table->RawData.Data, 0, table->RawData.size_in_bytes());
    //memset(table, 0, sizeof(ImGuiTable));
    g.Tables.Remove(table->ID, table);
    g.TablesLastTimeActive[table_idx] = -1.0f;
}

// Free up/compact internal Table buffers for when it gets unused
void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)
{
    //IMGUI_DEBUG_LOG("TableGcCompactTransientBuffers() id=0x%08X\n", table->ID);
    ImGuiContext& g = *GImGui;
    IM_ASSERT(table->MemoryCompacted == false);
    table->DrawSplitter.ClearFreeMemory();
    table->SortSpecsMulti.clear();
    table->SortSpecs.Specs = NULL;
    table->IsSortSpecsDirty = true;
    table->ColumnsNames.clear();
    table->MemoryCompacted = true;
    for (int n = 0; n < table->ColumnsCount; n++)
        table->Columns[n].NameOffset = -1;
    g.TablesLastTimeActive[g.Tables.GetIndex(table)] = -1.0f;
}

// Compact and remove unused settings data (currently only used by TestEngine)
void ImGui::TableGcCompactSettings()
{
    ImGuiContext& g = *GImGui;
    int required_memory = 0;
    for (ImGuiTableSettings* settings = g.SettingsTables.begin(); settings != NULL; settings = g.SettingsTables.next_chunk(settings))
        if (settings->ID != 0)
            required_memory += (int)TableSettingsCalcChunkSize(settings->ColumnsCount);
    if (required_memory == g.SettingsTables.Buf.Size)
        return;
    ImChunkStream<ImGuiTableSettings> new_chunk_stream;
    new_chunk_stream.Buf.reserve(required_memory);
    for (ImGuiTableSettings* settings = g.SettingsTables.begin(); settings != NULL; settings = g.SettingsTables.next_chunk(settings))
        if (settings->ID != 0)
            memcpy(new_chunk_stream.alloc_chunk(TableSettingsCalcChunkSize(settings->ColumnsCount)), settings, TableSettingsCalcChunkSize(settings->ColumnsCount));
    g.SettingsTables.swap(new_chunk_stream);
}


//-------------------------------------------------------------------------
// [SECTION] Tables: Debugging
//-------------------------------------------------------------------------
// - DebugNodeTable() [Internal]
//-------------------------------------------------------------------------

#ifndef IMGUI_DISABLE_METRICS_WINDOW

static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)
{
    sizing_policy &= ImGuiTableFlags_SizingMask_;
    if (sizing_policy == ImGuiTableFlags_SizingFixedFit)    { return "FixedFit"; }
    if (sizing_policy == ImGuiTableFlags_SizingFixedSame)   { return "FixedSame"; }
    if (sizing_policy == ImGuiTableFlags_SizingStretchProp) { return "StretchProp"; }
    if (sizing_policy == ImGuiTableFlags_SizingStretchSame) { return "StretchSame"; }
    return "N/A";
}

void ImGui::DebugNodeTable(ImGuiTable* table)
{
    char buf[512];
    char* p = buf;
    const char* buf_end = buf + IM_ARRAYSIZE(buf);
    const bool is_active = (table->LastFrameActive >= ImGui::GetFrameCount() - 2); // Note that fully clipped early out scrolling tables will appear as inactive here.
    ImFormatString(p, buf_end - p, "Table 0x%08X (%d columns, in '%s')%s", table->ID, table->ColumnsCount, table->OuterWindow->Name, is_active ? "" : " *Inactive*");
    if (!is_active) { PushStyleColor(ImGuiCol_Text, GetStyleColorVec4(ImGuiCol_TextDisabled)); }
    bool open = TreeNode(table, "%s", buf);
    if (!is_active) { PopStyleColor(); }
    if (IsItemHovered())
        GetForegroundDrawList()->AddRect(table->OuterRect.Min, table->OuterRect.Max, IM_COL32(255, 255, 0, 255));
    if (IsItemVisible() && table->HoveredColumnBody != -1)
        GetForegroundDrawList()->AddRect(GetItemRectMin(), GetItemRectMax(), IM_COL32(255, 255, 0, 255));
    if (!open)
        return;
    bool clear_settings = SmallButton("Clear settings");
    BulletText("OuterRect: Pos: (%.1f,%.1f) Size: (%.1f,%.1f) Sizing: '%s'", table->OuterRect.Min.x, table->OuterRect.Min.y, table->OuterRect.GetWidth(), table->OuterRect.GetHeight(), DebugNodeTableGetSizingPolicyDesc(table->Flags));
    BulletText("ColumnsGivenWidth: %.1f, ColumnsAutoFitWidth: %.1f, InnerWidth: %.1f%s", table->ColumnsGivenWidth, table->ColumnsAutoFitWidth, table->InnerWidth, table->InnerWidth == 0.0f ? " (auto)" : "");
    BulletText("CellPaddingX: %.1f, CellSpacingX: %.1f/%.1f, OuterPaddingX: %.1f", table->CellPaddingX, table->CellSpacingX1, table->CellSpacingX2, table->OuterPaddingX);
    BulletText("HoveredColumnBody: %d, HoveredColumnBorder: %d", table->HoveredColumnBody, table->HoveredColumnBorder);
    BulletText("ResizedColumn: %d, ReorderColumn: %d, HeldHeaderColumn: %d", table->ResizedColumn, table->ReorderColumn, table->HeldHeaderColumn);
    //BulletText("BgDrawChannels: %d/%d", 0, table->BgDrawChannelUnfrozen);
    float sum_weights = 0.0f;
    for (int n = 0; n < table->ColumnsCount; n++)
        if (table->Columns[n].Flags & ImGuiTableColumnFlags_WidthStretch)
            sum_weights += table->Columns[n].StretchWeight;
    for (int n = 0; n < table->ColumnsCount; n++)
    {
        ImGuiTableColumn* column = &table->Columns[n];
        const char* name = TableGetColumnName(table, n);
        ImFormatString(buf, IM_ARRAYSIZE(buf),
            "Column %d order %d '%s': offset %+.2f to %+.2f%s\n"
            "Enabled: %d, VisibleX/Y: %d/%d, RequestOutput: %d, SkipItems: %d, DrawChannels: %d,%d\n"
            "WidthGiven: %.1f, Request/Auto: %.1f/%.1f, StretchWeight: %.3f (%.1f%%)\n"
            "MinX: %.1f, MaxX: %.1f (%+.1f), ClipRect: %.1f to %.1f (+%.1f)\n"
            "ContentWidth: %.1f,%.1f, HeadersUsed/Ideal %.1f/%.1f\n"
            "Sort: %d%s, UserID: 0x%08X, Flags: 0x%04X: %s%s%s..",
            n, column->DisplayOrder, name, column->MinX - table->WorkRect.Min.x, column->MaxX - table->WorkRect.Min.x, (n < table->FreezeColumnsRequest) ? " (Frozen)" : "",
            column->IsEnabled, column->IsVisibleX, column->IsVisibleY, column->IsRequestOutput, column->IsSkipItems, column->DrawChannelFrozen, column->DrawChannelUnfrozen,
            column->WidthGiven, column->WidthRequest, column->WidthAuto, column->StretchWeight, column->StretchWeight > 0.0f ? (column->StretchWeight / sum_weights) * 100.0f : 0.0f,
            column->MinX, column->MaxX, column->MaxX - column->MinX, column->ClipRect.Min.x, column->ClipRect.Max.x, column->ClipRect.Max.x - column->ClipRect.Min.x,
            column->ContentMaxXFrozen - column->WorkMinX, column->ContentMaxXUnfrozen - column->WorkMinX, column->ContentMaxXHeadersUsed - column->WorkMinX, column->ContentMaxXHeadersIdeal - column->WorkMinX,
            column->SortOrder, (column->SortDirection == ImGuiSortDirection_Ascending) ? " (Asc)" : (column->SortDirection == ImGuiSortDirection_Descending) ? " (Des)" : "", column->UserID, column->Flags,
            (column->Flags & ImGuiTableColumnFlags_WidthStretch) ? "WidthStretch " : "",
            (column->Flags & ImGuiTableColumnFlags_WidthFixed) ? "WidthFixed " : "",
            (column->Flags & ImGuiTableColumnFlags_NoResize) ? "NoResize " : "");
        Bullet();
        Selectable(buf);
        if (IsItemHovered())
        {
            ImRect r(column->MinX, table->OuterRect.Min.y, column->MaxX, table->OuterRect.Max.y);
            GetForegroundDrawList()->AddRect(r.Min, r.Max, IM_COL32(255, 255, 0, 255));
        }
    }
    if (ImGuiTableSettings* settings = TableGetBoundSettings(table))
        DebugNodeTableSettings(settings);
    if (clear_settings)
        table->IsResetAllRequest = true;
    TreePop();
}

void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)
{
    if (!TreeNode((void*)(intptr_t)settings->ID, "Settings 0x%08X (%d columns)", settings->ID, settings->ColumnsCount))
        return;
    BulletText("SaveFlags: 0x%08X", settings->SaveFlags);
    BulletText("ColumnsCount: %d (max %d)", settings->ColumnsCount, settings->ColumnsCountMax);
    for (int n = 0; n < settings->ColumnsCount; n++)
    {
        ImGuiTableColumnSettings* column_settings = &settings->GetColumnSettings()[n];
        ImGuiSortDirection sort_dir = (column_settings->SortOrder != -1) ? (ImGuiSortDirection)column_settings->SortDirection : ImGuiSortDirection_None;
        BulletText("Column %d Order %d SortOrder %d %s Vis %d %s %7.3f UserID 0x%08X",
            n, column_settings->DisplayOrder, column_settings->SortOrder,
            (sort_dir == ImGuiSortDirection_Ascending) ? "Asc" : (sort_dir == ImGuiSortDirection_Descending) ? "Des" : "---",
            column_settings->IsEnabled, column_settings->IsStretch ? "Weight" : "Width ", column_settings->WidthOrWeight, column_settings->UserID);
    }
    TreePop();
}

#else // #ifndef IMGUI_DISABLE_METRICS_WINDOW

void ImGui::DebugNodeTable(ImGuiTable*) {}
void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}

#endif


//-------------------------------------------------------------------------
// [SECTION] Columns, BeginColumns, EndColumns, etc.
// (This is a legacy API, prefer using BeginTable/EndTable!)
//-------------------------------------------------------------------------
// FIXME: sizing is lossy when columns width is very small (default width may turn negative etc.)
//-------------------------------------------------------------------------
// - SetWindowClipRectBeforeSetChannel() [Internal]
// - GetColumnIndex()
// - GetColumnsCount()
// - GetColumnOffset()
// - GetColumnWidth()
// - SetColumnOffset()
// - SetColumnWidth()
// - PushColumnClipRect() [Internal]
// - PushColumnsBackground() [Internal]
// - PopColumnsBackground() [Internal]
// - FindOrCreateColumns() [Internal]
// - GetColumnsID() [Internal]
// - BeginColumns()
// - NextColumn()
// - EndColumns()
// - Columns()
//-------------------------------------------------------------------------

// [Internal] Small optimization to avoid calls to PopClipRect/SetCurrentChannel/PushClipRect in sequences,
// they would meddle many times with the underlying ImDrawCmd.
// Instead, we do a preemptive overwrite of clipping rectangle _without_ altering the command-buffer and let
// the subsequent single call to SetCurrentChannel() does it things once.
void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)
{
    ImVec4 clip_rect_vec4 = clip_rect.ToVec4();
    window->ClipRect = clip_rect;
    window->DrawList->_CmdHeader.ClipRect = clip_rect_vec4;
    window->DrawList->_ClipRectStack.Data[window->DrawList->_ClipRectStack.Size - 1] = clip_rect_vec4;
}

int ImGui::GetColumnIndex()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CurrentColumns ? window->DC.CurrentColumns->Current : 0;
}

int ImGui::GetColumnsCount()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CurrentColumns ? window->DC.CurrentColumns->Count : 1;
}

float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)
{
    return offset_norm * (columns->OffMaxX - columns->OffMinX);
}

float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)
{
    return offset / (columns->OffMaxX - columns->OffMinX);
}

static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;

static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)
{
    // Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
    // window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(column_index > 0); // We are not supposed to drag column 0.
    IM_ASSERT(g.ActiveId == columns->ID + ImGuiID(column_index));

    float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x + COLUMNS_HIT_RECT_HALF_WIDTH - window->Pos.x;
    x = ImMax(x, ImGui::GetColumnOffset(column_index - 1) + g.Style.ColumnsMinSpacing);
    if ((columns->Flags & ImGuiOldColumnFlags_NoPreserveWidths))
        x = ImMin(x, ImGui::GetColumnOffset(column_index + 1) - g.Style.ColumnsMinSpacing);

    return x;
}

float ImGui::GetColumnOffset(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (columns == NULL)
        return 0.0f;

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const float t = columns->Columns[column_index].OffsetNorm;
    const float x_offset = ImLerp(columns->OffMinX, columns->OffMaxX, t);
    return x_offset;
}

static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = false)
{
    if (column_index < 0)
        column_index = columns->Current;

    float offset_norm;
    if (before_resize)
        offset_norm = columns->Columns[column_index + 1].OffsetNormBeforeResize - columns->Columns[column_index].OffsetNormBeforeResize;
    else
        offset_norm = columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm;
    return ImGui::GetColumnOffsetFromNorm(columns, offset_norm);
}

float ImGui::GetColumnWidth(int column_index)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (columns == NULL)
        return GetContentRegionAvail().x;

    if (column_index < 0)
        column_index = columns->Current;
    return GetColumnOffsetFromNorm(columns, columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm);
}

void ImGui::SetColumnOffset(int column_index, float offset)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const bool preserve_width = !(columns->Flags & ImGuiOldColumnFlags_NoPreserveWidths) && (column_index < columns->Count - 1);
    const float width = preserve_width ? GetColumnWidthEx(columns, column_index, columns->IsBeingResized) : 0.0f;

    if (!(columns->Flags & ImGuiOldColumnFlags_NoForceWithinWindow))
        offset = ImMin(offset, columns->OffMaxX - g.Style.ColumnsMinSpacing * (columns->Count - column_index));
    columns->Columns[column_index].OffsetNorm = GetColumnNormFromOffset(columns, offset - columns->OffMinX);

    if (preserve_width)
        SetColumnOffset(column_index + 1, offset + ImMax(g.Style.ColumnsMinSpacing, width));
}

void ImGui::SetColumnWidth(int column_index, float width)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    SetColumnOffset(column_index + 1, GetColumnOffset(column_index) + width);
}

void ImGui::PushColumnClipRect(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (column_index < 0)
        column_index = columns->Current;

    ImGuiOldColumnData* column = &columns->Columns[column_index];
    PushClipRect(column->ClipRect.Min, column->ClipRect.Max, false);
}

// Get into the columns background draw command (which is generally the same draw command as before we called BeginColumns)
void ImGui::PushColumnsBackground()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (columns->Count == 1)
        return;

    // Optimization: avoid SetCurrentChannel() + PushClipRect()
    columns->HostBackupClipRect = window->ClipRect;
    SetWindowClipRectBeforeSetChannel(window, columns->HostInitialClipRect);
    columns->Splitter.SetCurrentChannel(window->DrawList, 0);
}

void ImGui::PopColumnsBackground()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (columns->Count == 1)
        return;

    // Optimization: avoid PopClipRect() + SetCurrentChannel()
    SetWindowClipRectBeforeSetChannel(window, columns->HostBackupClipRect);
    columns->Splitter.SetCurrentChannel(window->DrawList, columns->Current + 1);
}

ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)
{
    // We have few columns per window so for now we don't need bother much with turning this into a faster lookup.
    for (int n = 0; n < window->ColumnsStorage.Size; n++)
        if (window->ColumnsStorage[n].ID == id)
            return &window->ColumnsStorage[n];

    window->ColumnsStorage.push_back(ImGuiOldColumns());
    ImGuiOldColumns* columns = &window->ColumnsStorage.back();
    columns->ID = id;
    return columns;
}

ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)
{
    ImGuiWindow* window = GetCurrentWindow();

    // Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
    // In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
    PushID(0x11223347 + (str_id ? 0 : columns_count));
    ImGuiID id = window->GetID(str_id ? str_id : "columns");
    PopID();

    return id;
}

void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(columns_count >= 1);
    IM_ASSERT(window->DC.CurrentColumns == NULL);   // Nested columns are currently not supported

    // Acquire storage for the columns set
    ImGuiID id = GetColumnsID(str_id, columns_count);
    ImGuiOldColumns* columns = FindOrCreateColumns(window, id);
    IM_ASSERT(columns->ID == id);
    columns->Current = 0;
    columns->Count = columns_count;
    columns->Flags = flags;
    window->DC.CurrentColumns = columns;

    columns->HostCursorPosY = window->DC.CursorPos.y;
    columns->HostCursorMaxPosX = window->DC.CursorMaxPos.x;
    columns->HostInitialClipRect = window->ClipRect;
    columns->HostBackupParentWorkRect = window->ParentWorkRect;
    window->ParentWorkRect = window->WorkRect;

    // Set state for first column
    // We aim so that the right-most column will have the same clipping width as other after being clipped by parent ClipRect
    const float column_padding = g.Style.ItemSpacing.x;
    const float half_clip_extend_x = ImFloor(ImMax(window->WindowPadding.x * 0.5f, window->WindowBorderSize));
    const float max_1 = window->WorkRect.Max.x + column_padding - ImMax(column_padding - window->WindowPadding.x, 0.0f);
    const float max_2 = window->WorkRect.Max.x + half_clip_extend_x;
    columns->OffMinX = window->DC.Indent.x - column_padding + ImMax(column_padding - window->WindowPadding.x, 0.0f);
    columns->OffMaxX = ImMax(ImMin(max_1, max_2) - window->Pos.x, columns->OffMinX + 1.0f);
    columns->LineMinY = columns->LineMaxY = window->DC.CursorPos.y;

    // Clear data if columns count changed
    if (columns->Columns.Size != 0 && columns->Columns.Size != columns_count + 1)
        columns->Columns.resize(0);

    // Initialize default widths
    columns->IsFirstFrame = (columns->Columns.Size == 0);
    if (columns->Columns.Size == 0)
    {
        columns->Columns.reserve(columns_count + 1);
        for (int n = 0; n < columns_count + 1; n++)
        {
            ImGuiOldColumnData column;
            column.OffsetNorm = n / (float)columns_count;
            columns->Columns.push_back(column);
        }
    }

    for (int n = 0; n < columns_count; n++)
    {
        // Compute clipping rectangle
        ImGuiOldColumnData* column = &columns->Columns[n];
        float clip_x1 = IM_ROUND(window->Pos.x + GetColumnOffset(n));
        float clip_x2 = IM_ROUND(window->Pos.x + GetColumnOffset(n + 1) - 1.0f);
        column->ClipRect = ImRect(clip_x1, -FLT_MAX, clip_x2, +FLT_MAX);
        column->ClipRect.ClipWithFull(window->ClipRect);
    }

    if (columns->Count > 1)
    {
        columns->Splitter.Split(window->DrawList, 1 + columns->Count);
        columns->Splitter.SetCurrentChannel(window->DrawList, 1);
        PushColumnClipRect(0);
    }

    // We don't generally store Indent.x inside ColumnsOffset because it may be manipulated by the user.
    float offset_0 = GetColumnOffset(columns->Current);
    float offset_1 = GetColumnOffset(columns->Current + 1);
    float width = offset_1 - offset_0;
    PushItemWidth(width * 0.65f);
    window->DC.ColumnsOffset.x = ImMax(column_padding - window->WindowPadding.x, 0.0f);
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
    window->WorkRect.Max.x = window->Pos.x + offset_1 - column_padding;
}

void ImGui::NextColumn()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems || window->DC.CurrentColumns == NULL)
        return;

    ImGuiContext& g = *GImGui;
    ImGuiOldColumns* columns = window->DC.CurrentColumns;

    if (columns->Count == 1)
    {
        window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
        IM_ASSERT(columns->Current == 0);
        return;
    }

    // Next column
    if (++columns->Current == columns->Count)
        columns->Current = 0;

    PopItemWidth();

    // Optimization: avoid PopClipRect() + SetCurrentChannel() + PushClipRect()
    // (which would needlessly attempt to update commands in the wrong channel, then pop or overwrite them),
    ImGuiOldColumnData* column = &columns->Columns[columns->Current];
    SetWindowClipRectBeforeSetChannel(window, column->ClipRect);
    columns->Splitter.SetCurrentChannel(window->DrawList, columns->Current + 1);

    const float column_padding = g.Style.ItemSpacing.x;
    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    if (columns->Current > 0)
    {
        // Columns 1+ ignore IndentX (by canceling it out)
        // FIXME-COLUMNS: Unnecessary, could be locked?
        window->DC.ColumnsOffset.x = GetColumnOffset(columns->Current) - window->DC.Indent.x + column_padding;
    }
    else
    {
        // New row/line: column 0 honor IndentX.
        window->DC.ColumnsOffset.x = ImMax(column_padding - window->WindowPadding.x, 0.0f);
        columns->LineMinY = columns->LineMaxY;
    }
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
    window->DC.CursorPos.y = columns->LineMinY;
    window->DC.CurrLineSize = ImVec2(0.0f, 0.0f);
    window->DC.CurrLineTextBaseOffset = 0.0f;

    // FIXME-COLUMNS: Share code with BeginColumns() - move code on columns setup.
    float offset_0 = GetColumnOffset(columns->Current);
    float offset_1 = GetColumnOffset(columns->Current + 1);
    float width = offset_1 - offset_0;
    PushItemWidth(width * 0.65f);
    window->WorkRect.Max.x = window->Pos.x + offset_1 - column_padding;
}

void ImGui::EndColumns()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    IM_ASSERT(columns != NULL);

    PopItemWidth();
    if (columns->Count > 1)
    {
        PopClipRect();
        columns->Splitter.Merge(window->DrawList);
    }

    const ImGuiOldColumnFlags flags = columns->Flags;
    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    window->DC.CursorPos.y = columns->LineMaxY;
    if (!(flags & ImGuiOldColumnFlags_GrowParentContentsSize))
        window->DC.CursorMaxPos.x = columns->HostCursorMaxPosX;  // Restore cursor max pos, as columns don't grow parent

    // Draw columns borders and handle resize
    // The IsBeingResized flag ensure we preserve pre-resize columns width so back-and-forth are not lossy
    bool is_being_resized = false;
    if (!(flags & ImGuiOldColumnFlags_NoBorder) && !window->SkipItems)
    {
        // We clip Y boundaries CPU side because very long triangles are mishandled by some GPU drivers.
        const float y1 = ImMax(columns->HostCursorPosY, window->ClipRect.Min.y);
        const float y2 = ImMin(window->DC.CursorPos.y, window->ClipRect.Max.y);
        int dragging_column = -1;
        for (int n = 1; n < columns->Count; n++)
        {
            ImGuiOldColumnData* column = &columns->Columns[n];
            float x = window->Pos.x + GetColumnOffset(n);
            const ImGuiID column_id = columns->ID + ImGuiID(n);
            const float column_hit_hw = COLUMNS_HIT_RECT_HALF_WIDTH;
            const ImRect column_hit_rect(ImVec2(x - column_hit_hw, y1), ImVec2(x + column_hit_hw, y2));
            KeepAliveID(column_id);
            if (IsClippedEx(column_hit_rect, column_id, false))
                continue;

            bool hovered = false, held = false;
            if (!(flags & ImGuiOldColumnFlags_NoResize))
            {
                ButtonBehavior(column_hit_rect, column_id, &hovered, &held);
                if (hovered || held)
                    g.MouseCursor = ImGuiMouseCursor_ResizeEW;
                if (held && !(column->Flags & ImGuiOldColumnFlags_NoResize))
                    dragging_column = n;
            }

            // Draw column
            const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : hovered ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
            const float xi = IM_FLOOR(x);
            window->DrawList->AddLine(ImVec2(xi, y1 + 1.0f), ImVec2(xi, y2), col);
        }

        // Apply dragging after drawing the column lines, so our rendered lines are in sync with how items were displayed during the frame.
        if (dragging_column != -1)
        {
            if (!columns->IsBeingResized)
                for (int n = 0; n < columns->Count + 1; n++)
                    columns->Columns[n].OffsetNormBeforeResize = columns->Columns[n].OffsetNorm;
            columns->IsBeingResized = is_being_resized = true;
            float x = GetDraggedColumnOffset(columns, dragging_column);
            SetColumnOffset(dragging_column, x);
        }
    }
    columns->IsBeingResized = is_being_resized;

    window->WorkRect = window->ParentWorkRect;
    window->ParentWorkRect = columns->HostBackupParentWorkRect;
    window->DC.CurrentColumns = NULL;
    window->DC.ColumnsOffset.x = 0.0f;
    window->DC.CursorPos.x = IM_FLOOR(window->Pos.x + window->DC.Indent.x + window->DC.ColumnsOffset.x);
}

void ImGui::Columns(int columns_count, const char* id, bool border)
{
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(columns_count >= 1);

    ImGuiOldColumnFlags flags = (border ? 0 : ImGuiOldColumnFlags_NoBorder);
    //flags |= ImGuiOldColumnFlags_NoPreserveWidths; // NB: Legacy behavior
    ImGuiOldColumns* columns = window->DC.CurrentColumns;
    if (columns != NULL && columns->Count == columns_count && columns->Flags == flags)
        return;

    if (columns != NULL)
        EndColumns();

    if (columns_count != 1)
        BeginColumns(id, columns_count, flags);
}

//-------------------------------------------------------------------------

#endif // #ifndef IMGUI_DISABLE

// Junk Code By Troll Face & Thaisen's Gen
void oPXkYTVVakrHsRJyrpoQXogtYJoLXzJhA38812432() {     float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19334516 = -897662724;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64687994 = -743436585;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33192587 = -896130464;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90343914 = -44155034;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4785784 = -548094691;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26513546 = -439515694;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22920352 = -970233754;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2794949 = -60891431;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO80461872 = -214067895;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89889722 = -218131763;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO10639494 = -482346740;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70751904 = -507340920;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48947366 = -75737466;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43603270 = -28129019;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53464993 = -356415070;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37571831 = -828874762;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81789937 = -542225717;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58024683 = -383711949;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44881864 = -460297919;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23895910 = -853984638;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO1390412 = -186380167;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO82337833 = -566432712;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69543337 = -537967914;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88018563 = -894454395;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99192424 = -564490866;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23183071 = 25435653;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO39250106 = 68636514;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8577772 = -356498981;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90330339 = -275090280;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO63122388 = -785210289;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23391326 = -518635833;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66903607 = -836361349;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83662451 = 74369943;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72183235 = -141805997;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO85502449 = 28458132;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4508956 = 97481499;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44762216 = -315096941;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37896327 = -55850866;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90563652 = -831082656;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33122210 = -809452065;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO59356076 = -444299252;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35047321 = -71633655;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92400538 = -161515412;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19185869 = -299494882;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26868407 = -984089830;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO96392841 = -289651799;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88079 = -828792424;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67543506 = -357677778;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35851035 = -445014606;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33891916 = -666678764;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO94846729 = -962625830;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70167054 = -267878227;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO97133160 = -714030488;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35988207 = -566453161;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37422021 = -899162111;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO36996683 = -231230013;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO95144656 = -105468672;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45174024 = 98323930;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO91151490 = -479664168;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81602713 = -473530345;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87263439 = -408152208;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO14342581 = -513734773;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO12464610 = -785801151;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO17339484 = -428857606;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66498396 = -699495930;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43735886 = -645985392;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87089453 = -481710864;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO76764131 = -933931470;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58100821 = 43412849;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48956038 = -353896570;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92809615 = -413777821;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43893611 = -386374851;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67461031 = -552629293;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO11759655 = -650845854;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64539833 = -309685386;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66343090 = -14746512;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89937295 = -304917301;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO50357468 = -138473033;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO61150157 = -910364565;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2799583 = -174839067;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23094993 = -145771923;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO71706599 = -573685709;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72726736 = -911484376;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO56438423 = -608411517;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO68275658 = -822584459;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53224272 = -150757607;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69770447 = -22330861;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO47674245 = -359176897;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO34761214 = -242643886;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48505766 = -740311856;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO9364299 = -797049829;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99588191 = -313420872;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO46744837 = -576186699;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8960939 = -257552312;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45858771 = -301299857;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45013496 = -930564479;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22582712 = -285832505;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO75061054 = -732657806;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO52687473 = -599998952;    float zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83132520 = -897662724;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19334516 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64687994;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64687994 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33192587;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33192587 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90343914;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90343914 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4785784;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4785784 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26513546;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26513546 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22920352;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22920352 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2794949;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2794949 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO80461872;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO80461872 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89889722;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89889722 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO10639494;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO10639494 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70751904;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70751904 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48947366;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48947366 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43603270;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43603270 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53464993;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53464993 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37571831;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37571831 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81789937;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81789937 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58024683;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58024683 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44881864;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44881864 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23895910;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23895910 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO1390412;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO1390412 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO82337833;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO82337833 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69543337;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69543337 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88018563;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88018563 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99192424;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99192424 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23183071;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23183071 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO39250106;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO39250106 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8577772;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8577772 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90330339;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90330339 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO63122388;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO63122388 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23391326;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23391326 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66903607;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66903607 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83662451;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83662451 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72183235;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72183235 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO85502449;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO85502449 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4508956;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO4508956 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44762216;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO44762216 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37896327;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37896327 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90563652;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO90563652 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33122210;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33122210 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO59356076;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO59356076 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35047321;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35047321 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92400538;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92400538 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19185869;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19185869 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26868407;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO26868407 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO96392841;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO96392841 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88079;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO88079 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67543506;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67543506 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35851035;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35851035 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33891916;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO33891916 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO94846729;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO94846729 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70167054;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO70167054 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO97133160;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO97133160 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35988207;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO35988207 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37422021;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO37422021 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO36996683;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO36996683 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO95144656;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO95144656 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45174024;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45174024 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO91151490;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO91151490 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81602713;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO81602713 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87263439;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87263439 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO14342581;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO14342581 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO12464610;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO12464610 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO17339484;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO17339484 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66498396;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66498396 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43735886;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43735886 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87089453;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO87089453 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO76764131;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO76764131 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58100821;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO58100821 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48956038;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48956038 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92809615;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO92809615 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43893611;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO43893611 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67461031;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO67461031 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO11759655;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO11759655 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64539833;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO64539833 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66343090;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO66343090 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89937295;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO89937295 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO50357468;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO50357468 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO61150157;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO61150157 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2799583;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO2799583 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23094993;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO23094993 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO71706599;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO71706599 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72726736;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO72726736 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO56438423;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO56438423 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO68275658;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO68275658 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53224272;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO53224272 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69770447;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO69770447 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO47674245;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO47674245 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO34761214;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO34761214 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48505766;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO48505766 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO9364299;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO9364299 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99588191;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO99588191 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO46744837;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO46744837 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8960939;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO8960939 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45858771;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45858771 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45013496;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO45013496 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22582712;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO22582712 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO75061054;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO75061054 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO52687473;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO52687473 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83132520;     zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO83132520 = zREDXEOBayEMNeNIiXxRXCzieMPeKxbbJGszFuUkaO19334516;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VMHIOaetUTCEffMsBVsKbfCcMwtRFQzSR34995593() {     float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78930612 = -26419102;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv66193843 = -553591970;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70193975 = -970271387;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86219672 = -916765911;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv16079010 = -448601718;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24190667 = -297775367;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv20278835 = -299951340;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53620233 = -415102806;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv94275315 = -746740394;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72914237 = -159390616;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35934425 = -883889180;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5423107 = -602362170;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19701930 = 18084016;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1977110 = 67712634;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50772799 = -48941591;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34326085 = -634247653;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17751042 = -470441998;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv22693014 = -753048053;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25324067 = -599417548;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv3813019 = -416393291;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81851530 = -19400991;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50827432 = -458834590;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61735162 = -302262993;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52748802 = -458792632;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75170429 = -20628456;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17597978 = -109181818;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52590177 = -380843483;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv73688940 = -977880572;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40114682 = -64682895;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1595855 = -832193531;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv48305644 = -63855161;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9668868 = -153579346;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv32744490 = 94423071;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv54707678 = -743689928;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv90439809 = -719751854;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv83098851 = -214175083;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35393893 = -607875576;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv36256664 = -303256;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9581595 = -549789173;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5947865 = 16666987;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17573890 = -912960848;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5126503 = -76575074;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv33279781 = -994960242;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv93425374 = -723409620;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv27856722 = -430407899;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61185970 = -532595958;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5576801 = -720648091;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv14239901 = -690431006;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75240682 = -728952225;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv49059308 = -987931225;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv45332980 = -748734054;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76752206 = -239121482;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72548675 = -953978942;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9262730 = -826622116;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53144063 = -863096198;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv28103181 = -567584512;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv4458682 = -151328978;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17445173 = -411478755;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11049244 = -796137456;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98481032 = -239419901;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71600489 = -916931884;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv46589894 = -322070769;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13505551 = -250419911;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv92679461 = -914546863;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24608593 = 4464544;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv26265558 = -630309834;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72678616 = -596785241;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv64994252 = -238226057;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11537300 = -212535513;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv67673947 = -834766509;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98932191 = 73627922;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81494377 = -370138742;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13111420 = -103258881;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19376203 = -516084536;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86239129 = -503432443;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76725027 = -942825918;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17547652 = -463874349;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68309788 = -578853373;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24892081 = 71615267;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13984459 = -488032499;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv12021177 = -388533727;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv38350276 = -690412478;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98448257 = -148928347;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91055373 = -76751671;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv56262875 = 16540523;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71553437 = -824733679;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv37120193 = -199600405;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv23481761 = -78954814;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1563615 = -880593730;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv62336629 = -52167342;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78640170 = 37153895;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17948721 = -96396821;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25207421 = -204165801;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11100563 = -210369272;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34347375 = -66401129;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70983995 = -490890080;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91620951 = -826155163;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40600319 = 19586621;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68816781 = -627874165;    float hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1591165 = -26419102;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78930612 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv66193843;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv66193843 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70193975;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70193975 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86219672;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86219672 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv16079010;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv16079010 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24190667;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24190667 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv20278835;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv20278835 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53620233;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53620233 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv94275315;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv94275315 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72914237;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72914237 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35934425;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35934425 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5423107;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5423107 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19701930;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19701930 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1977110;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1977110 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50772799;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50772799 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34326085;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34326085 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17751042;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17751042 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv22693014;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv22693014 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25324067;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25324067 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv3813019;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv3813019 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81851530;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81851530 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50827432;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv50827432 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61735162;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61735162 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52748802;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52748802 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75170429;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75170429 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17597978;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17597978 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52590177;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv52590177 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv73688940;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv73688940 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40114682;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40114682 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1595855;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1595855 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv48305644;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv48305644 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9668868;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9668868 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv32744490;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv32744490 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv54707678;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv54707678 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv90439809;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv90439809 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv83098851;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv83098851 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35393893;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv35393893 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv36256664;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv36256664 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9581595;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9581595 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5947865;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5947865 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17573890;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17573890 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5126503;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5126503 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv33279781;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv33279781 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv93425374;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv93425374 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv27856722;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv27856722 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61185970;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv61185970 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5576801;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv5576801 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv14239901;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv14239901 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75240682;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv75240682 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv49059308;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv49059308 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv45332980;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv45332980 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76752206;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76752206 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72548675;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72548675 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9262730;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv9262730 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53144063;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv53144063 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv28103181;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv28103181 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv4458682;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv4458682 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17445173;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17445173 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11049244;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11049244 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98481032;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98481032 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71600489;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71600489 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv46589894;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv46589894 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13505551;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13505551 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv92679461;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv92679461 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24608593;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24608593 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv26265558;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv26265558 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72678616;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv72678616 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv64994252;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv64994252 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11537300;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11537300 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv67673947;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv67673947 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98932191;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98932191 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81494377;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv81494377 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13111420;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13111420 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19376203;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv19376203 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86239129;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv86239129 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76725027;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv76725027 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17547652;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17547652 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68309788;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68309788 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24892081;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv24892081 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13984459;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv13984459 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv12021177;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv12021177 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv38350276;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv38350276 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98448257;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv98448257 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91055373;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91055373 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv56262875;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv56262875 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71553437;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv71553437 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv37120193;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv37120193 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv23481761;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv23481761 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1563615;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1563615 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv62336629;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv62336629 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78640170;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78640170 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17948721;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv17948721 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25207421;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv25207421 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11100563;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv11100563 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34347375;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv34347375 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70983995;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv70983995 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91620951;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv91620951 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40600319;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv40600319 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68816781;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv68816781 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1591165;     hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv1591165 = hUBPoSiPoDzapwBxjmLiRtpJfwSgMnDUknyKLdMDJv78930612;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PiXJLSOOjgIHnKfVxHuqwqFrrGJcqEIVf47540781() {     float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj98398782 = -439550314;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19217708 = 530034;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87030967 = -621900002;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4866822 = -733340174;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16525526 = 25125866;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49782741 = -188260135;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65110713 = -743257570;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18870466 = -508910772;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj54962113 = -374931773;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj50842960 = -164976662;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj90157688 = -216879480;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8917720 = -601664875;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10073589 = -406273261;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10393150 = -474573092;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj11299261 = -347025382;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj541734 = 2560413;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj23713155 = -642216679;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj46755766 = -503802771;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24958947 = -976622309;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84424320 = -33929747;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94307602 = -625613317;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65809515 = -970637803;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29908168 = -599837611;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70470471 = -95336624;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86373918 = -314928566;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22365439 = -894977036;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj36518308 = -45994415;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24480615 = -41613851;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj81859638 = -78594041;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86302708 = -923632226;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj78109729 = 70818746;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49248178 = -717928364;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj44220594 = -460784696;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13464185 = 51706866;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj30370146 = -782454660;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19164789 = -517743691;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj3777344 = -34751651;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77739138 = -77512071;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76894919 = 85796002;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj27229601 = 20135890;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59055947 = -322747144;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16985635 = -315471300;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4413022 = -942762039;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76810913 = -72482281;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj7885133 = -707530862;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj15647098 = 30072621;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87566680 = -634341414;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj14395731 = -873718320;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16376274 = -742891464;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89957650 = -748943570;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19768549 = -55098985;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj93201066 = -616474341;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj42373821 = -630087903;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82192758 = -821215752;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53233179 = -637654833;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj32589268 = -468912511;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89309539 = -399632356;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16560496 = -426563379;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18492904 = -318411609;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94160087 = -79897099;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13264433 = -42265721;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40630098 = -601643720;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj37010827 = -330316731;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj68659404 = -451299548;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj72733231 = -135795409;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40909510 = -498951116;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj64697126 = -40880179;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96609404 = -357980127;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj80023003 = -692118433;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj92134471 = -829281692;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96764390 = -962687937;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj45974016 = -464704608;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj69860846 = -489598774;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97729345 = -896758200;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj25368374 = -711182603;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77321967 = -210142018;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj61396493 = 72124236;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53097255 = -427355331;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62585338 = -387805762;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70726820 = -245001187;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj34798759 = -160635623;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22122577 = -172276095;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8104342 = -298722387;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj91901988 = -329650472;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66534159 = -768533241;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84908662 = -312706913;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj6874358 = 12159538;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62027835 = -639568944;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj60231005 = -310638301;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97780878 = -213542149;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29855250 = -18111336;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87216847 = -608188272;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59246235 = -759100463;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82734832 = -834306899;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13965168 = -937598389;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18425849 = -721103424;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj79974808 = -985154569;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj35753617 = -391462492;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4077682 = -936686872;    float YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66975623 = -439550314;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj98398782 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19217708;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19217708 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87030967;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87030967 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4866822;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4866822 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16525526;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16525526 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49782741;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49782741 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65110713;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65110713 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18870466;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18870466 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj54962113;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj54962113 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj50842960;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj50842960 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj90157688;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj90157688 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8917720;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8917720 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10073589;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10073589 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10393150;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj10393150 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj11299261;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj11299261 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj541734;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj541734 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj23713155;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj23713155 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj46755766;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj46755766 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24958947;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24958947 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84424320;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84424320 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94307602;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94307602 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65809515;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj65809515 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29908168;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29908168 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70470471;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70470471 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86373918;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86373918 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22365439;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22365439 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj36518308;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj36518308 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24480615;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj24480615 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj81859638;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj81859638 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86302708;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj86302708 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj78109729;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj78109729 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49248178;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj49248178 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj44220594;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj44220594 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13464185;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13464185 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj30370146;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj30370146 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19164789;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19164789 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj3777344;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj3777344 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77739138;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77739138 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76894919;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76894919 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj27229601;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj27229601 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59055947;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59055947 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16985635;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16985635 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4413022;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4413022 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76810913;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj76810913 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj7885133;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj7885133 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj15647098;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj15647098 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87566680;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87566680 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj14395731;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj14395731 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16376274;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16376274 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89957650;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89957650 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19768549;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj19768549 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj93201066;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj93201066 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj42373821;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj42373821 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82192758;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82192758 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53233179;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53233179 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj32589268;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj32589268 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89309539;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj89309539 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16560496;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj16560496 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18492904;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18492904 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94160087;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj94160087 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13264433;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13264433 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40630098;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40630098 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj37010827;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj37010827 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj68659404;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj68659404 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj72733231;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj72733231 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40909510;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj40909510 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj64697126;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj64697126 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96609404;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96609404 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj80023003;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj80023003 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj92134471;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj92134471 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96764390;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj96764390 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj45974016;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj45974016 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj69860846;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj69860846 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97729345;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97729345 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj25368374;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj25368374 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77321967;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj77321967 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj61396493;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj61396493 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53097255;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj53097255 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62585338;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62585338 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70726820;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj70726820 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj34798759;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj34798759 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22122577;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj22122577 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8104342;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj8104342 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj91901988;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj91901988 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66534159;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66534159 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84908662;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj84908662 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj6874358;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj6874358 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62027835;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj62027835 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj60231005;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj60231005 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97780878;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj97780878 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29855250;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj29855250 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87216847;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj87216847 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59246235;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj59246235 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82734832;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj82734832 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13965168;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj13965168 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18425849;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj18425849 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj79974808;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj79974808 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj35753617;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj35753617 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4077682;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj4077682 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66975623;     YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj66975623 = YLfsPxhHVZJzJcfMHBrVfOYcfSFJmXeYnbPzzchKNj98398782;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EZiFcTheecYWDaZwGjeUZbVrxBXWBfjgJ7843439() {     float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88525091 = -498306514;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2342773 = -374396137;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82523666 = -758694463;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78365396 = -919511996;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox29582262 = 83802424;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox30569145 = -80893243;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox59774151 = -380803043;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71749029 = -145358511;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78773800 = -382824411;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55098631 = -834851188;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox66309508 = -725299637;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43667227 = -81253010;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48419721 = -718509121;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48812003 = -472733977;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox9373632 = -832146325;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24721476 = -797819457;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67675335 = -903561920;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox68111478 = -946652064;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox85873337 = -343032745;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox51748569 = -681808056;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82230004 = -330038409;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63891097 = -203734438;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63146586 = 93702468;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78391568 = -543360999;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33259107 = -958439510;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41156404 = -770850771;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox58485643 = -905523409;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox47650990 = -101503909;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43068637 = -840793089;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox34091789 = -798034617;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox81573132 = -255847798;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48615092 = -118752784;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53189635 = -761009856;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox37302829 = 60255708;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65966680 = -432790321;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72395795 = -820773101;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4010913 = -650567555;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2096422 = 56428685;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox87427936 = -721666043;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71741742 = -984571883;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72755620 = -28608420;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71630098 = -129964513;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox64229863 = -318187635;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox7472854 = 63434530;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99849550 = -820040818;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36086091 = -453551285;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67989970 = -182823914;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4782190 = -900374574;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44294927 = -78830810;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19238057 = -105939907;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox49134073 = -429481030;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36974174 = -580901174;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox91826276 = -341940897;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox35099821 = -944771034;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox25613435 = -766255105;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24633995 = -194572077;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox39196186 = -368098605;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4132098 = -115333464;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox45106290 = -961072487;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88425858 = -145346806;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72083502 = -175369835;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox12123161 = -179299135;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox28680393 = -304565422;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44682012 = -584789794;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73525498 = -479003391;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox17694416 = -506546854;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox90477592 = -320243155;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11116892 = -678764829;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82845322 = 60056344;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36977836 = 88626775;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox20710564 = -47251902;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65578913 = -859990605;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox80683541 = -124986021;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox14131596 = -358460863;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78992948 = -553199637;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox10599906 = -100073897;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99661234 = -885546804;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55673732 = -969732063;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78542017 = -723320182;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox97173015 = -404888225;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73166433 = -488026857;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53703453 = 94851164;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox3356063 = 77326901;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox23830580 = -634853182;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox84957716 = -268553587;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44598958 = -674946624;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56788816 = -776811887;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox18089814 = -816238822;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11689395 = -173489188;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41332686 = -138218245;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33199610 = -352674497;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99878815 = -435234091;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56990132 = 17501171;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99002078 = -476319238;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99658239 = -709202048;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox60632459 = -849309285;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox42949706 = -825399092;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19547851 = -733397841;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33947356 = -457562080;    float wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82155135 = -498306514;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88525091 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2342773;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2342773 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82523666;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82523666 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78365396;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78365396 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox29582262;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox29582262 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox30569145;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox30569145 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox59774151;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox59774151 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71749029;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71749029 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78773800;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78773800 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55098631;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55098631 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox66309508;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox66309508 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43667227;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43667227 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48419721;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48419721 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48812003;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48812003 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox9373632;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox9373632 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24721476;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24721476 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67675335;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67675335 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox68111478;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox68111478 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox85873337;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox85873337 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox51748569;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox51748569 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82230004;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82230004 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63891097;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63891097 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63146586;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox63146586 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78391568;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78391568 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33259107;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33259107 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41156404;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41156404 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox58485643;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox58485643 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox47650990;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox47650990 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43068637;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox43068637 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox34091789;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox34091789 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox81573132;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox81573132 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48615092;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox48615092 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53189635;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53189635 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox37302829;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox37302829 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65966680;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65966680 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72395795;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72395795 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4010913;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4010913 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2096422;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox2096422 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox87427936;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox87427936 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71741742;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71741742 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72755620;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72755620 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71630098;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox71630098 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox64229863;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox64229863 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox7472854;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox7472854 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99849550;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99849550 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36086091;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36086091 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67989970;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox67989970 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4782190;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4782190 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44294927;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44294927 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19238057;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19238057 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox49134073;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox49134073 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36974174;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36974174 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox91826276;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox91826276 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox35099821;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox35099821 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox25613435;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox25613435 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24633995;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox24633995 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox39196186;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox39196186 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4132098;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox4132098 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox45106290;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox45106290 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88425858;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88425858 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72083502;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox72083502 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox12123161;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox12123161 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox28680393;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox28680393 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44682012;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44682012 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73525498;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73525498 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox17694416;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox17694416 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox90477592;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox90477592 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11116892;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11116892 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82845322;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82845322 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36977836;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox36977836 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox20710564;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox20710564 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65578913;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox65578913 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox80683541;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox80683541 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox14131596;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox14131596 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78992948;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78992948 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox10599906;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox10599906 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99661234;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99661234 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55673732;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox55673732 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78542017;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox78542017 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox97173015;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox97173015 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73166433;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox73166433 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53703453;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox53703453 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox3356063;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox3356063 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox23830580;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox23830580 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox84957716;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox84957716 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44598958;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox44598958 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56788816;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56788816 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox18089814;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox18089814 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11689395;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox11689395 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41332686;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox41332686 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33199610;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33199610 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99878815;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99878815 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56990132;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox56990132 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99002078;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99002078 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99658239;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox99658239 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox60632459;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox60632459 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox42949706;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox42949706 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19547851;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox19547851 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33947356;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox33947356 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82155135;     wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox82155135 = wSapcApWPSFQiejyxLSfEPdDqHbwLcytrNGIyGeiox88525091;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dXHFgwxFXFFlAlhPCmVIOHcfvOXzGuigK20388628() {     float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO7993262 = -911437726;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO55366636 = -920274133;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO99360657 = -410323078;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO97012545 = -736086259;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30028778 = -542469992;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56161219 = 28621989;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4606030 = -824109273;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO36999263 = -239166477;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO39460598 = -11015790;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO33027354 = -840437234;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20532772 = -58289937;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47161841 = -80555715;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO38791381 = -42866398;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57228043 = 84980298;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69900093 = -30230117;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90937125 = -161011391;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO73637448 = 24663398;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92174229 = -697406782;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85508216 = -720237506;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32359871 = -299344513;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO94686076 = -936250735;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO78873180 = -715537651;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31319592 = -203872151;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96113236 = -179904991;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO44462596 = -152739619;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO45923865 = -456645989;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42413774 = -570674340;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO98442664 = -265237188;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84813593 = -854704235;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18798643 = -889473311;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11377218 = -121173890;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO88194403 = -683101802;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO64665738 = -216217622;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96059336 = -244347499;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO5897017 = -495493127;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8461733 = -24341710;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO72394363 = -77443630;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43578896 = -20780131;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO54741262 = -86080868;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO93023478 = -981102979;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14237677 = -538394715;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO83489231 = -368860739;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO35363104 = -265989432;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90858392 = -385638131;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79877961 = 2836219;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90547218 = -990882706;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO49979850 = -96517237;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4938020 = 16338112;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85430518 = -92770049;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO60136399 = -966952252;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO23569642 = -835845961;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53423034 = -958254034;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61651422 = -18049858;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8029849 = -939364670;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO25702551 = -540813740;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO29120082 = -95900075;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24047044 = -616401983;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO3247421 = -130418087;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52549950 = -483346641;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84104913 = 14175997;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13747446 = -400703672;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO6163365 = -458872085;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52185669 = -384462242;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20661955 = -121542479;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO21650137 = -619263344;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32338368 = -375188136;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO82496102 = -864338093;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42732044 = -798518900;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO51331027 = -419526576;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61438360 = 94111592;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18542762 = 16432239;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30058552 = -954556471;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37432968 = -511325914;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92484738 = -739134527;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18122194 = -760949798;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11196845 = -467389997;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43510076 = -349548220;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO40461200 = -818234021;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO16235276 = -82741211;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53915377 = -161856914;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95944014 = -260128753;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37475754 = -487012453;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13012147 = -72467140;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24677195 = -887751983;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95229000 = 46372649;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57954183 = -162919857;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO26542981 = -565051944;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56635889 = -276852953;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70356785 = -703533759;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO76776935 = -299593052;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84414689 = -407939728;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69146942 = -947025543;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO91028946 = -537433491;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70636348 = -256866;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79276032 = -480399308;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8074313 = 20477370;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31303563 = -984398497;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14701149 = -44446954;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69208256 = -766374787;    float ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47539593 = -911437726;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO7993262 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO55366636;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO55366636 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO99360657;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO99360657 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO97012545;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO97012545 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30028778;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30028778 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56161219;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56161219 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4606030;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4606030 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO36999263;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO36999263 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO39460598;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO39460598 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO33027354;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO33027354 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20532772;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20532772 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47161841;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47161841 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO38791381;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO38791381 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57228043;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57228043 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69900093;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69900093 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90937125;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90937125 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO73637448;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO73637448 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92174229;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92174229 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85508216;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85508216 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32359871;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32359871 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO94686076;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO94686076 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO78873180;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO78873180 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31319592;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31319592 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96113236;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96113236 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO44462596;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO44462596 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO45923865;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO45923865 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42413774;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42413774 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO98442664;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO98442664 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84813593;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84813593 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18798643;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18798643 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11377218;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11377218 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO88194403;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO88194403 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO64665738;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO64665738 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96059336;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO96059336 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO5897017;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO5897017 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8461733;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8461733 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO72394363;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO72394363 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43578896;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43578896 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO54741262;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO54741262 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO93023478;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO93023478 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14237677;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14237677 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO83489231;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO83489231 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO35363104;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO35363104 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90858392;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90858392 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79877961;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79877961 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90547218;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO90547218 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO49979850;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO49979850 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4938020;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO4938020 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85430518;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO85430518 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO60136399;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO60136399 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO23569642;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO23569642 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53423034;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53423034 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61651422;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61651422 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8029849;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8029849 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO25702551;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO25702551 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO29120082;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO29120082 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24047044;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24047044 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO3247421;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO3247421 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52549950;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52549950 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84104913;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84104913 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13747446;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13747446 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO6163365;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO6163365 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52185669;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO52185669 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20661955;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO20661955 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO21650137;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO21650137 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32338368;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO32338368 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO82496102;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO82496102 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42732044;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO42732044 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO51331027;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO51331027 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61438360;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO61438360 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18542762;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18542762 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30058552;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO30058552 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37432968;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37432968 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92484738;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO92484738 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18122194;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO18122194 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11196845;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO11196845 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43510076;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO43510076 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO40461200;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO40461200 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO16235276;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO16235276 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53915377;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO53915377 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95944014;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95944014 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37475754;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO37475754 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13012147;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO13012147 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24677195;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO24677195 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95229000;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO95229000 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57954183;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO57954183 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO26542981;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO26542981 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56635889;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO56635889 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70356785;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70356785 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO76776935;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO76776935 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84414689;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO84414689 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69146942;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69146942 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO91028946;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO91028946 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70636348;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO70636348 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79276032;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO79276032 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8074313;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO8074313 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31303563;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO31303563 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14701149;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO14701149 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69208256;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO69208256 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47539593;     ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO47539593 = ivASQqCupwfMYMDvXEpiJcWubJRYyzcWZaSqhwlvSO7993262;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wQzAaOyXvZHkVwdaDCgZNndCLprbyFAKr80691285() {     float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98119570 = -970193927;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38491701 = -195200303;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94853356 = -547117539;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX70511120 = -922258081;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43085513 = -483793434;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX36947624 = -964011119;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99269467 = -461654745;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89877825 = -975614215;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX63272285 = -18908427;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37283024 = -410311759;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684590 = -566710095;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81911348 = -660143850;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77137513 = -355102258;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95646896 = 86819413;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67974465 = -515351059;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX15116867 = -961391261;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17599629 = -236681843;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13529943 = -40256074;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46422608 = -86647941;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99684118 = -947222822;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX82608479 = -640675827;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76954762 = 51365713;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64558010 = -610332072;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX4034335 = -627929367;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX91347783 = -796250563;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64714830 = -332519724;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64381108 = -330203334;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21613040 = -325127246;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46022591 = -516903283;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX66587723 = -763875702;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX14840620 = -447840434;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87561317 = -83926222;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73634779 = -516442782;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX19897981 = -235798657;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX41493551 = -145828788;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX61692740 = -327371120;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72627932 = -693259534;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67936179 = -986839375;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX65274279 = -893542914;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37535620 = -885810753;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX27937351 = -244255991;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38133695 = -183353952;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95179944 = -741415028;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21520334 = -249721319;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71842379 = -109673737;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX10986212 = -374506611;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX30403141 = -744999736;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95324478 = -10318141;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13349173 = -528709395;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89416804 = -323948590;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX52935165 = -110228006;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX97196141 = -922680867;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX11103878 = -829902853;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX60936911 = 37080048;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98082806 = -669414011;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21164809 = -921559641;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73933690 = -584868232;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX90819022 = -919188173;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX79163336 = -26007519;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX78370683 = -51273710;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72566515 = -533807786;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77656427 = -36527500;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43855235 = -358710933;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684562 = -255032725;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX22442404 = -962471325;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX9123274 = -382783873;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8276569 = -43701068;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX57239532 = -19303602;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX54153346 = -767351800;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX6281726 = -87979940;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX42488935 = -168131727;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX49663449 = -249842469;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX48255664 = -146713161;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8886988 = -200837189;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71746768 = -602966832;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX44474784 = -357321876;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81774817 = -207219260;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43037677 = -260610753;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX32191955 = -418255630;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX80361571 = -321743952;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX34311689 = -587519988;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX69056630 = -219885194;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8263868 = -796417851;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX56605787 = -92954694;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13652558 = -553647697;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17644479 = -525159568;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76457439 = -254023369;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX12697868 = -453522830;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21815175 = -566384646;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX20328743 = -224269147;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87759049 = -742502889;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81808909 = -774071362;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX88772843 = -860831857;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX86903595 = -742269204;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64969104 = -252002967;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX50280923 = -107728491;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94278460 = -824643020;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98495382 = -386382303;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99077929 = -287249995;    float AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX62719106 = -970193927;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98119570 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38491701;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38491701 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94853356;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94853356 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX70511120;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX70511120 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43085513;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43085513 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX36947624;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX36947624 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99269467;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99269467 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89877825;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89877825 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX63272285;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX63272285 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37283024;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37283024 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684590;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684590 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81911348;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81911348 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77137513;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77137513 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95646896;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95646896 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67974465;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67974465 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX15116867;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX15116867 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17599629;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17599629 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13529943;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13529943 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46422608;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46422608 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99684118;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99684118 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX82608479;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX82608479 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76954762;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76954762 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64558010;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64558010 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX4034335;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX4034335 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX91347783;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX91347783 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64714830;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64714830 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64381108;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64381108 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21613040;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21613040 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46022591;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX46022591 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX66587723;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX66587723 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX14840620;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX14840620 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87561317;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87561317 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73634779;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73634779 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX19897981;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX19897981 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX41493551;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX41493551 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX61692740;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX61692740 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72627932;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72627932 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67936179;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX67936179 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX65274279;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX65274279 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37535620;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX37535620 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX27937351;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX27937351 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38133695;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX38133695 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95179944;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95179944 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21520334;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21520334 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71842379;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71842379 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX10986212;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX10986212 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX30403141;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX30403141 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95324478;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX95324478 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13349173;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13349173 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89416804;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX89416804 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX52935165;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX52935165 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX97196141;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX97196141 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX11103878;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX11103878 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX60936911;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX60936911 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98082806;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98082806 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21164809;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21164809 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73933690;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX73933690 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX90819022;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX90819022 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX79163336;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX79163336 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX78370683;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX78370683 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72566515;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX72566515 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77656427;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX77656427 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43855235;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43855235 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684562;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX96684562 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX22442404;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX22442404 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX9123274;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX9123274 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8276569;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8276569 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX57239532;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX57239532 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX54153346;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX54153346 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX6281726;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX6281726 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX42488935;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX42488935 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX49663449;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX49663449 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX48255664;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX48255664 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8886988;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8886988 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71746768;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX71746768 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX44474784;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX44474784 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81774817;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81774817 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43037677;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX43037677 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX32191955;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX32191955 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX80361571;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX80361571 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX34311689;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX34311689 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX69056630;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX69056630 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8263868;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX8263868 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX56605787;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX56605787 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13652558;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX13652558 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17644479;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX17644479 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76457439;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX76457439 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX12697868;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX12697868 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21815175;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX21815175 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX20328743;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX20328743 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87759049;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX87759049 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81808909;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX81808909 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX88772843;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX88772843 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX86903595;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX86903595 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64969104;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX64969104 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX50280923;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX50280923 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94278460;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX94278460 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98495382;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98495382 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99077929;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX99077929 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX62719106;     AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX62719106 = AmeXOPDCKODSucVXNAcyKgImwolWXZqYwtUJyCpmcX98119570;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GfNiwtFEKlTQEwxqyuqnKVwhgqczCzEyv29116977() {     float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87057528 = -453325316;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9896350 = -176307514;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53199038 = -136092615;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP11535453 = -325271400;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41768520 = 30750565;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79430414 = -820122453;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP46796391 = -597133088;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53074780 = -687185818;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13960839 = -171879668;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93980591 = -787282133;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50967 = -892822677;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP85327655 = -174879669;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP99917603 = -373402193;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24017922 = -361463775;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27734360 = -20840429;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53907028 = -429576216;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP15560665 = -75327563;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP80905312 = -817497605;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65585299 = -136561896;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP92888281 = -579289622;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87603267 = -275483885;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62344861 = -19742742;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP91684423 = -265741848;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78565144 = -480787220;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31644090 = 96822682;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP45106233 = -277058678;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39681975 = -685305269;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14345509 = 49647943;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76342893 = -658207996;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41978964 = 72104752;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP66095620 = -631719311;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70538974 = -564668818;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP25223880 = -751372261;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37340286 = -50834636;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50764714 = -206405918;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP23117567 = -639566900;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31409492 = -897098339;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP83421708 = -42441336;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41072529 = -269202210;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87130869 = -151515024;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13937548 = -416842607;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65427545 = -612698383;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47375587 = 52763941;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48483436 = -158625530;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60894688 = -820604812;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9801475 = -671158286;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37458453 = 97933773;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP51790243 = -499702430;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65955757 = -390646907;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP16202134 = 50782942;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48491461 = 71680884;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76457047 = -206850148;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP6892084 = 65892727;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP54234401 = -94127262;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41513710 = -279306462;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24712667 = -333582574;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP18211927 = -910565666;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP74633893 = -655305396;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79891363 = -322094082;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP96662287 = -692190757;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39748439 = -34817184;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32450882 = -546781032;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76731886 = 71022178;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP71981875 = -143984421;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27884971 = -55562822;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP29511993 = -228153860;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60103776 = -423507408;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62577317 = -222567557;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP73253208 = -55057857;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4616794 = -381273530;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22497537 = -532477877;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32138957 = 67113772;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39832783 = -448295395;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78454430 = -985046872;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78950734 = -62447015;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22175722 = -662785502;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14969274 = 27493316;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP43200987 = -7116319;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP17670457 = -660182408;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP21842615 = -232019033;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP7647781 = -274992452;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87891731 = -85602839;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48389751 = -559705151;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60140760 = -608990938;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93487502 = -999576132;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP89638573 = -324869163;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP63646891 = -530561545;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70989479 = -557245000;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP95826576 = -771528175;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP26052047 = -872823345;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4905641 = -729001234;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP56775598 = -141792944;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP3530345 = -720347255;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP44410242 = -577011453;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47382430 = -16697840;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP81486665 = -870061576;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP88695659 = -583720562;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP75393712 = -803251639;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP20598466 = -3062708;    float DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31382696 = -453325316;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87057528 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9896350;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9896350 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53199038;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53199038 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP11535453;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP11535453 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41768520;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41768520 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79430414;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79430414 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP46796391;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP46796391 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53074780;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53074780 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13960839;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13960839 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93980591;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93980591 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50967;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50967 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP85327655;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP85327655 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP99917603;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP99917603 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24017922;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24017922 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27734360;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27734360 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53907028;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP53907028 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP15560665;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP15560665 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP80905312;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP80905312 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65585299;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65585299 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP92888281;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP92888281 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87603267;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87603267 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62344861;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62344861 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP91684423;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP91684423 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78565144;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78565144 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31644090;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31644090 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP45106233;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP45106233 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39681975;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39681975 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14345509;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14345509 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76342893;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76342893 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41978964;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41978964 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP66095620;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP66095620 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70538974;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70538974 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP25223880;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP25223880 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37340286;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37340286 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50764714;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP50764714 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP23117567;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP23117567 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31409492;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31409492 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP83421708;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP83421708 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41072529;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41072529 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87130869;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87130869 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13937548;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP13937548 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65427545;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65427545 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47375587;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47375587 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48483436;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48483436 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60894688;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60894688 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9801475;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP9801475 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37458453;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP37458453 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP51790243;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP51790243 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65955757;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP65955757 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP16202134;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP16202134 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48491461;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48491461 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76457047;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76457047 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP6892084;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP6892084 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP54234401;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP54234401 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41513710;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP41513710 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24712667;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP24712667 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP18211927;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP18211927 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP74633893;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP74633893 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79891363;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP79891363 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP96662287;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP96662287 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39748439;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39748439 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32450882;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32450882 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76731886;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP76731886 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP71981875;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP71981875 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27884971;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP27884971 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP29511993;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP29511993 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60103776;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60103776 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62577317;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP62577317 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP73253208;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP73253208 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4616794;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4616794 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22497537;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22497537 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32138957;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP32138957 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39832783;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP39832783 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78454430;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78454430 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78950734;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP78950734 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22175722;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP22175722 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14969274;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP14969274 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP43200987;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP43200987 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP17670457;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP17670457 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP21842615;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP21842615 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP7647781;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP7647781 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87891731;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87891731 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48389751;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP48389751 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60140760;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP60140760 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93487502;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP93487502 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP89638573;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP89638573 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP63646891;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP63646891 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70989479;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP70989479 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP95826576;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP95826576 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP26052047;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP26052047 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4905641;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP4905641 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP56775598;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP56775598 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP3530345;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP3530345 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP44410242;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP44410242 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47382430;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP47382430 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP81486665;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP81486665 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP88695659;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP88695659 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP75393712;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP75393712 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP20598466;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP20598466 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31382696;     DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP31382696 = DJladxVXrjOCCTvUZVREfSligCFRGCKhVVAmMQVxVP87057528;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EjcgaSRMMpugmvajrBkKAtfgholuYEToA89419634() {     float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77183837 = -512081516;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93021414 = -551233684;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48691737 = -272887076;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85034027 = -511443222;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl54825256 = 89427123;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60216819 = -712755561;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl41459829 = -234678561;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl5953343 = -323633557;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37772526 = -179772306;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98236262 = -357156658;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76202785 = -301242834;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20077164 = -754467804;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl38263736 = -685638053;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62436776 = -359624660;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl25808732 = -505961372;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78086770 = -129956086;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59522845 = -336672805;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl2261025 = -160346897;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl26499690 = -602972332;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60212530 = -127167931;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl75525669 = 20091023;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60426443 = -352839378;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl24922842 = -672201769;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86486241 = -928811595;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78529277 = -546688262;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl63897198 = -152932413;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61649310 = -444834263;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37515884 = -10242115;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37551891 = -320407044;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl89768043 = -902297639;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69559023 = -958385855;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69905888 = 34506763;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl34192921 = 48402579;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61178930 = -42285794;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86361248 = -956741579;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76348573 = -942596310;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643061 = -412914244;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7778992 = 91499420;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51605546 = 23335744;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643011 = -56222797;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27637221 = -122703883;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20072009 = -427191596;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7192429 = -422661655;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl79145377 = -22708719;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl52859106 = -933114768;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl30240468 = -54782191;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl17881743 = -550548726;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl42176703 = -526358684;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93874411 = -826586253;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45482539 = -406213396;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77856985 = -302701161;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20230155 = -171276981;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl56344538 = -745960268;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7141463 = -217682544;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13893965 = -407906733;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl16757394 = -59242139;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68098573 = -879031915;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62205495 = -344075482;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6504750 = -964754960;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl90928057 = -757640464;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98567508 = -167921298;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl3943945 = -124436447;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68401452 = 96773487;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48004483 = -277474667;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl28677239 = -398770804;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6296898 = -235749597;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85884242 = -702870383;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77084805 = -543352260;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76075527 = -402883081;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49460159 = -563365063;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46443710 = -717041843;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51743854 = -328172225;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50655478 = -83682642;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl94856679 = -446749535;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl32575309 = 95535951;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl55453661 = -552717381;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl53234015 = -930177724;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45777464 = -549493051;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33627136 = -995696827;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48288810 = -391906072;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46015455 = -602383687;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl19472608 = -918475580;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl43641473 = -183655862;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl92069351 = -914193649;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl11911059 = -499596479;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49328869 = -687108874;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13561350 = -219532970;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27051458 = -733914878;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl47284966 = -634379061;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69603854 = -797499441;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl8250001 = 36435605;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69437565 = 31161238;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl1274242 = 56254379;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60677489 = -219023792;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33075502 = -888301499;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl23693276 = -998267437;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51670557 = -423965084;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59187945 = -45186988;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50468139 = -623937915;    float VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46562208 = -512081516;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77183837 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93021414;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93021414 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48691737;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48691737 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85034027;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85034027 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl54825256;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl54825256 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60216819;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60216819 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl41459829;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl41459829 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl5953343;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl5953343 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37772526;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37772526 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98236262;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98236262 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76202785;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76202785 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20077164;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20077164 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl38263736;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl38263736 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62436776;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62436776 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl25808732;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl25808732 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78086770;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78086770 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59522845;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59522845 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl2261025;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl2261025 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl26499690;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl26499690 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60212530;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60212530 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl75525669;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl75525669 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60426443;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60426443 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl24922842;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl24922842 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86486241;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86486241 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78529277;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl78529277 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl63897198;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl63897198 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61649310;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61649310 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37515884;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37515884 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37551891;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl37551891 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl89768043;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl89768043 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69559023;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69559023 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69905888;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69905888 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl34192921;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl34192921 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61178930;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl61178930 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86361248;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl86361248 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76348573;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76348573 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643061;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643061 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7778992;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7778992 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51605546;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51605546 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643011;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl31643011 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27637221;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27637221 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20072009;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20072009 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7192429;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7192429 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl79145377;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl79145377 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl52859106;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl52859106 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl30240468;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl30240468 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl17881743;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl17881743 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl42176703;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl42176703 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93874411;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl93874411 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45482539;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45482539 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77856985;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77856985 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20230155;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl20230155 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl56344538;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl56344538 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7141463;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl7141463 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13893965;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13893965 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl16757394;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl16757394 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68098573;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68098573 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62205495;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl62205495 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6504750;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6504750 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl90928057;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl90928057 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98567508;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl98567508 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl3943945;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl3943945 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68401452;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl68401452 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48004483;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48004483 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl28677239;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl28677239 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6296898;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl6296898 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85884242;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl85884242 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77084805;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77084805 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76075527;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl76075527 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49460159;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49460159 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46443710;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46443710 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51743854;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51743854 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50655478;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50655478 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl94856679;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl94856679 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl32575309;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl32575309 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl55453661;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl55453661 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl53234015;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl53234015 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45777464;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl45777464 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33627136;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33627136 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48288810;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl48288810 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46015455;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46015455 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl19472608;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl19472608 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl43641473;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl43641473 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl92069351;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl92069351 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl11911059;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl11911059 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49328869;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl49328869 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13561350;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl13561350 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27051458;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl27051458 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl47284966;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl47284966 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69603854;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69603854 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl8250001;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl8250001 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69437565;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl69437565 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl1274242;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl1274242 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60677489;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl60677489 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33075502;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl33075502 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl23693276;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl23693276 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51670557;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl51670557 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59187945;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl59187945 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50468139;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl50468139 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46562208;     VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl46562208 = VZzAveVYSdKGqEXjaUApSpLEwzlgXoHWGfRVaiwXPl77183837;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GCRjXYfFDoCXaKoWWxXhNlYzblaQoErFK85602794() {     float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36779934 = -740837894;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94527264 = -361389069;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85693124 = -347027999;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80909785 = -284054099;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66118482 = -911079904;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo57893939 = -571015234;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo38818312 = -664396147;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo56778627 = -677844932;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51585970 = -712444805;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo81260777 = -298415512;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo1497717 = -702785274;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54748365 = -849489053;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo9018299 = -591816571;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20810615 = -263783007;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23116538 = -198487893;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74841024 = 64671023;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95483949 = -264889085;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66929355 = -529683002;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6941893 = -742091962;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo40129639 = -789576585;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo55986788 = -912929802;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28916042 = -245241256;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo17114667 = -436496848;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51216481 = -493149832;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54507282 = -2825853;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo58312105 = -287549884;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74989380 = -894314260;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2627053 = -631623705;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87336234 = -109999659;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28241510 = -949280881;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94473341 = -503605183;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo12671149 = -382711234;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83274959 = 68455706;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo43703373 = -644169725;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo91298609 = -604951565;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54938470 = -154252892;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo22274738 = -705692878;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6139329 = -952952970;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo70623489 = -795370772;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo4468665 = -330103745;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85855034 = -591365479;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo90151189 = -432133015;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo48071671 = -156106484;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53384883 = -446623458;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53847421 = -379432837;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95033596 = -297726350;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23370465 = -442404393;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88873096 = -859111912;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo33264059 = -10523873;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo60649932 = -727465856;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28343236 = -88809385;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26815308 = -142520236;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo31760053 = -985908722;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80415986 = -477851499;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29616006 = -371840821;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7863892 = -395596639;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77412597 = -924892221;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34476644 = -853878168;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26402504 = -181228247;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7806377 = -523530020;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo82904559 = -676700974;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36191259 = 67227558;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69442393 = -467845273;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23344460 = -763163924;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86787435 = -794810330;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88826568 = -220074040;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo71473405 = -817944760;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65314926 = -947646847;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29512006 = -658831443;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo68178068 = 55764998;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo52566287 = -229636099;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo89344620 = -311936116;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo96305866 = -734312230;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2473229 = -311988217;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54274604 = -98211106;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65835598 = -380796788;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80844371 = 10865228;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo63729784 = -989873391;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo97369059 = -13716995;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo59473686 = -705099503;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34941640 = -845145491;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86116284 = 64797651;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69362994 = -521099833;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26686302 = -382533803;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo99898274 = -760471497;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo67658034 = -261084947;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80911096 = -396802513;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2858974 = -453692795;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo14087367 = -172328905;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83434717 = -109354926;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77525872 = -229360671;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87798094 = -851814711;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo79736825 = -671724723;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo62817112 = -171840752;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo21564106 = -653402771;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo49663776 = -558593038;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20708797 = -964287742;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo24727211 = -392942561;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66597447 = -651813128;    float InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65020852 = -740837894;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36779934 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94527264;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94527264 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85693124;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85693124 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80909785;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80909785 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66118482;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66118482 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo57893939;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo57893939 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo38818312;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo38818312 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo56778627;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo56778627 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51585970;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51585970 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo81260777;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo81260777 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo1497717;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo1497717 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54748365;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54748365 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo9018299;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo9018299 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20810615;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20810615 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23116538;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23116538 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74841024;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74841024 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95483949;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95483949 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66929355;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66929355 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6941893;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6941893 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo40129639;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo40129639 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo55986788;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo55986788 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28916042;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28916042 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo17114667;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo17114667 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51216481;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo51216481 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54507282;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54507282 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo58312105;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo58312105 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74989380;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo74989380 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2627053;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2627053 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87336234;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87336234 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28241510;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28241510 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94473341;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo94473341 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo12671149;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo12671149 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83274959;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83274959 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo43703373;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo43703373 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo91298609;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo91298609 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54938470;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54938470 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo22274738;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo22274738 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6139329;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo6139329 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo70623489;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo70623489 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo4468665;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo4468665 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85855034;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo85855034 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo90151189;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo90151189 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo48071671;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo48071671 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53384883;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53384883 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53847421;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo53847421 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95033596;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo95033596 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23370465;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23370465 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88873096;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88873096 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo33264059;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo33264059 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo60649932;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo60649932 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28343236;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo28343236 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26815308;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26815308 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo31760053;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo31760053 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80415986;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80415986 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29616006;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29616006 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7863892;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7863892 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77412597;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77412597 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34476644;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34476644 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26402504;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26402504 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7806377;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo7806377 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo82904559;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo82904559 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36191259;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36191259 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69442393;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69442393 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23344460;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo23344460 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86787435;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86787435 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88826568;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo88826568 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo71473405;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo71473405 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65314926;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65314926 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29512006;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo29512006 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo68178068;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo68178068 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo52566287;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo52566287 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo89344620;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo89344620 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo96305866;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo96305866 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2473229;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2473229 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54274604;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo54274604 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65835598;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65835598 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80844371;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80844371 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo63729784;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo63729784 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo97369059;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo97369059 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo59473686;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo59473686 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34941640;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo34941640 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86116284;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo86116284 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69362994;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo69362994 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26686302;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo26686302 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo99898274;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo99898274 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo67658034;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo67658034 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80911096;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo80911096 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2858974;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo2858974 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo14087367;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo14087367 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83434717;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo83434717 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77525872;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo77525872 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87798094;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo87798094 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo79736825;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo79736825 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo62817112;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo62817112 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo21564106;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo21564106 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo49663776;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo49663776 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20708797;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo20708797 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo24727211;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo24727211 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66597447;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo66597447 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65020852;     InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo65020852 = InwjbSEsZDDuYpPCXzGUuOVdRIlxPQywwMRXrnufTo36779934;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dEeecNAerJosoCXXxZRukFVrDaoyjXfvi98147983() {     float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp56248104 = -53969106;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47551128 = -907267065;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2530117 = 1343386;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99556934 = -100628362;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66564998 = -437352320;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83486013 = -461500003;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83650190 = -7702377;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp22028861 = -771652898;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12272768 = -340636184;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp59189500 = -304001558;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp55720980 = -35775574;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58242978 = -848791758;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99389957 = 83826152;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29226655 = -806068733;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83642999 = -496571685;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41056674 = -398520911;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1446063 = -436663767;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90992107 = -280437720;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp6576773 = -19296722;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp20740941 = -407113041;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68442860 = -419142127;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43898125 = -757044469;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp85287672 = -734071466;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68938149 = -129693824;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp65710771 = -297125962;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63079566 = 26654897;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58917511 = -559465192;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53418727 = -795356984;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29081191 = -123910805;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12948364 = 59280424;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24277427 = -368931276;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp52250459 = -947060253;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp94751063 = -486752060;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2459880 = -948772932;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp31228945 = -667654371;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp91004407 = -457821500;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90658188 = -132568953;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47621803 = 69838215;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp37936814 = -159785598;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp25750401 = -326634842;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27337092 = -1151775;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2010323 = -671029241;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19204912 = -103908282;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp36770421 = -895696118;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33875832 = -656555800;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp49494724 = -835057772;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp5360345 = -356097716;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp89028926 = 57600774;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp74399650 = -24463112;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1548275 = -488478202;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2778805 = -495174316;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43264168 = -519873096;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1585199 = -662017683;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53346014 = -472445135;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29705123 = -146399456;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12349980 = -296924638;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp62263455 = -73195599;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33591967 = -868962791;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33846163 = -803502401;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3485432 = -364007218;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24568502 = -902034811;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30231463 = -212345393;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92947669 = -547742093;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99324403 = -299916609;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34912074 = -935070283;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3470522 = -88715322;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63491915 = -262039698;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp96930078 = 32599083;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97997709 = -38414362;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92638591 = 61249815;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50398485 = -165951958;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53824259 = -406501982;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53055293 = -20652123;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp80826371 = -692661881;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp93403849 = -305961266;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66432537 = -748112887;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24693213 = -553136187;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp48517251 = -838375349;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp35062317 = -473138024;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp16216048 = -462068191;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57719221 = -617247387;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp69888585 = -517065966;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp79019077 = -670893873;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27532917 = -635432604;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp10169560 = -445545260;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp81013259 = -849058180;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50665260 = -185042571;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41405049 = 85693074;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp72754757 = -702373477;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp18878966 = -270729734;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp28740952 = -284625902;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57066221 = -263606163;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp13775641 = -126659385;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34451382 = -795778380;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1181899 = -424600031;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97105628 = -788806382;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp9062654 = -23287148;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19880509 = -803991674;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1858348 = -960625836;    float XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30405311 = -53969106;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp56248104 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47551128;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47551128 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2530117;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2530117 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99556934;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99556934 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66564998;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66564998 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83486013;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83486013 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83650190;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83650190 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp22028861;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp22028861 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12272768;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12272768 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp59189500;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp59189500 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp55720980;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp55720980 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58242978;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58242978 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99389957;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99389957 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29226655;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29226655 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83642999;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp83642999 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41056674;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41056674 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1446063;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1446063 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90992107;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90992107 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp6576773;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp6576773 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp20740941;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp20740941 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68442860;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68442860 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43898125;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43898125 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp85287672;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp85287672 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68938149;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp68938149 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp65710771;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp65710771 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63079566;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63079566 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58917511;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp58917511 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53418727;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53418727 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29081191;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29081191 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12948364;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12948364 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24277427;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24277427 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp52250459;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp52250459 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp94751063;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp94751063 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2459880;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2459880 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp31228945;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp31228945 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp91004407;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp91004407 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90658188;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp90658188 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47621803;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp47621803 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp37936814;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp37936814 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp25750401;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp25750401 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27337092;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27337092 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2010323;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2010323 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19204912;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19204912 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp36770421;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp36770421 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33875832;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33875832 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp49494724;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp49494724 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp5360345;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp5360345 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp89028926;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp89028926 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp74399650;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp74399650 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1548275;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1548275 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2778805;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp2778805 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43264168;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp43264168 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1585199;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1585199 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53346014;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53346014 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29705123;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp29705123 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12349980;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp12349980 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp62263455;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp62263455 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33591967;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33591967 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33846163;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp33846163 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3485432;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3485432 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24568502;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24568502 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30231463;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30231463 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92947669;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92947669 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99324403;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp99324403 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34912074;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34912074 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3470522;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp3470522 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63491915;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp63491915 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp96930078;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp96930078 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97997709;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97997709 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92638591;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp92638591 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50398485;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50398485 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53824259;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53824259 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53055293;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp53055293 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp80826371;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp80826371 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp93403849;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp93403849 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66432537;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp66432537 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24693213;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp24693213 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp48517251;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp48517251 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp35062317;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp35062317 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp16216048;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp16216048 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57719221;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57719221 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp69888585;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp69888585 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp79019077;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp79019077 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27532917;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp27532917 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp10169560;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp10169560 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp81013259;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp81013259 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50665260;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp50665260 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41405049;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp41405049 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp72754757;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp72754757 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp18878966;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp18878966 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp28740952;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp28740952 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57066221;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp57066221 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp13775641;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp13775641 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34451382;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp34451382 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1181899;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1181899 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97105628;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp97105628 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp9062654;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp9062654 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19880509;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp19880509 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1858348;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp1858348 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30405311;     XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp30405311 = XorjINUEghEUDrKjloKieBYimaCZCvUesJRNfooLxp56248104;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TrDxXEpuVrGnTPQlRtxhRhGoyarXLzGfz58450640() {     float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb46374413 = -112725307;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30676193 = -182193235;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb98022815 = -135451075;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73055509 = -286800184;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79621734 = -378675762;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb64272418 = -354133111;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb78313628 = -745247850;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74907423 = -408100637;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb36084455 = -348528822;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63445170 = -973876083;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31872800 = -544195731;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb92992485 = -328379893;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37736090 = -228409708;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67645508 = -804229617;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81717370 = -981692627;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb65236416 = -98900781;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45408243 = -698009008;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12347820 = -723287012;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67491163 = -485707158;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb88065189 = 45008650;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56365262 = -123567220;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41979707 = 9858896;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb18526091 = -40531388;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76859246 = -577718199;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12595960 = -940636906;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81870531 = -949218837;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80884846 = -318994186;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76589102 = -855247043;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90290188 = -886109853;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60737444 = -915121967;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb27740830 = -695597819;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51617373 = -347884672;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3720105 = -786977220;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb26298525 = -940224090;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb66825480 = -317990032;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb44235414 = -760850910;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90891757 = -748384857;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb71979086 = -896221029;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb48469831 = -967247643;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb70262542 = -231342615;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41036765 = -807013051;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56654786 = -485522454;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79021753 = -579333877;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67432362 = -759779307;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb25840250 = -769065756;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69933717 = -218681677;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb85783635 = 95419784;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79415385 = 30944520;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2318304 = -460402458;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30828680 = -945474539;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32144328 = -869556361;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb87037275 = -484299929;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51037654 = -373870677;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb6253077 = -596000417;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2085379 = -274999727;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb4394706 = -22584203;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12150102 = -41661848;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb21163569 = -557732876;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60459550 = -346163279;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97751202 = -429456925;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb83387571 = 64861075;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1724526 = -890000808;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb84617235 = -521990784;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb75347010 = -433406855;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb35704341 = -178278264;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80255426 = -96311059;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb89272381 = -541402674;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11437566 = -288185619;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb820029 = -386239586;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37481957 = -120841717;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74344658 = -350515924;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73429156 = -801787980;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63877988 = -756039369;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97228620 = -154364544;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb47028424 = -147978300;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb99710476 = -638044766;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62957954 = -410807227;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51093729 = -280752081;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51018997 = -808652444;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb42662242 = -621955229;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb96086895 = -944638622;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1469461 = -249938707;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74270799 = -294844585;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb59461509 = -940635315;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb28593116 = 54434393;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb40703555 = -111297891;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb579720 = -974013995;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97467027 = -90976804;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb24213147 = -565224363;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62430774 = -195405829;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32085312 = -619189063;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69728189 = -90651982;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11519537 = -450057751;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb50718629 = -437790719;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb86874971 = -196203690;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb39312239 = -917012243;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb72037551 = -963531670;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3674743 = -45927023;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31728021 = -481501043;    float excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45584823 = -112725307;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb46374413 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30676193;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30676193 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb98022815;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb98022815 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73055509;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73055509 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79621734;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79621734 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb64272418;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb64272418 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb78313628;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb78313628 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74907423;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74907423 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb36084455;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb36084455 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63445170;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63445170 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31872800;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31872800 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb92992485;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb92992485 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37736090;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37736090 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67645508;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67645508 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81717370;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81717370 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb65236416;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb65236416 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45408243;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45408243 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12347820;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12347820 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67491163;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67491163 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb88065189;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb88065189 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56365262;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56365262 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41979707;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41979707 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb18526091;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb18526091 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76859246;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76859246 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12595960;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12595960 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81870531;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb81870531 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80884846;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80884846 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76589102;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb76589102 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90290188;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90290188 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60737444;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60737444 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb27740830;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb27740830 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51617373;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51617373 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3720105;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3720105 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb26298525;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb26298525 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb66825480;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb66825480 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb44235414;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb44235414 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90891757;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb90891757 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb71979086;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb71979086 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb48469831;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb48469831 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb70262542;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb70262542 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41036765;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb41036765 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56654786;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb56654786 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79021753;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79021753 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67432362;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb67432362 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb25840250;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb25840250 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69933717;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69933717 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb85783635;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb85783635 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79415385;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb79415385 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2318304;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2318304 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30828680;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb30828680 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32144328;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32144328 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb87037275;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb87037275 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51037654;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51037654 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb6253077;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb6253077 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2085379;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb2085379 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb4394706;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb4394706 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12150102;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb12150102 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb21163569;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb21163569 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60459550;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb60459550 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97751202;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97751202 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb83387571;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb83387571 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1724526;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1724526 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb84617235;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb84617235 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb75347010;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb75347010 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb35704341;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb35704341 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80255426;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb80255426 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb89272381;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb89272381 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11437566;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11437566 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb820029;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb820029 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37481957;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb37481957 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74344658;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74344658 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73429156;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb73429156 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63877988;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb63877988 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97228620;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97228620 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb47028424;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb47028424 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb99710476;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb99710476 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62957954;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62957954 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51093729;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51093729 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51018997;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb51018997 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb42662242;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb42662242 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb96086895;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb96086895 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1469461;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb1469461 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74270799;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb74270799 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb59461509;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb59461509 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb28593116;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb28593116 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb40703555;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb40703555 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb579720;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb579720 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97467027;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb97467027 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb24213147;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb24213147 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62430774;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb62430774 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32085312;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb32085312 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69728189;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb69728189 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11519537;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb11519537 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb50718629;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb50718629 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb86874971;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb86874971 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb39312239;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb39312239 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb72037551;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb72037551 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3674743;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb3674743 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31728021;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb31728021 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45584823;     excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb45584823 = excWfbzGuNOVAvThLJMivEmkOzwMRjWlbooSoOlSyb46374413;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gCileaBcxQXpbMGFcaQGIFXyxcUpvLQCr54633801() {     float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku5970510 = -341481684;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku32182043 = 7651380;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku35024203 = -209591998;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68931267 = -59411062;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90914960 = -279182789;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61949538 = -212392784;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75672111 = -74965436;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku25732708 = -762312012;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku49897898 = -881201321;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku46469686 = -915134937;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku57167731 = -945738171;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku27663688 = -423401143;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8490654 = -134588227;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26019347 = -708387964;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79025176 = -674219149;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61990670 = 95726328;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81369346 = -626225288;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku77016150 = 7376883;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47933366 = -624826788;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67982298 = -617400003;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku36826381 = 43411956;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10469306 = -982542982;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10717916 = -904826466;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41589485 = -142056436;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88573964 = -396774496;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76285438 = 16163692;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94224916 = -768474183;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41700272 = -376628633;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku40074532 = -675702469;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99210910 = -962105209;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52655148 = -240817147;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94382633 = -765102669;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52802143 = -766924092;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8822967 = -442108021;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku71762841 = 33799983;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku22825311 = 27492508;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81523435 = 58836508;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku70339424 = -840673419;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67487774 = -685954160;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku43088197 = -505223563;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99254578 = -175674647;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26733967 = -490463872;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku19900996 = -312778707;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41671867 = -83694046;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26828565 = -215383825;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku34726846 = -461625836;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91272357 = -896435883;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26111780 = -301808708;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41707952 = -744340078;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku45996072 = -166727000;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku82630578 = -655664585;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93622428 = -455543184;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26453168 = -613819131;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79527600 = -856169372;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku17807420 = -238933814;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku95501203 = -358938703;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku21464127 = -87522154;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93434717 = 32464438;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80357303 = -662636566;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14629522 = -195346481;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67724622 = -443918601;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku33971840 = -698336803;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85658176 = 13390456;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku50686988 = -919096112;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93814537 = -574317790;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku62785097 = -80635502;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku74861544 = -656477051;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99667686 = -692480207;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku54256506 = -642187948;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku56199866 = -601711657;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80467235 = -963110181;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku11029923 = -785551870;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku9528377 = -306668957;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku4845170 = -19603225;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68727720 = -341725357;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10092414 = -466124172;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90568310 = -569764276;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69046048 = -721132421;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14760921 = -926672612;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku53847118 = -935148661;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85013080 = -87400426;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68113137 = -366665476;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99992320 = -632288556;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94078459 = -408975469;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku16580333 = -206440625;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku59032720 = -785273964;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67929465 = -51283539;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku73274543 = -910754721;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91015547 = -103174207;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76261637 = -607261315;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku1361184 = -884985339;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88088717 = -973627930;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku89982120 = -78036853;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52858252 = -390607679;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75363575 = 38695037;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku65282739 = -477337844;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41075791 = -403854329;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69214007 = -393682595;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47857330 = -509376256;    float HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku64043467 = -341481684;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku5970510 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku32182043;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku32182043 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku35024203;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku35024203 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68931267;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68931267 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90914960;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90914960 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61949538;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61949538 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75672111;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75672111 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku25732708;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku25732708 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku49897898;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku49897898 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku46469686;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku46469686 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku57167731;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku57167731 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku27663688;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku27663688 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8490654;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8490654 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26019347;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26019347 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79025176;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79025176 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61990670;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku61990670 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81369346;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81369346 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku77016150;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku77016150 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47933366;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47933366 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67982298;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67982298 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku36826381;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku36826381 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10469306;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10469306 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10717916;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10717916 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41589485;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41589485 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88573964;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88573964 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76285438;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76285438 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94224916;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94224916 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41700272;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41700272 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku40074532;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku40074532 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99210910;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99210910 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52655148;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52655148 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94382633;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94382633 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52802143;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52802143 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8822967;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku8822967 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku71762841;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku71762841 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku22825311;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku22825311 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81523435;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku81523435 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku70339424;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku70339424 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67487774;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67487774 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku43088197;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku43088197 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99254578;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99254578 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26733967;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26733967 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku19900996;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku19900996 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41671867;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41671867 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26828565;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26828565 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku34726846;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku34726846 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91272357;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91272357 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26111780;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26111780 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41707952;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41707952 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku45996072;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku45996072 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku82630578;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku82630578 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93622428;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93622428 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26453168;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku26453168 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79527600;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku79527600 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku17807420;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku17807420 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku95501203;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku95501203 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku21464127;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku21464127 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93434717;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93434717 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80357303;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80357303 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14629522;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14629522 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67724622;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67724622 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku33971840;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku33971840 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85658176;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85658176 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku50686988;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku50686988 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93814537;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku93814537 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku62785097;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku62785097 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku74861544;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku74861544 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99667686;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99667686 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku54256506;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku54256506 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku56199866;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku56199866 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80467235;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku80467235 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku11029923;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku11029923 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku9528377;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku9528377 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku4845170;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku4845170 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68727720;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68727720 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10092414;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku10092414 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90568310;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku90568310 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69046048;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69046048 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14760921;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku14760921 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku53847118;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku53847118 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85013080;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku85013080 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68113137;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku68113137 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99992320;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku99992320 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94078459;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku94078459 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku16580333;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku16580333 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku59032720;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku59032720 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67929465;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku67929465 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku73274543;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku73274543 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91015547;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku91015547 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76261637;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku76261637 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku1361184;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku1361184 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88088717;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku88088717 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku89982120;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku89982120 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52858252;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku52858252 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75363575;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku75363575 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku65282739;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku65282739 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41075791;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku41075791 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69214007;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku69214007 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47857330;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku47857330 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku64043467;     HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku64043467 = HcdgkKgLfOrSyZiWCvnoiKafknBGLhlAUyTkdZsPku5970510;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void xGzoQiqbxduggCMxONCzeJfcILgyhAbXE50816961() {     float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65566606 = -570238061;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33687892 = -902504005;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72025591 = -283732920;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64807026 = -932021939;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2208187 = -179689817;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp59626659 = -70652457;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73030593 = -504683021;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76557991 = -16523387;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63711342 = -313873820;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp29494201 = -856393790;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82462662 = -247280610;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp62334889 = -518422392;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp79245216 = -40766745;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp84393186 = -612546312;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76332982 = -366745670;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp58744924 = -809646563;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17330450 = -554441569;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp41684482 = -361959222;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28375569 = -763946418;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp47899407 = -179808656;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17287500 = -889608869;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78958904 = -874944860;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2909741 = -669121545;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6319725 = -806394673;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64551969 = -952912086;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70700345 = -118453779;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7564988 = -117954180;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6811441 = -998010223;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp89858874 = -465295084;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37684377 = 90911548;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77569466 = -886036475;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37147894 = -82320667;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1884182 = -746870965;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91347409 = 56008048;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76700202 = -714410003;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1415207 = -284164074;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72155113 = -233942127;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68699762 = -785125808;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86505717 = -404660677;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15913852 = -779104511;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57472392 = -644336244;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96813147 = -495405291;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60780237 = -46223536;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15911373 = -507608785;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp27816881 = -761701893;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp99519974 = -704569995;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96761079 = -788291550;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72808173 = -634561937;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp81097599 = 71722303;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp61163464 = -487979461;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33116829 = -441772809;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp207581 = -426786439;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1868683 = -853767585;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52802123 = -16338327;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33529462 = -202867901;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86607702 = -695293202;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp30778151 = -133382460;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65705867 = -477338248;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp255057 = -979109853;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp31507841 = 38763962;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52061672 = -952698277;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp66219153 = -506672799;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86699117 = -551228304;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp26026965 = -304785369;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp51924735 = -970357315;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp45314769 = -64959944;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60450708 = -771551428;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp87897807 = 3225206;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7692985 = -898136309;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp74917775 = 17418404;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86589811 = -475704437;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp48630688 = -769315761;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp55178765 = -957298546;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp12461718 = -984841907;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90427015 = -535472413;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp20474352 = -294203579;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp18178667 = -728721324;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86998368 = -61512761;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78502843 = 55307220;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65031994 = -148342092;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73939265 = -330162229;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34756814 = -483392244;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp25713841 = -969732526;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28695410 = -977315624;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp4567549 = -467315643;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77361885 = -359250037;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp35279211 = -228553082;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp49082059 = -630532638;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57817948 = -741124051;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90092499 = 80883199;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70637056 = -50781614;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6449246 = -756603879;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68444705 = -806015955;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp54997876 = -343424639;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63852180 = -826406235;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91253238 = -37663445;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp10114031 = -944176987;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34753273 = -741438168;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63986638 = -537251470;    float ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82502112 = -570238061;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65566606 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33687892;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33687892 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72025591;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72025591 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64807026;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64807026 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2208187;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2208187 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp59626659;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp59626659 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73030593;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73030593 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76557991;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76557991 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63711342;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63711342 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp29494201;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp29494201 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82462662;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82462662 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp62334889;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp62334889 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp79245216;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp79245216 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp84393186;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp84393186 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76332982;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76332982 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp58744924;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp58744924 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17330450;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17330450 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp41684482;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp41684482 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28375569;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28375569 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp47899407;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp47899407 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17287500;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp17287500 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78958904;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78958904 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2909741;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp2909741 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6319725;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6319725 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64551969;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp64551969 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70700345;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70700345 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7564988;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7564988 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6811441;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6811441 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp89858874;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp89858874 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37684377;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37684377 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77569466;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77569466 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37147894;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp37147894 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1884182;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1884182 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91347409;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91347409 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76700202;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp76700202 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1415207;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1415207 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72155113;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72155113 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68699762;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68699762 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86505717;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86505717 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15913852;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15913852 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57472392;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57472392 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96813147;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96813147 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60780237;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60780237 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15911373;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp15911373 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp27816881;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp27816881 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp99519974;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp99519974 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96761079;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp96761079 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72808173;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp72808173 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp81097599;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp81097599 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp61163464;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp61163464 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33116829;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33116829 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp207581;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp207581 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1868683;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp1868683 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52802123;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52802123 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33529462;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp33529462 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86607702;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86607702 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp30778151;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp30778151 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65705867;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65705867 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp255057;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp255057 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp31507841;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp31507841 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52061672;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp52061672 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp66219153;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp66219153 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86699117;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86699117 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp26026965;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp26026965 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp51924735;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp51924735 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp45314769;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp45314769 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60450708;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp60450708 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp87897807;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp87897807 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7692985;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp7692985 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp74917775;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp74917775 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86589811;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86589811 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp48630688;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp48630688 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp55178765;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp55178765 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp12461718;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp12461718 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90427015;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90427015 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp20474352;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp20474352 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp18178667;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp18178667 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86998368;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp86998368 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78502843;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp78502843 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65031994;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65031994 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73939265;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp73939265 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34756814;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34756814 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp25713841;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp25713841 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28695410;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp28695410 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp4567549;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp4567549 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77361885;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp77361885 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp35279211;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp35279211 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp49082059;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp49082059 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57817948;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp57817948 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90092499;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp90092499 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70637056;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp70637056 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6449246;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp6449246 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68444705;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp68444705 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp54997876;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp54997876 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63852180;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63852180 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91253238;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp91253238 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp10114031;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp10114031 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34753273;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp34753273 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63986638;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp63986638 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82502112;     ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp82502112 = ZVBsmLEJDLTMgRaXWfIUoDobWgECrtxBWbHhKEbBxp65566606;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WyPiGWSZGzsPyXGjhggNKSlJclRVoNJtu63362149() {     float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85034776 = -983369273;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa86711756 = -348382001;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa88862583 = 64638465;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa83454175 = -748596202;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2654703 = -805962232;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85218733 = 38862775;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa17862472 = -947989251;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa41808225 = -110331353;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24398140 = 57934801;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7422924 = -861979836;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36685926 = -680270910;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65829503 = -517725097;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa69616876 = -465124022;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa92809226 = -54832037;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36859444 = -664829461;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24960574 = -172838497;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa23292564 = -726216250;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65747233 = -112713940;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28010449 = -41151179;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28510710 = -897345113;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29743572 = -395821194;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93940987 = -286748073;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71082747 = -966696164;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24041393 = -442938665;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75755458 = -147212195;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75467806 = -904248998;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91493118 = -883105112;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa57603115 = -61743502;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31603831 = -479206230;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22391232 = -527146;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7373552 = -751362568;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76727204 = -646669685;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13360285 = -202078731;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa50103916 = -248595158;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16630538 = -777112809;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37481144 = -587732683;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa40538564 = -760818202;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10182236 = -862334624;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53819042 = -869075502;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37195588 = -775635608;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98954448 = -54122539;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa8672281 = -734301517;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31913479 = 5974666;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99296911 = -956681445;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7845292 = 61175144;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53981102 = -141901416;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa78750959 = -701984873;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa72964003 = -817849251;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22233190 = 57783064;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2061807 = -248991806;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7552398 = -848137740;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16656441 = -804139299;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71693829 = -529876546;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25732152 = -10931964;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa33618578 = 22573464;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91093789 = -596621201;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa15629009 = -381685838;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa64821190 = -492422871;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7698717 = -501384007;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa27186896 = -901713235;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93725615 = -78032114;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa60259357 = -786245750;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10204394 = -631125124;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2006909 = -941538054;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa49373 = -10617268;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa59958721 = 66398774;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa52469218 = -215646366;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa19512960 = -116528864;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76178688 = -277719229;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99378299 = 22903221;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa84422010 = -412020296;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13110328 = -863881627;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa11928192 = -243638439;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90814860 = -265515571;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29556261 = -743222574;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21071291 = -661519678;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa62027508 = -192722739;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71785836 = 89985281;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16196102 = -404113809;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21774357 = 94689220;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa96716847 = -102264125;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa18529115 = 34744138;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa35369925 = -19526566;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29542024 = -130214425;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa14838834 = -152389407;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90717110 = -947223270;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa5033376 = -16793140;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa87628133 = -91146768;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16485338 = -171168623;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25536749 = -80491608;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21852136 = -106046845;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75717373 = -168395331;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2483520 = -260950617;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa26632146 = -967362267;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa43469973 = -597603495;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa38695092 = -267876790;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98467887 = -3176393;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29906571 = -52487280;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99247538 = -846064177;    float huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa47886570 = -983369273;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85034776 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa86711756;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa86711756 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa88862583;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa88862583 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa83454175;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa83454175 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2654703;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2654703 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85218733;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85218733 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa17862472;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa17862472 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa41808225;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa41808225 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24398140;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24398140 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7422924;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7422924 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36685926;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36685926 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65829503;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65829503 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa69616876;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa69616876 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa92809226;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa92809226 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36859444;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa36859444 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24960574;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24960574 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa23292564;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa23292564 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65747233;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa65747233 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28010449;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28010449 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28510710;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa28510710 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29743572;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29743572 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93940987;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93940987 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71082747;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71082747 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24041393;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa24041393 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75755458;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75755458 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75467806;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75467806 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91493118;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91493118 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa57603115;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa57603115 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31603831;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31603831 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22391232;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22391232 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7373552;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7373552 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76727204;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76727204 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13360285;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13360285 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa50103916;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa50103916 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16630538;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16630538 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37481144;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37481144 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa40538564;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa40538564 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10182236;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10182236 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53819042;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53819042 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37195588;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa37195588 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98954448;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98954448 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa8672281;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa8672281 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31913479;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa31913479 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99296911;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99296911 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7845292;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7845292 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53981102;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa53981102 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa78750959;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa78750959 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa72964003;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa72964003 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22233190;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa22233190 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2061807;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2061807 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7552398;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7552398 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16656441;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16656441 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71693829;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71693829 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25732152;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25732152 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa33618578;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa33618578 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91093789;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa91093789 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa15629009;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa15629009 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa64821190;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa64821190 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7698717;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa7698717 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa27186896;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa27186896 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93725615;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa93725615 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa60259357;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa60259357 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10204394;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa10204394 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2006909;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2006909 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa49373;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa49373 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa59958721;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa59958721 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa52469218;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa52469218 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa19512960;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa19512960 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76178688;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa76178688 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99378299;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99378299 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa84422010;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa84422010 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13110328;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa13110328 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa11928192;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa11928192 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90814860;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90814860 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29556261;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29556261 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21071291;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21071291 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa62027508;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa62027508 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71785836;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa71785836 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16196102;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16196102 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21774357;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21774357 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa96716847;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa96716847 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa18529115;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa18529115 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa35369925;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa35369925 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29542024;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29542024 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa14838834;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa14838834 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90717110;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa90717110 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa5033376;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa5033376 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa87628133;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa87628133 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16485338;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa16485338 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25536749;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa25536749 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21852136;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa21852136 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75717373;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa75717373 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2483520;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa2483520 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa26632146;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa26632146 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa43469973;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa43469973 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa38695092;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa38695092 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98467887;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa98467887 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29906571;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa29906571 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99247538;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa99247538 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa47886570;     huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa47886570 = huDAOkXnXCbhixCzPUlIRYDNFGVFwlsqzURcDiSvIa85034776;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EXlLIwsqoUUMZOqhTREkSeZsgyzucKqhJ23664807() {     float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf75161085 = 57874526;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69836821 = -723308172;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf84355282 = -72155996;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf56952750 = -934768024;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf15711438 = -747285674;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf66005138 = -953770333;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12525911 = -585534724;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94686787 = -846779092;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48209827 = 50042163;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf11678594 = -431854361;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12837745 = -88691068;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf579011 = 2686768;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7963009 = -777359882;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31228080 = -52992922;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34933815 = -49950404;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf49140315 = -973218367;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67254744 = -987561491;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf87102945 = -555563232;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88924839 = -507561615;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf95834957 = -445223422;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf17665974 = -100246287;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92022569 = -619844708;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf4321166 = -273156085;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31962490 = -890963040;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22640647 = -790723139;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94258771 = -780122732;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13460454 = -642634106;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80773490 = -121633560;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92812829 = -141405278;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf70180311 = -974929537;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf10836954 = 21970888;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf76094118 = -47494105;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22329326 = -502303891;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf73942561 = -240046316;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52227072 = -427448470;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf90712150 = -890762093;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf40772132 = -276634106;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34539519 = -728393868;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf64352059 = -576537547;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf81707729 = -680343381;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12654122 = -859983815;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63316744 = -548794730;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf91730319 = -469450929;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29958852 = -820764634;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf99809709 = -51334812;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74420096 = -625525321;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf59174250 = -250467373;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63350462 = -844505504;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50151844 = -378156282;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31342213 = -705988143;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36917922 = -122519785;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf60429548 = -768566132;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21146284 = -241729541;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78639213 = -134487245;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf5998834 = -106026808;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83138516 = -322280767;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf65515655 = -350152087;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52392792 = -181192957;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34312103 = -44044885;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21452667 = -967162942;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52544685 = -211136228;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31752420 = -363901164;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf1873959 = -605373815;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78029515 = 24971700;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf841641 = -353825250;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36743627 = 58803036;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78249684 = -495009341;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34020448 = -437313567;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf79001007 = -625544453;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf44221664 = -159188312;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf8368183 = -596584262;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32715225 = -159167624;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22750887 = -979025685;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7217111 = -827218234;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83180835 = -585239608;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54349230 = -551451557;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf292250 = -50393779;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74362313 = -452391451;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32152781 = -739628228;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48220551 = -65197819;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf35084522 = -429655360;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50109991 = -798128602;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf30621647 = -743477278;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61470616 = -435417135;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf33262390 = -752409753;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50407406 = -209462981;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54947834 = -805764564;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf43690112 = -267816646;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67943728 = -34019509;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69088556 = -5167704;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf25196495 = -440610006;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88379340 = 4558850;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf227416 = -584348983;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf42899392 = -609374606;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29163045 = -369207154;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80901702 = -396082651;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61442785 = -943420915;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13700805 = -394422629;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29117212 = -366939385;    float LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63066082 = 57874526;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf75161085 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69836821;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69836821 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf84355282;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf84355282 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf56952750;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf56952750 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf15711438;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf15711438 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf66005138;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf66005138 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12525911;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12525911 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94686787;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94686787 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48209827;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48209827 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf11678594;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf11678594 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12837745;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12837745 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf579011;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf579011 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7963009;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7963009 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31228080;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31228080 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34933815;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34933815 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf49140315;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf49140315 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67254744;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67254744 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf87102945;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf87102945 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88924839;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88924839 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf95834957;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf95834957 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf17665974;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf17665974 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92022569;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92022569 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf4321166;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf4321166 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31962490;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31962490 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22640647;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22640647 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94258771;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf94258771 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13460454;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13460454 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80773490;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80773490 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92812829;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf92812829 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf70180311;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf70180311 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf10836954;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf10836954 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf76094118;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf76094118 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22329326;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22329326 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf73942561;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf73942561 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52227072;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52227072 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf90712150;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf90712150 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf40772132;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf40772132 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34539519;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34539519 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf64352059;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf64352059 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf81707729;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf81707729 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12654122;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf12654122 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63316744;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63316744 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf91730319;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf91730319 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29958852;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29958852 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf99809709;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf99809709 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74420096;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74420096 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf59174250;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf59174250 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63350462;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63350462 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50151844;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50151844 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31342213;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31342213 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36917922;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36917922 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf60429548;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf60429548 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21146284;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21146284 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78639213;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78639213 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf5998834;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf5998834 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83138516;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83138516 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf65515655;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf65515655 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52392792;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52392792 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34312103;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34312103 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21452667;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf21452667 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52544685;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf52544685 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31752420;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf31752420 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf1873959;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf1873959 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78029515;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78029515 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf841641;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf841641 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36743627;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf36743627 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78249684;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf78249684 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34020448;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf34020448 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf79001007;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf79001007 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf44221664;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf44221664 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf8368183;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf8368183 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32715225;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32715225 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22750887;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf22750887 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7217111;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf7217111 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83180835;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf83180835 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54349230;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54349230 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf292250;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf292250 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74362313;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf74362313 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32152781;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf32152781 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48220551;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf48220551 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf35084522;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf35084522 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50109991;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50109991 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf30621647;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf30621647 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61470616;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61470616 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf33262390;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf33262390 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50407406;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf50407406 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54947834;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf54947834 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf43690112;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf43690112 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67943728;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf67943728 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69088556;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf69088556 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf25196495;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf25196495 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88379340;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf88379340 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf227416;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf227416 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf42899392;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf42899392 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29163045;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29163045 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80901702;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf80901702 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61442785;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf61442785 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13700805;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf13700805 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29117212;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf29117212 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63066082;     LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf63066082 = LQxrzmEFnftOzgCbsvpAqpZxtfJxyOedmCOxtqUeAf75161085;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void SEcKAHeWvRaooVjmnBcJTPFXQSmdWqCDA72090498() {     float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf64099043 = -525256863;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41241469 = -704415383;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42700963 = -761131073;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf97977082 = -337781342;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14394445 = -232741676;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8487929 = -809881667;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf60052833 = -721013067;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57883742 = -558350695;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98898380 = -102929078;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68376162 = -808824735;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16204121 = -414803650;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf3995318 = -612049051;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30743099 = -795659817;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59599105 = -501276110;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf94693710 = -655439774;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf87930476 = -441403322;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65215780 = -826207212;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf54478315 = -232804763;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8087531 = -557475569;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89039120 = -77290222;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22660762 = -835054344;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf77412668 = -690953163;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31447578 = 71434139;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6493301 = -743820893;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62936952 = -997649895;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74650175 = -724661687;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88761319 = -997736041;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73505959 = -846858371;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf23133131 = -282709991;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf45571552 = -138949083;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62091954 = -161907989;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59071775 = -528236700;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73918427 = -737233371;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf91384865 = -55082296;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf61498235 = -488025600;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf52136978 = -102957873;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf99553691 = -480472911;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50025048 = -883995829;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf40150310 = 47803157;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31302979 = 53952347;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98654319 = 67429568;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90610595 = -978139161;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf43925962 = -775271961;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf56921955 = -729668845;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88862018 = -762265888;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73235358 = -922176996;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf66229561 = -507533863;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19816227 = -233889793;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf2758429 = -240093794;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf58127542 = -331256612;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32474217 = 59389105;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39690454 = -52735413;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16934490 = -445933961;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf71936703 = -265694555;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf49429737 = -815919258;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86686374 = -834303700;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf9793892 = -675849522;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf36207663 = 82689820;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf35040130 = -340131448;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39744270 = -508079989;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19726609 = -812145627;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86546874 = -874154696;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf34750611 = -175640704;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf53326828 = -963979995;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6284208 = -546916747;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57132346 = -886566950;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30076891 = -874815681;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39358233 = -640577522;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98100870 = 86749490;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42556733 = -452481901;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88376785 = -960930412;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf15190733 = -942211383;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14328006 = -180607920;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf76784552 = -511427917;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90384801 = -44719791;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32050167 = -856915184;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf33486707 = -915681203;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74525623 = -198897017;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf17631282 = -981555006;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89701594 = 24527101;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8420614 = -117127824;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68945092 = -663846248;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf70747530 = -506764577;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65005589 = -951453380;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf13097335 = -98338188;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22401501 = -9172576;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42137286 = 17697260;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf1981724 = -371538816;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41955129 = -239163038;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74811860 = -653721901;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42343087 = -427108352;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf63346029 = -463162732;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14984918 = -443864381;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf406040 = -444116855;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf11576370 = -133902027;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf12107445 = -58415736;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf55859984 = -702498457;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90599133 = -811291966;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50637748 = -82752098;    float awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31729673 = -525256863;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf64099043 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41241469;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41241469 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42700963;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42700963 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf97977082;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf97977082 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14394445;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14394445 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8487929;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8487929 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf60052833;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf60052833 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57883742;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57883742 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98898380;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98898380 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68376162;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68376162 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16204121;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16204121 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf3995318;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf3995318 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30743099;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30743099 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59599105;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59599105 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf94693710;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf94693710 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf87930476;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf87930476 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65215780;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65215780 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf54478315;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf54478315 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8087531;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8087531 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89039120;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89039120 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22660762;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22660762 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf77412668;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf77412668 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31447578;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31447578 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6493301;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6493301 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62936952;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62936952 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74650175;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74650175 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88761319;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88761319 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73505959;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73505959 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf23133131;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf23133131 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf45571552;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf45571552 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62091954;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf62091954 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59071775;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf59071775 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73918427;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73918427 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf91384865;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf91384865 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf61498235;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf61498235 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf52136978;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf52136978 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf99553691;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf99553691 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50025048;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50025048 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf40150310;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf40150310 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31302979;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31302979 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98654319;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98654319 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90610595;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90610595 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf43925962;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf43925962 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf56921955;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf56921955 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88862018;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88862018 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73235358;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf73235358 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf66229561;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf66229561 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19816227;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19816227 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf2758429;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf2758429 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf58127542;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf58127542 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32474217;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32474217 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39690454;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39690454 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16934490;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf16934490 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf71936703;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf71936703 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf49429737;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf49429737 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86686374;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86686374 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf9793892;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf9793892 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf36207663;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf36207663 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf35040130;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf35040130 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39744270;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39744270 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19726609;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf19726609 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86546874;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf86546874 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf34750611;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf34750611 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf53326828;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf53326828 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6284208;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf6284208 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57132346;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf57132346 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30076891;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf30076891 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39358233;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf39358233 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98100870;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf98100870 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42556733;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42556733 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88376785;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf88376785 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf15190733;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf15190733 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14328006;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14328006 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf76784552;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf76784552 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90384801;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90384801 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32050167;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf32050167 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf33486707;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf33486707 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74525623;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74525623 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf17631282;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf17631282 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89701594;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf89701594 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8420614;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf8420614 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68945092;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf68945092 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf70747530;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf70747530 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65005589;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf65005589 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf13097335;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf13097335 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22401501;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf22401501 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42137286;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42137286 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf1981724;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf1981724 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41955129;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf41955129 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74811860;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf74811860 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42343087;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf42343087 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf63346029;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf63346029 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14984918;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf14984918 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf406040;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf406040 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf11576370;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf11576370 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf12107445;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf12107445 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf55859984;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf55859984 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90599133;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf90599133 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50637748;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf50637748 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31729673;     awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf31729673 = awIfuIZdiAhQdoLjwGWMfCDzEuiVAzFOWoNYbHtsCf64099043;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RIsyAzkZgTABWGhTSlXqUOXtILWHgwFDm32393156() {     long joAGcOnepYERSntsjcYgdxClypodctk54225352 = -584013063;    long joAGcOnepYERSntsjcYgdxClypodctk24366534 = 20658447;    long joAGcOnepYERSntsjcYgdxClypodctk38193662 = -897925534;    long joAGcOnepYERSntsjcYgdxClypodctk71475657 = -523953164;    long joAGcOnepYERSntsjcYgdxClypodctk27451181 = -174065117;    long joAGcOnepYERSntsjcYgdxClypodctk89274332 = -702514775;    long joAGcOnepYERSntsjcYgdxClypodctk54716271 = -358558540;    long joAGcOnepYERSntsjcYgdxClypodctk10762306 = -194798433;    long joAGcOnepYERSntsjcYgdxClypodctk22710068 = -110821715;    long joAGcOnepYERSntsjcYgdxClypodctk72631832 = -378699261;    long joAGcOnepYERSntsjcYgdxClypodctk92355940 = -923223807;    long joAGcOnepYERSntsjcYgdxClypodctk38744826 = -91637186;    long joAGcOnepYERSntsjcYgdxClypodctk69089231 = -7895677;    long joAGcOnepYERSntsjcYgdxClypodctk98017958 = -499436995;    long joAGcOnepYERSntsjcYgdxClypodctk92768082 = -40560717;    long joAGcOnepYERSntsjcYgdxClypodctk12110219 = -141783192;    long joAGcOnepYERSntsjcYgdxClypodctk9177961 = 12447547;    long joAGcOnepYERSntsjcYgdxClypodctk75834028 = -675654055;    long joAGcOnepYERSntsjcYgdxClypodctk69001922 = 76113995;    long joAGcOnepYERSntsjcYgdxClypodctk56363368 = -725168531;    long joAGcOnepYERSntsjcYgdxClypodctk10583165 = -539479437;    long joAGcOnepYERSntsjcYgdxClypodctk75494250 = 75950201;    long joAGcOnepYERSntsjcYgdxClypodctk64685996 = -335025782;    long joAGcOnepYERSntsjcYgdxClypodctk14414398 = -91845269;    long joAGcOnepYERSntsjcYgdxClypodctk9822141 = -541160839;    long joAGcOnepYERSntsjcYgdxClypodctk93441139 = -600535422;    long joAGcOnepYERSntsjcYgdxClypodctk10728655 = -757265035;    long joAGcOnepYERSntsjcYgdxClypodctk96676334 = -906748429;    long joAGcOnepYERSntsjcYgdxClypodctk84342128 = 55090961;    long joAGcOnepYERSntsjcYgdxClypodctk93360631 = -13351474;    long joAGcOnepYERSntsjcYgdxClypodctk65555357 = -488574533;    long joAGcOnepYERSntsjcYgdxClypodctk58438689 = 70938880;    long joAGcOnepYERSntsjcYgdxClypodctk82887468 = 62541470;    long joAGcOnepYERSntsjcYgdxClypodctk15223511 = -46533454;    long joAGcOnepYERSntsjcYgdxClypodctk97094769 = -138361261;    long joAGcOnepYERSntsjcYgdxClypodctk5367985 = -405987283;    long joAGcOnepYERSntsjcYgdxClypodctk99787260 = 3711185;    long joAGcOnepYERSntsjcYgdxClypodctk74382331 = -750055073;    long joAGcOnepYERSntsjcYgdxClypodctk50683327 = -759658889;    long joAGcOnepYERSntsjcYgdxClypodctk75815120 = -950755426;    long joAGcOnepYERSntsjcYgdxClypodctk12353993 = -738431707;    long joAGcOnepYERSntsjcYgdxClypodctk45255058 = -792632374;    long joAGcOnepYERSntsjcYgdxClypodctk3742804 = -150697556;    long joAGcOnepYERSntsjcYgdxClypodctk87583896 = -593752034;    long joAGcOnepYERSntsjcYgdxClypodctk80826435 = -874775844;    long joAGcOnepYERSntsjcYgdxClypodctk93674351 = -305800902;    long joAGcOnepYERSntsjcYgdxClypodctk46652852 = -56016363;    long joAGcOnepYERSntsjcYgdxClypodctk10202687 = -260546047;    long joAGcOnepYERSntsjcYgdxClypodctk30677083 = -676033141;    long joAGcOnepYERSntsjcYgdxClypodctk87407947 = -788252949;    long joAGcOnepYERSntsjcYgdxClypodctk61839741 = -314992940;    long joAGcOnepYERSntsjcYgdxClypodctk83463561 = -17162246;    long joAGcOnepYERSntsjcYgdxClypodctk66386944 = -157786955;    long joAGcOnepYERSntsjcYgdxClypodctk24843766 = -389249837;    long joAGcOnepYERSntsjcYgdxClypodctk21809992 = -944519530;    long joAGcOnepYERSntsjcYgdxClypodctk78731101 = -559963265;    long joAGcOnepYERSntsjcYgdxClypodctk59680538 = -644315771;    long joAGcOnepYERSntsjcYgdxClypodctk23779264 = -706080266;    long joAGcOnepYERSntsjcYgdxClypodctk61653516 = -982792326;    long joAGcOnepYERSntsjcYgdxClypodctk34010041 = -573529696;    long joAGcOnepYERSntsjcYgdxClypodctk78545678 = -945249741;    long joAGcOnepYERSntsjcYgdxClypodctk58039937 = -451810111;    long joAGcOnepYERSntsjcYgdxClypodctk26420177 = -149889395;    long joAGcOnepYERSntsjcYgdxClypodctk29349436 = 2529758;    long joAGcOnepYERSntsjcYgdxClypodctk7076475 = -890124729;    long joAGcOnepYERSntsjcYgdxClypodctk33917251 = -894162688;    long joAGcOnepYERSntsjcYgdxClypodctk55857357 = -54178656;    long joAGcOnepYERSntsjcYgdxClypodctk53865720 = -961362224;    long joAGcOnepYERSntsjcYgdxClypodctk923190 = -261075734;    long joAGcOnepYERSntsjcYgdxClypodctk87400097 = -634573434;    long joAGcOnepYERSntsjcYgdxClypodctk12322959 = -45494377;    long joAGcOnepYERSntsjcYgdxClypodctk34795630 = -237497381;    long joAGcOnepYERSntsjcYgdxClypodctk25150702 = -915995166;    long joAGcOnepYERSntsjcYgdxClypodctk93186802 = 26869420;    long joAGcOnepYERSntsjcYgdxClypodctk44009376 = -986736825;    long joAGcOnepYERSntsjcYgdxClypodctk65328106 = -746847063;    long joAGcOnepYERSntsjcYgdxClypodctk71751447 = -773352243;    long joAGcOnepYERSntsjcYgdxClypodctk77102100 = -741273749;    long joAGcOnepYERSntsjcYgdxClypodctk33587962 = -217069425;    long joAGcOnepYERSntsjcYgdxClypodctk16147789 = -135359938;    long joAGcOnepYERSntsjcYgdxClypodctk46788288 = -444519059;    long joAGcOnepYERSntsjcYgdxClypodctk525969 = -396718989;    long joAGcOnepYERSntsjcYgdxClypodctk65999251 = -130715289;    long joAGcOnepYERSntsjcYgdxClypodctk96934181 = -156656090;    long joAGcOnepYERSntsjcYgdxClypodctk31520891 = -698358535;    long joAGcOnepYERSntsjcYgdxClypodctk82091796 = -371412287;    long joAGcOnepYERSntsjcYgdxClypodctk92051744 = -771274165;    long joAGcOnepYERSntsjcYgdxClypodctk58043703 = -548208694;    long joAGcOnepYERSntsjcYgdxClypodctk93413518 = -102013924;    long joAGcOnepYERSntsjcYgdxClypodctk18363668 = -578397997;    long joAGcOnepYERSntsjcYgdxClypodctk45687447 = -761671513;    long joAGcOnepYERSntsjcYgdxClypodctk76007996 = -290208550;    long joAGcOnepYERSntsjcYgdxClypodctk12728815 = -767262747;    long joAGcOnepYERSntsjcYgdxClypodctk16673286 = -86129193;    long joAGcOnepYERSntsjcYgdxClypodctk97269441 = 94494314;    long joAGcOnepYERSntsjcYgdxClypodctk54314055 = -186621597;    long joAGcOnepYERSntsjcYgdxClypodctk18834882 = -542742979;    long joAGcOnepYERSntsjcYgdxClypodctk74393367 = -53227315;    long joAGcOnepYERSntsjcYgdxClypodctk80507421 = -703627305;    long joAGcOnepYERSntsjcYgdxClypodctk46909185 = -584013063;     joAGcOnepYERSntsjcYgdxClypodctk54225352 = joAGcOnepYERSntsjcYgdxClypodctk24366534;     joAGcOnepYERSntsjcYgdxClypodctk24366534 = joAGcOnepYERSntsjcYgdxClypodctk38193662;     joAGcOnepYERSntsjcYgdxClypodctk38193662 = joAGcOnepYERSntsjcYgdxClypodctk71475657;     joAGcOnepYERSntsjcYgdxClypodctk71475657 = joAGcOnepYERSntsjcYgdxClypodctk27451181;     joAGcOnepYERSntsjcYgdxClypodctk27451181 = joAGcOnepYERSntsjcYgdxClypodctk89274332;     joAGcOnepYERSntsjcYgdxClypodctk89274332 = joAGcOnepYERSntsjcYgdxClypodctk54716271;     joAGcOnepYERSntsjcYgdxClypodctk54716271 = joAGcOnepYERSntsjcYgdxClypodctk10762306;     joAGcOnepYERSntsjcYgdxClypodctk10762306 = joAGcOnepYERSntsjcYgdxClypodctk22710068;     joAGcOnepYERSntsjcYgdxClypodctk22710068 = joAGcOnepYERSntsjcYgdxClypodctk72631832;     joAGcOnepYERSntsjcYgdxClypodctk72631832 = joAGcOnepYERSntsjcYgdxClypodctk92355940;     joAGcOnepYERSntsjcYgdxClypodctk92355940 = joAGcOnepYERSntsjcYgdxClypodctk38744826;     joAGcOnepYERSntsjcYgdxClypodctk38744826 = joAGcOnepYERSntsjcYgdxClypodctk69089231;     joAGcOnepYERSntsjcYgdxClypodctk69089231 = joAGcOnepYERSntsjcYgdxClypodctk98017958;     joAGcOnepYERSntsjcYgdxClypodctk98017958 = joAGcOnepYERSntsjcYgdxClypodctk92768082;     joAGcOnepYERSntsjcYgdxClypodctk92768082 = joAGcOnepYERSntsjcYgdxClypodctk12110219;     joAGcOnepYERSntsjcYgdxClypodctk12110219 = joAGcOnepYERSntsjcYgdxClypodctk9177961;     joAGcOnepYERSntsjcYgdxClypodctk9177961 = joAGcOnepYERSntsjcYgdxClypodctk75834028;     joAGcOnepYERSntsjcYgdxClypodctk75834028 = joAGcOnepYERSntsjcYgdxClypodctk69001922;     joAGcOnepYERSntsjcYgdxClypodctk69001922 = joAGcOnepYERSntsjcYgdxClypodctk56363368;     joAGcOnepYERSntsjcYgdxClypodctk56363368 = joAGcOnepYERSntsjcYgdxClypodctk10583165;     joAGcOnepYERSntsjcYgdxClypodctk10583165 = joAGcOnepYERSntsjcYgdxClypodctk75494250;     joAGcOnepYERSntsjcYgdxClypodctk75494250 = joAGcOnepYERSntsjcYgdxClypodctk64685996;     joAGcOnepYERSntsjcYgdxClypodctk64685996 = joAGcOnepYERSntsjcYgdxClypodctk14414398;     joAGcOnepYERSntsjcYgdxClypodctk14414398 = joAGcOnepYERSntsjcYgdxClypodctk9822141;     joAGcOnepYERSntsjcYgdxClypodctk9822141 = joAGcOnepYERSntsjcYgdxClypodctk93441139;     joAGcOnepYERSntsjcYgdxClypodctk93441139 = joAGcOnepYERSntsjcYgdxClypodctk10728655;     joAGcOnepYERSntsjcYgdxClypodctk10728655 = joAGcOnepYERSntsjcYgdxClypodctk96676334;     joAGcOnepYERSntsjcYgdxClypodctk96676334 = joAGcOnepYERSntsjcYgdxClypodctk84342128;     joAGcOnepYERSntsjcYgdxClypodctk84342128 = joAGcOnepYERSntsjcYgdxClypodctk93360631;     joAGcOnepYERSntsjcYgdxClypodctk93360631 = joAGcOnepYERSntsjcYgdxClypodctk65555357;     joAGcOnepYERSntsjcYgdxClypodctk65555357 = joAGcOnepYERSntsjcYgdxClypodctk58438689;     joAGcOnepYERSntsjcYgdxClypodctk58438689 = joAGcOnepYERSntsjcYgdxClypodctk82887468;     joAGcOnepYERSntsjcYgdxClypodctk82887468 = joAGcOnepYERSntsjcYgdxClypodctk15223511;     joAGcOnepYERSntsjcYgdxClypodctk15223511 = joAGcOnepYERSntsjcYgdxClypodctk97094769;     joAGcOnepYERSntsjcYgdxClypodctk97094769 = joAGcOnepYERSntsjcYgdxClypodctk5367985;     joAGcOnepYERSntsjcYgdxClypodctk5367985 = joAGcOnepYERSntsjcYgdxClypodctk99787260;     joAGcOnepYERSntsjcYgdxClypodctk99787260 = joAGcOnepYERSntsjcYgdxClypodctk74382331;     joAGcOnepYERSntsjcYgdxClypodctk74382331 = joAGcOnepYERSntsjcYgdxClypodctk50683327;     joAGcOnepYERSntsjcYgdxClypodctk50683327 = joAGcOnepYERSntsjcYgdxClypodctk75815120;     joAGcOnepYERSntsjcYgdxClypodctk75815120 = joAGcOnepYERSntsjcYgdxClypodctk12353993;     joAGcOnepYERSntsjcYgdxClypodctk12353993 = joAGcOnepYERSntsjcYgdxClypodctk45255058;     joAGcOnepYERSntsjcYgdxClypodctk45255058 = joAGcOnepYERSntsjcYgdxClypodctk3742804;     joAGcOnepYERSntsjcYgdxClypodctk3742804 = joAGcOnepYERSntsjcYgdxClypodctk87583896;     joAGcOnepYERSntsjcYgdxClypodctk87583896 = joAGcOnepYERSntsjcYgdxClypodctk80826435;     joAGcOnepYERSntsjcYgdxClypodctk80826435 = joAGcOnepYERSntsjcYgdxClypodctk93674351;     joAGcOnepYERSntsjcYgdxClypodctk93674351 = joAGcOnepYERSntsjcYgdxClypodctk46652852;     joAGcOnepYERSntsjcYgdxClypodctk46652852 = joAGcOnepYERSntsjcYgdxClypodctk10202687;     joAGcOnepYERSntsjcYgdxClypodctk10202687 = joAGcOnepYERSntsjcYgdxClypodctk30677083;     joAGcOnepYERSntsjcYgdxClypodctk30677083 = joAGcOnepYERSntsjcYgdxClypodctk87407947;     joAGcOnepYERSntsjcYgdxClypodctk87407947 = joAGcOnepYERSntsjcYgdxClypodctk61839741;     joAGcOnepYERSntsjcYgdxClypodctk61839741 = joAGcOnepYERSntsjcYgdxClypodctk83463561;     joAGcOnepYERSntsjcYgdxClypodctk83463561 = joAGcOnepYERSntsjcYgdxClypodctk66386944;     joAGcOnepYERSntsjcYgdxClypodctk66386944 = joAGcOnepYERSntsjcYgdxClypodctk24843766;     joAGcOnepYERSntsjcYgdxClypodctk24843766 = joAGcOnepYERSntsjcYgdxClypodctk21809992;     joAGcOnepYERSntsjcYgdxClypodctk21809992 = joAGcOnepYERSntsjcYgdxClypodctk78731101;     joAGcOnepYERSntsjcYgdxClypodctk78731101 = joAGcOnepYERSntsjcYgdxClypodctk59680538;     joAGcOnepYERSntsjcYgdxClypodctk59680538 = joAGcOnepYERSntsjcYgdxClypodctk23779264;     joAGcOnepYERSntsjcYgdxClypodctk23779264 = joAGcOnepYERSntsjcYgdxClypodctk61653516;     joAGcOnepYERSntsjcYgdxClypodctk61653516 = joAGcOnepYERSntsjcYgdxClypodctk34010041;     joAGcOnepYERSntsjcYgdxClypodctk34010041 = joAGcOnepYERSntsjcYgdxClypodctk78545678;     joAGcOnepYERSntsjcYgdxClypodctk78545678 = joAGcOnepYERSntsjcYgdxClypodctk58039937;     joAGcOnepYERSntsjcYgdxClypodctk58039937 = joAGcOnepYERSntsjcYgdxClypodctk26420177;     joAGcOnepYERSntsjcYgdxClypodctk26420177 = joAGcOnepYERSntsjcYgdxClypodctk29349436;     joAGcOnepYERSntsjcYgdxClypodctk29349436 = joAGcOnepYERSntsjcYgdxClypodctk7076475;     joAGcOnepYERSntsjcYgdxClypodctk7076475 = joAGcOnepYERSntsjcYgdxClypodctk33917251;     joAGcOnepYERSntsjcYgdxClypodctk33917251 = joAGcOnepYERSntsjcYgdxClypodctk55857357;     joAGcOnepYERSntsjcYgdxClypodctk55857357 = joAGcOnepYERSntsjcYgdxClypodctk53865720;     joAGcOnepYERSntsjcYgdxClypodctk53865720 = joAGcOnepYERSntsjcYgdxClypodctk923190;     joAGcOnepYERSntsjcYgdxClypodctk923190 = joAGcOnepYERSntsjcYgdxClypodctk87400097;     joAGcOnepYERSntsjcYgdxClypodctk87400097 = joAGcOnepYERSntsjcYgdxClypodctk12322959;     joAGcOnepYERSntsjcYgdxClypodctk12322959 = joAGcOnepYERSntsjcYgdxClypodctk34795630;     joAGcOnepYERSntsjcYgdxClypodctk34795630 = joAGcOnepYERSntsjcYgdxClypodctk25150702;     joAGcOnepYERSntsjcYgdxClypodctk25150702 = joAGcOnepYERSntsjcYgdxClypodctk93186802;     joAGcOnepYERSntsjcYgdxClypodctk93186802 = joAGcOnepYERSntsjcYgdxClypodctk44009376;     joAGcOnepYERSntsjcYgdxClypodctk44009376 = joAGcOnepYERSntsjcYgdxClypodctk65328106;     joAGcOnepYERSntsjcYgdxClypodctk65328106 = joAGcOnepYERSntsjcYgdxClypodctk71751447;     joAGcOnepYERSntsjcYgdxClypodctk71751447 = joAGcOnepYERSntsjcYgdxClypodctk77102100;     joAGcOnepYERSntsjcYgdxClypodctk77102100 = joAGcOnepYERSntsjcYgdxClypodctk33587962;     joAGcOnepYERSntsjcYgdxClypodctk33587962 = joAGcOnepYERSntsjcYgdxClypodctk16147789;     joAGcOnepYERSntsjcYgdxClypodctk16147789 = joAGcOnepYERSntsjcYgdxClypodctk46788288;     joAGcOnepYERSntsjcYgdxClypodctk46788288 = joAGcOnepYERSntsjcYgdxClypodctk525969;     joAGcOnepYERSntsjcYgdxClypodctk525969 = joAGcOnepYERSntsjcYgdxClypodctk65999251;     joAGcOnepYERSntsjcYgdxClypodctk65999251 = joAGcOnepYERSntsjcYgdxClypodctk96934181;     joAGcOnepYERSntsjcYgdxClypodctk96934181 = joAGcOnepYERSntsjcYgdxClypodctk31520891;     joAGcOnepYERSntsjcYgdxClypodctk31520891 = joAGcOnepYERSntsjcYgdxClypodctk82091796;     joAGcOnepYERSntsjcYgdxClypodctk82091796 = joAGcOnepYERSntsjcYgdxClypodctk92051744;     joAGcOnepYERSntsjcYgdxClypodctk92051744 = joAGcOnepYERSntsjcYgdxClypodctk58043703;     joAGcOnepYERSntsjcYgdxClypodctk58043703 = joAGcOnepYERSntsjcYgdxClypodctk93413518;     joAGcOnepYERSntsjcYgdxClypodctk93413518 = joAGcOnepYERSntsjcYgdxClypodctk18363668;     joAGcOnepYERSntsjcYgdxClypodctk18363668 = joAGcOnepYERSntsjcYgdxClypodctk45687447;     joAGcOnepYERSntsjcYgdxClypodctk45687447 = joAGcOnepYERSntsjcYgdxClypodctk76007996;     joAGcOnepYERSntsjcYgdxClypodctk76007996 = joAGcOnepYERSntsjcYgdxClypodctk12728815;     joAGcOnepYERSntsjcYgdxClypodctk12728815 = joAGcOnepYERSntsjcYgdxClypodctk16673286;     joAGcOnepYERSntsjcYgdxClypodctk16673286 = joAGcOnepYERSntsjcYgdxClypodctk97269441;     joAGcOnepYERSntsjcYgdxClypodctk97269441 = joAGcOnepYERSntsjcYgdxClypodctk54314055;     joAGcOnepYERSntsjcYgdxClypodctk54314055 = joAGcOnepYERSntsjcYgdxClypodctk18834882;     joAGcOnepYERSntsjcYgdxClypodctk18834882 = joAGcOnepYERSntsjcYgdxClypodctk74393367;     joAGcOnepYERSntsjcYgdxClypodctk74393367 = joAGcOnepYERSntsjcYgdxClypodctk80507421;     joAGcOnepYERSntsjcYgdxClypodctk80507421 = joAGcOnepYERSntsjcYgdxClypodctk46909185;     joAGcOnepYERSntsjcYgdxClypodctk46909185 = joAGcOnepYERSntsjcYgdxClypodctk54225352;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MSIoyiBVWOBHHqQLwEmRDA44938345() {     long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73693522 = -997144275;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh77390398 = -525219549;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55030654 = -549554149;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90122805 = -340527427;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh27897697 = -800337533;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh14866407 = -592999543;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99548149 = -801864770;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76012538 = -288606399;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83396865 = -839013094;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh50560555 = -384285307;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46579204 = -256214107;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh42239439 = -90939891;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh59460890 = -432252954;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh6433999 = 58277280;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53294544 = -338644508;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78325867 = -604975126;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15140074 = -159327135;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99896779 = -426408773;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68636801 = -301090766;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36974671 = -342704988;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh23039237 = -45691762;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90476333 = -435853012;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32859003 = -632600401;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32136066 = -828389261;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21025630 = -835460948;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98208601 = -286330640;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94656785 = -422415966;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47468009 = 29518292;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh26087086 = 41179815;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78067486 = -104790168;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95359442 = -353900625;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98017999 = -493410138;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94363571 = -492666297;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73980017 = -351136660;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh37025106 = -201064067;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41433922 = -709555891;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68170711 = -523164890;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15864806 = -827263888;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh17996652 = -124073714;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97096856 = -947286522;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53836050 = -148218003;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh57114191 = 68471400;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh74876044 = -98499354;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh70969435 = 57175306;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh60854847 = -51898807;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48135479 = -843132323;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28642732 = 30290314;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10358517 = -443833361;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71812674 = -689972379;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28306290 = -549265294;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36275310 = -721357871;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99912421 = -394515105;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36212091 = -933895916;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97773794 = -383843473;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21899109 = -719078165;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83217188 = -461291264;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh44531396 = -892619149;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh22894588 = -721164889;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69097176 = -505066479;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh29689096 = -414006894;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh20209622 = -70583577;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080141 = -731383062;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh49925453 = -229786215;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh5329380 = -634222927;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55201113 = 69615318;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48561204 = -762803970;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47875867 = -598273595;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh85480872 = 18883706;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69408893 = -740658654;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh11860622 = -629088617;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10155157 = 18189764;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99275268 = -332063247;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh81900128 = -202335059;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71539945 = -353804244;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83138620 = -94486985;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh65925045 = -14163163;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15600290 = -237353659;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61889568 = -589775707;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71281219 = -676490454;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh72890151 = -992328626;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69565869 = -216620955;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh84298269 = -978582606;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh75655335 = -280509330;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97780795 = -409554891;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41792176 = -383432298;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95447020 = -959385520;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61805909 = -559514222;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96589777 = -8822824;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080909 = -632058496;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53807917 = -739772804;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96902526 = -816936743;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh45276124 = -802000002;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46767629 = -222197409;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh88307555 = -710066821;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76887234 = -776702945;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh1755909 = -416834941;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh7188739 = -701742385;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69546665 = -464276428;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15768322 = 87559987;    long yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh12293643 = -997144275;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73693522 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh77390398;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh77390398 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55030654;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55030654 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90122805;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90122805 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh27897697;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh27897697 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh14866407;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh14866407 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99548149;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99548149 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76012538;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76012538 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83396865;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83396865 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh50560555;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh50560555 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46579204;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46579204 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh42239439;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh42239439 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh59460890;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh59460890 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh6433999;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh6433999 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53294544;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53294544 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78325867;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78325867 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15140074;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15140074 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99896779;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99896779 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68636801;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68636801 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36974671;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36974671 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh23039237;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh23039237 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90476333;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh90476333 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32859003;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32859003 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32136066;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh32136066 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21025630;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21025630 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98208601;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98208601 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94656785;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94656785 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47468009;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47468009 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh26087086;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh26087086 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78067486;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh78067486 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95359442;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95359442 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98017999;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh98017999 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94363571;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh94363571 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73980017;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73980017 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh37025106;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh37025106 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41433922;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41433922 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68170711;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh68170711 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15864806;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15864806 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh17996652;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh17996652 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97096856;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97096856 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53836050;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53836050 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh57114191;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh57114191 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh74876044;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh74876044 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh70969435;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh70969435 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh60854847;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh60854847 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48135479;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48135479 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28642732;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28642732 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10358517;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10358517 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71812674;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71812674 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28306290;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh28306290 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36275310;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36275310 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99912421;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99912421 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36212091;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh36212091 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97773794;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97773794 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21899109;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh21899109 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83217188;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83217188 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh44531396;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh44531396 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh22894588;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh22894588 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69097176;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69097176 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh29689096;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh29689096 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh20209622;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh20209622 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080141;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080141 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh49925453;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh49925453 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh5329380;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh5329380 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55201113;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh55201113 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48561204;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh48561204 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47875867;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh47875867 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh85480872;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh85480872 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69408893;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69408893 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh11860622;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh11860622 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10155157;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh10155157 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99275268;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh99275268 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh81900128;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh81900128 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71539945;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71539945 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83138620;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh83138620 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh65925045;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh65925045 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15600290;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15600290 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61889568;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61889568 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71281219;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh71281219 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh72890151;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh72890151 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69565869;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69565869 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh84298269;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh84298269 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh75655335;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh75655335 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97780795;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh97780795 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41792176;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh41792176 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95447020;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh95447020 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61805909;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh61805909 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96589777;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96589777 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080909;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh52080909 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53807917;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh53807917 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96902526;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh96902526 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh45276124;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh45276124 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46767629;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh46767629 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh88307555;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh88307555 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76887234;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh76887234 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh1755909;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh1755909 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh7188739;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh7188739 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69546665;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh69546665 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15768322;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh15768322 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh12293643;     yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh12293643 = yGBfcyBNOjYtGBlyAYrTCQoZuiOZUnh73693522;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void TwFkLLOYcGCpkHjOWURDNb5241003() {     long TerLisMiTnWdSIyhczzDFzvGVRwfMoo63819831 = 44099524;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo60515463 = -900145719;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo50523353 = -686348610;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo63621380 = -526699249;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo40954433 = -741660975;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo95652811 = -485632651;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo94211588 = -439410242;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo28891102 = 74945862;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo7208553 = -846905732;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo54816225 = 45840168;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo22731023 = -764634265;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo76988946 = -670528026;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo97807022 = -744488814;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo44852853 = 60116395;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo51368915 = -823765451;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo2505610 = -305354996;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo59102254 = -420672376;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo21252492 = -869258065;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo29551192 = -767501201;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo4298919 = -990583297;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo10961639 = -850116854;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo88557915 = -768949647;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo66097420 = 60939678;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo40057164 = -176413636;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo67910817 = -378971892;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo16999566 = -162204375;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo16624121 = -181944960;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo70638384 = -30371766;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo87296083 = -721019233;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo25856566 = 20807440;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo98822845 = -680567169;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo97384913 = -994234558;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo3332613 = -792891457;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo97818662 = -342587818;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo72621640 = -951399728;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo94664928 = 87414698;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo68404280 = -38980795;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo40222089 = -693323132;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo28529669 = -931535760;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo41608998 = -851994296;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo67535723 = -954079278;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo11758655 = -846021813;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo34692886 = -573924949;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo1631376 = -906907883;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo52819264 = -164408763;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo68574472 = -226756228;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo9066023 = -618192186;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo744976 = -470489614;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo99731327 = -25911726;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo57586696 = 93738369;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo65640834 = 4260084;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo43685529 = -358941938;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo85664545 = -645748911;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo50680856 = -507398755;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo94279363 = -847678436;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo75261915 = -186950829;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo94418042 = -861085398;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo10466189 = -409934974;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo95710563 = -47727358;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo23954867 = -479456601;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo79028691 = -203687691;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo23573204 = -309038476;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo41595018 = -204034906;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo81351986 = -767713173;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo55993380 = -273592663;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo25346109 = -770399707;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo73656334 = -877636570;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo99988360 = -301900997;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo72231212 = 11516123;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo56703987 = -811180150;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo34101330 = -166374202;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo18880166 = -727349244;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo92722823 = -937722306;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo87942194 = -915506906;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo36763196 = 63495981;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo99202984 = 95904958;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo53865030 = -95024699;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo64466045 = -32152439;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo87237899 = 87995126;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo99336345 = -52215665;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo7933544 = -544012190;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo15879145 = -711455346;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo70907056 = 95539959;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo29709388 = -714757602;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo60215732 = -983452644;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo55137316 = -221625231;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo11720369 = -248485647;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo52651756 = -185492702;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo3539299 = -494909382;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo97359724 = -664448899;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo246887 = -51499904;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo57938091 = -629045821;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo44511526 = -545595775;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo4574803 = -352079160;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo62580307 = -548306605;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo43962519 = -545040802;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo70163636 = -541986908;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo53340899 = -806211777;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo45637995 = -533315220;    long TerLisMiTnWdSIyhczzDFzvGVRwfMoo27473156 = 44099524;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo63819831 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo60515463;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo60515463 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo50523353;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo50523353 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo63621380;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo63621380 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo40954433;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo40954433 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo95652811;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo95652811 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo94211588;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo94211588 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo28891102;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo28891102 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo7208553;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo7208553 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo54816225;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo54816225 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo22731023;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo22731023 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo76988946;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo76988946 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo97807022;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo97807022 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo44852853;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo44852853 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo51368915;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo51368915 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo2505610;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo2505610 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo59102254;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo59102254 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo21252492;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo21252492 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo29551192;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo29551192 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo4298919;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo4298919 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo10961639;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo10961639 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo88557915;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo88557915 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo66097420;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo66097420 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo40057164;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo40057164 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo67910817;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo67910817 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo16999566;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo16999566 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo16624121;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo16624121 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo70638384;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo70638384 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo87296083;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo87296083 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo25856566;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo25856566 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo98822845;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo98822845 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo97384913;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo97384913 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo3332613;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo3332613 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo97818662;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo97818662 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo72621640;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo72621640 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo94664928;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo94664928 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo68404280;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo68404280 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo40222089;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo40222089 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo28529669;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo28529669 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo41608998;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo41608998 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo67535723;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo67535723 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo11758655;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo11758655 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo34692886;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo34692886 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo1631376;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo1631376 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo52819264;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo52819264 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo68574472;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo68574472 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo9066023;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo9066023 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo744976;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo744976 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo99731327;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo99731327 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo57586696;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo57586696 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo65640834;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo65640834 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo43685529;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo43685529 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo85664545;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo85664545 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo50680856;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo50680856 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo94279363;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo94279363 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo75261915;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo75261915 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo94418042;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo94418042 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo10466189;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo10466189 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo95710563;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo95710563 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo23954867;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo23954867 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo79028691;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo79028691 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo23573204;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo23573204 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo41595018;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo41595018 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo81351986;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo81351986 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo55993380;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo55993380 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo25346109;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo25346109 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo73656334;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo73656334 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo99988360;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo99988360 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo72231212;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo72231212 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo56703987;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo56703987 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo34101330;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo34101330 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo18880166;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo18880166 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo92722823;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo92722823 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo87942194;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo87942194 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo36763196;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo36763196 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo99202984;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo99202984 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo53865030;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo53865030 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo64466045;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo64466045 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo87237899;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo87237899 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo99336345;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo99336345 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo7933544;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo7933544 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo15879145;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo15879145 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo70907056;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo70907056 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo29709388;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo29709388 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo60215732;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo60215732 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo55137316;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo55137316 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo11720369;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo11720369 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo52651756;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo52651756 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo3539299;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo3539299 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo97359724;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo97359724 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo246887;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo246887 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo57938091;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo57938091 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo44511526;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo44511526 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo4574803;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo4574803 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo62580307;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo62580307 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo43962519;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo43962519 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo70163636;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo70163636 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo53340899;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo53340899 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo45637995;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo45637995 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo27473156;     TerLisMiTnWdSIyhczzDFzvGVRwfMoo27473156 = TerLisMiTnWdSIyhczzDFzvGVRwfMoo63819831;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zqRrDSJEYHoKETYlzqdoad17786191() {     long BsNUMJbxOTUYLHX83288001 = -369031688;    long BsNUMJbxOTUYLHX13539327 = -346023715;    long BsNUMJbxOTUYLHX67360344 = -337977225;    long BsNUMJbxOTUYLHX82268529 = -343273512;    long BsNUMJbxOTUYLHX41400949 = -267933391;    long BsNUMJbxOTUYLHX21244886 = -376117420;    long BsNUMJbxOTUYLHX39043467 = -882716472;    long BsNUMJbxOTUYLHX94141335 = -18862104;    long BsNUMJbxOTUYLHX67895350 = -475097111;    long BsNUMJbxOTUYLHX32744949 = 40254122;    long BsNUMJbxOTUYLHX76954286 = -97624565;    long BsNUMJbxOTUYLHX80483560 = -669830731;    long BsNUMJbxOTUYLHX88178681 = -68846091;    long BsNUMJbxOTUYLHX53268893 = -482169331;    long BsNUMJbxOTUYLHX11895377 = -21849242;    long BsNUMJbxOTUYLHX68721259 = -768546930;    long BsNUMJbxOTUYLHX65064367 = -592447057;    long BsNUMJbxOTUYLHX45315244 = -620012783;    long BsNUMJbxOTUYLHX29186072 = -44705962;    long BsNUMJbxOTUYLHX84910220 = -608119753;    long BsNUMJbxOTUYLHX23417711 = -356329180;    long BsNUMJbxOTUYLHX3539999 = -180752861;    long BsNUMJbxOTUYLHX34270427 = -236634940;    long BsNUMJbxOTUYLHX57778832 = -912957628;    long BsNUMJbxOTUYLHX79114306 = -673272002;    long BsNUMJbxOTUYLHX21767028 = -947999593;    long BsNUMJbxOTUYLHX552252 = -947095892;    long BsNUMJbxOTUYLHX21430059 = -194105045;    long BsNUMJbxOTUYLHX29041041 = -734930379;    long BsNUMJbxOTUYLHX10563420 = -70631254;    long BsNUMJbxOTUYLHX28626930 = -545893262;    long BsNUMJbxOTUYLHX36964225 = -458583576;    long BsNUMJbxOTUYLHX14808716 = -248099223;    long BsNUMJbxOTUYLHX56575169 = -647191024;    long BsNUMJbxOTUYLHX12551977 = 85897466;    long BsNUMJbxOTUYLHX30730866 = -216153910;    long BsNUMJbxOTUYLHX36787731 = -565856870;    long BsNUMJbxOTUYLHX81704562 = -770531948;    long BsNUMJbxOTUYLHX95842993 = -295950585;    long BsNUMJbxOTUYLHX62890734 = -848525392;    long BsNUMJbxOTUYLHX9017781 = -363865574;    long BsNUMJbxOTUYLHX23617788 = 15081961;    long BsNUMJbxOTUYLHX5826127 = -521726747;    long BsNUMJbxOTUYLHX85016914 = -255980544;    long BsNUMJbxOTUYLHX32847675 = -441531726;    long BsNUMJbxOTUYLHX23035600 = -764087649;    long BsNUMJbxOTUYLHX91055902 = -531885508;    long BsNUMJbxOTUYLHX900806 = -653776928;    long BsNUMJbxOTUYLHX40866919 = -39850964;    long BsNUMJbxOTUYLHX98485038 = -767273976;    long BsNUMJbxOTUYLHX40076403 = -402104847;    long BsNUMJbxOTUYLHX60134389 = -736294798;    long BsNUMJbxOTUYLHX55489692 = -321857872;    long BsNUMJbxOTUYLHX23610885 = -501992391;    long BsNUMJbxOTUYLHX94368480 = -622237071;    long BsNUMJbxOTUYLHX79748002 = -88278828;    long BsNUMJbxOTUYLHX79268900 = -9388776;    long BsNUMJbxOTUYLHX9581513 = -425019597;    long BsNUMJbxOTUYLHX3154223 = -670001511;    long BsNUMJbxOTUYLHX19633922 = -319933798;    long BsNUMJbxOTUYLHX20692635 = -429021528;    long BsNUMJbxOTUYLHX17613408 = -588611427;    long BsNUMJbxOTUYLHX65100295 = -283931726;    long BsNUMJbxOTUYLHX57331930 = -304465858;    long BsNUMJbxOTUYLHX4118019 = -413852617;    long BsNUMJbxOTUYLHX39990062 = -639040989;    long BsNUMJbxOTUYLHX65674844 = -321731508;    long BsNUMJbxOTUYLHX31603513 = -421655067;    long BsNUMJbxOTUYLHX40716917 = -468066797;    long BsNUMJbxOTUYLHX81164511 = -805695333;    long BsNUMJbxOTUYLHX31933528 = -102690061;    long BsNUMJbxOTUYLHX83359804 = -821915110;    long BsNUMJbxOTUYLHX49472250 = -224062199;    long BsNUMJbxOTUYLHX66295338 = -196180570;    long BsNUMJbxOTUYLHX75892440 = -144254180;    long BsNUMJbxOTUYLHX99799923 = -271411142;    long BsNUMJbxOTUYLHX97713871 = -659026114;    long BsNUMJbxOTUYLHX49253512 = -980654397;    long BsNUMJbxOTUYLHX24931157 = -371425902;    long BsNUMJbxOTUYLHX56078707 = -909184353;    long BsNUMJbxOTUYLHX30711125 = -316114085;    long BsNUMJbxOTUYLHX99651446 = -193318964;    long BsNUMJbxOTUYLHX80563140 = -54254082;    long BsNUMJbxOTUYLHX30556002 = -967656403;    long BsNUMJbxOTUYLHX70487017 = -668526408;    long BsNUMJbxOTUYLHX68492541 = -809598465;    long BsNUMJbxOTUYLHX81474532 = -36725704;    long BsNUMJbxOTUYLHX91197831 = -746106833;    long BsNUMJbxOTUYLHX62206689 = 75046046;    long BsNUMJbxOTUYLHX32803974 = -825823707;    long BsNUMJbxOTUYLHX51461966 = -106765135;    long BsNUMJbxOTUYLHX27206219 = -40837273;    long BsNUMJbxOTUYLHX78550340 = -530437;    long BsNUMJbxOTUYLHX76209072 = -976016787;    long BsNUMJbxOTUYLHX42198100 = -319503864;    long BsNUMJbxOTUYLHX91404372 = -775254147;    long BsNUMJbxOTUYLHX58517493 = -700986313;    long BsNUMJbxOTUYLHX48494197 = -117260890;    long BsNUMJbxOTUYLHX80898896 = -842127928;    long BsNUMJbxOTUYLHX92857613 = -369031688;     BsNUMJbxOTUYLHX83288001 = BsNUMJbxOTUYLHX13539327;     BsNUMJbxOTUYLHX13539327 = BsNUMJbxOTUYLHX67360344;     BsNUMJbxOTUYLHX67360344 = BsNUMJbxOTUYLHX82268529;     BsNUMJbxOTUYLHX82268529 = BsNUMJbxOTUYLHX41400949;     BsNUMJbxOTUYLHX41400949 = BsNUMJbxOTUYLHX21244886;     BsNUMJbxOTUYLHX21244886 = BsNUMJbxOTUYLHX39043467;     BsNUMJbxOTUYLHX39043467 = BsNUMJbxOTUYLHX94141335;     BsNUMJbxOTUYLHX94141335 = BsNUMJbxOTUYLHX67895350;     BsNUMJbxOTUYLHX67895350 = BsNUMJbxOTUYLHX32744949;     BsNUMJbxOTUYLHX32744949 = BsNUMJbxOTUYLHX76954286;     BsNUMJbxOTUYLHX76954286 = BsNUMJbxOTUYLHX80483560;     BsNUMJbxOTUYLHX80483560 = BsNUMJbxOTUYLHX88178681;     BsNUMJbxOTUYLHX88178681 = BsNUMJbxOTUYLHX53268893;     BsNUMJbxOTUYLHX53268893 = BsNUMJbxOTUYLHX11895377;     BsNUMJbxOTUYLHX11895377 = BsNUMJbxOTUYLHX68721259;     BsNUMJbxOTUYLHX68721259 = BsNUMJbxOTUYLHX65064367;     BsNUMJbxOTUYLHX65064367 = BsNUMJbxOTUYLHX45315244;     BsNUMJbxOTUYLHX45315244 = BsNUMJbxOTUYLHX29186072;     BsNUMJbxOTUYLHX29186072 = BsNUMJbxOTUYLHX84910220;     BsNUMJbxOTUYLHX84910220 = BsNUMJbxOTUYLHX23417711;     BsNUMJbxOTUYLHX23417711 = BsNUMJbxOTUYLHX3539999;     BsNUMJbxOTUYLHX3539999 = BsNUMJbxOTUYLHX34270427;     BsNUMJbxOTUYLHX34270427 = BsNUMJbxOTUYLHX57778832;     BsNUMJbxOTUYLHX57778832 = BsNUMJbxOTUYLHX79114306;     BsNUMJbxOTUYLHX79114306 = BsNUMJbxOTUYLHX21767028;     BsNUMJbxOTUYLHX21767028 = BsNUMJbxOTUYLHX552252;     BsNUMJbxOTUYLHX552252 = BsNUMJbxOTUYLHX21430059;     BsNUMJbxOTUYLHX21430059 = BsNUMJbxOTUYLHX29041041;     BsNUMJbxOTUYLHX29041041 = BsNUMJbxOTUYLHX10563420;     BsNUMJbxOTUYLHX10563420 = BsNUMJbxOTUYLHX28626930;     BsNUMJbxOTUYLHX28626930 = BsNUMJbxOTUYLHX36964225;     BsNUMJbxOTUYLHX36964225 = BsNUMJbxOTUYLHX14808716;     BsNUMJbxOTUYLHX14808716 = BsNUMJbxOTUYLHX56575169;     BsNUMJbxOTUYLHX56575169 = BsNUMJbxOTUYLHX12551977;     BsNUMJbxOTUYLHX12551977 = BsNUMJbxOTUYLHX30730866;     BsNUMJbxOTUYLHX30730866 = BsNUMJbxOTUYLHX36787731;     BsNUMJbxOTUYLHX36787731 = BsNUMJbxOTUYLHX81704562;     BsNUMJbxOTUYLHX81704562 = BsNUMJbxOTUYLHX95842993;     BsNUMJbxOTUYLHX95842993 = BsNUMJbxOTUYLHX62890734;     BsNUMJbxOTUYLHX62890734 = BsNUMJbxOTUYLHX9017781;     BsNUMJbxOTUYLHX9017781 = BsNUMJbxOTUYLHX23617788;     BsNUMJbxOTUYLHX23617788 = BsNUMJbxOTUYLHX5826127;     BsNUMJbxOTUYLHX5826127 = BsNUMJbxOTUYLHX85016914;     BsNUMJbxOTUYLHX85016914 = BsNUMJbxOTUYLHX32847675;     BsNUMJbxOTUYLHX32847675 = BsNUMJbxOTUYLHX23035600;     BsNUMJbxOTUYLHX23035600 = BsNUMJbxOTUYLHX91055902;     BsNUMJbxOTUYLHX91055902 = BsNUMJbxOTUYLHX900806;     BsNUMJbxOTUYLHX900806 = BsNUMJbxOTUYLHX40866919;     BsNUMJbxOTUYLHX40866919 = BsNUMJbxOTUYLHX98485038;     BsNUMJbxOTUYLHX98485038 = BsNUMJbxOTUYLHX40076403;     BsNUMJbxOTUYLHX40076403 = BsNUMJbxOTUYLHX60134389;     BsNUMJbxOTUYLHX60134389 = BsNUMJbxOTUYLHX55489692;     BsNUMJbxOTUYLHX55489692 = BsNUMJbxOTUYLHX23610885;     BsNUMJbxOTUYLHX23610885 = BsNUMJbxOTUYLHX94368480;     BsNUMJbxOTUYLHX94368480 = BsNUMJbxOTUYLHX79748002;     BsNUMJbxOTUYLHX79748002 = BsNUMJbxOTUYLHX79268900;     BsNUMJbxOTUYLHX79268900 = BsNUMJbxOTUYLHX9581513;     BsNUMJbxOTUYLHX9581513 = BsNUMJbxOTUYLHX3154223;     BsNUMJbxOTUYLHX3154223 = BsNUMJbxOTUYLHX19633922;     BsNUMJbxOTUYLHX19633922 = BsNUMJbxOTUYLHX20692635;     BsNUMJbxOTUYLHX20692635 = BsNUMJbxOTUYLHX17613408;     BsNUMJbxOTUYLHX17613408 = BsNUMJbxOTUYLHX65100295;     BsNUMJbxOTUYLHX65100295 = BsNUMJbxOTUYLHX57331930;     BsNUMJbxOTUYLHX57331930 = BsNUMJbxOTUYLHX4118019;     BsNUMJbxOTUYLHX4118019 = BsNUMJbxOTUYLHX39990062;     BsNUMJbxOTUYLHX39990062 = BsNUMJbxOTUYLHX65674844;     BsNUMJbxOTUYLHX65674844 = BsNUMJbxOTUYLHX31603513;     BsNUMJbxOTUYLHX31603513 = BsNUMJbxOTUYLHX40716917;     BsNUMJbxOTUYLHX40716917 = BsNUMJbxOTUYLHX81164511;     BsNUMJbxOTUYLHX81164511 = BsNUMJbxOTUYLHX31933528;     BsNUMJbxOTUYLHX31933528 = BsNUMJbxOTUYLHX83359804;     BsNUMJbxOTUYLHX83359804 = BsNUMJbxOTUYLHX49472250;     BsNUMJbxOTUYLHX49472250 = BsNUMJbxOTUYLHX66295338;     BsNUMJbxOTUYLHX66295338 = BsNUMJbxOTUYLHX75892440;     BsNUMJbxOTUYLHX75892440 = BsNUMJbxOTUYLHX99799923;     BsNUMJbxOTUYLHX99799923 = BsNUMJbxOTUYLHX97713871;     BsNUMJbxOTUYLHX97713871 = BsNUMJbxOTUYLHX49253512;     BsNUMJbxOTUYLHX49253512 = BsNUMJbxOTUYLHX24931157;     BsNUMJbxOTUYLHX24931157 = BsNUMJbxOTUYLHX56078707;     BsNUMJbxOTUYLHX56078707 = BsNUMJbxOTUYLHX30711125;     BsNUMJbxOTUYLHX30711125 = BsNUMJbxOTUYLHX99651446;     BsNUMJbxOTUYLHX99651446 = BsNUMJbxOTUYLHX80563140;     BsNUMJbxOTUYLHX80563140 = BsNUMJbxOTUYLHX30556002;     BsNUMJbxOTUYLHX30556002 = BsNUMJbxOTUYLHX70487017;     BsNUMJbxOTUYLHX70487017 = BsNUMJbxOTUYLHX68492541;     BsNUMJbxOTUYLHX68492541 = BsNUMJbxOTUYLHX81474532;     BsNUMJbxOTUYLHX81474532 = BsNUMJbxOTUYLHX91197831;     BsNUMJbxOTUYLHX91197831 = BsNUMJbxOTUYLHX62206689;     BsNUMJbxOTUYLHX62206689 = BsNUMJbxOTUYLHX32803974;     BsNUMJbxOTUYLHX32803974 = BsNUMJbxOTUYLHX51461966;     BsNUMJbxOTUYLHX51461966 = BsNUMJbxOTUYLHX27206219;     BsNUMJbxOTUYLHX27206219 = BsNUMJbxOTUYLHX78550340;     BsNUMJbxOTUYLHX78550340 = BsNUMJbxOTUYLHX76209072;     BsNUMJbxOTUYLHX76209072 = BsNUMJbxOTUYLHX42198100;     BsNUMJbxOTUYLHX42198100 = BsNUMJbxOTUYLHX91404372;     BsNUMJbxOTUYLHX91404372 = BsNUMJbxOTUYLHX58517493;     BsNUMJbxOTUYLHX58517493 = BsNUMJbxOTUYLHX48494197;     BsNUMJbxOTUYLHX48494197 = BsNUMJbxOTUYLHX80898896;     BsNUMJbxOTUYLHX80898896 = BsNUMJbxOTUYLHX92857613;     BsNUMJbxOTUYLHX92857613 = BsNUMJbxOTUYLHX83288001;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void hSXxAzScppmwWTCzRVVMHA13969352() {     long kTjdWYNdjKfu42884098 = -597788065;    long kTjdWYNdjKfu15045177 = -156179100;    long kTjdWYNdjKfu4361733 = -412118147;    long kTjdWYNdjKfu78144288 = -115884390;    long kTjdWYNdjKfu52694175 = -168440418;    long kTjdWYNdjKfu18922007 = -234377093;    long kTjdWYNdjKfu36401949 = -212434058;    long kTjdWYNdjKfu44966619 = -373073479;    long kTjdWYNdjKfu81708793 = 92230390;    long kTjdWYNdjKfu15769464 = 98995268;    long kTjdWYNdjKfu2249218 = -499167004;    long kTjdWYNdjKfu15154762 = -764851980;    long kTjdWYNdjKfu58933245 = 24975391;    long kTjdWYNdjKfu11642732 = -386327678;    long kTjdWYNdjKfu9203183 = -814375763;    long kTjdWYNdjKfu65475513 = -573919821;    long kTjdWYNdjKfu1025472 = -520663338;    long kTjdWYNdjKfu9983575 = -989348888;    long kTjdWYNdjKfu9628275 = -183825592;    long kTjdWYNdjKfu64827330 = -170528406;    long kTjdWYNdjKfu3878830 = -189350005;    long kTjdWYNdjKfu72029597 = -73154738;    long kTjdWYNdjKfu26462252 = -930019;    long kTjdWYNdjKfu22509071 = -477295865;    long kTjdWYNdjKfu55092312 = -129409592;    long kTjdWYNdjKfu16181935 = 17382936;    long kTjdWYNdjKfu13892322 = -296575889;    long kTjdWYNdjKfu86541227 = -815486636;    long kTjdWYNdjKfu78825383 = -524522994;    long kTjdWYNdjKfu49036887 = -117614496;    long kTjdWYNdjKfu53541248 = -91112590;    long kTjdWYNdjKfu79729485 = -875801573;    long kTjdWYNdjKfu63890755 = -228046096;    long kTjdWYNdjKfu39099612 = -149074956;    long kTjdWYNdjKfu17489338 = -662312520;    long kTjdWYNdjKfu9320763 = -527810492;    long kTjdWYNdjKfu27419408 = -858635504;    long kTjdWYNdjKfu80064900 = -714984337;    long kTjdWYNdjKfu14860937 = -14657102;    long kTjdWYNdjKfu35716388 = -22406340;    long kTjdWYNdjKfu67235593 = -832527170;    long kTjdWYNdjKfu93696968 = 10140543;    long kTjdWYNdjKfu46705369 = -255171576;    long kTjdWYNdjKfu59256419 = -679895283;    long kTjdWYNdjKfu33835991 = -987849795;    long kTjdWYNdjKfu87828728 = 92968192;    long kTjdWYNdjKfu96544624 = -423741176;    long kTjdWYNdjKfu47597199 = -986530157;    long kTjdWYNdjKfu80256566 = -323788584;    long kTjdWYNdjKfu13652431 = 11473563;    long kTjdWYNdjKfu90562653 = -188213071;    long kTjdWYNdjKfu66719542 = -707538053;    long kTjdWYNdjKfu30905207 = -561806326;    long kTjdWYNdjKfu96885407 = -762161346;    long kTjdWYNdjKfu10090522 = -586171158;    long kTjdWYNdjKfu70854500 = -424633328;    long kTjdWYNdjKfu88582924 = -55249082;    long kTjdWYNdjKfu81852661 = -934822283;    long kTjdWYNdjKfu23051977 = -986474798;    long kTjdWYNdjKfu36512241 = -85823355;    long kTjdWYNdjKfu5029685 = -937801204;    long kTjdWYNdjKfu49860722 = -396947423;    long kTjdWYNdjKfu66141236 = -848550486;    long kTjdWYNdjKfu32671907 = -790155115;    long kTjdWYNdjKfu62228215 = -809892142;    long kTjdWYNdjKfu22519733 = -623365432;    long kTjdWYNdjKfu51264007 = -436805885;    long kTjdWYNdjKfu19833634 = -825949654;    long kTjdWYNdjKfu94153394 = -724015159;    long kTjdWYNdjKfu99882420 = -186565272;    long kTjdWYNdjKfu38056105 = -715284318;    long kTjdWYNdjKfu20960571 = -805679001;    long kTjdWYNdjKfu95122638 = -874691787;    long kTjdWYNdjKfu73911886 = -61419252;    long kTjdWYNdjKfu97591736 = -338001236;    long kTjdWYNdjKfu10181861 = -99490548;    long kTjdWYNdjKfu25324228 = -817983162;    long kTjdWYNdjKfu67205832 = -321034737;    long kTjdWYNdjKfu88673080 = -489446071;    long kTjdWYNdjKfu67263583 = -122377784;    long kTjdWYNdjKfu19637310 = -558875889;    long kTjdWYNdjKfu66295123 = -310045733;    long kTjdWYNdjKfu6284662 = -391698052;    long kTjdWYNdjKfu65172953 = -435996557;    long kTjdWYNdjKfu58474233 = -929401426;    long kTjdWYNdjKfu86821706 = -383574537;    long kTjdWYNdjKfu48824279 = -213995248;    long kTjdWYNdjKfu67005347 = -465884750;    long kTjdWYNdjKfu29009090 = -562903798;    long kTjdWYNdjKfu46634837 = -137679193;    long kTjdWYNdjKfu20737838 = -372561411;    long kTjdWYNdjKfu45566747 = -923813222;    long kTjdWYNdjKfu57012924 = -728509539;    long kTjdWYNdjKfu78348696 = -928833747;    long kTjdWYNdjKfu30686704 = -84605137;    long kTjdWYNdjKfu17374872 = -335579748;    long kTjdWYNdjKfu27555733 = -141308972;    long kTjdWYNdjKfu14033462 = -465016462;    long kTjdWYNdjKfu97028204 = -870003141;    long kTjdWYNdjKfu11316258 = -597788065;     kTjdWYNdjKfu42884098 = kTjdWYNdjKfu15045177;     kTjdWYNdjKfu15045177 = kTjdWYNdjKfu4361733;     kTjdWYNdjKfu4361733 = kTjdWYNdjKfu78144288;     kTjdWYNdjKfu78144288 = kTjdWYNdjKfu52694175;     kTjdWYNdjKfu52694175 = kTjdWYNdjKfu18922007;     kTjdWYNdjKfu18922007 = kTjdWYNdjKfu36401949;     kTjdWYNdjKfu36401949 = kTjdWYNdjKfu44966619;     kTjdWYNdjKfu44966619 = kTjdWYNdjKfu81708793;     kTjdWYNdjKfu81708793 = kTjdWYNdjKfu15769464;     kTjdWYNdjKfu15769464 = kTjdWYNdjKfu2249218;     kTjdWYNdjKfu2249218 = kTjdWYNdjKfu15154762;     kTjdWYNdjKfu15154762 = kTjdWYNdjKfu58933245;     kTjdWYNdjKfu58933245 = kTjdWYNdjKfu11642732;     kTjdWYNdjKfu11642732 = kTjdWYNdjKfu9203183;     kTjdWYNdjKfu9203183 = kTjdWYNdjKfu65475513;     kTjdWYNdjKfu65475513 = kTjdWYNdjKfu1025472;     kTjdWYNdjKfu1025472 = kTjdWYNdjKfu9983575;     kTjdWYNdjKfu9983575 = kTjdWYNdjKfu9628275;     kTjdWYNdjKfu9628275 = kTjdWYNdjKfu64827330;     kTjdWYNdjKfu64827330 = kTjdWYNdjKfu3878830;     kTjdWYNdjKfu3878830 = kTjdWYNdjKfu72029597;     kTjdWYNdjKfu72029597 = kTjdWYNdjKfu26462252;     kTjdWYNdjKfu26462252 = kTjdWYNdjKfu22509071;     kTjdWYNdjKfu22509071 = kTjdWYNdjKfu55092312;     kTjdWYNdjKfu55092312 = kTjdWYNdjKfu16181935;     kTjdWYNdjKfu16181935 = kTjdWYNdjKfu13892322;     kTjdWYNdjKfu13892322 = kTjdWYNdjKfu86541227;     kTjdWYNdjKfu86541227 = kTjdWYNdjKfu78825383;     kTjdWYNdjKfu78825383 = kTjdWYNdjKfu49036887;     kTjdWYNdjKfu49036887 = kTjdWYNdjKfu53541248;     kTjdWYNdjKfu53541248 = kTjdWYNdjKfu79729485;     kTjdWYNdjKfu79729485 = kTjdWYNdjKfu63890755;     kTjdWYNdjKfu63890755 = kTjdWYNdjKfu39099612;     kTjdWYNdjKfu39099612 = kTjdWYNdjKfu17489338;     kTjdWYNdjKfu17489338 = kTjdWYNdjKfu9320763;     kTjdWYNdjKfu9320763 = kTjdWYNdjKfu27419408;     kTjdWYNdjKfu27419408 = kTjdWYNdjKfu80064900;     kTjdWYNdjKfu80064900 = kTjdWYNdjKfu14860937;     kTjdWYNdjKfu14860937 = kTjdWYNdjKfu35716388;     kTjdWYNdjKfu35716388 = kTjdWYNdjKfu67235593;     kTjdWYNdjKfu67235593 = kTjdWYNdjKfu93696968;     kTjdWYNdjKfu93696968 = kTjdWYNdjKfu46705369;     kTjdWYNdjKfu46705369 = kTjdWYNdjKfu59256419;     kTjdWYNdjKfu59256419 = kTjdWYNdjKfu33835991;     kTjdWYNdjKfu33835991 = kTjdWYNdjKfu87828728;     kTjdWYNdjKfu87828728 = kTjdWYNdjKfu96544624;     kTjdWYNdjKfu96544624 = kTjdWYNdjKfu47597199;     kTjdWYNdjKfu47597199 = kTjdWYNdjKfu80256566;     kTjdWYNdjKfu80256566 = kTjdWYNdjKfu13652431;     kTjdWYNdjKfu13652431 = kTjdWYNdjKfu90562653;     kTjdWYNdjKfu90562653 = kTjdWYNdjKfu66719542;     kTjdWYNdjKfu66719542 = kTjdWYNdjKfu30905207;     kTjdWYNdjKfu30905207 = kTjdWYNdjKfu96885407;     kTjdWYNdjKfu96885407 = kTjdWYNdjKfu10090522;     kTjdWYNdjKfu10090522 = kTjdWYNdjKfu70854500;     kTjdWYNdjKfu70854500 = kTjdWYNdjKfu88582924;     kTjdWYNdjKfu88582924 = kTjdWYNdjKfu81852661;     kTjdWYNdjKfu81852661 = kTjdWYNdjKfu23051977;     kTjdWYNdjKfu23051977 = kTjdWYNdjKfu36512241;     kTjdWYNdjKfu36512241 = kTjdWYNdjKfu5029685;     kTjdWYNdjKfu5029685 = kTjdWYNdjKfu49860722;     kTjdWYNdjKfu49860722 = kTjdWYNdjKfu66141236;     kTjdWYNdjKfu66141236 = kTjdWYNdjKfu32671907;     kTjdWYNdjKfu32671907 = kTjdWYNdjKfu62228215;     kTjdWYNdjKfu62228215 = kTjdWYNdjKfu22519733;     kTjdWYNdjKfu22519733 = kTjdWYNdjKfu51264007;     kTjdWYNdjKfu51264007 = kTjdWYNdjKfu19833634;     kTjdWYNdjKfu19833634 = kTjdWYNdjKfu94153394;     kTjdWYNdjKfu94153394 = kTjdWYNdjKfu99882420;     kTjdWYNdjKfu99882420 = kTjdWYNdjKfu38056105;     kTjdWYNdjKfu38056105 = kTjdWYNdjKfu20960571;     kTjdWYNdjKfu20960571 = kTjdWYNdjKfu95122638;     kTjdWYNdjKfu95122638 = kTjdWYNdjKfu73911886;     kTjdWYNdjKfu73911886 = kTjdWYNdjKfu97591736;     kTjdWYNdjKfu97591736 = kTjdWYNdjKfu10181861;     kTjdWYNdjKfu10181861 = kTjdWYNdjKfu25324228;     kTjdWYNdjKfu25324228 = kTjdWYNdjKfu67205832;     kTjdWYNdjKfu67205832 = kTjdWYNdjKfu88673080;     kTjdWYNdjKfu88673080 = kTjdWYNdjKfu67263583;     kTjdWYNdjKfu67263583 = kTjdWYNdjKfu19637310;     kTjdWYNdjKfu19637310 = kTjdWYNdjKfu66295123;     kTjdWYNdjKfu66295123 = kTjdWYNdjKfu6284662;     kTjdWYNdjKfu6284662 = kTjdWYNdjKfu65172953;     kTjdWYNdjKfu65172953 = kTjdWYNdjKfu58474233;     kTjdWYNdjKfu58474233 = kTjdWYNdjKfu86821706;     kTjdWYNdjKfu86821706 = kTjdWYNdjKfu48824279;     kTjdWYNdjKfu48824279 = kTjdWYNdjKfu67005347;     kTjdWYNdjKfu67005347 = kTjdWYNdjKfu29009090;     kTjdWYNdjKfu29009090 = kTjdWYNdjKfu46634837;     kTjdWYNdjKfu46634837 = kTjdWYNdjKfu20737838;     kTjdWYNdjKfu20737838 = kTjdWYNdjKfu45566747;     kTjdWYNdjKfu45566747 = kTjdWYNdjKfu57012924;     kTjdWYNdjKfu57012924 = kTjdWYNdjKfu78348696;     kTjdWYNdjKfu78348696 = kTjdWYNdjKfu30686704;     kTjdWYNdjKfu30686704 = kTjdWYNdjKfu17374872;     kTjdWYNdjKfu17374872 = kTjdWYNdjKfu27555733;     kTjdWYNdjKfu27555733 = kTjdWYNdjKfu14033462;     kTjdWYNdjKfu14033462 = kTjdWYNdjKfu97028204;     kTjdWYNdjKfu97028204 = kTjdWYNdjKfu11316258;     kTjdWYNdjKfu11316258 = kTjdWYNdjKfu42884098;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RoYbmgcVpfCjXV74272008() {     long PJsnRtQlTBIw33010407 = -656544266;    long PJsnRtQlTBIw98170241 = -531105270;    long PJsnRtQlTBIw99854431 = -548912608;    long PJsnRtQlTBIw51642863 = -302056212;    long PJsnRtQlTBIw65750910 = -109763860;    long PJsnRtQlTBIw99708410 = -127010201;    long PJsnRtQlTBIw31065388 = -949979531;    long PJsnRtQlTBIw97845182 = -9521218;    long PJsnRtQlTBIw5520482 = 84337752;    long PJsnRtQlTBIw20025134 = -570879257;    long PJsnRtQlTBIw78401036 = 92412838;    long PJsnRtQlTBIw49904269 = -244440115;    long PJsnRtQlTBIw97279377 = -287260470;    long PJsnRtQlTBIw50061585 = -384488562;    long PJsnRtQlTBIw7277555 = -199496706;    long PJsnRtQlTBIw89655255 = -274299691;    long PJsnRtQlTBIw44987652 = -782008579;    long PJsnRtQlTBIw31339287 = -332198180;    long PJsnRtQlTBIw70542665 = -650236028;    long PJsnRtQlTBIw32151578 = -818406716;    long PJsnRtQlTBIw91801231 = -993775097;    long PJsnRtQlTBIw70111179 = -406251374;    long PJsnRtQlTBIw59700670 = -407389940;    long PJsnRtQlTBIw30430168 = -925320240;    long PJsnRtQlTBIw1977500 = -772920536;    long PJsnRtQlTBIw34972899 = -958490799;    long PJsnRtQlTBIw35859657 = -56104883;    long PJsnRtQlTBIw9711603 = -875376694;    long PJsnRtQlTBIw40034381 = -186722042;    long PJsnRtQlTBIw96825966 = 7983112;    long PJsnRtQlTBIw57004651 = -417779134;    long PJsnRtQlTBIw79096399 = -276625993;    long PJsnRtQlTBIw72859795 = -528271255;    long PJsnRtQlTBIw62938256 = -140526114;    long PJsnRtQlTBIw53085872 = -312648180;    long PJsnRtQlTBIw62551769 = -830839902;    long PJsnRtQlTBIw27652977 = -374451409;    long PJsnRtQlTBIw4422184 = -581043581;    long PJsnRtQlTBIw25393954 = -822119147;    long PJsnRtQlTBIw80228530 = 72885887;    long PJsnRtQlTBIw80935267 = -538388446;    long PJsnRtQlTBIw48341432 = -904352670;    long PJsnRtQlTBIw6522211 = -730597172;    long PJsnRtQlTBIw89918360 = -543978471;    long PJsnRtQlTBIw25800408 = -359751;    long PJsnRtQlTBIw8267722 = -390655714;    long PJsnRtQlTBIw76967915 = 27776325;    long PJsnRtQlTBIw37983658 = 86813590;    long PJsnRtQlTBIw8175221 = -759727930;    long PJsnRtQlTBIw42932836 = -445522775;    long PJsnRtQlTBIw19928177 = -562595116;    long PJsnRtQlTBIw10492650 = -671964886;    long PJsnRtQlTBIw80357661 = -273659321;    long PJsnRtQlTBIw49792470 = -885716628;    long PJsnRtQlTBIw82470777 = -714771430;    long PJsnRtQlTBIw62899227 = -150292893;    long PJsnRtQlTBIw38469572 = -23715331;    long PJsnRtQlTBIw69424263 = -623592369;    long PJsnRtQlTBIw49665363 = -529135676;    long PJsnRtQlTBIw30778011 = -151273062;    long PJsnRtQlTBIw63848754 = 29094682;    long PJsnRtQlTBIw21353785 = 25397162;    long PJsnRtQlTBIw57810801 = -822799177;    long PJsnRtQlTBIw8694515 = -923645361;    long PJsnRtQlTBIw63020482 = -53100124;    long PJsnRtQlTBIw99304637 = -630961169;    long PJsnRtQlTBIw77044473 = -716168861;    long PJsnRtQlTBIw34341121 = -46734357;    long PJsnRtQlTBIw96975713 = 28159618;    long PJsnRtQlTBIw44725785 = -368656805;    long PJsnRtQlTBIw62002278 = -899848283;    long PJsnRtQlTBIw40565468 = -100964998;    long PJsnRtQlTBIw5945334 = -510079034;    long PJsnRtQlTBIw90314135 = -623121915;    long PJsnRtQlTBIw51216311 = -180018271;    long PJsnRtQlTBIw43459800 = 10577573;    long PJsnRtQlTBIw63588969 = -675654202;    long PJsnRtQlTBIw69782309 = -863411469;    long PJsnRtQlTBIw4629761 = -824960490;    long PJsnRtQlTBIw93709777 = -282264823;    long PJsnRtQlTBIw58004984 = -886267124;    long PJsnRtQlTBIw97875998 = -42918473;    long PJsnRtQlTBIw1536383 = -15648764;    long PJsnRtQlTBIw97101544 = -741199268;    long PJsnRtQlTBIw76897789 = -429421772;    long PJsnRtQlTBIw46512002 = -745814248;    long PJsnRtQlTBIw98738737 = 97033327;    long PJsnRtQlTBIw23067326 = -642554628;    long PJsnRtQlTBIw80467479 = -425754684;    long PJsnRtQlTBIw90186644 = -62355288;    long PJsnRtQlTBIw24082198 = -707124572;    long PJsnRtQlTBIw58228714 = -750859040;    long PJsnRtQlTBIw54756821 = 48092095;    long PJsnRtQlTBIw94615942 = -570846086;    long PJsnRtQlTBIw16379776 = -956208796;    long PJsnRtQlTBIw59581482 = -463785609;    long PJsnRtQlTBIw90530630 = 18446506;    long PJsnRtQlTBIw97827695 = -806951811;    long PJsnRtQlTBIw26897878 = -390878348;    long PJsnRtQlTBIw26495771 = -656544266;     PJsnRtQlTBIw33010407 = PJsnRtQlTBIw98170241;     PJsnRtQlTBIw98170241 = PJsnRtQlTBIw99854431;     PJsnRtQlTBIw99854431 = PJsnRtQlTBIw51642863;     PJsnRtQlTBIw51642863 = PJsnRtQlTBIw65750910;     PJsnRtQlTBIw65750910 = PJsnRtQlTBIw99708410;     PJsnRtQlTBIw99708410 = PJsnRtQlTBIw31065388;     PJsnRtQlTBIw31065388 = PJsnRtQlTBIw97845182;     PJsnRtQlTBIw97845182 = PJsnRtQlTBIw5520482;     PJsnRtQlTBIw5520482 = PJsnRtQlTBIw20025134;     PJsnRtQlTBIw20025134 = PJsnRtQlTBIw78401036;     PJsnRtQlTBIw78401036 = PJsnRtQlTBIw49904269;     PJsnRtQlTBIw49904269 = PJsnRtQlTBIw97279377;     PJsnRtQlTBIw97279377 = PJsnRtQlTBIw50061585;     PJsnRtQlTBIw50061585 = PJsnRtQlTBIw7277555;     PJsnRtQlTBIw7277555 = PJsnRtQlTBIw89655255;     PJsnRtQlTBIw89655255 = PJsnRtQlTBIw44987652;     PJsnRtQlTBIw44987652 = PJsnRtQlTBIw31339287;     PJsnRtQlTBIw31339287 = PJsnRtQlTBIw70542665;     PJsnRtQlTBIw70542665 = PJsnRtQlTBIw32151578;     PJsnRtQlTBIw32151578 = PJsnRtQlTBIw91801231;     PJsnRtQlTBIw91801231 = PJsnRtQlTBIw70111179;     PJsnRtQlTBIw70111179 = PJsnRtQlTBIw59700670;     PJsnRtQlTBIw59700670 = PJsnRtQlTBIw30430168;     PJsnRtQlTBIw30430168 = PJsnRtQlTBIw1977500;     PJsnRtQlTBIw1977500 = PJsnRtQlTBIw34972899;     PJsnRtQlTBIw34972899 = PJsnRtQlTBIw35859657;     PJsnRtQlTBIw35859657 = PJsnRtQlTBIw9711603;     PJsnRtQlTBIw9711603 = PJsnRtQlTBIw40034381;     PJsnRtQlTBIw40034381 = PJsnRtQlTBIw96825966;     PJsnRtQlTBIw96825966 = PJsnRtQlTBIw57004651;     PJsnRtQlTBIw57004651 = PJsnRtQlTBIw79096399;     PJsnRtQlTBIw79096399 = PJsnRtQlTBIw72859795;     PJsnRtQlTBIw72859795 = PJsnRtQlTBIw62938256;     PJsnRtQlTBIw62938256 = PJsnRtQlTBIw53085872;     PJsnRtQlTBIw53085872 = PJsnRtQlTBIw62551769;     PJsnRtQlTBIw62551769 = PJsnRtQlTBIw27652977;     PJsnRtQlTBIw27652977 = PJsnRtQlTBIw4422184;     PJsnRtQlTBIw4422184 = PJsnRtQlTBIw25393954;     PJsnRtQlTBIw25393954 = PJsnRtQlTBIw80228530;     PJsnRtQlTBIw80228530 = PJsnRtQlTBIw80935267;     PJsnRtQlTBIw80935267 = PJsnRtQlTBIw48341432;     PJsnRtQlTBIw48341432 = PJsnRtQlTBIw6522211;     PJsnRtQlTBIw6522211 = PJsnRtQlTBIw89918360;     PJsnRtQlTBIw89918360 = PJsnRtQlTBIw25800408;     PJsnRtQlTBIw25800408 = PJsnRtQlTBIw8267722;     PJsnRtQlTBIw8267722 = PJsnRtQlTBIw76967915;     PJsnRtQlTBIw76967915 = PJsnRtQlTBIw37983658;     PJsnRtQlTBIw37983658 = PJsnRtQlTBIw8175221;     PJsnRtQlTBIw8175221 = PJsnRtQlTBIw42932836;     PJsnRtQlTBIw42932836 = PJsnRtQlTBIw19928177;     PJsnRtQlTBIw19928177 = PJsnRtQlTBIw10492650;     PJsnRtQlTBIw10492650 = PJsnRtQlTBIw80357661;     PJsnRtQlTBIw80357661 = PJsnRtQlTBIw49792470;     PJsnRtQlTBIw49792470 = PJsnRtQlTBIw82470777;     PJsnRtQlTBIw82470777 = PJsnRtQlTBIw62899227;     PJsnRtQlTBIw62899227 = PJsnRtQlTBIw38469572;     PJsnRtQlTBIw38469572 = PJsnRtQlTBIw69424263;     PJsnRtQlTBIw69424263 = PJsnRtQlTBIw49665363;     PJsnRtQlTBIw49665363 = PJsnRtQlTBIw30778011;     PJsnRtQlTBIw30778011 = PJsnRtQlTBIw63848754;     PJsnRtQlTBIw63848754 = PJsnRtQlTBIw21353785;     PJsnRtQlTBIw21353785 = PJsnRtQlTBIw57810801;     PJsnRtQlTBIw57810801 = PJsnRtQlTBIw8694515;     PJsnRtQlTBIw8694515 = PJsnRtQlTBIw63020482;     PJsnRtQlTBIw63020482 = PJsnRtQlTBIw99304637;     PJsnRtQlTBIw99304637 = PJsnRtQlTBIw77044473;     PJsnRtQlTBIw77044473 = PJsnRtQlTBIw34341121;     PJsnRtQlTBIw34341121 = PJsnRtQlTBIw96975713;     PJsnRtQlTBIw96975713 = PJsnRtQlTBIw44725785;     PJsnRtQlTBIw44725785 = PJsnRtQlTBIw62002278;     PJsnRtQlTBIw62002278 = PJsnRtQlTBIw40565468;     PJsnRtQlTBIw40565468 = PJsnRtQlTBIw5945334;     PJsnRtQlTBIw5945334 = PJsnRtQlTBIw90314135;     PJsnRtQlTBIw90314135 = PJsnRtQlTBIw51216311;     PJsnRtQlTBIw51216311 = PJsnRtQlTBIw43459800;     PJsnRtQlTBIw43459800 = PJsnRtQlTBIw63588969;     PJsnRtQlTBIw63588969 = PJsnRtQlTBIw69782309;     PJsnRtQlTBIw69782309 = PJsnRtQlTBIw4629761;     PJsnRtQlTBIw4629761 = PJsnRtQlTBIw93709777;     PJsnRtQlTBIw93709777 = PJsnRtQlTBIw58004984;     PJsnRtQlTBIw58004984 = PJsnRtQlTBIw97875998;     PJsnRtQlTBIw97875998 = PJsnRtQlTBIw1536383;     PJsnRtQlTBIw1536383 = PJsnRtQlTBIw97101544;     PJsnRtQlTBIw97101544 = PJsnRtQlTBIw76897789;     PJsnRtQlTBIw76897789 = PJsnRtQlTBIw46512002;     PJsnRtQlTBIw46512002 = PJsnRtQlTBIw98738737;     PJsnRtQlTBIw98738737 = PJsnRtQlTBIw23067326;     PJsnRtQlTBIw23067326 = PJsnRtQlTBIw80467479;     PJsnRtQlTBIw80467479 = PJsnRtQlTBIw90186644;     PJsnRtQlTBIw90186644 = PJsnRtQlTBIw24082198;     PJsnRtQlTBIw24082198 = PJsnRtQlTBIw58228714;     PJsnRtQlTBIw58228714 = PJsnRtQlTBIw54756821;     PJsnRtQlTBIw54756821 = PJsnRtQlTBIw94615942;     PJsnRtQlTBIw94615942 = PJsnRtQlTBIw16379776;     PJsnRtQlTBIw16379776 = PJsnRtQlTBIw59581482;     PJsnRtQlTBIw59581482 = PJsnRtQlTBIw90530630;     PJsnRtQlTBIw90530630 = PJsnRtQlTBIw97827695;     PJsnRtQlTBIw97827695 = PJsnRtQlTBIw26897878;     PJsnRtQlTBIw26897878 = PJsnRtQlTBIw26495771;     PJsnRtQlTBIw26495771 = PJsnRtQlTBIw33010407;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EVPeCufRZtERWI86817197() {     long YtRgPtzUyTzN52478577 = 30324522;    long YtRgPtzUyTzN51194105 = 23016734;    long YtRgPtzUyTzN16691424 = -200541223;    long YtRgPtzUyTzN70290011 = -118630475;    long YtRgPtzUyTzN66197427 = -736036276;    long YtRgPtzUyTzN25300485 = -17494969;    long YtRgPtzUyTzN75897266 = -293285761;    long YtRgPtzUyTzN63095415 = -103329184;    long YtRgPtzUyTzN66207278 = -643853627;    long YtRgPtzUyTzN97953857 = -576465303;    long YtRgPtzUyTzN32624301 = -340577462;    long YtRgPtzUyTzN53398883 = -243742820;    long YtRgPtzUyTzN87651036 = -711617746;    long YtRgPtzUyTzN58477625 = -926774288;    long YtRgPtzUyTzN67804015 = -497580498;    long YtRgPtzUyTzN55870904 = -737491625;    long YtRgPtzUyTzN50949765 = -953783260;    long YtRgPtzUyTzN55402038 = -82952898;    long YtRgPtzUyTzN70177545 = 72559212;    long YtRgPtzUyTzN12762880 = -435943172;    long YtRgPtzUyTzN4257304 = -499987422;    long YtRgPtzUyTzN85093262 = -918054587;    long YtRgPtzUyTzN27873676 = -704964558;    long YtRgPtzUyTzN48151837 = -561864232;    long YtRgPtzUyTzN13180989 = 32779355;    long YtRgPtzUyTzN39740361 = -644286017;    long YtRgPtzUyTzN19787788 = -821255815;    long YtRgPtzUyTzN60503278 = 60890027;    long YtRgPtzUyTzN81779338 = -200633188;    long YtRgPtzUyTzN81532820 = -83455582;    long YtRgPtzUyTzN86808736 = -283105226;    long YtRgPtzUyTzN18675710 = -840975011;    long YtRgPtzUyTzN84335899 = 16520978;    long YtRgPtzUyTzN21694763 = -445129320;    long YtRgPtzUyTzN93016207 = -375350986;    long YtRgPtzUyTzN98617706 = -34408510;    long YtRgPtzUyTzN96036427 = -901327483;    long YtRgPtzUyTzN45904658 = -658252397;    long YtRgPtzUyTzN92707278 = -186533972;    long YtRgPtzUyTzN1510266 = 76354790;    long YtRgPtzUyTzN22417324 = 51825258;    long YtRgPtzUyTzN60200565 = -43248896;    long YtRgPtzUyTzN77655451 = -678398969;    long YtRgPtzUyTzN73303899 = -993051132;    long YtRgPtzUyTzN5828820 = -277482714;    long YtRgPtzUyTzN62728849 = -927987135;    long YtRgPtzUyTzN58957795 = -985916998;    long YtRgPtzUyTzN38139488 = -96473724;    long YtRgPtzUyTzN49310812 = -773667169;    long YtRgPtzUyTzN83831178 = -206535120;    long YtRgPtzUyTzN94363746 = -968960047;    long YtRgPtzUyTzN26941510 = 50682255;    long YtRgPtzUyTzN50182808 = 50231718;    long YtRgPtzUyTzN22722499 = -880310264;    long YtRgPtzUyTzN82559893 = -489330065;    long YtRgPtzUyTzN67385314 = -51620892;    long YtRgPtzUyTzN23320430 = -272018708;    long YtRgPtzUyTzN68539586 = -638676992;    long YtRgPtzUyTzN57109023 = -51409830;    long YtRgPtzUyTzN26457066 = 8249741;    long YtRgPtzUyTzN5512698 = -196239155;    long YtRgPtzUyTzN15393988 = -254175788;    long YtRgPtzUyTzN81316077 = -902695997;    long YtRgPtzUyTzN84674457 = -460398046;    long YtRgPtzUyTzN11145121 = -193360077;    long YtRgPtzUyTzN13948591 = -499602451;    long YtRgPtzUyTzN69062983 = -160263799;    long YtRgPtzUyTzN65956273 = -166488427;    long YtRgPtzUyTzN65461417 = -451423302;    long YtRgPtzUyTzN69186309 = -363171988;    long YtRgPtzUyTzN59834476 = -836164142;    long YtRgPtzUyTzN5045107 = -195530864;    long YtRgPtzUyTzN62694760 = -896418926;    long YtRgPtzUyTzN68667279 = 96204421;    long YtRgPtzUyTzN90345555 = -387768431;    long YtRgPtzUyTzN44056739 = -356738527;    long YtRgPtzUyTzN7437811 = -139655618;    long YtRgPtzUyTzN54569777 = -711913427;    long YtRgPtzUyTzN42323018 = -184381519;    long YtRgPtzUyTzN50452140 = -39233511;    long YtRgPtzUyTzN80782566 = -658369020;    long YtRgPtzUyTzN81648299 = -624782091;    long YtRgPtzUyTzN11192467 = -165442805;    long YtRgPtzUyTzN97948159 = -994098069;    long YtRgPtzUyTzN87169074 = -114495536;    long YtRgPtzUyTzN59867227 = -233787482;    long YtRgPtzUyTzN68492902 = -791206730;    long YtRgPtzUyTzN61613400 = -103168758;    long YtRgPtzUyTzN39134870 = -955799255;    long YtRgPtzUyTzN25630893 = -223730095;    long YtRgPtzUyTzN75297277 = -762389802;    long YtRgPtzUyTzN27496842 = -162650492;    long YtRgPtzUyTzN88795635 = -506842567;    long YtRgPtzUyTzN66250212 = -94783714;    long YtRgPtzUyTzN95997568 = -727406055;    long YtRgPtzUyTzN7023336 = -693998954;    long YtRgPtzUyTzN78884487 = -140552900;    long YtRgPtzUyTzN92980993 = -118000924;    long YtRgPtzUyTzN62158778 = -699691056;    long YtRgPtzUyTzN91880228 = 30324522;     YtRgPtzUyTzN52478577 = YtRgPtzUyTzN51194105;     YtRgPtzUyTzN51194105 = YtRgPtzUyTzN16691424;     YtRgPtzUyTzN16691424 = YtRgPtzUyTzN70290011;     YtRgPtzUyTzN70290011 = YtRgPtzUyTzN66197427;     YtRgPtzUyTzN66197427 = YtRgPtzUyTzN25300485;     YtRgPtzUyTzN25300485 = YtRgPtzUyTzN75897266;     YtRgPtzUyTzN75897266 = YtRgPtzUyTzN63095415;     YtRgPtzUyTzN63095415 = YtRgPtzUyTzN66207278;     YtRgPtzUyTzN66207278 = YtRgPtzUyTzN97953857;     YtRgPtzUyTzN97953857 = YtRgPtzUyTzN32624301;     YtRgPtzUyTzN32624301 = YtRgPtzUyTzN53398883;     YtRgPtzUyTzN53398883 = YtRgPtzUyTzN87651036;     YtRgPtzUyTzN87651036 = YtRgPtzUyTzN58477625;     YtRgPtzUyTzN58477625 = YtRgPtzUyTzN67804015;     YtRgPtzUyTzN67804015 = YtRgPtzUyTzN55870904;     YtRgPtzUyTzN55870904 = YtRgPtzUyTzN50949765;     YtRgPtzUyTzN50949765 = YtRgPtzUyTzN55402038;     YtRgPtzUyTzN55402038 = YtRgPtzUyTzN70177545;     YtRgPtzUyTzN70177545 = YtRgPtzUyTzN12762880;     YtRgPtzUyTzN12762880 = YtRgPtzUyTzN4257304;     YtRgPtzUyTzN4257304 = YtRgPtzUyTzN85093262;     YtRgPtzUyTzN85093262 = YtRgPtzUyTzN27873676;     YtRgPtzUyTzN27873676 = YtRgPtzUyTzN48151837;     YtRgPtzUyTzN48151837 = YtRgPtzUyTzN13180989;     YtRgPtzUyTzN13180989 = YtRgPtzUyTzN39740361;     YtRgPtzUyTzN39740361 = YtRgPtzUyTzN19787788;     YtRgPtzUyTzN19787788 = YtRgPtzUyTzN60503278;     YtRgPtzUyTzN60503278 = YtRgPtzUyTzN81779338;     YtRgPtzUyTzN81779338 = YtRgPtzUyTzN81532820;     YtRgPtzUyTzN81532820 = YtRgPtzUyTzN86808736;     YtRgPtzUyTzN86808736 = YtRgPtzUyTzN18675710;     YtRgPtzUyTzN18675710 = YtRgPtzUyTzN84335899;     YtRgPtzUyTzN84335899 = YtRgPtzUyTzN21694763;     YtRgPtzUyTzN21694763 = YtRgPtzUyTzN93016207;     YtRgPtzUyTzN93016207 = YtRgPtzUyTzN98617706;     YtRgPtzUyTzN98617706 = YtRgPtzUyTzN96036427;     YtRgPtzUyTzN96036427 = YtRgPtzUyTzN45904658;     YtRgPtzUyTzN45904658 = YtRgPtzUyTzN92707278;     YtRgPtzUyTzN92707278 = YtRgPtzUyTzN1510266;     YtRgPtzUyTzN1510266 = YtRgPtzUyTzN22417324;     YtRgPtzUyTzN22417324 = YtRgPtzUyTzN60200565;     YtRgPtzUyTzN60200565 = YtRgPtzUyTzN77655451;     YtRgPtzUyTzN77655451 = YtRgPtzUyTzN73303899;     YtRgPtzUyTzN73303899 = YtRgPtzUyTzN5828820;     YtRgPtzUyTzN5828820 = YtRgPtzUyTzN62728849;     YtRgPtzUyTzN62728849 = YtRgPtzUyTzN58957795;     YtRgPtzUyTzN58957795 = YtRgPtzUyTzN38139488;     YtRgPtzUyTzN38139488 = YtRgPtzUyTzN49310812;     YtRgPtzUyTzN49310812 = YtRgPtzUyTzN83831178;     YtRgPtzUyTzN83831178 = YtRgPtzUyTzN94363746;     YtRgPtzUyTzN94363746 = YtRgPtzUyTzN26941510;     YtRgPtzUyTzN26941510 = YtRgPtzUyTzN50182808;     YtRgPtzUyTzN50182808 = YtRgPtzUyTzN22722499;     YtRgPtzUyTzN22722499 = YtRgPtzUyTzN82559893;     YtRgPtzUyTzN82559893 = YtRgPtzUyTzN67385314;     YtRgPtzUyTzN67385314 = YtRgPtzUyTzN23320430;     YtRgPtzUyTzN23320430 = YtRgPtzUyTzN68539586;     YtRgPtzUyTzN68539586 = YtRgPtzUyTzN57109023;     YtRgPtzUyTzN57109023 = YtRgPtzUyTzN26457066;     YtRgPtzUyTzN26457066 = YtRgPtzUyTzN5512698;     YtRgPtzUyTzN5512698 = YtRgPtzUyTzN15393988;     YtRgPtzUyTzN15393988 = YtRgPtzUyTzN81316077;     YtRgPtzUyTzN81316077 = YtRgPtzUyTzN84674457;     YtRgPtzUyTzN84674457 = YtRgPtzUyTzN11145121;     YtRgPtzUyTzN11145121 = YtRgPtzUyTzN13948591;     YtRgPtzUyTzN13948591 = YtRgPtzUyTzN69062983;     YtRgPtzUyTzN69062983 = YtRgPtzUyTzN65956273;     YtRgPtzUyTzN65956273 = YtRgPtzUyTzN65461417;     YtRgPtzUyTzN65461417 = YtRgPtzUyTzN69186309;     YtRgPtzUyTzN69186309 = YtRgPtzUyTzN59834476;     YtRgPtzUyTzN59834476 = YtRgPtzUyTzN5045107;     YtRgPtzUyTzN5045107 = YtRgPtzUyTzN62694760;     YtRgPtzUyTzN62694760 = YtRgPtzUyTzN68667279;     YtRgPtzUyTzN68667279 = YtRgPtzUyTzN90345555;     YtRgPtzUyTzN90345555 = YtRgPtzUyTzN44056739;     YtRgPtzUyTzN44056739 = YtRgPtzUyTzN7437811;     YtRgPtzUyTzN7437811 = YtRgPtzUyTzN54569777;     YtRgPtzUyTzN54569777 = YtRgPtzUyTzN42323018;     YtRgPtzUyTzN42323018 = YtRgPtzUyTzN50452140;     YtRgPtzUyTzN50452140 = YtRgPtzUyTzN80782566;     YtRgPtzUyTzN80782566 = YtRgPtzUyTzN81648299;     YtRgPtzUyTzN81648299 = YtRgPtzUyTzN11192467;     YtRgPtzUyTzN11192467 = YtRgPtzUyTzN97948159;     YtRgPtzUyTzN97948159 = YtRgPtzUyTzN87169074;     YtRgPtzUyTzN87169074 = YtRgPtzUyTzN59867227;     YtRgPtzUyTzN59867227 = YtRgPtzUyTzN68492902;     YtRgPtzUyTzN68492902 = YtRgPtzUyTzN61613400;     YtRgPtzUyTzN61613400 = YtRgPtzUyTzN39134870;     YtRgPtzUyTzN39134870 = YtRgPtzUyTzN25630893;     YtRgPtzUyTzN25630893 = YtRgPtzUyTzN75297277;     YtRgPtzUyTzN75297277 = YtRgPtzUyTzN27496842;     YtRgPtzUyTzN27496842 = YtRgPtzUyTzN88795635;     YtRgPtzUyTzN88795635 = YtRgPtzUyTzN66250212;     YtRgPtzUyTzN66250212 = YtRgPtzUyTzN95997568;     YtRgPtzUyTzN95997568 = YtRgPtzUyTzN7023336;     YtRgPtzUyTzN7023336 = YtRgPtzUyTzN78884487;     YtRgPtzUyTzN78884487 = YtRgPtzUyTzN92980993;     YtRgPtzUyTzN92980993 = YtRgPtzUyTzN62158778;     YtRgPtzUyTzN62158778 = YtRgPtzUyTzN91880228;     YtRgPtzUyTzN91880228 = YtRgPtzUyTzN52478577;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qHCygZZYuIjvKc47119855() {     long lopHEOHLkVil42604885 = -28431679;    long lopHEOHLkVil34319170 = -351909437;    long lopHEOHLkVil12184122 = -337335685;    long lopHEOHLkVil43788586 = -304802297;    long lopHEOHLkVil79254162 = -677359718;    long lopHEOHLkVil6086890 = 89871923;    long lopHEOHLkVil70560704 = 69168766;    long lopHEOHLkVil15973979 = -839776923;    long lopHEOHLkVil90018965 = -651746265;    long lopHEOHLkVil2209528 = -146339828;    long lopHEOHLkVil8776120 = -848997619;    long lopHEOHLkVil88148390 = -823330955;    long lopHEOHLkVil25997169 = 76146393;    long lopHEOHLkVil96896479 = -924935172;    long lopHEOHLkVil65878387 = -982701440;    long lopHEOHLkVil80050646 = -437871495;    long lopHEOHLkVil94911945 = -115128502;    long lopHEOHLkVil76757751 = -525802191;    long lopHEOHLkVil31091936 = -393851224;    long lopHEOHLkVil80087127 = 16178518;    long lopHEOHLkVil92179706 = -204412515;    long lopHEOHLkVil83174844 = -151151222;    long lopHEOHLkVil61112094 = -11424479;    long lopHEOHLkVil56072934 = 90111392;    long lopHEOHLkVil60066177 = -610731589;    long lopHEOHLkVil58531325 = -520159752;    long lopHEOHLkVil41755123 = -580784808;    long lopHEOHLkVil83673653 = 999969;    long lopHEOHLkVil42988336 = -962832236;    long lopHEOHLkVil29321901 = 42142027;    long lopHEOHLkVil90272139 = -609771770;    long lopHEOHLkVil18042624 = -241799430;    long lopHEOHLkVil93304940 = -283704182;    long lopHEOHLkVil45533408 = -436580478;    long lopHEOHLkVil28612742 = -25686647;    long lopHEOHLkVil51848713 = -337437921;    long lopHEOHLkVil96269996 = -417143388;    long lopHEOHLkVil70261941 = -524311641;    long lopHEOHLkVil3240296 = -993996018;    long lopHEOHLkVil46022408 = -928352983;    long lopHEOHLkVil36116997 = -754036017;    long lopHEOHLkVil14845028 = -957742109;    long lopHEOHLkVil37472293 = -53824565;    long lopHEOHLkVil3965841 = -857134321;    long lopHEOHLkVil97793236 = -389992670;    long lopHEOHLkVil83167842 = -311611040;    long lopHEOHLkVil39381085 = -534399498;    long lopHEOHLkVil28525948 = -123129978;    long lopHEOHLkVil77229465 = -109606515;    long lopHEOHLkVil13111585 = -663531457;    long lopHEOHLkVil23729270 = -243342091;    long lopHEOHLkVil70714616 = 86255422;    long lopHEOHLkVil99635262 = -761621276;    long lopHEOHLkVil75629561 = 96134454;    long lopHEOHLkVil54940149 = -617930336;    long lopHEOHLkVil59430041 = -877280457;    long lopHEOHLkVil73207076 = -240484958;    long lopHEOHLkVil56111188 = -327447077;    long lopHEOHLkVil83722409 = -694070708;    long lopHEOHLkVil20722837 = -57199966;    long lopHEOHLkVil64331767 = -329343269;    long lopHEOHLkVil86887051 = -931831203;    long lopHEOHLkVil72985643 = -876944688;    long lopHEOHLkVil60697065 = -593888292;    long lopHEOHLkVil11937388 = -536568058;    long lopHEOHLkVil90733495 = -507198189;    long lopHEOHLkVil94843450 = -439626774;    long lopHEOHLkVil80463761 = -487273129;    long lopHEOHLkVil68283737 = -799248526;    long lopHEOHLkVil14029675 = -545263520;    long lopHEOHLkVil83780649 = 79271892;    long lopHEOHLkVil24650004 = -590816862;    long lopHEOHLkVil73517456 = -531806173;    long lopHEOHLkVil85069528 = -465498242;    long lopHEOHLkVil43970131 = -229785465;    long lopHEOHLkVil77334678 = -246670406;    long lopHEOHLkVil45702552 = 2673342;    long lopHEOHLkVil57146254 = -154290159;    long lopHEOHLkVil58279697 = -519895939;    long lopHEOHLkVil76898334 = -199120549;    long lopHEOHLkVil19150241 = -985760255;    long lopHEOHLkVil13229176 = -357654831;    long lopHEOHLkVil6444188 = -889393516;    long lopHEOHLkVil29876752 = -199300779;    long lopHEOHLkVil5592631 = -714515882;    long lopHEOHLkVil19557523 = -596027193;    long lopHEOHLkVil18407361 = -480178155;    long lopHEOHLkVil17675380 = -279838636;    long lopHEOHLkVil90593259 = -818650142;    long lopHEOHLkVil69182701 = -148406190;    long lopHEOHLkVil78641637 = 3047037;    long lopHEOHLkVil40158809 = 10303689;    long lopHEOHLkVil86539532 = -830240933;    long lopHEOHLkVil82517458 = -836796052;    long lopHEOHLkVil81690640 = -499009715;    long lopHEOHLkVil49229946 = -822204815;    long lopHEOHLkVil41859385 = 19202578;    long lopHEOHLkVil76775227 = -459936273;    long lopHEOHLkVil92028452 = -220566263;    long lopHEOHLkVil7059741 = -28431679;     lopHEOHLkVil42604885 = lopHEOHLkVil34319170;     lopHEOHLkVil34319170 = lopHEOHLkVil12184122;     lopHEOHLkVil12184122 = lopHEOHLkVil43788586;     lopHEOHLkVil43788586 = lopHEOHLkVil79254162;     lopHEOHLkVil79254162 = lopHEOHLkVil6086890;     lopHEOHLkVil6086890 = lopHEOHLkVil70560704;     lopHEOHLkVil70560704 = lopHEOHLkVil15973979;     lopHEOHLkVil15973979 = lopHEOHLkVil90018965;     lopHEOHLkVil90018965 = lopHEOHLkVil2209528;     lopHEOHLkVil2209528 = lopHEOHLkVil8776120;     lopHEOHLkVil8776120 = lopHEOHLkVil88148390;     lopHEOHLkVil88148390 = lopHEOHLkVil25997169;     lopHEOHLkVil25997169 = lopHEOHLkVil96896479;     lopHEOHLkVil96896479 = lopHEOHLkVil65878387;     lopHEOHLkVil65878387 = lopHEOHLkVil80050646;     lopHEOHLkVil80050646 = lopHEOHLkVil94911945;     lopHEOHLkVil94911945 = lopHEOHLkVil76757751;     lopHEOHLkVil76757751 = lopHEOHLkVil31091936;     lopHEOHLkVil31091936 = lopHEOHLkVil80087127;     lopHEOHLkVil80087127 = lopHEOHLkVil92179706;     lopHEOHLkVil92179706 = lopHEOHLkVil83174844;     lopHEOHLkVil83174844 = lopHEOHLkVil61112094;     lopHEOHLkVil61112094 = lopHEOHLkVil56072934;     lopHEOHLkVil56072934 = lopHEOHLkVil60066177;     lopHEOHLkVil60066177 = lopHEOHLkVil58531325;     lopHEOHLkVil58531325 = lopHEOHLkVil41755123;     lopHEOHLkVil41755123 = lopHEOHLkVil83673653;     lopHEOHLkVil83673653 = lopHEOHLkVil42988336;     lopHEOHLkVil42988336 = lopHEOHLkVil29321901;     lopHEOHLkVil29321901 = lopHEOHLkVil90272139;     lopHEOHLkVil90272139 = lopHEOHLkVil18042624;     lopHEOHLkVil18042624 = lopHEOHLkVil93304940;     lopHEOHLkVil93304940 = lopHEOHLkVil45533408;     lopHEOHLkVil45533408 = lopHEOHLkVil28612742;     lopHEOHLkVil28612742 = lopHEOHLkVil51848713;     lopHEOHLkVil51848713 = lopHEOHLkVil96269996;     lopHEOHLkVil96269996 = lopHEOHLkVil70261941;     lopHEOHLkVil70261941 = lopHEOHLkVil3240296;     lopHEOHLkVil3240296 = lopHEOHLkVil46022408;     lopHEOHLkVil46022408 = lopHEOHLkVil36116997;     lopHEOHLkVil36116997 = lopHEOHLkVil14845028;     lopHEOHLkVil14845028 = lopHEOHLkVil37472293;     lopHEOHLkVil37472293 = lopHEOHLkVil3965841;     lopHEOHLkVil3965841 = lopHEOHLkVil97793236;     lopHEOHLkVil97793236 = lopHEOHLkVil83167842;     lopHEOHLkVil83167842 = lopHEOHLkVil39381085;     lopHEOHLkVil39381085 = lopHEOHLkVil28525948;     lopHEOHLkVil28525948 = lopHEOHLkVil77229465;     lopHEOHLkVil77229465 = lopHEOHLkVil13111585;     lopHEOHLkVil13111585 = lopHEOHLkVil23729270;     lopHEOHLkVil23729270 = lopHEOHLkVil70714616;     lopHEOHLkVil70714616 = lopHEOHLkVil99635262;     lopHEOHLkVil99635262 = lopHEOHLkVil75629561;     lopHEOHLkVil75629561 = lopHEOHLkVil54940149;     lopHEOHLkVil54940149 = lopHEOHLkVil59430041;     lopHEOHLkVil59430041 = lopHEOHLkVil73207076;     lopHEOHLkVil73207076 = lopHEOHLkVil56111188;     lopHEOHLkVil56111188 = lopHEOHLkVil83722409;     lopHEOHLkVil83722409 = lopHEOHLkVil20722837;     lopHEOHLkVil20722837 = lopHEOHLkVil64331767;     lopHEOHLkVil64331767 = lopHEOHLkVil86887051;     lopHEOHLkVil86887051 = lopHEOHLkVil72985643;     lopHEOHLkVil72985643 = lopHEOHLkVil60697065;     lopHEOHLkVil60697065 = lopHEOHLkVil11937388;     lopHEOHLkVil11937388 = lopHEOHLkVil90733495;     lopHEOHLkVil90733495 = lopHEOHLkVil94843450;     lopHEOHLkVil94843450 = lopHEOHLkVil80463761;     lopHEOHLkVil80463761 = lopHEOHLkVil68283737;     lopHEOHLkVil68283737 = lopHEOHLkVil14029675;     lopHEOHLkVil14029675 = lopHEOHLkVil83780649;     lopHEOHLkVil83780649 = lopHEOHLkVil24650004;     lopHEOHLkVil24650004 = lopHEOHLkVil73517456;     lopHEOHLkVil73517456 = lopHEOHLkVil85069528;     lopHEOHLkVil85069528 = lopHEOHLkVil43970131;     lopHEOHLkVil43970131 = lopHEOHLkVil77334678;     lopHEOHLkVil77334678 = lopHEOHLkVil45702552;     lopHEOHLkVil45702552 = lopHEOHLkVil57146254;     lopHEOHLkVil57146254 = lopHEOHLkVil58279697;     lopHEOHLkVil58279697 = lopHEOHLkVil76898334;     lopHEOHLkVil76898334 = lopHEOHLkVil19150241;     lopHEOHLkVil19150241 = lopHEOHLkVil13229176;     lopHEOHLkVil13229176 = lopHEOHLkVil6444188;     lopHEOHLkVil6444188 = lopHEOHLkVil29876752;     lopHEOHLkVil29876752 = lopHEOHLkVil5592631;     lopHEOHLkVil5592631 = lopHEOHLkVil19557523;     lopHEOHLkVil19557523 = lopHEOHLkVil18407361;     lopHEOHLkVil18407361 = lopHEOHLkVil17675380;     lopHEOHLkVil17675380 = lopHEOHLkVil90593259;     lopHEOHLkVil90593259 = lopHEOHLkVil69182701;     lopHEOHLkVil69182701 = lopHEOHLkVil78641637;     lopHEOHLkVil78641637 = lopHEOHLkVil40158809;     lopHEOHLkVil40158809 = lopHEOHLkVil86539532;     lopHEOHLkVil86539532 = lopHEOHLkVil82517458;     lopHEOHLkVil82517458 = lopHEOHLkVil81690640;     lopHEOHLkVil81690640 = lopHEOHLkVil49229946;     lopHEOHLkVil49229946 = lopHEOHLkVil41859385;     lopHEOHLkVil41859385 = lopHEOHLkVil76775227;     lopHEOHLkVil76775227 = lopHEOHLkVil92028452;     lopHEOHLkVil92028452 = lopHEOHLkVil7059741;     lopHEOHLkVil7059741 = lopHEOHLkVil42604885;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void CIBBqFMRXkERTK43303015() {     long iVamZQawespp2200983 = -257188056;    long iVamZQawespp35825020 = -162064822;    long iVamZQawespp49185510 = -411476607;    long iVamZQawespp39664345 = -77413174;    long iVamZQawespp90547388 = -577866745;    long iVamZQawespp3764010 = -868387750;    long iVamZQawespp67919187 = -360548819;    long iVamZQawespp66799263 = -93988298;    long iVamZQawespp3832410 = -84418764;    long iVamZQawespp85234042 = -87598682;    long iVamZQawespp34071051 = -150540059;    long iVamZQawespp22819592 = -918352205;    long iVamZQawespp96751732 = -930032125;    long iVamZQawespp55270318 = -829093520;    long iVamZQawespp63186193 = -675227962;    long iVamZQawespp76804900 = -243244387;    long iVamZQawespp30873049 = -43344782;    long iVamZQawespp41426082 = -895138295;    long iVamZQawespp11534139 = -532970854;    long iVamZQawespp60004237 = -646230135;    long iVamZQawespp72640825 = -37433339;    long iVamZQawespp51664443 = -43553100;    long iVamZQawespp53303919 = -875719558;    long iVamZQawespp20803173 = -574226844;    long iVamZQawespp36044182 = -66869179;    long iVamZQawespp52946232 = -654777223;    long iVamZQawespp55095193 = 69735194;    long iVamZQawespp48784822 = -620381621;    long iVamZQawespp92772678 = -752424851;    long iVamZQawespp67795367 = -4841215;    long iVamZQawespp15186458 = -154991098;    long iVamZQawespp60807884 = -659017428;    long iVamZQawespp42386979 = -263651054;    long iVamZQawespp28057850 = 61535591;    long iVamZQawespp33550103 = -773896633;    long iVamZQawespp30438610 = -649094502;    long iVamZQawespp86901674 = -709922022;    long iVamZQawespp68622279 = -468764030;    long iVamZQawespp22258239 = -712702535;    long iVamZQawespp18848062 = -102233931;    long iVamZQawespp94334810 = -122697614;    long iVamZQawespp84924209 = -962683528;    long iVamZQawespp78351534 = -887269394;    long iVamZQawespp78205345 = -181049060;    long iVamZQawespp98781552 = -936310738;    long iVamZQawespp47960972 = -554555199;    long iVamZQawespp44869807 = -426255165;    long iVamZQawespp75222341 = -455883206;    long iVamZQawespp16619113 = -393544135;    long iVamZQawespp28278977 = -984783918;    long iVamZQawespp74215520 = -29450315;    long iVamZQawespp77299769 = -984987834;    long iVamZQawespp75050777 = 98430270;    long iVamZQawespp48904084 = -164034501;    long iVamZQawespp70662190 = -581864424;    long iVamZQawespp50536539 = -113634957;    long iVamZQawespp82521100 = -286345264;    long iVamZQawespp28382337 = -837249763;    long iVamZQawespp3620163 = 89456005;    long iVamZQawespp37601156 = -923089523;    long iVamZQawespp48668817 = -838122945;    long iVamZQawespp19134365 = -740167199;    long iVamZQawespp74026584 = -341563448;    long iVamZQawespp36037042 = 20422451;    long iVamZQawespp70047585 = -932607584;    long iVamZQawespp73263167 = -491522631;    long iVamZQawespp80432613 = -554701151;    long iVamZQawespp68693882 = -891567716;    long iVamZQawespp21720215 = 44803113;    long iVamZQawespp32747584 = 73866540;    long iVamZQawespp89903226 = -533322365;    long iVamZQawespp62250770 = -574580753;    long iVamZQawespp19167844 = -82435761;    long iVamZQawespp92686076 = -330736924;    long iVamZQawespp65669426 = -423532522;    long iVamZQawespp87716615 = -74749812;    long iVamZQawespp73312908 = -156283706;    long iVamZQawespp75098573 = -594670499;    long iVamZQawespp22021621 = -637916107;    long iVamZQawespp88083210 = -512313981;    long iVamZQawespp8076426 = -128522058;    long iVamZQawespp79872852 = -474381600;    long iVamZQawespp32165709 = -126837487;    long iVamZQawespp64493702 = -767640934;    long iVamZQawespp93579847 = -975390900;    long iVamZQawespp37886688 = -170003265;    long iVamZQawespp85757106 = -657447698;    long iVamZQawespp93482894 = 383447;    long iVamZQawespp57395660 = -356599986;    long iVamZQawespp83013564 = -560261676;    long iVamZQawespp47917509 = -262749239;    long iVamZQawespp58519337 = -872672260;    long iVamZQawespp65002116 = -458220035;    long iVamZQawespp84657082 = -789613013;    long iVamZQawespp70179245 = -264110987;    long iVamZQawespp75200446 = -382530416;    long iVamZQawespp10897625 = -521120081;    long iVamZQawespp42314492 = -807691846;    long iVamZQawespp8157761 = -248441476;    long iVamZQawespp25518386 = -257188056;     iVamZQawespp2200983 = iVamZQawespp35825020;     iVamZQawespp35825020 = iVamZQawespp49185510;     iVamZQawespp49185510 = iVamZQawespp39664345;     iVamZQawespp39664345 = iVamZQawespp90547388;     iVamZQawespp90547388 = iVamZQawespp3764010;     iVamZQawespp3764010 = iVamZQawespp67919187;     iVamZQawespp67919187 = iVamZQawespp66799263;     iVamZQawespp66799263 = iVamZQawespp3832410;     iVamZQawespp3832410 = iVamZQawespp85234042;     iVamZQawespp85234042 = iVamZQawespp34071051;     iVamZQawespp34071051 = iVamZQawespp22819592;     iVamZQawespp22819592 = iVamZQawespp96751732;     iVamZQawespp96751732 = iVamZQawespp55270318;     iVamZQawespp55270318 = iVamZQawespp63186193;     iVamZQawespp63186193 = iVamZQawespp76804900;     iVamZQawespp76804900 = iVamZQawespp30873049;     iVamZQawespp30873049 = iVamZQawespp41426082;     iVamZQawespp41426082 = iVamZQawespp11534139;     iVamZQawespp11534139 = iVamZQawespp60004237;     iVamZQawespp60004237 = iVamZQawespp72640825;     iVamZQawespp72640825 = iVamZQawespp51664443;     iVamZQawespp51664443 = iVamZQawespp53303919;     iVamZQawespp53303919 = iVamZQawespp20803173;     iVamZQawespp20803173 = iVamZQawespp36044182;     iVamZQawespp36044182 = iVamZQawespp52946232;     iVamZQawespp52946232 = iVamZQawespp55095193;     iVamZQawespp55095193 = iVamZQawespp48784822;     iVamZQawespp48784822 = iVamZQawespp92772678;     iVamZQawespp92772678 = iVamZQawespp67795367;     iVamZQawespp67795367 = iVamZQawespp15186458;     iVamZQawespp15186458 = iVamZQawespp60807884;     iVamZQawespp60807884 = iVamZQawespp42386979;     iVamZQawespp42386979 = iVamZQawespp28057850;     iVamZQawespp28057850 = iVamZQawespp33550103;     iVamZQawespp33550103 = iVamZQawespp30438610;     iVamZQawespp30438610 = iVamZQawespp86901674;     iVamZQawespp86901674 = iVamZQawespp68622279;     iVamZQawespp68622279 = iVamZQawespp22258239;     iVamZQawespp22258239 = iVamZQawespp18848062;     iVamZQawespp18848062 = iVamZQawespp94334810;     iVamZQawespp94334810 = iVamZQawespp84924209;     iVamZQawespp84924209 = iVamZQawespp78351534;     iVamZQawespp78351534 = iVamZQawespp78205345;     iVamZQawespp78205345 = iVamZQawespp98781552;     iVamZQawespp98781552 = iVamZQawespp47960972;     iVamZQawespp47960972 = iVamZQawespp44869807;     iVamZQawespp44869807 = iVamZQawespp75222341;     iVamZQawespp75222341 = iVamZQawespp16619113;     iVamZQawespp16619113 = iVamZQawespp28278977;     iVamZQawespp28278977 = iVamZQawespp74215520;     iVamZQawespp74215520 = iVamZQawespp77299769;     iVamZQawespp77299769 = iVamZQawespp75050777;     iVamZQawespp75050777 = iVamZQawespp48904084;     iVamZQawespp48904084 = iVamZQawespp70662190;     iVamZQawespp70662190 = iVamZQawespp50536539;     iVamZQawespp50536539 = iVamZQawespp82521100;     iVamZQawespp82521100 = iVamZQawespp28382337;     iVamZQawespp28382337 = iVamZQawespp3620163;     iVamZQawespp3620163 = iVamZQawespp37601156;     iVamZQawespp37601156 = iVamZQawespp48668817;     iVamZQawespp48668817 = iVamZQawespp19134365;     iVamZQawespp19134365 = iVamZQawespp74026584;     iVamZQawespp74026584 = iVamZQawespp36037042;     iVamZQawespp36037042 = iVamZQawespp70047585;     iVamZQawespp70047585 = iVamZQawespp73263167;     iVamZQawespp73263167 = iVamZQawespp80432613;     iVamZQawespp80432613 = iVamZQawespp68693882;     iVamZQawespp68693882 = iVamZQawespp21720215;     iVamZQawespp21720215 = iVamZQawespp32747584;     iVamZQawespp32747584 = iVamZQawespp89903226;     iVamZQawespp89903226 = iVamZQawespp62250770;     iVamZQawespp62250770 = iVamZQawespp19167844;     iVamZQawespp19167844 = iVamZQawespp92686076;     iVamZQawespp92686076 = iVamZQawespp65669426;     iVamZQawespp65669426 = iVamZQawespp87716615;     iVamZQawespp87716615 = iVamZQawespp73312908;     iVamZQawespp73312908 = iVamZQawespp75098573;     iVamZQawespp75098573 = iVamZQawespp22021621;     iVamZQawespp22021621 = iVamZQawespp88083210;     iVamZQawespp88083210 = iVamZQawespp8076426;     iVamZQawespp8076426 = iVamZQawespp79872852;     iVamZQawespp79872852 = iVamZQawespp32165709;     iVamZQawespp32165709 = iVamZQawespp64493702;     iVamZQawespp64493702 = iVamZQawespp93579847;     iVamZQawespp93579847 = iVamZQawespp37886688;     iVamZQawespp37886688 = iVamZQawespp85757106;     iVamZQawespp85757106 = iVamZQawespp93482894;     iVamZQawespp93482894 = iVamZQawespp57395660;     iVamZQawespp57395660 = iVamZQawespp83013564;     iVamZQawespp83013564 = iVamZQawespp47917509;     iVamZQawespp47917509 = iVamZQawespp58519337;     iVamZQawespp58519337 = iVamZQawespp65002116;     iVamZQawespp65002116 = iVamZQawespp84657082;     iVamZQawespp84657082 = iVamZQawespp70179245;     iVamZQawespp70179245 = iVamZQawespp75200446;     iVamZQawespp75200446 = iVamZQawespp10897625;     iVamZQawespp10897625 = iVamZQawespp42314492;     iVamZQawespp42314492 = iVamZQawespp8157761;     iVamZQawespp8157761 = iVamZQawespp25518386;     iVamZQawespp25518386 = iVamZQawespp2200983;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DvwVDYkkAtbWtt55848204() {     long PaBmvYalfNVH21669153 = -670319268;    long PaBmvYalfNVH88848883 = -707942818;    long PaBmvYalfNVH66022502 = -63105222;    long PaBmvYalfNVH58311493 = -993987437;    long PaBmvYalfNVH90993904 = -104139161;    long PaBmvYalfNVH29356084 = -758872519;    long PaBmvYalfNVH12751066 = -803855049;    long PaBmvYalfNVH32049496 = -187796264;    long PaBmvYalfNVH64519207 = -812610143;    long PaBmvYalfNVH63162765 = -93184728;    long PaBmvYalfNVH88294314 = -583530359;    long PaBmvYalfNVH26314206 = -917654910;    long PaBmvYalfNVH87123391 = -254389402;    long PaBmvYalfNVH63686358 = -271379245;    long PaBmvYalfNVH23712654 = -973311753;    long PaBmvYalfNVH43020550 = -706436320;    long PaBmvYalfNVH36835162 = -215119464;    long PaBmvYalfNVH65488833 = -645893013;    long PaBmvYalfNVH11169019 = -910175615;    long PaBmvYalfNVH40615539 = -263766591;    long PaBmvYalfNVH85096897 = -643645665;    long PaBmvYalfNVH66646526 = -555356313;    long PaBmvYalfNVH21476925 = -73294177;    long PaBmvYalfNVH38524842 = -210770836;    long PaBmvYalfNVH47247671 = -361169289;    long PaBmvYalfNVH57713694 = -340572441;    long PaBmvYalfNVH39023324 = -695415737;    long PaBmvYalfNVH99576496 = -784114900;    long PaBmvYalfNVH34517636 = -766335997;    long PaBmvYalfNVH52502221 = -96279910;    long PaBmvYalfNVH44990543 = -20317191;    long PaBmvYalfNVH387195 = -123366446;    long PaBmvYalfNVH53863082 = -818858821;    long PaBmvYalfNVH86814357 = -243067615;    long PaBmvYalfNVH73480439 = -836599439;    long PaBmvYalfNVH66504547 = -952663111;    long PaBmvYalfNVH55285125 = -136798097;    long PaBmvYalfNVH10104754 = -545972846;    long PaBmvYalfNVH89571563 = -77117360;    long PaBmvYalfNVH40129798 = -98765028;    long PaBmvYalfNVH35816868 = -632483909;    long PaBmvYalfNVH96783342 = -101579754;    long PaBmvYalfNVH49484776 = -835071192;    long PaBmvYalfNVH61590884 = -630121720;    long PaBmvYalfNVH78809963 = -113433701;    long PaBmvYalfNVH2422099 = 8113380;    long PaBmvYalfNVH26859687 = -339948488;    long PaBmvYalfNVH75378171 = -639170520;    long PaBmvYalfNVH57754704 = -407483373;    long PaBmvYalfNVH69177319 = -745796263;    long PaBmvYalfNVH48651089 = -435815247;    long PaBmvYalfNVH93748629 = -262340693;    long PaBmvYalfNVH44875923 = -677678691;    long PaBmvYalfNVH21834113 = -158628138;    long PaBmvYalfNVH70751307 = -356423059;    long PaBmvYalfNVH55022626 = -14962956;    long PaBmvYalfNVH67371958 = -534648641;    long PaBmvYalfNVH27497660 = -852334386;    long PaBmvYalfNVH11063823 = -532818149;    long PaBmvYalfNVH33280211 = -763566720;    long PaBmvYalfNVH90332760 = 36543218;    long PaBmvYalfNVH13174569 = 80259851;    long PaBmvYalfNVH97531860 = -421460268;    long PaBmvYalfNVH12016986 = -616330234;    long PaBmvYalfNVH18172223 = 27132463;    long PaBmvYalfNVH87907120 = -360163913;    long PaBmvYalfNVH72451123 = 1203911;    long PaBmvYalfNVH309035 = 88678213;    long PaBmvYalfNVH90205918 = -434779807;    long PaBmvYalfNVH57208107 = 79351357;    long PaBmvYalfNVH87735424 = -469638224;    long PaBmvYalfNVH26730409 = -669146618;    long PaBmvYalfNVH75917270 = -468775654;    long PaBmvYalfNVH71039220 = -711410588;    long PaBmvYalfNVH4798671 = -631282682;    long PaBmvYalfNVH88313555 = -442065912;    long PaBmvYalfNVH17161750 = -720285122;    long PaBmvYalfNVH59886041 = -443172457;    long PaBmvYalfNVH59714878 = 2662864;    long PaBmvYalfNVH44825572 = -269282669;    long PaBmvYalfNVH30854007 = 99376046;    long PaBmvYalfNVH63645153 = 43754783;    long PaBmvYalfNVH41821793 = -276631527;    long PaBmvYalfNVH65340316 = 79460266;    long PaBmvYalfNVH3851133 = -660464664;    long PaBmvYalfNVH51241913 = -757976499;    long PaBmvYalfNVH55511271 = -445687755;    long PaBmvYalfNVH32028970 = -560230684;    long PaBmvYalfNVH16063051 = -886644557;    long PaBmvYalfNVH18457813 = -721636484;    long PaBmvYalfNVH99132588 = -318014470;    long PaBmvYalfNVH27787465 = -284463711;    long PaBmvYalfNVH99040930 = 86845303;    long PaBmvYalfNVH56291352 = -313550640;    long PaBmvYalfNVH49797038 = -35308247;    long PaBmvYalfNVH22642299 = -612743760;    long PaBmvYalfNVH99251481 = -680119487;    long PaBmvYalfNVH37467791 = -118740959;    long PaBmvYalfNVH43418661 = -557254184;    long PaBmvYalfNVH90902843 = -670319268;     PaBmvYalfNVH21669153 = PaBmvYalfNVH88848883;     PaBmvYalfNVH88848883 = PaBmvYalfNVH66022502;     PaBmvYalfNVH66022502 = PaBmvYalfNVH58311493;     PaBmvYalfNVH58311493 = PaBmvYalfNVH90993904;     PaBmvYalfNVH90993904 = PaBmvYalfNVH29356084;     PaBmvYalfNVH29356084 = PaBmvYalfNVH12751066;     PaBmvYalfNVH12751066 = PaBmvYalfNVH32049496;     PaBmvYalfNVH32049496 = PaBmvYalfNVH64519207;     PaBmvYalfNVH64519207 = PaBmvYalfNVH63162765;     PaBmvYalfNVH63162765 = PaBmvYalfNVH88294314;     PaBmvYalfNVH88294314 = PaBmvYalfNVH26314206;     PaBmvYalfNVH26314206 = PaBmvYalfNVH87123391;     PaBmvYalfNVH87123391 = PaBmvYalfNVH63686358;     PaBmvYalfNVH63686358 = PaBmvYalfNVH23712654;     PaBmvYalfNVH23712654 = PaBmvYalfNVH43020550;     PaBmvYalfNVH43020550 = PaBmvYalfNVH36835162;     PaBmvYalfNVH36835162 = PaBmvYalfNVH65488833;     PaBmvYalfNVH65488833 = PaBmvYalfNVH11169019;     PaBmvYalfNVH11169019 = PaBmvYalfNVH40615539;     PaBmvYalfNVH40615539 = PaBmvYalfNVH85096897;     PaBmvYalfNVH85096897 = PaBmvYalfNVH66646526;     PaBmvYalfNVH66646526 = PaBmvYalfNVH21476925;     PaBmvYalfNVH21476925 = PaBmvYalfNVH38524842;     PaBmvYalfNVH38524842 = PaBmvYalfNVH47247671;     PaBmvYalfNVH47247671 = PaBmvYalfNVH57713694;     PaBmvYalfNVH57713694 = PaBmvYalfNVH39023324;     PaBmvYalfNVH39023324 = PaBmvYalfNVH99576496;     PaBmvYalfNVH99576496 = PaBmvYalfNVH34517636;     PaBmvYalfNVH34517636 = PaBmvYalfNVH52502221;     PaBmvYalfNVH52502221 = PaBmvYalfNVH44990543;     PaBmvYalfNVH44990543 = PaBmvYalfNVH387195;     PaBmvYalfNVH387195 = PaBmvYalfNVH53863082;     PaBmvYalfNVH53863082 = PaBmvYalfNVH86814357;     PaBmvYalfNVH86814357 = PaBmvYalfNVH73480439;     PaBmvYalfNVH73480439 = PaBmvYalfNVH66504547;     PaBmvYalfNVH66504547 = PaBmvYalfNVH55285125;     PaBmvYalfNVH55285125 = PaBmvYalfNVH10104754;     PaBmvYalfNVH10104754 = PaBmvYalfNVH89571563;     PaBmvYalfNVH89571563 = PaBmvYalfNVH40129798;     PaBmvYalfNVH40129798 = PaBmvYalfNVH35816868;     PaBmvYalfNVH35816868 = PaBmvYalfNVH96783342;     PaBmvYalfNVH96783342 = PaBmvYalfNVH49484776;     PaBmvYalfNVH49484776 = PaBmvYalfNVH61590884;     PaBmvYalfNVH61590884 = PaBmvYalfNVH78809963;     PaBmvYalfNVH78809963 = PaBmvYalfNVH2422099;     PaBmvYalfNVH2422099 = PaBmvYalfNVH26859687;     PaBmvYalfNVH26859687 = PaBmvYalfNVH75378171;     PaBmvYalfNVH75378171 = PaBmvYalfNVH57754704;     PaBmvYalfNVH57754704 = PaBmvYalfNVH69177319;     PaBmvYalfNVH69177319 = PaBmvYalfNVH48651089;     PaBmvYalfNVH48651089 = PaBmvYalfNVH93748629;     PaBmvYalfNVH93748629 = PaBmvYalfNVH44875923;     PaBmvYalfNVH44875923 = PaBmvYalfNVH21834113;     PaBmvYalfNVH21834113 = PaBmvYalfNVH70751307;     PaBmvYalfNVH70751307 = PaBmvYalfNVH55022626;     PaBmvYalfNVH55022626 = PaBmvYalfNVH67371958;     PaBmvYalfNVH67371958 = PaBmvYalfNVH27497660;     PaBmvYalfNVH27497660 = PaBmvYalfNVH11063823;     PaBmvYalfNVH11063823 = PaBmvYalfNVH33280211;     PaBmvYalfNVH33280211 = PaBmvYalfNVH90332760;     PaBmvYalfNVH90332760 = PaBmvYalfNVH13174569;     PaBmvYalfNVH13174569 = PaBmvYalfNVH97531860;     PaBmvYalfNVH97531860 = PaBmvYalfNVH12016986;     PaBmvYalfNVH12016986 = PaBmvYalfNVH18172223;     PaBmvYalfNVH18172223 = PaBmvYalfNVH87907120;     PaBmvYalfNVH87907120 = PaBmvYalfNVH72451123;     PaBmvYalfNVH72451123 = PaBmvYalfNVH309035;     PaBmvYalfNVH309035 = PaBmvYalfNVH90205918;     PaBmvYalfNVH90205918 = PaBmvYalfNVH57208107;     PaBmvYalfNVH57208107 = PaBmvYalfNVH87735424;     PaBmvYalfNVH87735424 = PaBmvYalfNVH26730409;     PaBmvYalfNVH26730409 = PaBmvYalfNVH75917270;     PaBmvYalfNVH75917270 = PaBmvYalfNVH71039220;     PaBmvYalfNVH71039220 = PaBmvYalfNVH4798671;     PaBmvYalfNVH4798671 = PaBmvYalfNVH88313555;     PaBmvYalfNVH88313555 = PaBmvYalfNVH17161750;     PaBmvYalfNVH17161750 = PaBmvYalfNVH59886041;     PaBmvYalfNVH59886041 = PaBmvYalfNVH59714878;     PaBmvYalfNVH59714878 = PaBmvYalfNVH44825572;     PaBmvYalfNVH44825572 = PaBmvYalfNVH30854007;     PaBmvYalfNVH30854007 = PaBmvYalfNVH63645153;     PaBmvYalfNVH63645153 = PaBmvYalfNVH41821793;     PaBmvYalfNVH41821793 = PaBmvYalfNVH65340316;     PaBmvYalfNVH65340316 = PaBmvYalfNVH3851133;     PaBmvYalfNVH3851133 = PaBmvYalfNVH51241913;     PaBmvYalfNVH51241913 = PaBmvYalfNVH55511271;     PaBmvYalfNVH55511271 = PaBmvYalfNVH32028970;     PaBmvYalfNVH32028970 = PaBmvYalfNVH16063051;     PaBmvYalfNVH16063051 = PaBmvYalfNVH18457813;     PaBmvYalfNVH18457813 = PaBmvYalfNVH99132588;     PaBmvYalfNVH99132588 = PaBmvYalfNVH27787465;     PaBmvYalfNVH27787465 = PaBmvYalfNVH99040930;     PaBmvYalfNVH99040930 = PaBmvYalfNVH56291352;     PaBmvYalfNVH56291352 = PaBmvYalfNVH49797038;     PaBmvYalfNVH49797038 = PaBmvYalfNVH22642299;     PaBmvYalfNVH22642299 = PaBmvYalfNVH99251481;     PaBmvYalfNVH99251481 = PaBmvYalfNVH37467791;     PaBmvYalfNVH37467791 = PaBmvYalfNVH43418661;     PaBmvYalfNVH43418661 = PaBmvYalfNVH90902843;     PaBmvYalfNVH90902843 = PaBmvYalfNVH21669153;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZwlKgpGbTzgKHO52031364() {     long VJQKHsMzrGjS81265249 = -899075646;    long VJQKHsMzrGjS90354733 = -518098203;    long VJQKHsMzrGjS3023890 = -137246145;    long VJQKHsMzrGjS54187252 = -766598315;    long VJQKHsMzrGjS2287131 = -4646188;    long VJQKHsMzrGjS27033205 = -617132192;    long VJQKHsMzrGjS10109548 = -133572635;    long VJQKHsMzrGjS82874780 = -542007639;    long VJQKHsMzrGjS78332650 = -245282642;    long VJQKHsMzrGjS46187281 = -34443581;    long VJQKHsMzrGjS13589246 = -985072798;    long VJQKHsMzrGjS60985407 = 87323841;    long VJQKHsMzrGjS57877955 = -160567920;    long VJQKHsMzrGjS22060197 = -175537593;    long VJQKHsMzrGjS21020460 = -665838274;    long VJQKHsMzrGjS39774804 = -511809212;    long VJQKHsMzrGjS72796266 = -143335744;    long VJQKHsMzrGjS30157165 = 84770882;    long VJQKHsMzrGjS91611221 = 50704755;    long VJQKHsMzrGjS20532648 = -926175244;    long VJQKHsMzrGjS65558015 = -476666489;    long VJQKHsMzrGjS35136125 = -447758191;    long VJQKHsMzrGjS13668751 = -937589256;    long VJQKHsMzrGjS3255081 = -875109073;    long VJQKHsMzrGjS23225676 = -917306879;    long VJQKHsMzrGjS52128601 = -475189912;    long VJQKHsMzrGjS52363395 = -44895735;    long VJQKHsMzrGjS64687665 = -305496490;    long VJQKHsMzrGjS84301978 = -555928612;    long VJQKHsMzrGjS90975688 = -143263152;    long VJQKHsMzrGjS69904861 = -665536519;    long VJQKHsMzrGjS43152455 = -540584443;    long VJQKHsMzrGjS2945121 = -798805693;    long VJQKHsMzrGjS69338799 = -844951547;    long VJQKHsMzrGjS78417800 = -484809424;    long VJQKHsMzrGjS45094443 = -164319693;    long VJQKHsMzrGjS45916802 = -429576732;    long VJQKHsMzrGjS8465091 = -490425235;    long VJQKHsMzrGjS8589506 = -895823876;    long VJQKHsMzrGjS12955453 = -372645976;    long VJQKHsMzrGjS94034681 = -1145506;    long VJQKHsMzrGjS66862523 = -106521172;    long VJQKHsMzrGjS90364018 = -568516021;    long VJQKHsMzrGjS35830389 = 45963541;    long VJQKHsMzrGjS79798278 = -659751770;    long VJQKHsMzrGjS67215227 = -234830779;    long VJQKHsMzrGjS32348410 = -231804155;    long VJQKHsMzrGjS22074565 = -971923749;    long VJQKHsMzrGjS97144351 = -691420993;    long VJQKHsMzrGjS84344711 = 32951276;    long VJQKHsMzrGjS99137339 = -221923471;    long VJQKHsMzrGjS333783 = -233583948;    long VJQKHsMzrGjS20291438 = -917627145;    long VJQKHsMzrGjS95108635 = -418797093;    long VJQKHsMzrGjS86473348 = -320357146;    long VJQKHsMzrGjS46129125 = -351317455;    long VJQKHsMzrGjS76685983 = -580508947;    long VJQKHsMzrGjS99768809 = -262137072;    long VJQKHsMzrGjS30961576 = -849291436;    long VJQKHsMzrGjS50158530 = -529456277;    long VJQKHsMzrGjS74669810 = -472236458;    long VJQKHsMzrGjS45421883 = -828076145;    long VJQKHsMzrGjS98572801 = -986079028;    long VJQKHsMzrGjS87356962 = -2019491;    long VJQKHsMzrGjS76282419 = -368907063;    long VJQKHsMzrGjS70436791 = -344488355;    long VJQKHsMzrGjS58040286 = -113870466;    long VJQKHsMzrGjS88539155 = -315616374;    long VJQKHsMzrGjS43642396 = -690728169;    long VJQKHsMzrGjS75926017 = -401518582;    long VJQKHsMzrGjS93858001 = 17767520;    long VJQKHsMzrGjS64331175 = -652910509;    long VJQKHsMzrGjS21567659 = -19405242;    long VJQKHsMzrGjS78655768 = -576649269;    long VJQKHsMzrGjS26497967 = -825029739;    long VJQKHsMzrGjS98695492 = -270145318;    long VJQKHsMzrGjS44772106 = -879242170;    long VJQKHsMzrGjS77838361 = -883552797;    long VJQKHsMzrGjS23456802 = -115357304;    long VJQKHsMzrGjS56010448 = -582476100;    long VJQKHsMzrGjS19780192 = -143385758;    long VJQKHsMzrGjS30288830 = -72971986;    long VJQKHsMzrGjS67543314 = -614075498;    long VJQKHsMzrGjS99957266 = -488879889;    long VJQKHsMzrGjS91838348 = -921339682;    long VJQKHsMzrGjS69571078 = -331952571;    long VJQKHsMzrGjS22861017 = -622957299;    long VJQKHsMzrGjS7836486 = -280008601;    long VJQKHsMzrGjS82865451 = -424594401;    long VJQKHsMzrGjS32288676 = -33491970;    long VJQKHsMzrGjS68408460 = -583810746;    long VJQKHsMzrGjS46147993 = -67439660;    long VJQKHsMzrGjS77503514 = -641133799;    long VJQKHsMzrGjS58430976 = -266367600;    long VJQKHsMzrGjS38285642 = -900409519;    long VJQKHsMzrGjS48612799 = -173069361;    long VJQKHsMzrGjS68289721 = -120442145;    long VJQKHsMzrGjS3007056 = -466496531;    long VJQKHsMzrGjS59547969 = -585129397;    long VJQKHsMzrGjS9361488 = -899075646;     VJQKHsMzrGjS81265249 = VJQKHsMzrGjS90354733;     VJQKHsMzrGjS90354733 = VJQKHsMzrGjS3023890;     VJQKHsMzrGjS3023890 = VJQKHsMzrGjS54187252;     VJQKHsMzrGjS54187252 = VJQKHsMzrGjS2287131;     VJQKHsMzrGjS2287131 = VJQKHsMzrGjS27033205;     VJQKHsMzrGjS27033205 = VJQKHsMzrGjS10109548;     VJQKHsMzrGjS10109548 = VJQKHsMzrGjS82874780;     VJQKHsMzrGjS82874780 = VJQKHsMzrGjS78332650;     VJQKHsMzrGjS78332650 = VJQKHsMzrGjS46187281;     VJQKHsMzrGjS46187281 = VJQKHsMzrGjS13589246;     VJQKHsMzrGjS13589246 = VJQKHsMzrGjS60985407;     VJQKHsMzrGjS60985407 = VJQKHsMzrGjS57877955;     VJQKHsMzrGjS57877955 = VJQKHsMzrGjS22060197;     VJQKHsMzrGjS22060197 = VJQKHsMzrGjS21020460;     VJQKHsMzrGjS21020460 = VJQKHsMzrGjS39774804;     VJQKHsMzrGjS39774804 = VJQKHsMzrGjS72796266;     VJQKHsMzrGjS72796266 = VJQKHsMzrGjS30157165;     VJQKHsMzrGjS30157165 = VJQKHsMzrGjS91611221;     VJQKHsMzrGjS91611221 = VJQKHsMzrGjS20532648;     VJQKHsMzrGjS20532648 = VJQKHsMzrGjS65558015;     VJQKHsMzrGjS65558015 = VJQKHsMzrGjS35136125;     VJQKHsMzrGjS35136125 = VJQKHsMzrGjS13668751;     VJQKHsMzrGjS13668751 = VJQKHsMzrGjS3255081;     VJQKHsMzrGjS3255081 = VJQKHsMzrGjS23225676;     VJQKHsMzrGjS23225676 = VJQKHsMzrGjS52128601;     VJQKHsMzrGjS52128601 = VJQKHsMzrGjS52363395;     VJQKHsMzrGjS52363395 = VJQKHsMzrGjS64687665;     VJQKHsMzrGjS64687665 = VJQKHsMzrGjS84301978;     VJQKHsMzrGjS84301978 = VJQKHsMzrGjS90975688;     VJQKHsMzrGjS90975688 = VJQKHsMzrGjS69904861;     VJQKHsMzrGjS69904861 = VJQKHsMzrGjS43152455;     VJQKHsMzrGjS43152455 = VJQKHsMzrGjS2945121;     VJQKHsMzrGjS2945121 = VJQKHsMzrGjS69338799;     VJQKHsMzrGjS69338799 = VJQKHsMzrGjS78417800;     VJQKHsMzrGjS78417800 = VJQKHsMzrGjS45094443;     VJQKHsMzrGjS45094443 = VJQKHsMzrGjS45916802;     VJQKHsMzrGjS45916802 = VJQKHsMzrGjS8465091;     VJQKHsMzrGjS8465091 = VJQKHsMzrGjS8589506;     VJQKHsMzrGjS8589506 = VJQKHsMzrGjS12955453;     VJQKHsMzrGjS12955453 = VJQKHsMzrGjS94034681;     VJQKHsMzrGjS94034681 = VJQKHsMzrGjS66862523;     VJQKHsMzrGjS66862523 = VJQKHsMzrGjS90364018;     VJQKHsMzrGjS90364018 = VJQKHsMzrGjS35830389;     VJQKHsMzrGjS35830389 = VJQKHsMzrGjS79798278;     VJQKHsMzrGjS79798278 = VJQKHsMzrGjS67215227;     VJQKHsMzrGjS67215227 = VJQKHsMzrGjS32348410;     VJQKHsMzrGjS32348410 = VJQKHsMzrGjS22074565;     VJQKHsMzrGjS22074565 = VJQKHsMzrGjS97144351;     VJQKHsMzrGjS97144351 = VJQKHsMzrGjS84344711;     VJQKHsMzrGjS84344711 = VJQKHsMzrGjS99137339;     VJQKHsMzrGjS99137339 = VJQKHsMzrGjS333783;     VJQKHsMzrGjS333783 = VJQKHsMzrGjS20291438;     VJQKHsMzrGjS20291438 = VJQKHsMzrGjS95108635;     VJQKHsMzrGjS95108635 = VJQKHsMzrGjS86473348;     VJQKHsMzrGjS86473348 = VJQKHsMzrGjS46129125;     VJQKHsMzrGjS46129125 = VJQKHsMzrGjS76685983;     VJQKHsMzrGjS76685983 = VJQKHsMzrGjS99768809;     VJQKHsMzrGjS99768809 = VJQKHsMzrGjS30961576;     VJQKHsMzrGjS30961576 = VJQKHsMzrGjS50158530;     VJQKHsMzrGjS50158530 = VJQKHsMzrGjS74669810;     VJQKHsMzrGjS74669810 = VJQKHsMzrGjS45421883;     VJQKHsMzrGjS45421883 = VJQKHsMzrGjS98572801;     VJQKHsMzrGjS98572801 = VJQKHsMzrGjS87356962;     VJQKHsMzrGjS87356962 = VJQKHsMzrGjS76282419;     VJQKHsMzrGjS76282419 = VJQKHsMzrGjS70436791;     VJQKHsMzrGjS70436791 = VJQKHsMzrGjS58040286;     VJQKHsMzrGjS58040286 = VJQKHsMzrGjS88539155;     VJQKHsMzrGjS88539155 = VJQKHsMzrGjS43642396;     VJQKHsMzrGjS43642396 = VJQKHsMzrGjS75926017;     VJQKHsMzrGjS75926017 = VJQKHsMzrGjS93858001;     VJQKHsMzrGjS93858001 = VJQKHsMzrGjS64331175;     VJQKHsMzrGjS64331175 = VJQKHsMzrGjS21567659;     VJQKHsMzrGjS21567659 = VJQKHsMzrGjS78655768;     VJQKHsMzrGjS78655768 = VJQKHsMzrGjS26497967;     VJQKHsMzrGjS26497967 = VJQKHsMzrGjS98695492;     VJQKHsMzrGjS98695492 = VJQKHsMzrGjS44772106;     VJQKHsMzrGjS44772106 = VJQKHsMzrGjS77838361;     VJQKHsMzrGjS77838361 = VJQKHsMzrGjS23456802;     VJQKHsMzrGjS23456802 = VJQKHsMzrGjS56010448;     VJQKHsMzrGjS56010448 = VJQKHsMzrGjS19780192;     VJQKHsMzrGjS19780192 = VJQKHsMzrGjS30288830;     VJQKHsMzrGjS30288830 = VJQKHsMzrGjS67543314;     VJQKHsMzrGjS67543314 = VJQKHsMzrGjS99957266;     VJQKHsMzrGjS99957266 = VJQKHsMzrGjS91838348;     VJQKHsMzrGjS91838348 = VJQKHsMzrGjS69571078;     VJQKHsMzrGjS69571078 = VJQKHsMzrGjS22861017;     VJQKHsMzrGjS22861017 = VJQKHsMzrGjS7836486;     VJQKHsMzrGjS7836486 = VJQKHsMzrGjS82865451;     VJQKHsMzrGjS82865451 = VJQKHsMzrGjS32288676;     VJQKHsMzrGjS32288676 = VJQKHsMzrGjS68408460;     VJQKHsMzrGjS68408460 = VJQKHsMzrGjS46147993;     VJQKHsMzrGjS46147993 = VJQKHsMzrGjS77503514;     VJQKHsMzrGjS77503514 = VJQKHsMzrGjS58430976;     VJQKHsMzrGjS58430976 = VJQKHsMzrGjS38285642;     VJQKHsMzrGjS38285642 = VJQKHsMzrGjS48612799;     VJQKHsMzrGjS48612799 = VJQKHsMzrGjS68289721;     VJQKHsMzrGjS68289721 = VJQKHsMzrGjS3007056;     VJQKHsMzrGjS3007056 = VJQKHsMzrGjS59547969;     VJQKHsMzrGjS59547969 = VJQKHsMzrGjS9361488;     VJQKHsMzrGjS9361488 = VJQKHsMzrGjS81265249;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void VSCgyNYXZWjiiu12334022() {     double nRhgXdncKdDE71391557 = -957831847;    double nRhgXdncKdDE73479798 = -893024373;    double nRhgXdncKdDE98516588 = -274040606;    double nRhgXdncKdDE27685827 = -952770137;    double nRhgXdncKdDE15343867 = 54030370;    double nRhgXdncKdDE7819610 = -509765300;    double nRhgXdncKdDE4772987 = -871118108;    double nRhgXdncKdDE35753343 = -178455378;    double nRhgXdncKdDE2144339 = -253175280;    double nRhgXdncKdDE50442951 = -704318106;    double nRhgXdncKdDE89741065 = -393492956;    double nRhgXdncKdDE95734914 = -492264294;    double nRhgXdncKdDE96224087 = -472803780;    double nRhgXdncKdDE60479050 = -173698477;    double nRhgXdncKdDE19094832 = -50959217;    double nRhgXdncKdDE63954546 = -212189082;    double nRhgXdncKdDE16758447 = -404680985;    double nRhgXdncKdDE51512877 = -358078411;    double nRhgXdncKdDE52525612 = -415705681;    double nRhgXdncKdDE87856896 = -474053554;    double nRhgXdncKdDE53480418 = -181091582;    double nRhgXdncKdDE33217707 = -780854826;    double nRhgXdncKdDE46907168 = -244049177;    double nRhgXdncKdDE11176178 = -223133449;    double nRhgXdncKdDE70110864 = -460817823;    double nRhgXdncKdDE70919566 = -351063647;    double nRhgXdncKdDE74330729 = -904424729;    double nRhgXdncKdDE87858040 = -365386549;    double nRhgXdncKdDE45510976 = -218127660;    double nRhgXdncKdDE38764768 = -17665543;    double nRhgXdncKdDE73368263 = -992203063;    double nRhgXdncKdDE42519369 = 58591137;    double nRhgXdncKdDE11914162 = 969147;    double nRhgXdncKdDE93177444 = -836402705;    double nRhgXdncKdDE14014335 = -135145085;    double nRhgXdncKdDE98325449 = -467349103;    double nRhgXdncKdDE46150371 = 54607364;    double nRhgXdncKdDE32822374 = -356484479;    double nRhgXdncKdDE19122523 = -603285922;    double nRhgXdncKdDE57467594 = -277353749;    double nRhgXdncKdDE7734355 = -807006781;    double nRhgXdncKdDE21506986 = 78985615;    double nRhgXdncKdDE50180859 = 56058383;    double nRhgXdncKdDE66492330 = -918119648;    double nRhgXdncKdDE71762696 = -772261726;    double nRhgXdncKdDE87654221 = -718454685;    double nRhgXdncKdDE12771700 = -880286655;    double nRhgXdncKdDE12461025 = -998580002;    double nRhgXdncKdDE25063006 = -27360340;    double nRhgXdncKdDE13625118 = -424045061;    double nRhgXdncKdDE28502863 = -596305515;    double nRhgXdncKdDE44106890 = -198010781;    double nRhgXdncKdDE69743893 = -629480140;    double nRhgXdncKdDE48015698 = -542352375;    double nRhgXdncKdDE58853604 = -448957417;    double nRhgXdncKdDE38173851 = -76977021;    double nRhgXdncKdDE26572630 = -548975197;    double nRhgXdncKdDE87340410 = 49092842;    double nRhgXdncKdDE57574963 = -391952314;    double nRhgXdncKdDE44424301 = -594905984;    double nRhgXdncKdDE33488880 = -605340572;    double nRhgXdncKdDE16914946 = -405731560;    double nRhgXdncKdDE90242367 = -960327719;    double nRhgXdncKdDE63379570 = -135509737;    double nRhgXdncKdDE77074687 = -712115044;    double nRhgXdncKdDE47221696 = -352084093;    double nRhgXdncKdDE83820752 = -393233442;    double nRhgXdncKdDE3046643 = -636401076;    double nRhgXdncKdDE46464716 = 61446608;    double nRhgXdncKdDE20769382 = -583610115;    double nRhgXdncKdDE17804175 = -166796446;    double nRhgXdncKdDE83936072 = 51803493;    double nRhgXdncKdDE32390354 = -754792489;    double nRhgXdncKdDE95058018 = -38351932;    double nRhgXdncKdDE80122541 = -667046773;    double nRhgXdncKdDE31973432 = -160077197;    double nRhgXdncKdDE83036847 = -736913210;    double nRhgXdncKdDE80414838 = -325929529;    double nRhgXdncKdDE39413482 = -450871723;    double nRhgXdncKdDE82456642 = -742363139;    double nRhgXdncKdDE58147866 = -470776993;    double nRhgXdncKdDE61869705 = -905844727;    double nRhgXdncKdDE62795035 = -238026210;    double nRhgXdncKdDE31885859 = -794082599;    double nRhgXdncKdDE10261905 = -421360028;    double nRhgXdncKdDE29261374 = -694192282;    double nRhgXdncKdDE72775476 = -311928724;    double nRhgXdncKdDE63898464 = -456678479;    double nRhgXdncKdDE34323841 = -287445288;    double nRhgXdncKdDE75840483 = 41831935;    double nRhgXdncKdDE71752820 = -918373907;    double nRhgXdncKdDE58809960 = -994485479;    double nRhgXdncKdDE75247411 = -964532165;    double nRhgXdncKdDE74698222 = 91620061;    double nRhgXdncKdDE23978715 = -672013178;    double nRhgXdncKdDE90819409 = -301275222;    double nRhgXdncKdDE31264619 = 39313333;    double nRhgXdncKdDE86801289 = -808431880;    double nRhgXdncKdDE89417643 = -106004604;    double nRhgXdncKdDE24541000 = -957831847;     nRhgXdncKdDE71391557 = nRhgXdncKdDE73479798;     nRhgXdncKdDE73479798 = nRhgXdncKdDE98516588;     nRhgXdncKdDE98516588 = nRhgXdncKdDE27685827;     nRhgXdncKdDE27685827 = nRhgXdncKdDE15343867;     nRhgXdncKdDE15343867 = nRhgXdncKdDE7819610;     nRhgXdncKdDE7819610 = nRhgXdncKdDE4772987;     nRhgXdncKdDE4772987 = nRhgXdncKdDE35753343;     nRhgXdncKdDE35753343 = nRhgXdncKdDE2144339;     nRhgXdncKdDE2144339 = nRhgXdncKdDE50442951;     nRhgXdncKdDE50442951 = nRhgXdncKdDE89741065;     nRhgXdncKdDE89741065 = nRhgXdncKdDE95734914;     nRhgXdncKdDE95734914 = nRhgXdncKdDE96224087;     nRhgXdncKdDE96224087 = nRhgXdncKdDE60479050;     nRhgXdncKdDE60479050 = nRhgXdncKdDE19094832;     nRhgXdncKdDE19094832 = nRhgXdncKdDE63954546;     nRhgXdncKdDE63954546 = nRhgXdncKdDE16758447;     nRhgXdncKdDE16758447 = nRhgXdncKdDE51512877;     nRhgXdncKdDE51512877 = nRhgXdncKdDE52525612;     nRhgXdncKdDE52525612 = nRhgXdncKdDE87856896;     nRhgXdncKdDE87856896 = nRhgXdncKdDE53480418;     nRhgXdncKdDE53480418 = nRhgXdncKdDE33217707;     nRhgXdncKdDE33217707 = nRhgXdncKdDE46907168;     nRhgXdncKdDE46907168 = nRhgXdncKdDE11176178;     nRhgXdncKdDE11176178 = nRhgXdncKdDE70110864;     nRhgXdncKdDE70110864 = nRhgXdncKdDE70919566;     nRhgXdncKdDE70919566 = nRhgXdncKdDE74330729;     nRhgXdncKdDE74330729 = nRhgXdncKdDE87858040;     nRhgXdncKdDE87858040 = nRhgXdncKdDE45510976;     nRhgXdncKdDE45510976 = nRhgXdncKdDE38764768;     nRhgXdncKdDE38764768 = nRhgXdncKdDE73368263;     nRhgXdncKdDE73368263 = nRhgXdncKdDE42519369;     nRhgXdncKdDE42519369 = nRhgXdncKdDE11914162;     nRhgXdncKdDE11914162 = nRhgXdncKdDE93177444;     nRhgXdncKdDE93177444 = nRhgXdncKdDE14014335;     nRhgXdncKdDE14014335 = nRhgXdncKdDE98325449;     nRhgXdncKdDE98325449 = nRhgXdncKdDE46150371;     nRhgXdncKdDE46150371 = nRhgXdncKdDE32822374;     nRhgXdncKdDE32822374 = nRhgXdncKdDE19122523;     nRhgXdncKdDE19122523 = nRhgXdncKdDE57467594;     nRhgXdncKdDE57467594 = nRhgXdncKdDE7734355;     nRhgXdncKdDE7734355 = nRhgXdncKdDE21506986;     nRhgXdncKdDE21506986 = nRhgXdncKdDE50180859;     nRhgXdncKdDE50180859 = nRhgXdncKdDE66492330;     nRhgXdncKdDE66492330 = nRhgXdncKdDE71762696;     nRhgXdncKdDE71762696 = nRhgXdncKdDE87654221;     nRhgXdncKdDE87654221 = nRhgXdncKdDE12771700;     nRhgXdncKdDE12771700 = nRhgXdncKdDE12461025;     nRhgXdncKdDE12461025 = nRhgXdncKdDE25063006;     nRhgXdncKdDE25063006 = nRhgXdncKdDE13625118;     nRhgXdncKdDE13625118 = nRhgXdncKdDE28502863;     nRhgXdncKdDE28502863 = nRhgXdncKdDE44106890;     nRhgXdncKdDE44106890 = nRhgXdncKdDE69743893;     nRhgXdncKdDE69743893 = nRhgXdncKdDE48015698;     nRhgXdncKdDE48015698 = nRhgXdncKdDE58853604;     nRhgXdncKdDE58853604 = nRhgXdncKdDE38173851;     nRhgXdncKdDE38173851 = nRhgXdncKdDE26572630;     nRhgXdncKdDE26572630 = nRhgXdncKdDE87340410;     nRhgXdncKdDE87340410 = nRhgXdncKdDE57574963;     nRhgXdncKdDE57574963 = nRhgXdncKdDE44424301;     nRhgXdncKdDE44424301 = nRhgXdncKdDE33488880;     nRhgXdncKdDE33488880 = nRhgXdncKdDE16914946;     nRhgXdncKdDE16914946 = nRhgXdncKdDE90242367;     nRhgXdncKdDE90242367 = nRhgXdncKdDE63379570;     nRhgXdncKdDE63379570 = nRhgXdncKdDE77074687;     nRhgXdncKdDE77074687 = nRhgXdncKdDE47221696;     nRhgXdncKdDE47221696 = nRhgXdncKdDE83820752;     nRhgXdncKdDE83820752 = nRhgXdncKdDE3046643;     nRhgXdncKdDE3046643 = nRhgXdncKdDE46464716;     nRhgXdncKdDE46464716 = nRhgXdncKdDE20769382;     nRhgXdncKdDE20769382 = nRhgXdncKdDE17804175;     nRhgXdncKdDE17804175 = nRhgXdncKdDE83936072;     nRhgXdncKdDE83936072 = nRhgXdncKdDE32390354;     nRhgXdncKdDE32390354 = nRhgXdncKdDE95058018;     nRhgXdncKdDE95058018 = nRhgXdncKdDE80122541;     nRhgXdncKdDE80122541 = nRhgXdncKdDE31973432;     nRhgXdncKdDE31973432 = nRhgXdncKdDE83036847;     nRhgXdncKdDE83036847 = nRhgXdncKdDE80414838;     nRhgXdncKdDE80414838 = nRhgXdncKdDE39413482;     nRhgXdncKdDE39413482 = nRhgXdncKdDE82456642;     nRhgXdncKdDE82456642 = nRhgXdncKdDE58147866;     nRhgXdncKdDE58147866 = nRhgXdncKdDE61869705;     nRhgXdncKdDE61869705 = nRhgXdncKdDE62795035;     nRhgXdncKdDE62795035 = nRhgXdncKdDE31885859;     nRhgXdncKdDE31885859 = nRhgXdncKdDE10261905;     nRhgXdncKdDE10261905 = nRhgXdncKdDE29261374;     nRhgXdncKdDE29261374 = nRhgXdncKdDE72775476;     nRhgXdncKdDE72775476 = nRhgXdncKdDE63898464;     nRhgXdncKdDE63898464 = nRhgXdncKdDE34323841;     nRhgXdncKdDE34323841 = nRhgXdncKdDE75840483;     nRhgXdncKdDE75840483 = nRhgXdncKdDE71752820;     nRhgXdncKdDE71752820 = nRhgXdncKdDE58809960;     nRhgXdncKdDE58809960 = nRhgXdncKdDE75247411;     nRhgXdncKdDE75247411 = nRhgXdncKdDE74698222;     nRhgXdncKdDE74698222 = nRhgXdncKdDE23978715;     nRhgXdncKdDE23978715 = nRhgXdncKdDE90819409;     nRhgXdncKdDE90819409 = nRhgXdncKdDE31264619;     nRhgXdncKdDE31264619 = nRhgXdncKdDE86801289;     nRhgXdncKdDE86801289 = nRhgXdncKdDE89417643;     nRhgXdncKdDE89417643 = nRhgXdncKdDE24541000;     nRhgXdncKdDE24541000 = nRhgXdncKdDE71391557;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void FaFfIsVQzs24879211() {     double UPxDRoovVLDw90859728 = -270963058;    double UPxDRoovVLDw26503662 = -338902369;    double UPxDRoovVLDw15353581 = 74330779;    double UPxDRoovVLDw46332976 = -769344400;    double UPxDRoovVLDw15790383 = -572242046;    double UPxDRoovVLDw33411684 = -400250068;    double UPxDRoovVLDw49604865 = -214424338;    double UPxDRoovVLDw1003577 = -272263344;    double UPxDRoovVLDw62831135 = -981366659;    double UPxDRoovVLDw28371674 = -709904152;    double UPxDRoovVLDw43964329 = -826483256;    double UPxDRoovVLDw99229527 = -491566999;    double UPxDRoovVLDw86595746 = -897161057;    double UPxDRoovVLDw68895090 = -715984203;    double UPxDRoovVLDw79621293 = -349043008;    double UPxDRoovVLDw30170195 = -675381016;    double UPxDRoovVLDw22720560 = -576455667;    double UPxDRoovVLDw75575628 = -108833129;    double UPxDRoovVLDw52160492 = -792910441;    double UPxDRoovVLDw68468198 = -91590010;    double UPxDRoovVLDw65936490 = -787303907;    double UPxDRoovVLDw48199789 = -192658039;    double UPxDRoovVLDw15080175 = -541623795;    double UPxDRoovVLDw28897847 = -959677440;    double UPxDRoovVLDw81314353 = -755117932;    double UPxDRoovVLDw75687027 = -36858865;    double UPxDRoovVLDw58258860 = -569575660;    double UPxDRoovVLDw38649716 = -529119828;    double UPxDRoovVLDw87255933 = -232038806;    double UPxDRoovVLDw23471622 = -109104238;    double UPxDRoovVLDw3172349 = -857529156;    double UPxDRoovVLDw82098679 = -505757881;    double UPxDRoovVLDw23390266 = -554238620;    double UPxDRoovVLDw51933951 = -41005911;    double UPxDRoovVLDw53944671 = -197847891;    double UPxDRoovVLDw34391387 = -770917711;    double UPxDRoovVLDw14533822 = -472268711;    double UPxDRoovVLDw74304848 = -433693295;    double UPxDRoovVLDw86435848 = 32299253;    double UPxDRoovVLDw78749330 = -273884846;    double UPxDRoovVLDw49216412 = -216793077;    double UPxDRoovVLDw33366119 = -159910611;    double UPxDRoovVLDw21314101 = -991743414;    double UPxDRoovVLDw49877869 = -267192309;    double UPxDRoovVLDw51791107 = 50615311;    double UPxDRoovVLDw42115348 = -155786106;    double UPxDRoovVLDw94761579 = -793979978;    double UPxDRoovVLDw12616855 = -81867316;    double UPxDRoovVLDw66198597 = -41299578;    double UPxDRoovVLDw54523460 = -185057406;    double UPxDRoovVLDw2938433 = 97329554;    double UPxDRoovVLDw60555750 = -575363640;    double UPxDRoovVLDw39569039 = -305589101;    double UPxDRoovVLDw20945727 = -536946011;    double UPxDRoovVLDw58942720 = -223516052;    double UPxDRoovVLDw42659939 = 21694980;    double UPxDRoovVLDw11423488 = -797278574;    double UPxDRoovVLDw86455734 = 34008219;    double UPxDRoovVLDw65018623 = 85773532;    double UPxDRoovVLDw40103356 = -435383181;    double UPxDRoovVLDw75152823 = -830674409;    double UPxDRoovVLDw10955150 = -685304511;    double UPxDRoovVLDw13747644 = 59775461;    double UPxDRoovVLDw39359513 = -772262422;    double UPxDRoovVLDw25199325 = -852374997;    double UPxDRoovVLDw61865649 = -220725375;    double UPxDRoovVLDw75839262 = -937328380;    double UPxDRoovVLDw34661795 = -756155147;    double UPxDRoovVLDw14950420 = -418136312;    double UPxDRoovVLDw45229906 = -578125298;    double UPxDRoovVLDw15636373 = -103112305;    double UPxDRoovVLDw48415711 = -42762373;    double UPxDRoovVLDw89139780 = -41132382;    double UPxDRoovVLDw73411161 = -419025596;    double UPxDRoovVLDw19251787 = -874796933;    double UPxDRoovVLDw32570371 = -527393297;    double UPxDRoovVLDw26885689 = -200914625;    double UPxDRoovVLDw65202305 = -174431487;    double UPxDRoovVLDw77106739 = -910292752;    double UPxDRoovVLDw39199005 = -499331827;    double UPxDRoovVLDw80925447 = -242878888;    double UPxDRoovVLDw45642006 = -387708344;    double UPxDRoovVLDw72451119 = -387820250;    double UPxDRoovVLDw32732474 = 53018600;    double UPxDRoovVLDw20533190 = -106433792;    double UPxDRoovVLDw42616599 = -182165516;    double UPxDRoovVLDw42529641 = -100168781;    double UPxDRoovVLDw2444539 = 82707391;    double UPxDRoovVLDw92991230 = -817489859;    double UPxDRoovVLDw11284733 = -119542872;    double UPxDRoovVLDw22967900 = -973639138;    double UPxDRoovVLDw28078088 = -406276931;    double UPxDRoovVLDw9286226 = -419466827;    double UPxDRoovVLDw46332492 = -532317567;    double UPxDRoovVLDw3596508 = -443210438;    double UPxDRoovVLDw38261263 = -531488567;    double UPxDRoovVLDw19618476 = -119686073;    double UPxDRoovVLDw81954587 = -119480993;    double UPxDRoovVLDw24678544 = -414817312;    double UPxDRoovVLDw89925458 = -270963058;     UPxDRoovVLDw90859728 = UPxDRoovVLDw26503662;     UPxDRoovVLDw26503662 = UPxDRoovVLDw15353581;     UPxDRoovVLDw15353581 = UPxDRoovVLDw46332976;     UPxDRoovVLDw46332976 = UPxDRoovVLDw15790383;     UPxDRoovVLDw15790383 = UPxDRoovVLDw33411684;     UPxDRoovVLDw33411684 = UPxDRoovVLDw49604865;     UPxDRoovVLDw49604865 = UPxDRoovVLDw1003577;     UPxDRoovVLDw1003577 = UPxDRoovVLDw62831135;     UPxDRoovVLDw62831135 = UPxDRoovVLDw28371674;     UPxDRoovVLDw28371674 = UPxDRoovVLDw43964329;     UPxDRoovVLDw43964329 = UPxDRoovVLDw99229527;     UPxDRoovVLDw99229527 = UPxDRoovVLDw86595746;     UPxDRoovVLDw86595746 = UPxDRoovVLDw68895090;     UPxDRoovVLDw68895090 = UPxDRoovVLDw79621293;     UPxDRoovVLDw79621293 = UPxDRoovVLDw30170195;     UPxDRoovVLDw30170195 = UPxDRoovVLDw22720560;     UPxDRoovVLDw22720560 = UPxDRoovVLDw75575628;     UPxDRoovVLDw75575628 = UPxDRoovVLDw52160492;     UPxDRoovVLDw52160492 = UPxDRoovVLDw68468198;     UPxDRoovVLDw68468198 = UPxDRoovVLDw65936490;     UPxDRoovVLDw65936490 = UPxDRoovVLDw48199789;     UPxDRoovVLDw48199789 = UPxDRoovVLDw15080175;     UPxDRoovVLDw15080175 = UPxDRoovVLDw28897847;     UPxDRoovVLDw28897847 = UPxDRoovVLDw81314353;     UPxDRoovVLDw81314353 = UPxDRoovVLDw75687027;     UPxDRoovVLDw75687027 = UPxDRoovVLDw58258860;     UPxDRoovVLDw58258860 = UPxDRoovVLDw38649716;     UPxDRoovVLDw38649716 = UPxDRoovVLDw87255933;     UPxDRoovVLDw87255933 = UPxDRoovVLDw23471622;     UPxDRoovVLDw23471622 = UPxDRoovVLDw3172349;     UPxDRoovVLDw3172349 = UPxDRoovVLDw82098679;     UPxDRoovVLDw82098679 = UPxDRoovVLDw23390266;     UPxDRoovVLDw23390266 = UPxDRoovVLDw51933951;     UPxDRoovVLDw51933951 = UPxDRoovVLDw53944671;     UPxDRoovVLDw53944671 = UPxDRoovVLDw34391387;     UPxDRoovVLDw34391387 = UPxDRoovVLDw14533822;     UPxDRoovVLDw14533822 = UPxDRoovVLDw74304848;     UPxDRoovVLDw74304848 = UPxDRoovVLDw86435848;     UPxDRoovVLDw86435848 = UPxDRoovVLDw78749330;     UPxDRoovVLDw78749330 = UPxDRoovVLDw49216412;     UPxDRoovVLDw49216412 = UPxDRoovVLDw33366119;     UPxDRoovVLDw33366119 = UPxDRoovVLDw21314101;     UPxDRoovVLDw21314101 = UPxDRoovVLDw49877869;     UPxDRoovVLDw49877869 = UPxDRoovVLDw51791107;     UPxDRoovVLDw51791107 = UPxDRoovVLDw42115348;     UPxDRoovVLDw42115348 = UPxDRoovVLDw94761579;     UPxDRoovVLDw94761579 = UPxDRoovVLDw12616855;     UPxDRoovVLDw12616855 = UPxDRoovVLDw66198597;     UPxDRoovVLDw66198597 = UPxDRoovVLDw54523460;     UPxDRoovVLDw54523460 = UPxDRoovVLDw2938433;     UPxDRoovVLDw2938433 = UPxDRoovVLDw60555750;     UPxDRoovVLDw60555750 = UPxDRoovVLDw39569039;     UPxDRoovVLDw39569039 = UPxDRoovVLDw20945727;     UPxDRoovVLDw20945727 = UPxDRoovVLDw58942720;     UPxDRoovVLDw58942720 = UPxDRoovVLDw42659939;     UPxDRoovVLDw42659939 = UPxDRoovVLDw11423488;     UPxDRoovVLDw11423488 = UPxDRoovVLDw86455734;     UPxDRoovVLDw86455734 = UPxDRoovVLDw65018623;     UPxDRoovVLDw65018623 = UPxDRoovVLDw40103356;     UPxDRoovVLDw40103356 = UPxDRoovVLDw75152823;     UPxDRoovVLDw75152823 = UPxDRoovVLDw10955150;     UPxDRoovVLDw10955150 = UPxDRoovVLDw13747644;     UPxDRoovVLDw13747644 = UPxDRoovVLDw39359513;     UPxDRoovVLDw39359513 = UPxDRoovVLDw25199325;     UPxDRoovVLDw25199325 = UPxDRoovVLDw61865649;     UPxDRoovVLDw61865649 = UPxDRoovVLDw75839262;     UPxDRoovVLDw75839262 = UPxDRoovVLDw34661795;     UPxDRoovVLDw34661795 = UPxDRoovVLDw14950420;     UPxDRoovVLDw14950420 = UPxDRoovVLDw45229906;     UPxDRoovVLDw45229906 = UPxDRoovVLDw15636373;     UPxDRoovVLDw15636373 = UPxDRoovVLDw48415711;     UPxDRoovVLDw48415711 = UPxDRoovVLDw89139780;     UPxDRoovVLDw89139780 = UPxDRoovVLDw73411161;     UPxDRoovVLDw73411161 = UPxDRoovVLDw19251787;     UPxDRoovVLDw19251787 = UPxDRoovVLDw32570371;     UPxDRoovVLDw32570371 = UPxDRoovVLDw26885689;     UPxDRoovVLDw26885689 = UPxDRoovVLDw65202305;     UPxDRoovVLDw65202305 = UPxDRoovVLDw77106739;     UPxDRoovVLDw77106739 = UPxDRoovVLDw39199005;     UPxDRoovVLDw39199005 = UPxDRoovVLDw80925447;     UPxDRoovVLDw80925447 = UPxDRoovVLDw45642006;     UPxDRoovVLDw45642006 = UPxDRoovVLDw72451119;     UPxDRoovVLDw72451119 = UPxDRoovVLDw32732474;     UPxDRoovVLDw32732474 = UPxDRoovVLDw20533190;     UPxDRoovVLDw20533190 = UPxDRoovVLDw42616599;     UPxDRoovVLDw42616599 = UPxDRoovVLDw42529641;     UPxDRoovVLDw42529641 = UPxDRoovVLDw2444539;     UPxDRoovVLDw2444539 = UPxDRoovVLDw92991230;     UPxDRoovVLDw92991230 = UPxDRoovVLDw11284733;     UPxDRoovVLDw11284733 = UPxDRoovVLDw22967900;     UPxDRoovVLDw22967900 = UPxDRoovVLDw28078088;     UPxDRoovVLDw28078088 = UPxDRoovVLDw9286226;     UPxDRoovVLDw9286226 = UPxDRoovVLDw46332492;     UPxDRoovVLDw46332492 = UPxDRoovVLDw3596508;     UPxDRoovVLDw3596508 = UPxDRoovVLDw38261263;     UPxDRoovVLDw38261263 = UPxDRoovVLDw19618476;     UPxDRoovVLDw19618476 = UPxDRoovVLDw81954587;     UPxDRoovVLDw81954587 = UPxDRoovVLDw24678544;     UPxDRoovVLDw24678544 = UPxDRoovVLDw89925458;     UPxDRoovVLDw89925458 = UPxDRoovVLDw90859728;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ELvaiBZxjR85181867() {     double VucMjawzKI80986036 = -329719259;    double VucMjawzKI9628727 = -713828539;    double VucMjawzKI10846280 = -62463682;    double VucMjawzKI19831551 = -955516222;    double VucMjawzKI28847119 = -513565488;    double VucMjawzKI14198088 = -292883176;    double VucMjawzKI44268303 = -951969810;    double VucMjawzKI53882140 = 91288917;    double VucMjawzKI86642822 = -989259297;    double VucMjawzKI32627344 = -279778678;    double VucMjawzKI20116148 = -234903413;    double VucMjawzKI33979036 = 28844866;    double VucMjawzKI24941879 = -109396917;    double VucMjawzKI7313945 = -714145087;    double VucMjawzKI77695664 = -834163951;    double VucMjawzKI54349937 = -375760886;    double VucMjawzKI66682740 = -837800908;    double VucMjawzKI96931341 = -551682421;    double VucMjawzKI13074883 = -159320877;    double VucMjawzKI35792446 = -739468320;    double VucMjawzKI53858892 = -491729000;    double VucMjawzKI46281372 = -525754675;    double VucMjawzKI48318592 = -948083716;    double VucMjawzKI36818944 = -307701816;    double VucMjawzKI28199541 = -298628876;    double VucMjawzKI94477992 = 87267400;    double VucMjawzKI80226195 = -329104654;    double VucMjawzKI61820091 = -589009886;    double VucMjawzKI48464931 = -994237854;    double VucMjawzKI71260702 = 16493371;    double VucMjawzKI6635752 = -84195699;    double VucMjawzKI81465593 = 93417699;    double VucMjawzKI32359307 = -854463779;    double VucMjawzKI75772596 = -32457069;    double VucMjawzKI89541205 = -948183552;    double VucMjawzKI87622393 = 26052879;    double VucMjawzKI14767391 = 11915385;    double VucMjawzKI98662131 = -299752539;    double VucMjawzKI96968865 = -775162793;    double VucMjawzKI23261472 = -178592619;    double VucMjawzKI62916085 = 77345647;    double VucMjawzKI88010582 = 25596176;    double VucMjawzKI81130941 = -367169010;    double VucMjawzKI80539809 = -131275497;    double VucMjawzKI43755525 = -61894645;    double VucMjawzKI62554342 = -639410011;    double VucMjawzKI75184870 = -342462478;    double VucMjawzKI3003314 = -108523570;    double VucMjawzKI94117250 = -477238924;    double VucMjawzKI83803865 = -642053744;    double VucMjawzKI32303956 = -277052491;    double VucMjawzKI4328858 = -539790473;    double VucMjawzKI89021494 = -17442095;    double VucMjawzKI73852789 = -660501293;    double VucMjawzKI31322976 = -352116324;    double VucMjawzKI34704665 = -803964585;    double VucMjawzKI61310134 = -765744823;    double VucMjawzKI74027335 = -754761866;    double VucMjawzKI91632009 = -556887346;    double VucMjawzKI34369127 = -500832888;    double VucMjawzKI33971893 = -963778523;    double VucMjawzKI82448212 = -262959925;    double VucMjawzKI5417210 = 85526771;    double VucMjawzKI15382121 = -905752668;    double VucMjawzKI25991593 = -95582979;    double VucMjawzKI38650554 = -228321113;    double VucMjawzKI1619730 = -116691355;    double VucMjawzKI49169283 = 23060151;    double VucMjawzKI17772739 = -765961536;    double VucMjawzKI90073271 = -760216830;    double VucMjawzKI39582546 = -287676271;    double VucMjawzKI68020608 = -438048370;    double VucMjawzKI99962476 = -776519628;    double VucMjawzKI89813410 = -980728259;    double VucMjawzKI72876361 = -716813968;    double VucMjawzKI65848310 = -417325176;    double VucMjawzKI65150430 = -58585665;    double VucMjawzKI67778783 = -716808219;    double VucMjawzKI93063419 = -145807172;    double VucMjawzKI65645199 = -659218865;    double VucMjawzKI19293122 = -570270123;    double VucMjawzKI77222882 = -120581085;    double VucMjawzKI67702840 = -11770962;    double VucMjawzKI64661065 = -252184111;    double VucMjawzKI38956746 = -706454138;    double VucMjawzKI2306895 = -544405226;    double VucMjawzKI92444099 = -889140206;    double VucMjawzKI58506518 = -93962487;    double VucMjawzKI44449621 = -680340746;    double VucMjawzKI54836540 = -44218967;    double VucMjawzKI26312260 = -208202298;    double VucMjawzKI40740055 = -233322750;    double VucMjawzKI7030123 = -742865193;    double VucMjawzKI62599739 = -174329905;    double VucMjawzKI89289579 = -214814097;    double VucMjawzKI80467873 = -659694428;    double VucMjawzKI82593373 = 40069405;    double VucMjawzKI65748821 = -461416342;    double VucMjawzKI54548217 = 64307481;    double VucMjawzKI5104971 = -329719259;     VucMjawzKI80986036 = VucMjawzKI9628727;     VucMjawzKI9628727 = VucMjawzKI10846280;     VucMjawzKI10846280 = VucMjawzKI19831551;     VucMjawzKI19831551 = VucMjawzKI28847119;     VucMjawzKI28847119 = VucMjawzKI14198088;     VucMjawzKI14198088 = VucMjawzKI44268303;     VucMjawzKI44268303 = VucMjawzKI53882140;     VucMjawzKI53882140 = VucMjawzKI86642822;     VucMjawzKI86642822 = VucMjawzKI32627344;     VucMjawzKI32627344 = VucMjawzKI20116148;     VucMjawzKI20116148 = VucMjawzKI33979036;     VucMjawzKI33979036 = VucMjawzKI24941879;     VucMjawzKI24941879 = VucMjawzKI7313945;     VucMjawzKI7313945 = VucMjawzKI77695664;     VucMjawzKI77695664 = VucMjawzKI54349937;     VucMjawzKI54349937 = VucMjawzKI66682740;     VucMjawzKI66682740 = VucMjawzKI96931341;     VucMjawzKI96931341 = VucMjawzKI13074883;     VucMjawzKI13074883 = VucMjawzKI35792446;     VucMjawzKI35792446 = VucMjawzKI53858892;     VucMjawzKI53858892 = VucMjawzKI46281372;     VucMjawzKI46281372 = VucMjawzKI48318592;     VucMjawzKI48318592 = VucMjawzKI36818944;     VucMjawzKI36818944 = VucMjawzKI28199541;     VucMjawzKI28199541 = VucMjawzKI94477992;     VucMjawzKI94477992 = VucMjawzKI80226195;     VucMjawzKI80226195 = VucMjawzKI61820091;     VucMjawzKI61820091 = VucMjawzKI48464931;     VucMjawzKI48464931 = VucMjawzKI71260702;     VucMjawzKI71260702 = VucMjawzKI6635752;     VucMjawzKI6635752 = VucMjawzKI81465593;     VucMjawzKI81465593 = VucMjawzKI32359307;     VucMjawzKI32359307 = VucMjawzKI75772596;     VucMjawzKI75772596 = VucMjawzKI89541205;     VucMjawzKI89541205 = VucMjawzKI87622393;     VucMjawzKI87622393 = VucMjawzKI14767391;     VucMjawzKI14767391 = VucMjawzKI98662131;     VucMjawzKI98662131 = VucMjawzKI96968865;     VucMjawzKI96968865 = VucMjawzKI23261472;     VucMjawzKI23261472 = VucMjawzKI62916085;     VucMjawzKI62916085 = VucMjawzKI88010582;     VucMjawzKI88010582 = VucMjawzKI81130941;     VucMjawzKI81130941 = VucMjawzKI80539809;     VucMjawzKI80539809 = VucMjawzKI43755525;     VucMjawzKI43755525 = VucMjawzKI62554342;     VucMjawzKI62554342 = VucMjawzKI75184870;     VucMjawzKI75184870 = VucMjawzKI3003314;     VucMjawzKI3003314 = VucMjawzKI94117250;     VucMjawzKI94117250 = VucMjawzKI83803865;     VucMjawzKI83803865 = VucMjawzKI32303956;     VucMjawzKI32303956 = VucMjawzKI4328858;     VucMjawzKI4328858 = VucMjawzKI89021494;     VucMjawzKI89021494 = VucMjawzKI73852789;     VucMjawzKI73852789 = VucMjawzKI31322976;     VucMjawzKI31322976 = VucMjawzKI34704665;     VucMjawzKI34704665 = VucMjawzKI61310134;     VucMjawzKI61310134 = VucMjawzKI74027335;     VucMjawzKI74027335 = VucMjawzKI91632009;     VucMjawzKI91632009 = VucMjawzKI34369127;     VucMjawzKI34369127 = VucMjawzKI33971893;     VucMjawzKI33971893 = VucMjawzKI82448212;     VucMjawzKI82448212 = VucMjawzKI5417210;     VucMjawzKI5417210 = VucMjawzKI15382121;     VucMjawzKI15382121 = VucMjawzKI25991593;     VucMjawzKI25991593 = VucMjawzKI38650554;     VucMjawzKI38650554 = VucMjawzKI1619730;     VucMjawzKI1619730 = VucMjawzKI49169283;     VucMjawzKI49169283 = VucMjawzKI17772739;     VucMjawzKI17772739 = VucMjawzKI90073271;     VucMjawzKI90073271 = VucMjawzKI39582546;     VucMjawzKI39582546 = VucMjawzKI68020608;     VucMjawzKI68020608 = VucMjawzKI99962476;     VucMjawzKI99962476 = VucMjawzKI89813410;     VucMjawzKI89813410 = VucMjawzKI72876361;     VucMjawzKI72876361 = VucMjawzKI65848310;     VucMjawzKI65848310 = VucMjawzKI65150430;     VucMjawzKI65150430 = VucMjawzKI67778783;     VucMjawzKI67778783 = VucMjawzKI93063419;     VucMjawzKI93063419 = VucMjawzKI65645199;     VucMjawzKI65645199 = VucMjawzKI19293122;     VucMjawzKI19293122 = VucMjawzKI77222882;     VucMjawzKI77222882 = VucMjawzKI67702840;     VucMjawzKI67702840 = VucMjawzKI64661065;     VucMjawzKI64661065 = VucMjawzKI38956746;     VucMjawzKI38956746 = VucMjawzKI2306895;     VucMjawzKI2306895 = VucMjawzKI92444099;     VucMjawzKI92444099 = VucMjawzKI58506518;     VucMjawzKI58506518 = VucMjawzKI44449621;     VucMjawzKI44449621 = VucMjawzKI54836540;     VucMjawzKI54836540 = VucMjawzKI26312260;     VucMjawzKI26312260 = VucMjawzKI40740055;     VucMjawzKI40740055 = VucMjawzKI7030123;     VucMjawzKI7030123 = VucMjawzKI62599739;     VucMjawzKI62599739 = VucMjawzKI89289579;     VucMjawzKI89289579 = VucMjawzKI80467873;     VucMjawzKI80467873 = VucMjawzKI82593373;     VucMjawzKI82593373 = VucMjawzKI65748821;     VucMjawzKI65748821 = VucMjawzKI54548217;     VucMjawzKI54548217 = VucMjawzKI5104971;     VucMjawzKI5104971 = VucMjawzKI80986036;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zCMknaBfGy33607559() {     double nMWDjLswzS69923995 = -912850648;    double nMWDjLswzS81033375 = -694935750;    double nMWDjLswzS69191960 = -751438758;    double nMWDjLswzS60855883 = -358529540;    double nMWDjLswzS27530125 = 978511;    double nMWDjLswzS56680878 = -148994510;    double nMWDjLswzS91795226 = 12551847;    double nMWDjLswzS17079094 = -720282686;    double nMWDjLswzS37331376 = -42230538;    double nMWDjLswzS89324912 = -656749052;    double nMWDjLswzS23482524 = -561015995;    double nMWDjLswzS37395343 = -585890953;    double nMWDjLswzS47721969 = -127696852;    double nMWDjLswzS35684970 = -62428276;    double nMWDjLswzS37455560 = -339653321;    double nMWDjLswzS93140098 = -943945841;    double nMWDjLswzS64643776 = -676446628;    double nMWDjLswzS64306711 = -228923952;    double nMWDjLswzS32237574 = -209234832;    double nMWDjLswzS28996609 = -371535119;    double nMWDjLswzS58853680 = -126537057;    double nMWDjLswzS31671471 = -596863130;    double nMWDjLswzS75445005 = -603493493;    double nMWDjLswzS11349754 = -160559669;    double nMWDjLswzS68495847 = -505555632;    double nMWDjLswzS74869395 = -957271555;    double nMWDjLswzS55527062 = -684206589;    double nMWDjLswzS54552559 = -214234697;    double nMWDjLswzS78785233 = -35542567;    double nMWDjLswzS46651943 = -247526174;    double nMWDjLswzS57890752 = -268074576;    double nMWDjLswzS64443250 = -387324896;    double nMWDjLswzS83948407 = 10606741;    double nMWDjLswzS93214900 = -947493048;    double nMWDjLswzS98812368 = 91239317;    double nMWDjLswzS49047221 = -286142902;    double nMWDjLswzS73548950 = -191923421;    double nMWDjLswzS14147661 = -455354500;    double nMWDjLswzS72767115 = -150822089;    double nMWDjLswzS72856721 = -544296890;    double nMWDjLswzS48916282 = -95240969;    double nMWDjLswzS15304434 = -403748256;    double nMWDjLswzS33326584 = -672990042;    double nMWDjLswzS7502913 = -40179708;    double nMWDjLswzS32807834 = -772825720;    double nMWDjLswzS61369604 = -936061686;    double nMWDjLswzS82240181 = -599528968;    double nMWDjLswzS59469078 = -597907859;    double nMWDjLswzS46723836 = -339176436;    double nMWDjLswzS10589195 = -267322212;    double nMWDjLswzS27860252 = -95143601;    double nMWDjLswzS83589763 = -923959755;    double nMWDjLswzS84809699 = -221646515;    double nMWDjLswzS67150278 = -791708603;    double nMWDjLswzS74753879 = 37991226;    double nMWDjLswzS38252524 = -215987518;    double nMWDjLswzS5588370 = 8557742;    double nMWDjLswzS57842206 = -490879090;    double nMWDjLswzS92360036 = -852973909;    double nMWDjLswzS52660730 = -41749935;    double nMWDjLswzS1153817 = -464787921;    double nMWDjLswzS37242667 = -773213457;    double nMWDjLswzS38293861 = -584740119;    double nMWDjLswzS90679433 = -794704364;    double nMWDjLswzS31434160 = -288674476;    double nMWDjLswzS59039273 = -73691099;    double nMWDjLswzS53446936 = -496497695;    double nMWDjLswzS54507068 = -180203804;    double nMWDjLswzS36872602 = -53667593;    double nMWDjLswzS88408339 = 46489580;    double nMWDjLswzS19591148 = -652022420;    double nMWDjLswzS50496116 = -121092129;    double nMWDjLswzS91539595 = 21898137;    double nMWDjLswzS59380853 = -664937942;    double nMWDjLswzS80080327 = -176294150;    double nMWDjLswzS43549247 = -722788802;    double nMWDjLswzS98344887 = -923873089;    double nMWDjLswzS67942093 = -463313785;    double nMWDjLswzS78541920 = -387733949;    double nMWDjLswzS7126243 = -569493946;    double nMWDjLswzS92629213 = -257742588;    double nMWDjLswzS96057983 = 13701270;    double nMWDjLswzS7828724 = -875058261;    double nMWDjLswzS68196038 = -768220355;    double nMWDjLswzS18791691 = -52382573;    double nMWDjLswzS74300989 = -344114822;    double nMWDjLswzS79633551 = -65678382;    double nMWDjLswzS16798130 = -197684657;    double nMWDjLswzS18461022 = -885484275;    double nMWDjLswzS60559844 = -692773165;    double nMWDjLswzS43458851 = -194700644;    double nMWDjLswzS15706744 = -701044331;    double nMWDjLswzS21787624 = -602380591;    double nMWDjLswzS20106386 = -9072154;    double nMWDjLswzS71702904 = 20491030;    double nMWDjLswzS11673616 = -322027513;    double nMWDjLswzS77010572 = -819008137;    double nMWDjLswzS42647150 = -878285678;    double nMWDjLswzS76068752 = -751505233;    double nMWDjLswzS73768561 = -912850648;     nMWDjLswzS69923995 = nMWDjLswzS81033375;     nMWDjLswzS81033375 = nMWDjLswzS69191960;     nMWDjLswzS69191960 = nMWDjLswzS60855883;     nMWDjLswzS60855883 = nMWDjLswzS27530125;     nMWDjLswzS27530125 = nMWDjLswzS56680878;     nMWDjLswzS56680878 = nMWDjLswzS91795226;     nMWDjLswzS91795226 = nMWDjLswzS17079094;     nMWDjLswzS17079094 = nMWDjLswzS37331376;     nMWDjLswzS37331376 = nMWDjLswzS89324912;     nMWDjLswzS89324912 = nMWDjLswzS23482524;     nMWDjLswzS23482524 = nMWDjLswzS37395343;     nMWDjLswzS37395343 = nMWDjLswzS47721969;     nMWDjLswzS47721969 = nMWDjLswzS35684970;     nMWDjLswzS35684970 = nMWDjLswzS37455560;     nMWDjLswzS37455560 = nMWDjLswzS93140098;     nMWDjLswzS93140098 = nMWDjLswzS64643776;     nMWDjLswzS64643776 = nMWDjLswzS64306711;     nMWDjLswzS64306711 = nMWDjLswzS32237574;     nMWDjLswzS32237574 = nMWDjLswzS28996609;     nMWDjLswzS28996609 = nMWDjLswzS58853680;     nMWDjLswzS58853680 = nMWDjLswzS31671471;     nMWDjLswzS31671471 = nMWDjLswzS75445005;     nMWDjLswzS75445005 = nMWDjLswzS11349754;     nMWDjLswzS11349754 = nMWDjLswzS68495847;     nMWDjLswzS68495847 = nMWDjLswzS74869395;     nMWDjLswzS74869395 = nMWDjLswzS55527062;     nMWDjLswzS55527062 = nMWDjLswzS54552559;     nMWDjLswzS54552559 = nMWDjLswzS78785233;     nMWDjLswzS78785233 = nMWDjLswzS46651943;     nMWDjLswzS46651943 = nMWDjLswzS57890752;     nMWDjLswzS57890752 = nMWDjLswzS64443250;     nMWDjLswzS64443250 = nMWDjLswzS83948407;     nMWDjLswzS83948407 = nMWDjLswzS93214900;     nMWDjLswzS93214900 = nMWDjLswzS98812368;     nMWDjLswzS98812368 = nMWDjLswzS49047221;     nMWDjLswzS49047221 = nMWDjLswzS73548950;     nMWDjLswzS73548950 = nMWDjLswzS14147661;     nMWDjLswzS14147661 = nMWDjLswzS72767115;     nMWDjLswzS72767115 = nMWDjLswzS72856721;     nMWDjLswzS72856721 = nMWDjLswzS48916282;     nMWDjLswzS48916282 = nMWDjLswzS15304434;     nMWDjLswzS15304434 = nMWDjLswzS33326584;     nMWDjLswzS33326584 = nMWDjLswzS7502913;     nMWDjLswzS7502913 = nMWDjLswzS32807834;     nMWDjLswzS32807834 = nMWDjLswzS61369604;     nMWDjLswzS61369604 = nMWDjLswzS82240181;     nMWDjLswzS82240181 = nMWDjLswzS59469078;     nMWDjLswzS59469078 = nMWDjLswzS46723836;     nMWDjLswzS46723836 = nMWDjLswzS10589195;     nMWDjLswzS10589195 = nMWDjLswzS27860252;     nMWDjLswzS27860252 = nMWDjLswzS83589763;     nMWDjLswzS83589763 = nMWDjLswzS84809699;     nMWDjLswzS84809699 = nMWDjLswzS67150278;     nMWDjLswzS67150278 = nMWDjLswzS74753879;     nMWDjLswzS74753879 = nMWDjLswzS38252524;     nMWDjLswzS38252524 = nMWDjLswzS5588370;     nMWDjLswzS5588370 = nMWDjLswzS57842206;     nMWDjLswzS57842206 = nMWDjLswzS92360036;     nMWDjLswzS92360036 = nMWDjLswzS52660730;     nMWDjLswzS52660730 = nMWDjLswzS1153817;     nMWDjLswzS1153817 = nMWDjLswzS37242667;     nMWDjLswzS37242667 = nMWDjLswzS38293861;     nMWDjLswzS38293861 = nMWDjLswzS90679433;     nMWDjLswzS90679433 = nMWDjLswzS31434160;     nMWDjLswzS31434160 = nMWDjLswzS59039273;     nMWDjLswzS59039273 = nMWDjLswzS53446936;     nMWDjLswzS53446936 = nMWDjLswzS54507068;     nMWDjLswzS54507068 = nMWDjLswzS36872602;     nMWDjLswzS36872602 = nMWDjLswzS88408339;     nMWDjLswzS88408339 = nMWDjLswzS19591148;     nMWDjLswzS19591148 = nMWDjLswzS50496116;     nMWDjLswzS50496116 = nMWDjLswzS91539595;     nMWDjLswzS91539595 = nMWDjLswzS59380853;     nMWDjLswzS59380853 = nMWDjLswzS80080327;     nMWDjLswzS80080327 = nMWDjLswzS43549247;     nMWDjLswzS43549247 = nMWDjLswzS98344887;     nMWDjLswzS98344887 = nMWDjLswzS67942093;     nMWDjLswzS67942093 = nMWDjLswzS78541920;     nMWDjLswzS78541920 = nMWDjLswzS7126243;     nMWDjLswzS7126243 = nMWDjLswzS92629213;     nMWDjLswzS92629213 = nMWDjLswzS96057983;     nMWDjLswzS96057983 = nMWDjLswzS7828724;     nMWDjLswzS7828724 = nMWDjLswzS68196038;     nMWDjLswzS68196038 = nMWDjLswzS18791691;     nMWDjLswzS18791691 = nMWDjLswzS74300989;     nMWDjLswzS74300989 = nMWDjLswzS79633551;     nMWDjLswzS79633551 = nMWDjLswzS16798130;     nMWDjLswzS16798130 = nMWDjLswzS18461022;     nMWDjLswzS18461022 = nMWDjLswzS60559844;     nMWDjLswzS60559844 = nMWDjLswzS43458851;     nMWDjLswzS43458851 = nMWDjLswzS15706744;     nMWDjLswzS15706744 = nMWDjLswzS21787624;     nMWDjLswzS21787624 = nMWDjLswzS20106386;     nMWDjLswzS20106386 = nMWDjLswzS71702904;     nMWDjLswzS71702904 = nMWDjLswzS11673616;     nMWDjLswzS11673616 = nMWDjLswzS77010572;     nMWDjLswzS77010572 = nMWDjLswzS42647150;     nMWDjLswzS42647150 = nMWDjLswzS76068752;     nMWDjLswzS76068752 = nMWDjLswzS73768561;     nMWDjLswzS73768561 = nMWDjLswzS69923995;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void FJQgFBJXRQ93910216() {     double tEtgdSoiga60050303 = -971606849;    double tEtgdSoiga64158440 = 30138080;    double tEtgdSoiga64684659 = -888233219;    double tEtgdSoiga34354458 = -544701362;    double tEtgdSoiga40586861 = 59655069;    double tEtgdSoiga37467283 = -41627618;    double tEtgdSoiga86458664 = -724993626;    double tEtgdSoiga69957657 = -356730424;    double tEtgdSoiga61143064 = -50123175;    double tEtgdSoiga93580582 = -226623577;    double tEtgdSoiga99634342 = 30563847;    double tEtgdSoiga72144850 = -65479088;    double tEtgdSoiga86068101 = -439932712;    double tEtgdSoiga74103823 = -60589160;    double tEtgdSoiga35529932 = -824774264;    double tEtgdSoiga17319840 = -644325711;    double tEtgdSoiga8605957 = -937791870;    double tEtgdSoiga85662423 = -671773244;    double tEtgdSoiga93151964 = -675645268;    double tEtgdSoiga96320857 = 80586571;    double tEtgdSoiga46776083 = -930962150;    double tEtgdSoiga29753053 = -929959766;    double tEtgdSoiga8683424 = 90046586;    double tEtgdSoiga19270852 = -608584044;    double tEtgdSoiga15381035 = -49066576;    double tEtgdSoiga93660360 = -833145290;    double tEtgdSoiga77494397 = -443735583;    double tEtgdSoiga77722934 = -274124755;    double tEtgdSoiga39994231 = -797741615;    double tEtgdSoiga94441022 = -121928566;    double tEtgdSoiga61354155 = -594741120;    double tEtgdSoiga63810164 = -888149316;    double tEtgdSoiga92917448 = -289618418;    double tEtgdSoiga17053546 = -938944206;    double tEtgdSoiga34408903 = -659096344;    double tEtgdSoiga2278228 = -589172312;    double tEtgdSoiga73782519 = -807739325;    double tEtgdSoiga38504944 = -321413744;    double tEtgdSoiga83300132 = -958284135;    double tEtgdSoiga17368863 = -449004663;    double tEtgdSoiga62615955 = -901102245;    double tEtgdSoiga69948896 = -218241469;    double tEtgdSoiga93143425 = -48415637;    double tEtgdSoiga38164854 = 95737103;    double tEtgdSoiga24772252 = -885335676;    double tEtgdSoiga81808597 = -319685591;    double tEtgdSoiga62663472 = -148011467;    double tEtgdSoiga49855537 = -624564112;    double tEtgdSoiga74642489 = -775115783;    double tEtgdSoiga39869600 = -724318549;    double tEtgdSoiga57225775 = -469525646;    double tEtgdSoiga27362871 = -888386588;    double tEtgdSoiga34262155 = 66500490;    double tEtgdSoiga20057341 = -915263884;    double tEtgdSoiga47134134 = -90609046;    double tEtgdSoiga30297251 = 58352917;    double tEtgdSoiga55475017 = 40091493;    double tEtgdSoiga45413808 = -179649175;    double tEtgdSoiga18973423 = -395634787;    double tEtgdSoiga46926501 = -107199642;    double tEtgdSoiga59972886 = -597892035;    double tEtgdSoiga8735730 = -350868872;    double tEtgdSoiga29963427 = -558988810;    double tEtgdSoiga66702041 = -928194610;    double tEtgdSoiga32226428 = -631882458;    double tEtgdSoiga35824178 = -81286837;    double tEtgdSoiga79227402 = -775860670;    double tEtgdSoiga69014556 = -500988506;    double tEtgdSoiga39694921 = -401492817;    double tEtgdSoiga33251704 = -135601953;    double tEtgdSoiga43537321 = -836586386;    double tEtgdSoiga70101013 = -516378127;    double tEtgdSoiga2362291 = -713489110;    double tEtgdSoiga75783102 = -126640605;    double tEtgdSoiga33704902 = -18311185;    double tEtgdSoiga76827186 = -612720681;    double tEtgdSoiga36609628 = -781544129;    double tEtgdSoiga70518570 = 94309483;    double tEtgdSoiga94498600 = -723248369;    double tEtgdSoiga33572437 = -729380985;    double tEtgdSoiga30996888 = -585133823;    double tEtgdSoiga27638860 = -819171471;    double tEtgdSoiga3080445 = -499008973;    double tEtgdSoiga124631 = 26576934;    double tEtgdSoiga37215247 = -652402920;    double tEtgdSoiga33991285 = -706354533;    double tEtgdSoiga29548010 = -854649806;    double tEtgdSoiga72860108 = -374354535;    double tEtgdSoiga69919411 = -748335161;    double tEtgdSoiga4111652 = -617449261;    double tEtgdSoiga46803211 = -529263805;    double tEtgdSoiga28368711 = -528090150;    double tEtgdSoiga19531521 = -925778957;    double tEtgdSoiga36373632 = -751084493;    double tEtgdSoiga57395976 = -851112629;    double tEtgdSoiga53880226 = -450233374;    double tEtgdSoiga39985470 = -659252660;    double tEtgdSoiga26441384 = -120221027;    double tEtgdSoiga5938427 = -272380440;    double tEtgdSoiga88948073 = -971606849;     tEtgdSoiga60050303 = tEtgdSoiga64158440;     tEtgdSoiga64158440 = tEtgdSoiga64684659;     tEtgdSoiga64684659 = tEtgdSoiga34354458;     tEtgdSoiga34354458 = tEtgdSoiga40586861;     tEtgdSoiga40586861 = tEtgdSoiga37467283;     tEtgdSoiga37467283 = tEtgdSoiga86458664;     tEtgdSoiga86458664 = tEtgdSoiga69957657;     tEtgdSoiga69957657 = tEtgdSoiga61143064;     tEtgdSoiga61143064 = tEtgdSoiga93580582;     tEtgdSoiga93580582 = tEtgdSoiga99634342;     tEtgdSoiga99634342 = tEtgdSoiga72144850;     tEtgdSoiga72144850 = tEtgdSoiga86068101;     tEtgdSoiga86068101 = tEtgdSoiga74103823;     tEtgdSoiga74103823 = tEtgdSoiga35529932;     tEtgdSoiga35529932 = tEtgdSoiga17319840;     tEtgdSoiga17319840 = tEtgdSoiga8605957;     tEtgdSoiga8605957 = tEtgdSoiga85662423;     tEtgdSoiga85662423 = tEtgdSoiga93151964;     tEtgdSoiga93151964 = tEtgdSoiga96320857;     tEtgdSoiga96320857 = tEtgdSoiga46776083;     tEtgdSoiga46776083 = tEtgdSoiga29753053;     tEtgdSoiga29753053 = tEtgdSoiga8683424;     tEtgdSoiga8683424 = tEtgdSoiga19270852;     tEtgdSoiga19270852 = tEtgdSoiga15381035;     tEtgdSoiga15381035 = tEtgdSoiga93660360;     tEtgdSoiga93660360 = tEtgdSoiga77494397;     tEtgdSoiga77494397 = tEtgdSoiga77722934;     tEtgdSoiga77722934 = tEtgdSoiga39994231;     tEtgdSoiga39994231 = tEtgdSoiga94441022;     tEtgdSoiga94441022 = tEtgdSoiga61354155;     tEtgdSoiga61354155 = tEtgdSoiga63810164;     tEtgdSoiga63810164 = tEtgdSoiga92917448;     tEtgdSoiga92917448 = tEtgdSoiga17053546;     tEtgdSoiga17053546 = tEtgdSoiga34408903;     tEtgdSoiga34408903 = tEtgdSoiga2278228;     tEtgdSoiga2278228 = tEtgdSoiga73782519;     tEtgdSoiga73782519 = tEtgdSoiga38504944;     tEtgdSoiga38504944 = tEtgdSoiga83300132;     tEtgdSoiga83300132 = tEtgdSoiga17368863;     tEtgdSoiga17368863 = tEtgdSoiga62615955;     tEtgdSoiga62615955 = tEtgdSoiga69948896;     tEtgdSoiga69948896 = tEtgdSoiga93143425;     tEtgdSoiga93143425 = tEtgdSoiga38164854;     tEtgdSoiga38164854 = tEtgdSoiga24772252;     tEtgdSoiga24772252 = tEtgdSoiga81808597;     tEtgdSoiga81808597 = tEtgdSoiga62663472;     tEtgdSoiga62663472 = tEtgdSoiga49855537;     tEtgdSoiga49855537 = tEtgdSoiga74642489;     tEtgdSoiga74642489 = tEtgdSoiga39869600;     tEtgdSoiga39869600 = tEtgdSoiga57225775;     tEtgdSoiga57225775 = tEtgdSoiga27362871;     tEtgdSoiga27362871 = tEtgdSoiga34262155;     tEtgdSoiga34262155 = tEtgdSoiga20057341;     tEtgdSoiga20057341 = tEtgdSoiga47134134;     tEtgdSoiga47134134 = tEtgdSoiga30297251;     tEtgdSoiga30297251 = tEtgdSoiga55475017;     tEtgdSoiga55475017 = tEtgdSoiga45413808;     tEtgdSoiga45413808 = tEtgdSoiga18973423;     tEtgdSoiga18973423 = tEtgdSoiga46926501;     tEtgdSoiga46926501 = tEtgdSoiga59972886;     tEtgdSoiga59972886 = tEtgdSoiga8735730;     tEtgdSoiga8735730 = tEtgdSoiga29963427;     tEtgdSoiga29963427 = tEtgdSoiga66702041;     tEtgdSoiga66702041 = tEtgdSoiga32226428;     tEtgdSoiga32226428 = tEtgdSoiga35824178;     tEtgdSoiga35824178 = tEtgdSoiga79227402;     tEtgdSoiga79227402 = tEtgdSoiga69014556;     tEtgdSoiga69014556 = tEtgdSoiga39694921;     tEtgdSoiga39694921 = tEtgdSoiga33251704;     tEtgdSoiga33251704 = tEtgdSoiga43537321;     tEtgdSoiga43537321 = tEtgdSoiga70101013;     tEtgdSoiga70101013 = tEtgdSoiga2362291;     tEtgdSoiga2362291 = tEtgdSoiga75783102;     tEtgdSoiga75783102 = tEtgdSoiga33704902;     tEtgdSoiga33704902 = tEtgdSoiga76827186;     tEtgdSoiga76827186 = tEtgdSoiga36609628;     tEtgdSoiga36609628 = tEtgdSoiga70518570;     tEtgdSoiga70518570 = tEtgdSoiga94498600;     tEtgdSoiga94498600 = tEtgdSoiga33572437;     tEtgdSoiga33572437 = tEtgdSoiga30996888;     tEtgdSoiga30996888 = tEtgdSoiga27638860;     tEtgdSoiga27638860 = tEtgdSoiga3080445;     tEtgdSoiga3080445 = tEtgdSoiga124631;     tEtgdSoiga124631 = tEtgdSoiga37215247;     tEtgdSoiga37215247 = tEtgdSoiga33991285;     tEtgdSoiga33991285 = tEtgdSoiga29548010;     tEtgdSoiga29548010 = tEtgdSoiga72860108;     tEtgdSoiga72860108 = tEtgdSoiga69919411;     tEtgdSoiga69919411 = tEtgdSoiga4111652;     tEtgdSoiga4111652 = tEtgdSoiga46803211;     tEtgdSoiga46803211 = tEtgdSoiga28368711;     tEtgdSoiga28368711 = tEtgdSoiga19531521;     tEtgdSoiga19531521 = tEtgdSoiga36373632;     tEtgdSoiga36373632 = tEtgdSoiga57395976;     tEtgdSoiga57395976 = tEtgdSoiga53880226;     tEtgdSoiga53880226 = tEtgdSoiga39985470;     tEtgdSoiga39985470 = tEtgdSoiga26441384;     tEtgdSoiga26441384 = tEtgdSoiga5938427;     tEtgdSoiga5938427 = tEtgdSoiga88948073;     tEtgdSoiga88948073 = tEtgdSoiga60050303;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QHqqEWKbrp6455406() {     double VRGwlhwfAg79518474 = -284738060;    double VRGwlhwfAg17182304 = -515739916;    double VRGwlhwfAg81521651 = -539861834;    double VRGwlhwfAg53001606 = -361275625;    double VRGwlhwfAg41033377 = -566617347;    double VRGwlhwfAg63059357 = 67887614;    double VRGwlhwfAg31290543 = -68299856;    double VRGwlhwfAg35207891 = -450538390;    double VRGwlhwfAg21829861 = -778314554;    double VRGwlhwfAg71509305 = -232209623;    double VRGwlhwfAg53857606 = -402426453;    double VRGwlhwfAg75639464 = -64781793;    double VRGwlhwfAg76439760 = -864289989;    double VRGwlhwfAg82519863 = -602874886;    double VRGwlhwfAg96056393 = -22858055;    double VRGwlhwfAg83535489 = -7517645;    double VRGwlhwfAg14568070 = -9566551;    double VRGwlhwfAg9725175 = -422527962;    double VRGwlhwfAg92786844 = 47149972;    double VRGwlhwfAg76932159 = -636949885;    double VRGwlhwfAg59232155 = -437174475;    double VRGwlhwfAg44735136 = -341762979;    double VRGwlhwfAg76856429 = -207528032;    double VRGwlhwfAg36992520 = -245128036;    double VRGwlhwfAg26584524 = -343366685;    double VRGwlhwfAg98427821 = -518940508;    double VRGwlhwfAg61422528 = -108886515;    double VRGwlhwfAg28514610 = -437858034;    double VRGwlhwfAg81739187 = -811652761;    double VRGwlhwfAg79147876 = -213367260;    double VRGwlhwfAg91158240 = -460067213;    double VRGwlhwfAg3389476 = -352498334;    double VRGwlhwfAg4393552 = -844826185;    double VRGwlhwfAg75810052 = -143547413;    double VRGwlhwfAg74339238 = -721799150;    double VRGwlhwfAg38344165 = -892740920;    double VRGwlhwfAg42165970 = -234615400;    double VRGwlhwfAg79987417 = -398622559;    double VRGwlhwfAg50613458 = -322698960;    double VRGwlhwfAg38650599 = -445535760;    double VRGwlhwfAg4098013 = -310888540;    double VRGwlhwfAg81808029 = -457137695;    double VRGwlhwfAg64276666 = 3782565;    double VRGwlhwfAg21550393 = -353335558;    double VRGwlhwfAg4800663 = -62458639;    double VRGwlhwfAg36269725 = -857017013;    double VRGwlhwfAg44653352 = -61704790;    double VRGwlhwfAg50011367 = -807851427;    double VRGwlhwfAg15778081 = -789055021;    double VRGwlhwfAg80767942 = -485330894;    double VRGwlhwfAg31661345 = -875890577;    double VRGwlhwfAg43811731 = -165739447;    double VRGwlhwfAg4087302 = -709608471;    double VRGwlhwfAg92987369 = -909857521;    double VRGwlhwfAg47223251 = -965167681;    double VRGwlhwfAg34783338 = -942975082;    double VRGwlhwfAg40325874 = -208211885;    double VRGwlhwfAg44529131 = -194733798;    double VRGwlhwfAg26417083 = 82091059;    double VRGwlhwfAg42605556 = 52323160;    double VRGwlhwfAg1636830 = -823225872;    double VRGwlhwfAg2775934 = -630441823;    double VRGwlhwfAg53468703 = -638885630;    double VRGwlhwfAg42681984 = -464947295;    double VRGwlhwfAg80351065 = -772142411;    double VRGwlhwfAg50468131 = 50071881;    double VRGwlhwfAg71245912 = -219955609;    double VRGwlhwfAg629709 = -620742577;    double VRGwlhwfAg8180625 = -881075737;    double VRGwlhwfAg57712228 = -130117136;    double VRGwlhwfAg41369520 = -772902245;    double VRGwlhwfAg34580652 = -610943992;    double VRGwlhwfAg59111717 = 170997;    double VRGwlhwfAg54136246 = -507314269;    double VRGwlhwfAg72834146 = -226061345;    double VRGwlhwfAg77424125 = -980036781;    double VRGwlhwfAg80458470 = -245545545;    double VRGwlhwfAg55306037 = -854192475;    double VRGwlhwfAg32191858 = -82669397;    double VRGwlhwfAg90314799 = -486349673;    double VRGwlhwfAg53774469 = -357235718;    double VRGwlhwfAg11411161 = -301035088;    double VRGwlhwfAg12736529 = -648803013;    double VRGwlhwfAg971245 = -226321867;    double VRGwlhwfAg47486532 = -337476683;    double VRGwlhwfAg47346510 = -194327766;    double VRGwlhwfAg99302174 = -642889864;    double VRGwlhwfAg11406183 = -934968665;    double VRGwlhwfAg28586802 = -178379732;    double VRGwlhwfAg39555901 = -778824068;    double VRGwlhwfAg98018290 = -584529036;    double VRGwlhwfAg97636838 = 60118398;    double VRGwlhwfAg53570335 = -380713619;    double VRGwlhwfAg8007903 = -275022121;    double VRGwlhwfAg37013769 = -622309889;    double VRGwlhwfAg1322080 = -680446718;    double VRGwlhwfAg28339327 = -818252065;    double VRGwlhwfAg21594682 = -531270140;    double VRGwlhwfAg41199327 = -581193147;    double VRGwlhwfAg54332531 = -284738060;     VRGwlhwfAg79518474 = VRGwlhwfAg17182304;     VRGwlhwfAg17182304 = VRGwlhwfAg81521651;     VRGwlhwfAg81521651 = VRGwlhwfAg53001606;     VRGwlhwfAg53001606 = VRGwlhwfAg41033377;     VRGwlhwfAg41033377 = VRGwlhwfAg63059357;     VRGwlhwfAg63059357 = VRGwlhwfAg31290543;     VRGwlhwfAg31290543 = VRGwlhwfAg35207891;     VRGwlhwfAg35207891 = VRGwlhwfAg21829861;     VRGwlhwfAg21829861 = VRGwlhwfAg71509305;     VRGwlhwfAg71509305 = VRGwlhwfAg53857606;     VRGwlhwfAg53857606 = VRGwlhwfAg75639464;     VRGwlhwfAg75639464 = VRGwlhwfAg76439760;     VRGwlhwfAg76439760 = VRGwlhwfAg82519863;     VRGwlhwfAg82519863 = VRGwlhwfAg96056393;     VRGwlhwfAg96056393 = VRGwlhwfAg83535489;     VRGwlhwfAg83535489 = VRGwlhwfAg14568070;     VRGwlhwfAg14568070 = VRGwlhwfAg9725175;     VRGwlhwfAg9725175 = VRGwlhwfAg92786844;     VRGwlhwfAg92786844 = VRGwlhwfAg76932159;     VRGwlhwfAg76932159 = VRGwlhwfAg59232155;     VRGwlhwfAg59232155 = VRGwlhwfAg44735136;     VRGwlhwfAg44735136 = VRGwlhwfAg76856429;     VRGwlhwfAg76856429 = VRGwlhwfAg36992520;     VRGwlhwfAg36992520 = VRGwlhwfAg26584524;     VRGwlhwfAg26584524 = VRGwlhwfAg98427821;     VRGwlhwfAg98427821 = VRGwlhwfAg61422528;     VRGwlhwfAg61422528 = VRGwlhwfAg28514610;     VRGwlhwfAg28514610 = VRGwlhwfAg81739187;     VRGwlhwfAg81739187 = VRGwlhwfAg79147876;     VRGwlhwfAg79147876 = VRGwlhwfAg91158240;     VRGwlhwfAg91158240 = VRGwlhwfAg3389476;     VRGwlhwfAg3389476 = VRGwlhwfAg4393552;     VRGwlhwfAg4393552 = VRGwlhwfAg75810052;     VRGwlhwfAg75810052 = VRGwlhwfAg74339238;     VRGwlhwfAg74339238 = VRGwlhwfAg38344165;     VRGwlhwfAg38344165 = VRGwlhwfAg42165970;     VRGwlhwfAg42165970 = VRGwlhwfAg79987417;     VRGwlhwfAg79987417 = VRGwlhwfAg50613458;     VRGwlhwfAg50613458 = VRGwlhwfAg38650599;     VRGwlhwfAg38650599 = VRGwlhwfAg4098013;     VRGwlhwfAg4098013 = VRGwlhwfAg81808029;     VRGwlhwfAg81808029 = VRGwlhwfAg64276666;     VRGwlhwfAg64276666 = VRGwlhwfAg21550393;     VRGwlhwfAg21550393 = VRGwlhwfAg4800663;     VRGwlhwfAg4800663 = VRGwlhwfAg36269725;     VRGwlhwfAg36269725 = VRGwlhwfAg44653352;     VRGwlhwfAg44653352 = VRGwlhwfAg50011367;     VRGwlhwfAg50011367 = VRGwlhwfAg15778081;     VRGwlhwfAg15778081 = VRGwlhwfAg80767942;     VRGwlhwfAg80767942 = VRGwlhwfAg31661345;     VRGwlhwfAg31661345 = VRGwlhwfAg43811731;     VRGwlhwfAg43811731 = VRGwlhwfAg4087302;     VRGwlhwfAg4087302 = VRGwlhwfAg92987369;     VRGwlhwfAg92987369 = VRGwlhwfAg47223251;     VRGwlhwfAg47223251 = VRGwlhwfAg34783338;     VRGwlhwfAg34783338 = VRGwlhwfAg40325874;     VRGwlhwfAg40325874 = VRGwlhwfAg44529131;     VRGwlhwfAg44529131 = VRGwlhwfAg26417083;     VRGwlhwfAg26417083 = VRGwlhwfAg42605556;     VRGwlhwfAg42605556 = VRGwlhwfAg1636830;     VRGwlhwfAg1636830 = VRGwlhwfAg2775934;     VRGwlhwfAg2775934 = VRGwlhwfAg53468703;     VRGwlhwfAg53468703 = VRGwlhwfAg42681984;     VRGwlhwfAg42681984 = VRGwlhwfAg80351065;     VRGwlhwfAg80351065 = VRGwlhwfAg50468131;     VRGwlhwfAg50468131 = VRGwlhwfAg71245912;     VRGwlhwfAg71245912 = VRGwlhwfAg629709;     VRGwlhwfAg629709 = VRGwlhwfAg8180625;     VRGwlhwfAg8180625 = VRGwlhwfAg57712228;     VRGwlhwfAg57712228 = VRGwlhwfAg41369520;     VRGwlhwfAg41369520 = VRGwlhwfAg34580652;     VRGwlhwfAg34580652 = VRGwlhwfAg59111717;     VRGwlhwfAg59111717 = VRGwlhwfAg54136246;     VRGwlhwfAg54136246 = VRGwlhwfAg72834146;     VRGwlhwfAg72834146 = VRGwlhwfAg77424125;     VRGwlhwfAg77424125 = VRGwlhwfAg80458470;     VRGwlhwfAg80458470 = VRGwlhwfAg55306037;     VRGwlhwfAg55306037 = VRGwlhwfAg32191858;     VRGwlhwfAg32191858 = VRGwlhwfAg90314799;     VRGwlhwfAg90314799 = VRGwlhwfAg53774469;     VRGwlhwfAg53774469 = VRGwlhwfAg11411161;     VRGwlhwfAg11411161 = VRGwlhwfAg12736529;     VRGwlhwfAg12736529 = VRGwlhwfAg971245;     VRGwlhwfAg971245 = VRGwlhwfAg47486532;     VRGwlhwfAg47486532 = VRGwlhwfAg47346510;     VRGwlhwfAg47346510 = VRGwlhwfAg99302174;     VRGwlhwfAg99302174 = VRGwlhwfAg11406183;     VRGwlhwfAg11406183 = VRGwlhwfAg28586802;     VRGwlhwfAg28586802 = VRGwlhwfAg39555901;     VRGwlhwfAg39555901 = VRGwlhwfAg98018290;     VRGwlhwfAg98018290 = VRGwlhwfAg97636838;     VRGwlhwfAg97636838 = VRGwlhwfAg53570335;     VRGwlhwfAg53570335 = VRGwlhwfAg8007903;     VRGwlhwfAg8007903 = VRGwlhwfAg37013769;     VRGwlhwfAg37013769 = VRGwlhwfAg1322080;     VRGwlhwfAg1322080 = VRGwlhwfAg28339327;     VRGwlhwfAg28339327 = VRGwlhwfAg21594682;     VRGwlhwfAg21594682 = VRGwlhwfAg41199327;     VRGwlhwfAg41199327 = VRGwlhwfAg54332531;     VRGwlhwfAg54332531 = VRGwlhwfAg79518474;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gqzBhRwKpo66758063() {     double wuzDMFSOUT69644782 = -343494261;    double wuzDMFSOUT307369 = -890666087;    double wuzDMFSOUT77014350 = -676656295;    double wuzDMFSOUT26500181 = -547447447;    double wuzDMFSOUT54090113 = -507940789;    double wuzDMFSOUT43845762 = -924745494;    double wuzDMFSOUT25953981 = -805845329;    double wuzDMFSOUT88086453 = -86986129;    double wuzDMFSOUT45641549 = -786207192;    double wuzDMFSOUT75764976 = -902084148;    double wuzDMFSOUT30009426 = -910846610;    double wuzDMFSOUT10388972 = -644369928;    double wuzDMFSOUT14785893 = -76525849;    double wuzDMFSOUT20938717 = -601035770;    double wuzDMFSOUT94130764 = -507978998;    double wuzDMFSOUT7715232 = -807897515;    double wuzDMFSOUT58530250 = -270911793;    double wuzDMFSOUT31080888 = -865377254;    double wuzDMFSOUT53701235 = -419260464;    double wuzDMFSOUT44256407 = -184828195;    double wuzDMFSOUT47154557 = -141599568;    double wuzDMFSOUT42816718 = -674859614;    double wuzDMFSOUT10094848 = -613987953;    double wuzDMFSOUT44913617 = -693152412;    double wuzDMFSOUT73469712 = -986877629;    double wuzDMFSOUT17218787 = -394814243;    double wuzDMFSOUT83389862 = -968415508;    double wuzDMFSOUT51684985 = -497748092;    double wuzDMFSOUT42948185 = -473851809;    double wuzDMFSOUT26936957 = -87769651;    double wuzDMFSOUT94621642 = -786733757;    double wuzDMFSOUT2756390 = -853322754;    double wuzDMFSOUT13362593 = -45051345;    double wuzDMFSOUT99648697 = -134998571;    double wuzDMFSOUT9935773 = -372134810;    double wuzDMFSOUT91575171 = -95770330;    double wuzDMFSOUT42399539 = -850431304;    double wuzDMFSOUT4344701 = -264681803;    double wuzDMFSOUT61146475 = -30161005;    double wuzDMFSOUT83162740 = -350243533;    double wuzDMFSOUT17797686 = -16749816;    double wuzDMFSOUT36452493 = -271630908;    double wuzDMFSOUT24093508 = -471643030;    double wuzDMFSOUT52212333 = -217418746;    double wuzDMFSOUT96765079 = -174968595;    double wuzDMFSOUT56708719 = -240640918;    double wuzDMFSOUT25076643 = -710187290;    double wuzDMFSOUT40397826 = -834507680;    double wuzDMFSOUT43696735 = -124994368;    double wuzDMFSOUT10048349 = -942327232;    double wuzDMFSOUT61026868 = -150272622;    double wuzDMFSOUT87584837 = -130166280;    double wuzDMFSOUT53539756 = -421461466;    double wuzDMFSOUT45894431 = 66587198;    double wuzDMFSOUT19603506 = 6232048;    double wuzDMFSOUT26828065 = -668634648;    double wuzDMFSOUT90212521 = -176678134;    double wuzDMFSOUT32100733 = -983503884;    double wuzDMFSOUT53030469 = -560569819;    double wuzDMFSOUT36871326 = -13126547;    double wuzDMFSOUT60455899 = -956329986;    double wuzDMFSOUT74268996 = -208097237;    double wuzDMFSOUT45138269 = -613134320;    double wuzDMFSOUT18704592 = -598437541;    double wuzDMFSOUT81143333 = -15350392;    double wuzDMFSOUT27253036 = 42476143;    double wuzDMFSOUT97026378 = -499318584;    double wuzDMFSOUT15137196 = -941527279;    double wuzDMFSOUT11002944 = -128900960;    double wuzDMFSOUT2555594 = -312208668;    double wuzDMFSOUT65315693 = -957466211;    double wuzDMFSOUT54185549 = 93770010;    double wuzDMFSOUT69934413 = -735216249;    double wuzDMFSOUT70538495 = 30983069;    double wuzDMFSOUT26458722 = -68078379;    double wuzDMFSOUT10702065 = -869968660;    double wuzDMFSOUT18723211 = -103216585;    double wuzDMFSOUT57882514 = -296569207;    double wuzDMFSOUT48148537 = -418183817;    double wuzDMFSOUT16760994 = -646236711;    double wuzDMFSOUT92142144 = -684626953;    double wuzDMFSOUT42992037 = -33907829;    double wuzDMFSOUT7988250 = -272753725;    double wuzDMFSOUT32899837 = -531524578;    double wuzDMFSOUT65910088 = -937497030;    double wuzDMFSOUT7036806 = -556567477;    double wuzDMFSOUT49216633 = -331861288;    double wuzDMFSOUT67468162 = -11638543;    double wuzDMFSOUT80045191 = -41230619;    double wuzDMFSOUT83107708 = -703500163;    double wuzDMFSOUT1362651 = -919092197;    double wuzDMFSOUT10298806 = -866927421;    double wuzDMFSOUT51314232 = -704111985;    double wuzDMFSOUT24275149 = 82965541;    double wuzDMFSOUT22706842 = -393913548;    double wuzDMFSOUT43528690 = -808652579;    double wuzDMFSOUT91314224 = -658496588;    double wuzDMFSOUT5388916 = -873205489;    double wuzDMFSOUT71069000 = -102068355;    double wuzDMFSOUT69512044 = -343494261;     wuzDMFSOUT69644782 = wuzDMFSOUT307369;     wuzDMFSOUT307369 = wuzDMFSOUT77014350;     wuzDMFSOUT77014350 = wuzDMFSOUT26500181;     wuzDMFSOUT26500181 = wuzDMFSOUT54090113;     wuzDMFSOUT54090113 = wuzDMFSOUT43845762;     wuzDMFSOUT43845762 = wuzDMFSOUT25953981;     wuzDMFSOUT25953981 = wuzDMFSOUT88086453;     wuzDMFSOUT88086453 = wuzDMFSOUT45641549;     wuzDMFSOUT45641549 = wuzDMFSOUT75764976;     wuzDMFSOUT75764976 = wuzDMFSOUT30009426;     wuzDMFSOUT30009426 = wuzDMFSOUT10388972;     wuzDMFSOUT10388972 = wuzDMFSOUT14785893;     wuzDMFSOUT14785893 = wuzDMFSOUT20938717;     wuzDMFSOUT20938717 = wuzDMFSOUT94130764;     wuzDMFSOUT94130764 = wuzDMFSOUT7715232;     wuzDMFSOUT7715232 = wuzDMFSOUT58530250;     wuzDMFSOUT58530250 = wuzDMFSOUT31080888;     wuzDMFSOUT31080888 = wuzDMFSOUT53701235;     wuzDMFSOUT53701235 = wuzDMFSOUT44256407;     wuzDMFSOUT44256407 = wuzDMFSOUT47154557;     wuzDMFSOUT47154557 = wuzDMFSOUT42816718;     wuzDMFSOUT42816718 = wuzDMFSOUT10094848;     wuzDMFSOUT10094848 = wuzDMFSOUT44913617;     wuzDMFSOUT44913617 = wuzDMFSOUT73469712;     wuzDMFSOUT73469712 = wuzDMFSOUT17218787;     wuzDMFSOUT17218787 = wuzDMFSOUT83389862;     wuzDMFSOUT83389862 = wuzDMFSOUT51684985;     wuzDMFSOUT51684985 = wuzDMFSOUT42948185;     wuzDMFSOUT42948185 = wuzDMFSOUT26936957;     wuzDMFSOUT26936957 = wuzDMFSOUT94621642;     wuzDMFSOUT94621642 = wuzDMFSOUT2756390;     wuzDMFSOUT2756390 = wuzDMFSOUT13362593;     wuzDMFSOUT13362593 = wuzDMFSOUT99648697;     wuzDMFSOUT99648697 = wuzDMFSOUT9935773;     wuzDMFSOUT9935773 = wuzDMFSOUT91575171;     wuzDMFSOUT91575171 = wuzDMFSOUT42399539;     wuzDMFSOUT42399539 = wuzDMFSOUT4344701;     wuzDMFSOUT4344701 = wuzDMFSOUT61146475;     wuzDMFSOUT61146475 = wuzDMFSOUT83162740;     wuzDMFSOUT83162740 = wuzDMFSOUT17797686;     wuzDMFSOUT17797686 = wuzDMFSOUT36452493;     wuzDMFSOUT36452493 = wuzDMFSOUT24093508;     wuzDMFSOUT24093508 = wuzDMFSOUT52212333;     wuzDMFSOUT52212333 = wuzDMFSOUT96765079;     wuzDMFSOUT96765079 = wuzDMFSOUT56708719;     wuzDMFSOUT56708719 = wuzDMFSOUT25076643;     wuzDMFSOUT25076643 = wuzDMFSOUT40397826;     wuzDMFSOUT40397826 = wuzDMFSOUT43696735;     wuzDMFSOUT43696735 = wuzDMFSOUT10048349;     wuzDMFSOUT10048349 = wuzDMFSOUT61026868;     wuzDMFSOUT61026868 = wuzDMFSOUT87584837;     wuzDMFSOUT87584837 = wuzDMFSOUT53539756;     wuzDMFSOUT53539756 = wuzDMFSOUT45894431;     wuzDMFSOUT45894431 = wuzDMFSOUT19603506;     wuzDMFSOUT19603506 = wuzDMFSOUT26828065;     wuzDMFSOUT26828065 = wuzDMFSOUT90212521;     wuzDMFSOUT90212521 = wuzDMFSOUT32100733;     wuzDMFSOUT32100733 = wuzDMFSOUT53030469;     wuzDMFSOUT53030469 = wuzDMFSOUT36871326;     wuzDMFSOUT36871326 = wuzDMFSOUT60455899;     wuzDMFSOUT60455899 = wuzDMFSOUT74268996;     wuzDMFSOUT74268996 = wuzDMFSOUT45138269;     wuzDMFSOUT45138269 = wuzDMFSOUT18704592;     wuzDMFSOUT18704592 = wuzDMFSOUT81143333;     wuzDMFSOUT81143333 = wuzDMFSOUT27253036;     wuzDMFSOUT27253036 = wuzDMFSOUT97026378;     wuzDMFSOUT97026378 = wuzDMFSOUT15137196;     wuzDMFSOUT15137196 = wuzDMFSOUT11002944;     wuzDMFSOUT11002944 = wuzDMFSOUT2555594;     wuzDMFSOUT2555594 = wuzDMFSOUT65315693;     wuzDMFSOUT65315693 = wuzDMFSOUT54185549;     wuzDMFSOUT54185549 = wuzDMFSOUT69934413;     wuzDMFSOUT69934413 = wuzDMFSOUT70538495;     wuzDMFSOUT70538495 = wuzDMFSOUT26458722;     wuzDMFSOUT26458722 = wuzDMFSOUT10702065;     wuzDMFSOUT10702065 = wuzDMFSOUT18723211;     wuzDMFSOUT18723211 = wuzDMFSOUT57882514;     wuzDMFSOUT57882514 = wuzDMFSOUT48148537;     wuzDMFSOUT48148537 = wuzDMFSOUT16760994;     wuzDMFSOUT16760994 = wuzDMFSOUT92142144;     wuzDMFSOUT92142144 = wuzDMFSOUT42992037;     wuzDMFSOUT42992037 = wuzDMFSOUT7988250;     wuzDMFSOUT7988250 = wuzDMFSOUT32899837;     wuzDMFSOUT32899837 = wuzDMFSOUT65910088;     wuzDMFSOUT65910088 = wuzDMFSOUT7036806;     wuzDMFSOUT7036806 = wuzDMFSOUT49216633;     wuzDMFSOUT49216633 = wuzDMFSOUT67468162;     wuzDMFSOUT67468162 = wuzDMFSOUT80045191;     wuzDMFSOUT80045191 = wuzDMFSOUT83107708;     wuzDMFSOUT83107708 = wuzDMFSOUT1362651;     wuzDMFSOUT1362651 = wuzDMFSOUT10298806;     wuzDMFSOUT10298806 = wuzDMFSOUT51314232;     wuzDMFSOUT51314232 = wuzDMFSOUT24275149;     wuzDMFSOUT24275149 = wuzDMFSOUT22706842;     wuzDMFSOUT22706842 = wuzDMFSOUT43528690;     wuzDMFSOUT43528690 = wuzDMFSOUT91314224;     wuzDMFSOUT91314224 = wuzDMFSOUT5388916;     wuzDMFSOUT5388916 = wuzDMFSOUT71069000;     wuzDMFSOUT71069000 = wuzDMFSOUT69512044;     wuzDMFSOUT69512044 = wuzDMFSOUT69644782;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wzgHESbiJQ62941223() {     double xPyWFykTqp29240879 = -572250639;    double xPyWFykTqp1813219 = -700821472;    double xPyWFykTqp14015738 = -750797218;    double xPyWFykTqp22375940 = -320058324;    double xPyWFykTqp65383339 = -408447816;    double xPyWFykTqp41522882 = -783005167;    double xPyWFykTqp23312464 = -135562915;    double xPyWFykTqp38911738 = -441197504;    double xPyWFykTqp59454992 = -218879691;    double xPyWFykTqp58789491 = -843343002;    double xPyWFykTqp55304357 = -212389050;    double xPyWFykTqp45060173 = -739391178;    double xPyWFykTqp85540456 = 17295632;    double xPyWFykTqp79312556 = -505194117;    double xPyWFykTqp91438570 = -200505519;    double xPyWFykTqp4469486 = -613270406;    double xPyWFykTqp94491354 = -199128073;    double xPyWFykTqp95749218 = -134713359;    double xPyWFykTqp34143438 = -558380094;    double xPyWFykTqp24173517 = -847236848;    double xPyWFykTqp27615676 = 25379608;    double xPyWFykTqp11306317 = -567261492;    double xPyWFykTqp2286673 = -378283032;    double xPyWFykTqp9643856 = -257490649;    double xPyWFykTqp49447717 = -443015219;    double xPyWFykTqp11633694 = -529431714;    double xPyWFykTqp96729933 = -317895506;    double xPyWFykTqp16796154 = -19129682;    double xPyWFykTqp92732528 = -263444424;    double xPyWFykTqp65410423 = -134752894;    double xPyWFykTqp19535961 = -331953085;    double xPyWFykTqp45521650 = -170540751;    double xPyWFykTqp62444632 = -24998217;    double xPyWFykTqp82173139 = -736882502;    double xPyWFykTqp14873134 = -20344796;    double xPyWFykTqp70165068 = -407426912;    double xPyWFykTqp33031216 = -43209939;    double xPyWFykTqp2705039 = -209134193;    double xPyWFykTqp80164417 = -848867522;    double xPyWFykTqp55988395 = -624124481;    double xPyWFykTqp76015499 = -485411413;    double xPyWFykTqp6531674 = -276572326;    double xPyWFykTqp64972750 = -205087859;    double xPyWFykTqp26451839 = -641333485;    double xPyWFykTqp97753395 = -721286664;    double xPyWFykTqp21501848 = -483585077;    double xPyWFykTqp30565365 = -602042957;    double xPyWFykTqp87094220 = -67260908;    double xPyWFykTqp83086382 = -408931987;    double xPyWFykTqp25215741 = -163579693;    double xPyWFykTqp11513119 = 63619154;    double xPyWFykTqp94169990 = -101409536;    double xPyWFykTqp28955271 = -661409920;    double xPyWFykTqp19168955 = -193581758;    double xPyWFykTqp35325548 = 42297961;    double xPyWFykTqp17934563 = 95010853;    double xPyWFykTqp99526545 = -222538440;    double xPyWFykTqp4371882 = -393306570;    double xPyWFykTqp72928222 = -877043106;    double xPyWFykTqp53749645 = -879016103;    double xPyWFykTqp44792949 = -365109662;    double xPyWFykTqp6516311 = -16433233;    double xPyWFykTqp46179210 = -77753081;    double xPyWFykTqp94044569 = 15873202;    double xPyWFykTqp39253530 = -411389918;    double xPyWFykTqp9782708 = 58151701;    double xPyWFykTqp82615541 = -614392961;    double xPyWFykTqp3367317 = -245821866;    double xPyWFykTqp64439422 = -384849322;    double xPyWFykTqp21273503 = -793078608;    double xPyWFykTqp71438269 = -470060468;    double xPyWFykTqp91786315 = -989993881;    double xPyWFykTqp15584801 = -285845837;    double xPyWFykTqp78155043 = -934255613;    double xPyWFykTqp48158017 = -261825436;    double xPyWFykTqp21084002 = -698048066;    double xPyWFykTqp46333567 = -262173633;    double xPyWFykTqp75834834 = -736949547;    double xPyWFykTqp11890461 = -536203985;    double xPyWFykTqp27945870 = -959430143;    double xPyWFykTqp81068329 = -927388757;    double xPyWFykTqp9635713 = -150634598;    double xPyWFykTqp33709771 = -610197696;    double xPyWFykTqp67516787 = 135268;    double xPyWFykTqp53897305 = -98372048;    double xPyWFykTqp25365971 = -130543550;    double xPyWFykTqp16566379 = -509130832;    double xPyWFykTqp43275677 = -831416460;    double xPyWFykTqp46847592 = -679180463;    double xPyWFykTqp96938571 = -15355649;    double xPyWFykTqp70638522 = -84888473;    double xPyWFykTqp28659334 = -649903369;    double xPyWFykTqp29776816 = -332091087;    double xPyWFykTqp26414772 = -969851420;    double xPyWFykTqp11195446 = -159014820;    double xPyWFykTqp69499189 = -368978180;    double xPyWFykTqp60352464 = -98819246;    double xPyWFykTqp70928180 = -120961062;    double xPyWFykTqp87198308 = -129943568;    double xPyWFykTqp87970688 = -572250639;     xPyWFykTqp29240879 = xPyWFykTqp1813219;     xPyWFykTqp1813219 = xPyWFykTqp14015738;     xPyWFykTqp14015738 = xPyWFykTqp22375940;     xPyWFykTqp22375940 = xPyWFykTqp65383339;     xPyWFykTqp65383339 = xPyWFykTqp41522882;     xPyWFykTqp41522882 = xPyWFykTqp23312464;     xPyWFykTqp23312464 = xPyWFykTqp38911738;     xPyWFykTqp38911738 = xPyWFykTqp59454992;     xPyWFykTqp59454992 = xPyWFykTqp58789491;     xPyWFykTqp58789491 = xPyWFykTqp55304357;     xPyWFykTqp55304357 = xPyWFykTqp45060173;     xPyWFykTqp45060173 = xPyWFykTqp85540456;     xPyWFykTqp85540456 = xPyWFykTqp79312556;     xPyWFykTqp79312556 = xPyWFykTqp91438570;     xPyWFykTqp91438570 = xPyWFykTqp4469486;     xPyWFykTqp4469486 = xPyWFykTqp94491354;     xPyWFykTqp94491354 = xPyWFykTqp95749218;     xPyWFykTqp95749218 = xPyWFykTqp34143438;     xPyWFykTqp34143438 = xPyWFykTqp24173517;     xPyWFykTqp24173517 = xPyWFykTqp27615676;     xPyWFykTqp27615676 = xPyWFykTqp11306317;     xPyWFykTqp11306317 = xPyWFykTqp2286673;     xPyWFykTqp2286673 = xPyWFykTqp9643856;     xPyWFykTqp9643856 = xPyWFykTqp49447717;     xPyWFykTqp49447717 = xPyWFykTqp11633694;     xPyWFykTqp11633694 = xPyWFykTqp96729933;     xPyWFykTqp96729933 = xPyWFykTqp16796154;     xPyWFykTqp16796154 = xPyWFykTqp92732528;     xPyWFykTqp92732528 = xPyWFykTqp65410423;     xPyWFykTqp65410423 = xPyWFykTqp19535961;     xPyWFykTqp19535961 = xPyWFykTqp45521650;     xPyWFykTqp45521650 = xPyWFykTqp62444632;     xPyWFykTqp62444632 = xPyWFykTqp82173139;     xPyWFykTqp82173139 = xPyWFykTqp14873134;     xPyWFykTqp14873134 = xPyWFykTqp70165068;     xPyWFykTqp70165068 = xPyWFykTqp33031216;     xPyWFykTqp33031216 = xPyWFykTqp2705039;     xPyWFykTqp2705039 = xPyWFykTqp80164417;     xPyWFykTqp80164417 = xPyWFykTqp55988395;     xPyWFykTqp55988395 = xPyWFykTqp76015499;     xPyWFykTqp76015499 = xPyWFykTqp6531674;     xPyWFykTqp6531674 = xPyWFykTqp64972750;     xPyWFykTqp64972750 = xPyWFykTqp26451839;     xPyWFykTqp26451839 = xPyWFykTqp97753395;     xPyWFykTqp97753395 = xPyWFykTqp21501848;     xPyWFykTqp21501848 = xPyWFykTqp30565365;     xPyWFykTqp30565365 = xPyWFykTqp87094220;     xPyWFykTqp87094220 = xPyWFykTqp83086382;     xPyWFykTqp83086382 = xPyWFykTqp25215741;     xPyWFykTqp25215741 = xPyWFykTqp11513119;     xPyWFykTqp11513119 = xPyWFykTqp94169990;     xPyWFykTqp94169990 = xPyWFykTqp28955271;     xPyWFykTqp28955271 = xPyWFykTqp19168955;     xPyWFykTqp19168955 = xPyWFykTqp35325548;     xPyWFykTqp35325548 = xPyWFykTqp17934563;     xPyWFykTqp17934563 = xPyWFykTqp99526545;     xPyWFykTqp99526545 = xPyWFykTqp4371882;     xPyWFykTqp4371882 = xPyWFykTqp72928222;     xPyWFykTqp72928222 = xPyWFykTqp53749645;     xPyWFykTqp53749645 = xPyWFykTqp44792949;     xPyWFykTqp44792949 = xPyWFykTqp6516311;     xPyWFykTqp6516311 = xPyWFykTqp46179210;     xPyWFykTqp46179210 = xPyWFykTqp94044569;     xPyWFykTqp94044569 = xPyWFykTqp39253530;     xPyWFykTqp39253530 = xPyWFykTqp9782708;     xPyWFykTqp9782708 = xPyWFykTqp82615541;     xPyWFykTqp82615541 = xPyWFykTqp3367317;     xPyWFykTqp3367317 = xPyWFykTqp64439422;     xPyWFykTqp64439422 = xPyWFykTqp21273503;     xPyWFykTqp21273503 = xPyWFykTqp71438269;     xPyWFykTqp71438269 = xPyWFykTqp91786315;     xPyWFykTqp91786315 = xPyWFykTqp15584801;     xPyWFykTqp15584801 = xPyWFykTqp78155043;     xPyWFykTqp78155043 = xPyWFykTqp48158017;     xPyWFykTqp48158017 = xPyWFykTqp21084002;     xPyWFykTqp21084002 = xPyWFykTqp46333567;     xPyWFykTqp46333567 = xPyWFykTqp75834834;     xPyWFykTqp75834834 = xPyWFykTqp11890461;     xPyWFykTqp11890461 = xPyWFykTqp27945870;     xPyWFykTqp27945870 = xPyWFykTqp81068329;     xPyWFykTqp81068329 = xPyWFykTqp9635713;     xPyWFykTqp9635713 = xPyWFykTqp33709771;     xPyWFykTqp33709771 = xPyWFykTqp67516787;     xPyWFykTqp67516787 = xPyWFykTqp53897305;     xPyWFykTqp53897305 = xPyWFykTqp25365971;     xPyWFykTqp25365971 = xPyWFykTqp16566379;     xPyWFykTqp16566379 = xPyWFykTqp43275677;     xPyWFykTqp43275677 = xPyWFykTqp46847592;     xPyWFykTqp46847592 = xPyWFykTqp96938571;     xPyWFykTqp96938571 = xPyWFykTqp70638522;     xPyWFykTqp70638522 = xPyWFykTqp28659334;     xPyWFykTqp28659334 = xPyWFykTqp29776816;     xPyWFykTqp29776816 = xPyWFykTqp26414772;     xPyWFykTqp26414772 = xPyWFykTqp11195446;     xPyWFykTqp11195446 = xPyWFykTqp69499189;     xPyWFykTqp69499189 = xPyWFykTqp60352464;     xPyWFykTqp60352464 = xPyWFykTqp70928180;     xPyWFykTqp70928180 = xPyWFykTqp87198308;     xPyWFykTqp87198308 = xPyWFykTqp87970688;     xPyWFykTqp87970688 = xPyWFykTqp29240879;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RhfQHZvrLR75486412() {     double GfYsnVmsec48709049 = -985381851;    double GfYsnVmsec54837082 = -146699468;    double GfYsnVmsec30852730 = -402425833;    double GfYsnVmsec41023089 = -136632587;    double GfYsnVmsec65829855 = 65279768;    double GfYsnVmsec67114956 = -673489936;    double GfYsnVmsec68144342 = -578869145;    double GfYsnVmsec4161971 = -535005470;    double GfYsnVmsec20141790 = -947071070;    double GfYsnVmsec36718214 = -848929048;    double GfYsnVmsec9527621 = -645379350;    double GfYsnVmsec48554787 = -738693882;    double GfYsnVmsec75912115 = -407061644;    double GfYsnVmsec87728596 = 52520157;    double GfYsnVmsec51965032 = -498589311;    double GfYsnVmsec70685134 = 23537660;    double GfYsnVmsec453468 = -370902754;    double GfYsnVmsec19811970 = -985468077;    double GfYsnVmsec33778318 = -935584855;    double GfYsnVmsec4784819 = -464773304;    double GfYsnVmsec40071748 = -580832718;    double GfYsnVmsec26288400 = 20935295;    double GfYsnVmsec70459679 = -675857650;    double GfYsnVmsec27365525 = -994034640;    double GfYsnVmsec60651206 = -737315328;    double GfYsnVmsec16401155 = -215226932;    double GfYsnVmsec80658064 = 16953563;    double GfYsnVmsec67587828 = -182862961;    double GfYsnVmsec34477485 = -277355570;    double GfYsnVmsec50117277 = -226191588;    double GfYsnVmsec49340046 = -197279177;    double GfYsnVmsec85100960 = -734889769;    double GfYsnVmsec73920735 = -580205984;    double GfYsnVmsec40929647 = 58514292;    double GfYsnVmsec54803470 = -83047602;    double GfYsnVmsec6231006 = -710995520;    double GfYsnVmsec1414667 = -570086014;    double GfYsnVmsec44187513 = -286343008;    double GfYsnVmsec47477743 = -213282347;    double GfYsnVmsec77270130 = -620655578;    double GfYsnVmsec17497557 = -995197708;    double GfYsnVmsec18390807 = -515468552;    double GfYsnVmsec36105991 = -152889657;    double GfYsnVmsec9837378 = 9593854;    double GfYsnVmsec77781806 = -998409627;    double GfYsnVmsec75962974 = 79083502;    double GfYsnVmsec12555245 = -515736280;    double GfYsnVmsec87250050 = -250548222;    double GfYsnVmsec24221973 = -422871226;    double GfYsnVmsec66114083 = 75407962;    double GfYsnVmsec85948687 = -342745777;    double GfYsnVmsec10618851 = -478762395;    double GfYsnVmsec98780416 = -337518881;    double GfYsnVmsec92098982 = -188175394;    double GfYsnVmsec35414664 = -832260674;    double GfYsnVmsec22420650 = -906317146;    double GfYsnVmsec84377403 = -470841818;    double GfYsnVmsec3487206 = -408391193;    double GfYsnVmsec80371882 = -399317260;    double GfYsnVmsec49428700 = -719493301;    double GfYsnVmsec86456892 = -590443499;    double GfYsnVmsec556514 = -296006184;    double GfYsnVmsec69684486 = -157649901;    double GfYsnVmsec70024512 = -620879483;    double GfYsnVmsec87378167 = -551649871;    double GfYsnVmsec24426660 = -910489581;    double GfYsnVmsec74634051 = -58487899;    double GfYsnVmsec34982469 = -365575937;    double GfYsnVmsec32925126 = -864432242;    double GfYsnVmsec45734027 = -787593791;    double GfYsnVmsec69270468 = -406376326;    double GfYsnVmsec56265954 = 15440253;    double GfYsnVmsec72334227 = -672185730;    double GfYsnVmsec56508187 = -214929277;    double GfYsnVmsec87287262 = -469575596;    double GfYsnVmsec21680941 = 34635834;    double GfYsnVmsec90182408 = -826175048;    double GfYsnVmsec60622302 = -585451505;    double GfYsnVmsec49583718 = -995625014;    double GfYsnVmsec84688231 = -716398831;    double GfYsnVmsec3845911 = -699490652;    double GfYsnVmsec93408014 = -732498215;    double GfYsnVmsec43365855 = -759991736;    double GfYsnVmsec68363402 = -252763533;    double GfYsnVmsec64168590 = -883445811;    double GfYsnVmsec38721195 = -718516783;    double GfYsnVmsec86320543 = -297370889;    double GfYsnVmsec81821752 = -292030590;    double GfYsnVmsec5514983 = -109225034;    double GfYsnVmsec32382821 = -176730456;    double GfYsnVmsec21853602 = -140153703;    double GfYsnVmsec97927461 = -61694821;    double GfYsnVmsec63815630 = -887025749;    double GfYsnVmsec98049042 = -493789047;    double GfYsnVmsec90813238 = 69787920;    double GfYsnVmsec16941043 = -599191525;    double GfYsnVmsec48706321 = -257818652;    double GfYsnVmsec66081479 = -532010175;    double GfYsnVmsec22459210 = -438756276;    double GfYsnVmsec53355146 = -985381851;     GfYsnVmsec48709049 = GfYsnVmsec54837082;     GfYsnVmsec54837082 = GfYsnVmsec30852730;     GfYsnVmsec30852730 = GfYsnVmsec41023089;     GfYsnVmsec41023089 = GfYsnVmsec65829855;     GfYsnVmsec65829855 = GfYsnVmsec67114956;     GfYsnVmsec67114956 = GfYsnVmsec68144342;     GfYsnVmsec68144342 = GfYsnVmsec4161971;     GfYsnVmsec4161971 = GfYsnVmsec20141790;     GfYsnVmsec20141790 = GfYsnVmsec36718214;     GfYsnVmsec36718214 = GfYsnVmsec9527621;     GfYsnVmsec9527621 = GfYsnVmsec48554787;     GfYsnVmsec48554787 = GfYsnVmsec75912115;     GfYsnVmsec75912115 = GfYsnVmsec87728596;     GfYsnVmsec87728596 = GfYsnVmsec51965032;     GfYsnVmsec51965032 = GfYsnVmsec70685134;     GfYsnVmsec70685134 = GfYsnVmsec453468;     GfYsnVmsec453468 = GfYsnVmsec19811970;     GfYsnVmsec19811970 = GfYsnVmsec33778318;     GfYsnVmsec33778318 = GfYsnVmsec4784819;     GfYsnVmsec4784819 = GfYsnVmsec40071748;     GfYsnVmsec40071748 = GfYsnVmsec26288400;     GfYsnVmsec26288400 = GfYsnVmsec70459679;     GfYsnVmsec70459679 = GfYsnVmsec27365525;     GfYsnVmsec27365525 = GfYsnVmsec60651206;     GfYsnVmsec60651206 = GfYsnVmsec16401155;     GfYsnVmsec16401155 = GfYsnVmsec80658064;     GfYsnVmsec80658064 = GfYsnVmsec67587828;     GfYsnVmsec67587828 = GfYsnVmsec34477485;     GfYsnVmsec34477485 = GfYsnVmsec50117277;     GfYsnVmsec50117277 = GfYsnVmsec49340046;     GfYsnVmsec49340046 = GfYsnVmsec85100960;     GfYsnVmsec85100960 = GfYsnVmsec73920735;     GfYsnVmsec73920735 = GfYsnVmsec40929647;     GfYsnVmsec40929647 = GfYsnVmsec54803470;     GfYsnVmsec54803470 = GfYsnVmsec6231006;     GfYsnVmsec6231006 = GfYsnVmsec1414667;     GfYsnVmsec1414667 = GfYsnVmsec44187513;     GfYsnVmsec44187513 = GfYsnVmsec47477743;     GfYsnVmsec47477743 = GfYsnVmsec77270130;     GfYsnVmsec77270130 = GfYsnVmsec17497557;     GfYsnVmsec17497557 = GfYsnVmsec18390807;     GfYsnVmsec18390807 = GfYsnVmsec36105991;     GfYsnVmsec36105991 = GfYsnVmsec9837378;     GfYsnVmsec9837378 = GfYsnVmsec77781806;     GfYsnVmsec77781806 = GfYsnVmsec75962974;     GfYsnVmsec75962974 = GfYsnVmsec12555245;     GfYsnVmsec12555245 = GfYsnVmsec87250050;     GfYsnVmsec87250050 = GfYsnVmsec24221973;     GfYsnVmsec24221973 = GfYsnVmsec66114083;     GfYsnVmsec66114083 = GfYsnVmsec85948687;     GfYsnVmsec85948687 = GfYsnVmsec10618851;     GfYsnVmsec10618851 = GfYsnVmsec98780416;     GfYsnVmsec98780416 = GfYsnVmsec92098982;     GfYsnVmsec92098982 = GfYsnVmsec35414664;     GfYsnVmsec35414664 = GfYsnVmsec22420650;     GfYsnVmsec22420650 = GfYsnVmsec84377403;     GfYsnVmsec84377403 = GfYsnVmsec3487206;     GfYsnVmsec3487206 = GfYsnVmsec80371882;     GfYsnVmsec80371882 = GfYsnVmsec49428700;     GfYsnVmsec49428700 = GfYsnVmsec86456892;     GfYsnVmsec86456892 = GfYsnVmsec556514;     GfYsnVmsec556514 = GfYsnVmsec69684486;     GfYsnVmsec69684486 = GfYsnVmsec70024512;     GfYsnVmsec70024512 = GfYsnVmsec87378167;     GfYsnVmsec87378167 = GfYsnVmsec24426660;     GfYsnVmsec24426660 = GfYsnVmsec74634051;     GfYsnVmsec74634051 = GfYsnVmsec34982469;     GfYsnVmsec34982469 = GfYsnVmsec32925126;     GfYsnVmsec32925126 = GfYsnVmsec45734027;     GfYsnVmsec45734027 = GfYsnVmsec69270468;     GfYsnVmsec69270468 = GfYsnVmsec56265954;     GfYsnVmsec56265954 = GfYsnVmsec72334227;     GfYsnVmsec72334227 = GfYsnVmsec56508187;     GfYsnVmsec56508187 = GfYsnVmsec87287262;     GfYsnVmsec87287262 = GfYsnVmsec21680941;     GfYsnVmsec21680941 = GfYsnVmsec90182408;     GfYsnVmsec90182408 = GfYsnVmsec60622302;     GfYsnVmsec60622302 = GfYsnVmsec49583718;     GfYsnVmsec49583718 = GfYsnVmsec84688231;     GfYsnVmsec84688231 = GfYsnVmsec3845911;     GfYsnVmsec3845911 = GfYsnVmsec93408014;     GfYsnVmsec93408014 = GfYsnVmsec43365855;     GfYsnVmsec43365855 = GfYsnVmsec68363402;     GfYsnVmsec68363402 = GfYsnVmsec64168590;     GfYsnVmsec64168590 = GfYsnVmsec38721195;     GfYsnVmsec38721195 = GfYsnVmsec86320543;     GfYsnVmsec86320543 = GfYsnVmsec81821752;     GfYsnVmsec81821752 = GfYsnVmsec5514983;     GfYsnVmsec5514983 = GfYsnVmsec32382821;     GfYsnVmsec32382821 = GfYsnVmsec21853602;     GfYsnVmsec21853602 = GfYsnVmsec97927461;     GfYsnVmsec97927461 = GfYsnVmsec63815630;     GfYsnVmsec63815630 = GfYsnVmsec98049042;     GfYsnVmsec98049042 = GfYsnVmsec90813238;     GfYsnVmsec90813238 = GfYsnVmsec16941043;     GfYsnVmsec16941043 = GfYsnVmsec48706321;     GfYsnVmsec48706321 = GfYsnVmsec66081479;     GfYsnVmsec66081479 = GfYsnVmsec22459210;     GfYsnVmsec22459210 = GfYsnVmsec53355146;     GfYsnVmsec53355146 = GfYsnVmsec48709049;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LPBRLLoLfG35789070() {     double jpsMjSUGtw38835358 = 55861949;    double jpsMjSUGtw37962147 = -521625638;    double jpsMjSUGtw26345429 = -539220294;    double jpsMjSUGtw14521664 = -322804409;    double jpsMjSUGtw78886590 = -976043674;    double jpsMjSUGtw47901361 = -566123043;    double jpsMjSUGtw62807780 = -216414617;    double jpsMjSUGtw57040534 = -171453209;    double jpsMjSUGtw43953477 = -954963708;    double jpsMjSUGtw40973884 = -418803573;    double jpsMjSUGtw85679439 = -53799507;    double jpsMjSUGtw83304294 = -218282018;    double jpsMjSUGtw14258248 = -719297505;    double jpsMjSUGtw26147450 = 54359273;    double jpsMjSUGtw50039404 = -983710253;    double jpsMjSUGtw94864876 = -776842210;    double jpsMjSUGtw44415648 = -632247996;    double jpsMjSUGtw41167683 = -328317369;    double jpsMjSUGtw94692708 = -301995291;    double jpsMjSUGtw72109066 = -12651613;    double jpsMjSUGtw27994150 = -285257810;    double jpsMjSUGtw24369982 = -312161341;    double jpsMjSUGtw3698098 = 17682429;    double jpsMjSUGtw35286622 = -342059016;    double jpsMjSUGtw7536395 = -280826272;    double jpsMjSUGtw35192120 = -91100667;    double jpsMjSUGtw2625400 = -842575431;    double jpsMjSUGtw90758203 = -242753020;    double jpsMjSUGtw95686482 = 60445382;    double jpsMjSUGtw97906357 = -100593979;    double jpsMjSUGtw52803449 = -523945721;    double jpsMjSUGtw84467874 = -135714189;    double jpsMjSUGtw82889776 = -880431143;    double jpsMjSUGtw64768291 = 67063134;    double jpsMjSUGtw90400004 = -833383263;    double jpsMjSUGtw59462012 = 85975069;    double jpsMjSUGtw1648236 = -85901918;    double jpsMjSUGtw68544796 = -152402252;    double jpsMjSUGtw58010759 = 79255607;    double jpsMjSUGtw21782273 = -525363351;    double jpsMjSUGtw31197230 = -701058984;    double jpsMjSUGtw73035270 = -329961765;    double jpsMjSUGtw95922831 = -628315253;    double jpsMjSUGtw40499318 = -954489335;    double jpsMjSUGtw69746224 = -10919583;    double jpsMjSUGtw96401968 = -404540404;    double jpsMjSUGtw92978535 = -64218780;    double jpsMjSUGtw77636509 = -277204476;    double jpsMjSUGtw52140627 = -858810572;    double jpsMjSUGtw95394488 = -381588375;    double jpsMjSUGtw15314212 = -717127822;    double jpsMjSUGtw54391958 = -443189228;    double jpsMjSUGtw48232872 = -49371875;    double jpsMjSUGtw45006045 = -311730676;    double jpsMjSUGtw7794920 = -960860946;    double jpsMjSUGtw14465377 = -631976711;    double jpsMjSUGtw34264050 = -439308067;    double jpsMjSUGtw91058806 = -97161279;    double jpsMjSUGtw6985270 = 58021862;    double jpsMjSUGtw43694471 = -784943008;    double jpsMjSUGtw45275962 = -723547613;    double jpsMjSUGtw72049577 = -973661598;    double jpsMjSUGtw61354051 = -131898591;    double jpsMjSUGtw46047120 = -754369729;    double jpsMjSUGtw88170435 = -894857852;    double jpsMjSUGtw1211566 = -918085319;    double jpsMjSUGtw414519 = -337850875;    double jpsMjSUGtw49489957 = -686360639;    double jpsMjSUGtw35747445 = -112257465;    double jpsMjSUGtw90577391 = -969685323;    double jpsMjSUGtw93216640 = -590940292;    double jpsMjSUGtw75870851 = -379845744;    double jpsMjSUGtw83156923 = -307572977;    double jpsMjSUGtw72910436 = -776631940;    double jpsMjSUGtw40911837 = -311592630;    double jpsMjSUGtw54958880 = -955296045;    double jpsMjSUGtw28447150 = -683846088;    double jpsMjSUGtw63198779 = -27828237;    double jpsMjSUGtw65540398 = -231139433;    double jpsMjSUGtw11134426 = -876285869;    double jpsMjSUGtw42213585 = 73118113;    double jpsMjSUGtw24988890 = -465370956;    double jpsMjSUGtw38617576 = -383942448;    double jpsMjSUGtw291995 = -557966243;    double jpsMjSUGtw82592146 = -383466158;    double jpsMjSUGtw98411490 = 19243506;    double jpsMjSUGtw36235003 = 13657686;    double jpsMjSUGtw37883731 = -468700468;    double jpsMjSUGtw56973372 = 27924079;    double jpsMjSUGtw75934628 = -101406552;    double jpsMjSUGtw25197962 = -474716864;    double jpsMjSUGtw10589429 = -988740640;    double jpsMjSUGtw61559527 = -110424115;    double jpsMjSUGtw14316289 = -135801386;    double jpsMjSUGtw76506310 = -801815739;    double jpsMjSUGtw59147653 = -727397386;    double jpsMjSUGtw11681219 = -98063174;    double jpsMjSUGtw49875712 = -873945524;    double jpsMjSUGtw52328883 = 40368517;    double jpsMjSUGtw68534658 = 55861949;     jpsMjSUGtw38835358 = jpsMjSUGtw37962147;     jpsMjSUGtw37962147 = jpsMjSUGtw26345429;     jpsMjSUGtw26345429 = jpsMjSUGtw14521664;     jpsMjSUGtw14521664 = jpsMjSUGtw78886590;     jpsMjSUGtw78886590 = jpsMjSUGtw47901361;     jpsMjSUGtw47901361 = jpsMjSUGtw62807780;     jpsMjSUGtw62807780 = jpsMjSUGtw57040534;     jpsMjSUGtw57040534 = jpsMjSUGtw43953477;     jpsMjSUGtw43953477 = jpsMjSUGtw40973884;     jpsMjSUGtw40973884 = jpsMjSUGtw85679439;     jpsMjSUGtw85679439 = jpsMjSUGtw83304294;     jpsMjSUGtw83304294 = jpsMjSUGtw14258248;     jpsMjSUGtw14258248 = jpsMjSUGtw26147450;     jpsMjSUGtw26147450 = jpsMjSUGtw50039404;     jpsMjSUGtw50039404 = jpsMjSUGtw94864876;     jpsMjSUGtw94864876 = jpsMjSUGtw44415648;     jpsMjSUGtw44415648 = jpsMjSUGtw41167683;     jpsMjSUGtw41167683 = jpsMjSUGtw94692708;     jpsMjSUGtw94692708 = jpsMjSUGtw72109066;     jpsMjSUGtw72109066 = jpsMjSUGtw27994150;     jpsMjSUGtw27994150 = jpsMjSUGtw24369982;     jpsMjSUGtw24369982 = jpsMjSUGtw3698098;     jpsMjSUGtw3698098 = jpsMjSUGtw35286622;     jpsMjSUGtw35286622 = jpsMjSUGtw7536395;     jpsMjSUGtw7536395 = jpsMjSUGtw35192120;     jpsMjSUGtw35192120 = jpsMjSUGtw2625400;     jpsMjSUGtw2625400 = jpsMjSUGtw90758203;     jpsMjSUGtw90758203 = jpsMjSUGtw95686482;     jpsMjSUGtw95686482 = jpsMjSUGtw97906357;     jpsMjSUGtw97906357 = jpsMjSUGtw52803449;     jpsMjSUGtw52803449 = jpsMjSUGtw84467874;     jpsMjSUGtw84467874 = jpsMjSUGtw82889776;     jpsMjSUGtw82889776 = jpsMjSUGtw64768291;     jpsMjSUGtw64768291 = jpsMjSUGtw90400004;     jpsMjSUGtw90400004 = jpsMjSUGtw59462012;     jpsMjSUGtw59462012 = jpsMjSUGtw1648236;     jpsMjSUGtw1648236 = jpsMjSUGtw68544796;     jpsMjSUGtw68544796 = jpsMjSUGtw58010759;     jpsMjSUGtw58010759 = jpsMjSUGtw21782273;     jpsMjSUGtw21782273 = jpsMjSUGtw31197230;     jpsMjSUGtw31197230 = jpsMjSUGtw73035270;     jpsMjSUGtw73035270 = jpsMjSUGtw95922831;     jpsMjSUGtw95922831 = jpsMjSUGtw40499318;     jpsMjSUGtw40499318 = jpsMjSUGtw69746224;     jpsMjSUGtw69746224 = jpsMjSUGtw96401968;     jpsMjSUGtw96401968 = jpsMjSUGtw92978535;     jpsMjSUGtw92978535 = jpsMjSUGtw77636509;     jpsMjSUGtw77636509 = jpsMjSUGtw52140627;     jpsMjSUGtw52140627 = jpsMjSUGtw95394488;     jpsMjSUGtw95394488 = jpsMjSUGtw15314212;     jpsMjSUGtw15314212 = jpsMjSUGtw54391958;     jpsMjSUGtw54391958 = jpsMjSUGtw48232872;     jpsMjSUGtw48232872 = jpsMjSUGtw45006045;     jpsMjSUGtw45006045 = jpsMjSUGtw7794920;     jpsMjSUGtw7794920 = jpsMjSUGtw14465377;     jpsMjSUGtw14465377 = jpsMjSUGtw34264050;     jpsMjSUGtw34264050 = jpsMjSUGtw91058806;     jpsMjSUGtw91058806 = jpsMjSUGtw6985270;     jpsMjSUGtw6985270 = jpsMjSUGtw43694471;     jpsMjSUGtw43694471 = jpsMjSUGtw45275962;     jpsMjSUGtw45275962 = jpsMjSUGtw72049577;     jpsMjSUGtw72049577 = jpsMjSUGtw61354051;     jpsMjSUGtw61354051 = jpsMjSUGtw46047120;     jpsMjSUGtw46047120 = jpsMjSUGtw88170435;     jpsMjSUGtw88170435 = jpsMjSUGtw1211566;     jpsMjSUGtw1211566 = jpsMjSUGtw414519;     jpsMjSUGtw414519 = jpsMjSUGtw49489957;     jpsMjSUGtw49489957 = jpsMjSUGtw35747445;     jpsMjSUGtw35747445 = jpsMjSUGtw90577391;     jpsMjSUGtw90577391 = jpsMjSUGtw93216640;     jpsMjSUGtw93216640 = jpsMjSUGtw75870851;     jpsMjSUGtw75870851 = jpsMjSUGtw83156923;     jpsMjSUGtw83156923 = jpsMjSUGtw72910436;     jpsMjSUGtw72910436 = jpsMjSUGtw40911837;     jpsMjSUGtw40911837 = jpsMjSUGtw54958880;     jpsMjSUGtw54958880 = jpsMjSUGtw28447150;     jpsMjSUGtw28447150 = jpsMjSUGtw63198779;     jpsMjSUGtw63198779 = jpsMjSUGtw65540398;     jpsMjSUGtw65540398 = jpsMjSUGtw11134426;     jpsMjSUGtw11134426 = jpsMjSUGtw42213585;     jpsMjSUGtw42213585 = jpsMjSUGtw24988890;     jpsMjSUGtw24988890 = jpsMjSUGtw38617576;     jpsMjSUGtw38617576 = jpsMjSUGtw291995;     jpsMjSUGtw291995 = jpsMjSUGtw82592146;     jpsMjSUGtw82592146 = jpsMjSUGtw98411490;     jpsMjSUGtw98411490 = jpsMjSUGtw36235003;     jpsMjSUGtw36235003 = jpsMjSUGtw37883731;     jpsMjSUGtw37883731 = jpsMjSUGtw56973372;     jpsMjSUGtw56973372 = jpsMjSUGtw75934628;     jpsMjSUGtw75934628 = jpsMjSUGtw25197962;     jpsMjSUGtw25197962 = jpsMjSUGtw10589429;     jpsMjSUGtw10589429 = jpsMjSUGtw61559527;     jpsMjSUGtw61559527 = jpsMjSUGtw14316289;     jpsMjSUGtw14316289 = jpsMjSUGtw76506310;     jpsMjSUGtw76506310 = jpsMjSUGtw59147653;     jpsMjSUGtw59147653 = jpsMjSUGtw11681219;     jpsMjSUGtw11681219 = jpsMjSUGtw49875712;     jpsMjSUGtw49875712 = jpsMjSUGtw52328883;     jpsMjSUGtw52328883 = jpsMjSUGtw68534658;     jpsMjSUGtw68534658 = jpsMjSUGtw38835358;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void STmgWxTWev48334258() {     double FBcoKrYZQA58303528 = -357269263;    double FBcoKrYZQA90986011 = 32496366;    double FBcoKrYZQA43182421 = -190848909;    double FBcoKrYZQA33168812 = -139378672;    double FBcoKrYZQA79333107 = -502316090;    double FBcoKrYZQA73493435 = -456607812;    double FBcoKrYZQA7639659 = -659720847;    double FBcoKrYZQA22290768 = -265261175;    double FBcoKrYZQA4640275 = -583155087;    double FBcoKrYZQA18902608 = -424389619;    double FBcoKrYZQA39902703 = -486789807;    double FBcoKrYZQA86798907 = -217584722;    double FBcoKrYZQA4629908 = -43654781;    double FBcoKrYZQA34563490 = -487926453;    double FBcoKrYZQA10565865 = -181794045;    double FBcoKrYZQA61080525 = -140034144;    double FBcoKrYZQA50377761 = -804022677;    double FBcoKrYZQA65230434 = -79072087;    double FBcoKrYZQA94327587 = -679200051;    double FBcoKrYZQA52720368 = -730188070;    double FBcoKrYZQA40450222 = -891470136;    double FBcoKrYZQA39352065 = -823964554;    double FBcoKrYZQA71871103 = -279892190;    double FBcoKrYZQA53008291 = 21396992;    double FBcoKrYZQA18739884 = -575126382;    double FBcoKrYZQA39959581 = -876895885;    double FBcoKrYZQA86553530 = -507726363;    double FBcoKrYZQA41549878 = -406486299;    double FBcoKrYZQA37431440 = 46534236;    double FBcoKrYZQA82613211 = -192032674;    double FBcoKrYZQA82607534 = -389271814;    double FBcoKrYZQA24047185 = -700063207;    double FBcoKrYZQA94365879 = -335638910;    double FBcoKrYZQA23524799 = -237540073;    double FBcoKrYZQA30330341 = -896086069;    double FBcoKrYZQA95527949 = -217593539;    double FBcoKrYZQA70031686 = -612777993;    double FBcoKrYZQA10027271 = -229611068;    double FBcoKrYZQA25324085 = -385159218;    double FBcoKrYZQA43064009 = -521894448;    double FBcoKrYZQA72679287 = -110845279;    double FBcoKrYZQA84894403 = -568857991;    double FBcoKrYZQA67056073 = -576117050;    double FBcoKrYZQA23884857 = -303561995;    double FBcoKrYZQA49774635 = -288042546;    double FBcoKrYZQA50863095 = -941871825;    double FBcoKrYZQA74968415 = 22087897;    double FBcoKrYZQA77792339 = -460491790;    double FBcoKrYZQA93276218 = -872749811;    double FBcoKrYZQA36292831 = -142600720;    double FBcoKrYZQA89749780 = -23492753;    double FBcoKrYZQA70840818 = -820542087;    double FBcoKrYZQA18058018 = -825480836;    double FBcoKrYZQA17936074 = -306324312;    double FBcoKrYZQA7884036 = -735419581;    double FBcoKrYZQA18951464 = -533304710;    double FBcoKrYZQA19114908 = -687611445;    double FBcoKrYZQA90174130 = -112245902;    double FBcoKrYZQA14428929 = -564252291;    double FBcoKrYZQA39373526 = -625420205;    double FBcoKrYZQA86939905 = -948881450;    double FBcoKrYZQA66089780 = -153234549;    double FBcoKrYZQA84859328 = -211795411;    double FBcoKrYZQA22027063 = -291122414;    double FBcoKrYZQA36295073 = 64882194;    double FBcoKrYZQA15855519 = -786726601;    double FBcoKrYZQA92433028 = -881945813;    double FBcoKrYZQA81105109 = -806114709;    double FBcoKrYZQA4233150 = -591840385;    double FBcoKrYZQA15037916 = -964200506;    double FBcoKrYZQA91048839 = -527256151;    double FBcoKrYZQA40350491 = -474411610;    double FBcoKrYZQA39906350 = -693912870;    double FBcoKrYZQA51263579 = -57305604;    double FBcoKrYZQA80041081 = -519342791;    double FBcoKrYZQA55555819 = -222612145;    double FBcoKrYZQA72295991 = -147847504;    double FBcoKrYZQA47986246 = -976330195;    double FBcoKrYZQA3233656 = -690560462;    double FBcoKrYZQA67876788 = -633254558;    double FBcoKrYZQA64991166 = -798983783;    double FBcoKrYZQA8761191 = 52765427;    double FBcoKrYZQA48273660 = -533736488;    double FBcoKrYZQA1138609 = -810865044;    double FBcoKrYZQA92863431 = -68539921;    double FBcoKrYZQA11766716 = -568729727;    double FBcoKrYZQA5989167 = -874582371;    double FBcoKrYZQA76429806 = 70685401;    double FBcoKrYZQA15640763 = -502120492;    double FBcoKrYZQA11378877 = -262781359;    double FBcoKrYZQA76413041 = -529982095;    double FBcoKrYZQA79857556 = -400532092;    double FBcoKrYZQA95598341 = -665358777;    double FBcoKrYZQA85950558 = -759739013;    double FBcoKrYZQA56124103 = -573012999;    double FBcoKrYZQA6589507 = -957610731;    double FBcoKrYZQA35076 = -257062580;    double FBcoKrYZQA45029010 = -184994637;    double FBcoKrYZQA87589783 = -268444190;    double FBcoKrYZQA33919117 = -357269263;     FBcoKrYZQA58303528 = FBcoKrYZQA90986011;     FBcoKrYZQA90986011 = FBcoKrYZQA43182421;     FBcoKrYZQA43182421 = FBcoKrYZQA33168812;     FBcoKrYZQA33168812 = FBcoKrYZQA79333107;     FBcoKrYZQA79333107 = FBcoKrYZQA73493435;     FBcoKrYZQA73493435 = FBcoKrYZQA7639659;     FBcoKrYZQA7639659 = FBcoKrYZQA22290768;     FBcoKrYZQA22290768 = FBcoKrYZQA4640275;     FBcoKrYZQA4640275 = FBcoKrYZQA18902608;     FBcoKrYZQA18902608 = FBcoKrYZQA39902703;     FBcoKrYZQA39902703 = FBcoKrYZQA86798907;     FBcoKrYZQA86798907 = FBcoKrYZQA4629908;     FBcoKrYZQA4629908 = FBcoKrYZQA34563490;     FBcoKrYZQA34563490 = FBcoKrYZQA10565865;     FBcoKrYZQA10565865 = FBcoKrYZQA61080525;     FBcoKrYZQA61080525 = FBcoKrYZQA50377761;     FBcoKrYZQA50377761 = FBcoKrYZQA65230434;     FBcoKrYZQA65230434 = FBcoKrYZQA94327587;     FBcoKrYZQA94327587 = FBcoKrYZQA52720368;     FBcoKrYZQA52720368 = FBcoKrYZQA40450222;     FBcoKrYZQA40450222 = FBcoKrYZQA39352065;     FBcoKrYZQA39352065 = FBcoKrYZQA71871103;     FBcoKrYZQA71871103 = FBcoKrYZQA53008291;     FBcoKrYZQA53008291 = FBcoKrYZQA18739884;     FBcoKrYZQA18739884 = FBcoKrYZQA39959581;     FBcoKrYZQA39959581 = FBcoKrYZQA86553530;     FBcoKrYZQA86553530 = FBcoKrYZQA41549878;     FBcoKrYZQA41549878 = FBcoKrYZQA37431440;     FBcoKrYZQA37431440 = FBcoKrYZQA82613211;     FBcoKrYZQA82613211 = FBcoKrYZQA82607534;     FBcoKrYZQA82607534 = FBcoKrYZQA24047185;     FBcoKrYZQA24047185 = FBcoKrYZQA94365879;     FBcoKrYZQA94365879 = FBcoKrYZQA23524799;     FBcoKrYZQA23524799 = FBcoKrYZQA30330341;     FBcoKrYZQA30330341 = FBcoKrYZQA95527949;     FBcoKrYZQA95527949 = FBcoKrYZQA70031686;     FBcoKrYZQA70031686 = FBcoKrYZQA10027271;     FBcoKrYZQA10027271 = FBcoKrYZQA25324085;     FBcoKrYZQA25324085 = FBcoKrYZQA43064009;     FBcoKrYZQA43064009 = FBcoKrYZQA72679287;     FBcoKrYZQA72679287 = FBcoKrYZQA84894403;     FBcoKrYZQA84894403 = FBcoKrYZQA67056073;     FBcoKrYZQA67056073 = FBcoKrYZQA23884857;     FBcoKrYZQA23884857 = FBcoKrYZQA49774635;     FBcoKrYZQA49774635 = FBcoKrYZQA50863095;     FBcoKrYZQA50863095 = FBcoKrYZQA74968415;     FBcoKrYZQA74968415 = FBcoKrYZQA77792339;     FBcoKrYZQA77792339 = FBcoKrYZQA93276218;     FBcoKrYZQA93276218 = FBcoKrYZQA36292831;     FBcoKrYZQA36292831 = FBcoKrYZQA89749780;     FBcoKrYZQA89749780 = FBcoKrYZQA70840818;     FBcoKrYZQA70840818 = FBcoKrYZQA18058018;     FBcoKrYZQA18058018 = FBcoKrYZQA17936074;     FBcoKrYZQA17936074 = FBcoKrYZQA7884036;     FBcoKrYZQA7884036 = FBcoKrYZQA18951464;     FBcoKrYZQA18951464 = FBcoKrYZQA19114908;     FBcoKrYZQA19114908 = FBcoKrYZQA90174130;     FBcoKrYZQA90174130 = FBcoKrYZQA14428929;     FBcoKrYZQA14428929 = FBcoKrYZQA39373526;     FBcoKrYZQA39373526 = FBcoKrYZQA86939905;     FBcoKrYZQA86939905 = FBcoKrYZQA66089780;     FBcoKrYZQA66089780 = FBcoKrYZQA84859328;     FBcoKrYZQA84859328 = FBcoKrYZQA22027063;     FBcoKrYZQA22027063 = FBcoKrYZQA36295073;     FBcoKrYZQA36295073 = FBcoKrYZQA15855519;     FBcoKrYZQA15855519 = FBcoKrYZQA92433028;     FBcoKrYZQA92433028 = FBcoKrYZQA81105109;     FBcoKrYZQA81105109 = FBcoKrYZQA4233150;     FBcoKrYZQA4233150 = FBcoKrYZQA15037916;     FBcoKrYZQA15037916 = FBcoKrYZQA91048839;     FBcoKrYZQA91048839 = FBcoKrYZQA40350491;     FBcoKrYZQA40350491 = FBcoKrYZQA39906350;     FBcoKrYZQA39906350 = FBcoKrYZQA51263579;     FBcoKrYZQA51263579 = FBcoKrYZQA80041081;     FBcoKrYZQA80041081 = FBcoKrYZQA55555819;     FBcoKrYZQA55555819 = FBcoKrYZQA72295991;     FBcoKrYZQA72295991 = FBcoKrYZQA47986246;     FBcoKrYZQA47986246 = FBcoKrYZQA3233656;     FBcoKrYZQA3233656 = FBcoKrYZQA67876788;     FBcoKrYZQA67876788 = FBcoKrYZQA64991166;     FBcoKrYZQA64991166 = FBcoKrYZQA8761191;     FBcoKrYZQA8761191 = FBcoKrYZQA48273660;     FBcoKrYZQA48273660 = FBcoKrYZQA1138609;     FBcoKrYZQA1138609 = FBcoKrYZQA92863431;     FBcoKrYZQA92863431 = FBcoKrYZQA11766716;     FBcoKrYZQA11766716 = FBcoKrYZQA5989167;     FBcoKrYZQA5989167 = FBcoKrYZQA76429806;     FBcoKrYZQA76429806 = FBcoKrYZQA15640763;     FBcoKrYZQA15640763 = FBcoKrYZQA11378877;     FBcoKrYZQA11378877 = FBcoKrYZQA76413041;     FBcoKrYZQA76413041 = FBcoKrYZQA79857556;     FBcoKrYZQA79857556 = FBcoKrYZQA95598341;     FBcoKrYZQA95598341 = FBcoKrYZQA85950558;     FBcoKrYZQA85950558 = FBcoKrYZQA56124103;     FBcoKrYZQA56124103 = FBcoKrYZQA6589507;     FBcoKrYZQA6589507 = FBcoKrYZQA35076;     FBcoKrYZQA35076 = FBcoKrYZQA45029010;     FBcoKrYZQA45029010 = FBcoKrYZQA87589783;     FBcoKrYZQA87589783 = FBcoKrYZQA33919117;     FBcoKrYZQA33919117 = FBcoKrYZQA58303528;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QvfhJeUxxe44517418() {     double wblrHaXXqv17899625 = -586025641;    double wblrHaXXqv92491860 = -877659019;    double wblrHaXXqv80183808 = -264989832;    double wblrHaXXqv29044571 = 88010450;    double wblrHaXXqv90626333 = -402823117;    double wblrHaXXqv71170556 = -314867485;    double wblrHaXXqv4998142 = 10561567;    double wblrHaXXqv73116051 = -619472550;    double wblrHaXXqv18453718 = -15827586;    double wblrHaXXqv1927123 = -365648473;    double wblrHaXXqv65197634 = -888332247;    double wblrHaXXqv21470110 = -312605972;    double wblrHaXXqv75384470 = 50166700;    double wblrHaXXqv92937328 = -392084800;    double wblrHaXXqv7873671 = -974320566;    double wblrHaXXqv57834780 = 54592965;    double wblrHaXXqv86338864 = -732238958;    double wblrHaXXqv29898765 = -448408192;    double wblrHaXXqv74769791 = -818319681;    double wblrHaXXqv32637478 = -292596723;    double wblrHaXXqv20911341 = -724490960;    double wblrHaXXqv7841664 = -716366431;    double wblrHaXXqv64062928 = -44187269;    double wblrHaXXqv17738530 = -642941245;    double wblrHaXXqv94717888 = -31263972;    double wblrHaXXqv34374488 = 88486644;    double wblrHaXXqv99893600 = -957206360;    double wblrHaXXqv6661048 = 72132111;    double wblrHaXXqv87215782 = -843058379;    double wblrHaXXqv21086678 = -239015916;    double wblrHaXXqv7521853 = 65508858;    double wblrHaXXqv66812445 = -17281204;    double wblrHaXXqv43447918 = -315585783;    double wblrHaXXqv6049241 = -839424004;    double wblrHaXXqv35267702 = -544296054;    double wblrHaXXqv74117846 = -529250121;    double wblrHaXXqv60663364 = -905556628;    double wblrHaXXqv8387608 = -174063457;    double wblrHaXXqv44342027 = -103865735;    double wblrHaXXqv15889663 = -795775396;    double wblrHaXXqv30897100 = -579506876;    double wblrHaXXqv54973584 = -573799410;    double wblrHaXXqv7935316 = -309561880;    double wblrHaXXqv98124361 = -727476734;    double wblrHaXXqv50762950 = -834360615;    double wblrHaXXqv15656224 = -84815984;    double wblrHaXXqv80457137 = -969767770;    double wblrHaXXqv24488733 = -793245018;    double wblrHaXXqv32665866 = -56687431;    double wblrHaXXqv51460224 = -463853181;    double wblrHaXXqv40236031 = -909600977;    double wblrHaXXqv77425971 = -791785342;    double wblrHaXXqv93473532 = 34570710;    double wblrHaXXqv91210596 = -566493267;    double wblrHaXXqv23606078 = -699353668;    double wblrHaXXqv10057962 = -869659210;    double wblrHaXXqv28428933 = -733471751;    double wblrHaXXqv62445279 = -622048588;    double wblrHaXXqv34326683 = -880725578;    double wblrHaXXqv56251845 = -391309761;    double wblrHaXXqv71276955 = -357661126;    double wblrHaXXqv98337094 = 38429455;    double wblrHaXXqv85900269 = -776414172;    double wblrHaXXqv97367039 = -776811671;    double wblrHaXXqv94405270 = -331157331;    double wblrHaXXqv98385189 = -771051043;    double wblrHaXXqv78022191 = -997020190;    double wblrHaXXqv69335229 = -110409296;    double wblrHaXXqv57669627 = -847788747;    double wblrHaXXqv33755825 = -345070446;    double wblrHaXXqv97171416 = -39850408;    double wblrHaXXqv77951256 = -458175501;    double wblrHaXXqv85556737 = -244542458;    double wblrHaXXqv58880128 = 77455714;    double wblrHaXXqv1740378 = -713089847;    double wblrHaXXqv65937757 = -50691551;    double wblrHaXXqv99906347 = -306804552;    double wblrHaXXqv65938566 = -316710535;    double wblrHaXXqv66975579 = -808580630;    double wblrHaXXqv79061664 = -946447989;    double wblrHaXXqv53917351 = 58254413;    double wblrHaXXqv75404867 = -63961342;    double wblrHaXXqv73995181 = -871180459;    double wblrHaXXqv35755559 = -279205199;    double wblrHaXXqv80850647 = -329414939;    double wblrHaXXqv30095881 = -142705800;    double wblrHaXXqv73338913 = 48148085;    double wblrHaXXqv52237321 = -749092516;    double wblrHaXXqv82443163 = -40070336;    double wblrHaXXqv25209740 = -674636845;    double wblrHaXXqv45688913 = -795778371;    double wblrHaXXqv98218084 = -183508041;    double wblrHaXXqv74060925 = -293337879;    double wblrHaXXqv88090182 = -712555974;    double wblrHaXXqv44612708 = -338114271;    double wblrHaXXqv32560006 = -517936332;    double wblrHaXXqv69073315 = -797385238;    double wblrHaXXqv10568276 = -532750209;    double wblrHaXXqv3719092 = -296319404;    double wblrHaXXqv52377761 = -586025641;     wblrHaXXqv17899625 = wblrHaXXqv92491860;     wblrHaXXqv92491860 = wblrHaXXqv80183808;     wblrHaXXqv80183808 = wblrHaXXqv29044571;     wblrHaXXqv29044571 = wblrHaXXqv90626333;     wblrHaXXqv90626333 = wblrHaXXqv71170556;     wblrHaXXqv71170556 = wblrHaXXqv4998142;     wblrHaXXqv4998142 = wblrHaXXqv73116051;     wblrHaXXqv73116051 = wblrHaXXqv18453718;     wblrHaXXqv18453718 = wblrHaXXqv1927123;     wblrHaXXqv1927123 = wblrHaXXqv65197634;     wblrHaXXqv65197634 = wblrHaXXqv21470110;     wblrHaXXqv21470110 = wblrHaXXqv75384470;     wblrHaXXqv75384470 = wblrHaXXqv92937328;     wblrHaXXqv92937328 = wblrHaXXqv7873671;     wblrHaXXqv7873671 = wblrHaXXqv57834780;     wblrHaXXqv57834780 = wblrHaXXqv86338864;     wblrHaXXqv86338864 = wblrHaXXqv29898765;     wblrHaXXqv29898765 = wblrHaXXqv74769791;     wblrHaXXqv74769791 = wblrHaXXqv32637478;     wblrHaXXqv32637478 = wblrHaXXqv20911341;     wblrHaXXqv20911341 = wblrHaXXqv7841664;     wblrHaXXqv7841664 = wblrHaXXqv64062928;     wblrHaXXqv64062928 = wblrHaXXqv17738530;     wblrHaXXqv17738530 = wblrHaXXqv94717888;     wblrHaXXqv94717888 = wblrHaXXqv34374488;     wblrHaXXqv34374488 = wblrHaXXqv99893600;     wblrHaXXqv99893600 = wblrHaXXqv6661048;     wblrHaXXqv6661048 = wblrHaXXqv87215782;     wblrHaXXqv87215782 = wblrHaXXqv21086678;     wblrHaXXqv21086678 = wblrHaXXqv7521853;     wblrHaXXqv7521853 = wblrHaXXqv66812445;     wblrHaXXqv66812445 = wblrHaXXqv43447918;     wblrHaXXqv43447918 = wblrHaXXqv6049241;     wblrHaXXqv6049241 = wblrHaXXqv35267702;     wblrHaXXqv35267702 = wblrHaXXqv74117846;     wblrHaXXqv74117846 = wblrHaXXqv60663364;     wblrHaXXqv60663364 = wblrHaXXqv8387608;     wblrHaXXqv8387608 = wblrHaXXqv44342027;     wblrHaXXqv44342027 = wblrHaXXqv15889663;     wblrHaXXqv15889663 = wblrHaXXqv30897100;     wblrHaXXqv30897100 = wblrHaXXqv54973584;     wblrHaXXqv54973584 = wblrHaXXqv7935316;     wblrHaXXqv7935316 = wblrHaXXqv98124361;     wblrHaXXqv98124361 = wblrHaXXqv50762950;     wblrHaXXqv50762950 = wblrHaXXqv15656224;     wblrHaXXqv15656224 = wblrHaXXqv80457137;     wblrHaXXqv80457137 = wblrHaXXqv24488733;     wblrHaXXqv24488733 = wblrHaXXqv32665866;     wblrHaXXqv32665866 = wblrHaXXqv51460224;     wblrHaXXqv51460224 = wblrHaXXqv40236031;     wblrHaXXqv40236031 = wblrHaXXqv77425971;     wblrHaXXqv77425971 = wblrHaXXqv93473532;     wblrHaXXqv93473532 = wblrHaXXqv91210596;     wblrHaXXqv91210596 = wblrHaXXqv23606078;     wblrHaXXqv23606078 = wblrHaXXqv10057962;     wblrHaXXqv10057962 = wblrHaXXqv28428933;     wblrHaXXqv28428933 = wblrHaXXqv62445279;     wblrHaXXqv62445279 = wblrHaXXqv34326683;     wblrHaXXqv34326683 = wblrHaXXqv56251845;     wblrHaXXqv56251845 = wblrHaXXqv71276955;     wblrHaXXqv71276955 = wblrHaXXqv98337094;     wblrHaXXqv98337094 = wblrHaXXqv85900269;     wblrHaXXqv85900269 = wblrHaXXqv97367039;     wblrHaXXqv97367039 = wblrHaXXqv94405270;     wblrHaXXqv94405270 = wblrHaXXqv98385189;     wblrHaXXqv98385189 = wblrHaXXqv78022191;     wblrHaXXqv78022191 = wblrHaXXqv69335229;     wblrHaXXqv69335229 = wblrHaXXqv57669627;     wblrHaXXqv57669627 = wblrHaXXqv33755825;     wblrHaXXqv33755825 = wblrHaXXqv97171416;     wblrHaXXqv97171416 = wblrHaXXqv77951256;     wblrHaXXqv77951256 = wblrHaXXqv85556737;     wblrHaXXqv85556737 = wblrHaXXqv58880128;     wblrHaXXqv58880128 = wblrHaXXqv1740378;     wblrHaXXqv1740378 = wblrHaXXqv65937757;     wblrHaXXqv65937757 = wblrHaXXqv99906347;     wblrHaXXqv99906347 = wblrHaXXqv65938566;     wblrHaXXqv65938566 = wblrHaXXqv66975579;     wblrHaXXqv66975579 = wblrHaXXqv79061664;     wblrHaXXqv79061664 = wblrHaXXqv53917351;     wblrHaXXqv53917351 = wblrHaXXqv75404867;     wblrHaXXqv75404867 = wblrHaXXqv73995181;     wblrHaXXqv73995181 = wblrHaXXqv35755559;     wblrHaXXqv35755559 = wblrHaXXqv80850647;     wblrHaXXqv80850647 = wblrHaXXqv30095881;     wblrHaXXqv30095881 = wblrHaXXqv73338913;     wblrHaXXqv73338913 = wblrHaXXqv52237321;     wblrHaXXqv52237321 = wblrHaXXqv82443163;     wblrHaXXqv82443163 = wblrHaXXqv25209740;     wblrHaXXqv25209740 = wblrHaXXqv45688913;     wblrHaXXqv45688913 = wblrHaXXqv98218084;     wblrHaXXqv98218084 = wblrHaXXqv74060925;     wblrHaXXqv74060925 = wblrHaXXqv88090182;     wblrHaXXqv88090182 = wblrHaXXqv44612708;     wblrHaXXqv44612708 = wblrHaXXqv32560006;     wblrHaXXqv32560006 = wblrHaXXqv69073315;     wblrHaXXqv69073315 = wblrHaXXqv10568276;     wblrHaXXqv10568276 = wblrHaXXqv3719092;     wblrHaXXqv3719092 = wblrHaXXqv52377761;     wblrHaXXqv52377761 = wblrHaXXqv17899625;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IhXVXqhVqn40700579() {     int pdKYbCKeaV77495721 = -814782018;    int pdKYbCKeaV93997710 = -687814404;    int pdKYbCKeaV17185197 = -339130754;    int pdKYbCKeaV24920329 = -784600427;    int pdKYbCKeaV1919560 = -303330144;    int pdKYbCKeaV68847676 = -173127158;    int pdKYbCKeaV2356625 = -419156019;    int pdKYbCKeaV23941336 = -973683926;    int pdKYbCKeaV32267162 = -548500086;    int pdKYbCKeaV84951637 = -306907326;    int pdKYbCKeaV90492565 = -189874686;    int pdKYbCKeaV56141311 = -407627221;    int pdKYbCKeaV46139034 = -956011818;    int pdKYbCKeaV51311167 = -296243148;    int pdKYbCKeaV5181477 = -666847087;    int pdKYbCKeaV54589034 = -850779926;    int pdKYbCKeaV22299969 = -660455238;    int pdKYbCKeaV94567096 = -817744297;    int pdKYbCKeaV55211994 = -957439311;    int pdKYbCKeaV12554587 = -955005376;    int pdKYbCKeaV1372460 = -557511785;    int pdKYbCKeaV76331262 = -608768309;    int pdKYbCKeaV56254753 = -908482348;    int pdKYbCKeaV82468768 = -207279481;    int pdKYbCKeaV70695893 = -587401562;    int pdKYbCKeaV28789395 = -46130827;    int pdKYbCKeaV13233671 = -306686357;    int pdKYbCKeaV71772216 = -549249479;    int pdKYbCKeaV37000126 = -632650994;    int pdKYbCKeaV59560144 = -285999158;    int pdKYbCKeaV32436171 = -579710470;    int pdKYbCKeaV9577706 = -434499202;    int pdKYbCKeaV92529956 = -295532655;    int pdKYbCKeaV88573683 = -341307935;    int pdKYbCKeaV40205063 = -192506040;    int pdKYbCKeaV52707742 = -840906703;    int pdKYbCKeaV51295041 = -98335262;    int pdKYbCKeaV6747946 = -118515847;    int pdKYbCKeaV63359970 = -922572251;    int pdKYbCKeaV88715317 = 30343656;    int pdKYbCKeaV89114913 = 51831528;    int pdKYbCKeaV25052765 = -578740828;    int pdKYbCKeaV48814558 = -43006709;    int pdKYbCKeaV72363867 = -51391473;    int pdKYbCKeaV51751266 = -280678683;    int pdKYbCKeaV80449352 = -327760143;    int pdKYbCKeaV85945859 = -861623437;    int pdKYbCKeaV71185127 = -25998247;    int pdKYbCKeaV72055513 = -340625050;    int pdKYbCKeaV66627616 = -785105642;    int pdKYbCKeaV90722281 = -695709201;    int pdKYbCKeaV84011124 = -763028598;    int pdKYbCKeaV68889047 = -205377744;    int pdKYbCKeaV64485120 = -826662222;    int pdKYbCKeaV39328119 = -663287755;    int pdKYbCKeaV1164460 = -106013710;    int pdKYbCKeaV37742957 = -779332057;    int pdKYbCKeaV34716428 = -31851273;    int pdKYbCKeaV54224436 = -97198866;    int pdKYbCKeaV73130164 = -157199318;    int pdKYbCKeaV55614005 = -866440802;    int pdKYbCKeaV30584408 = -869906540;    int pdKYbCKeaV86941210 = -241032932;    int pdKYbCKeaV72707017 = -162500928;    int pdKYbCKeaV52515467 = -727196857;    int pdKYbCKeaV80914860 = -755375485;    int pdKYbCKeaV63611354 = -12094567;    int pdKYbCKeaV57565350 = -514703884;    int pdKYbCKeaV11106105 = -3737108;    int pdKYbCKeaV52473734 = -825940385;    int pdKYbCKeaV3293993 = -652444664;    int pdKYbCKeaV15552023 = -441939391;    int pdKYbCKeaV31207126 = -895172046;    int pdKYbCKeaV66496676 = -887782967;    int pdKYbCKeaV23439673 = -906836904;    int pdKYbCKeaV76319694 = -978770957;    int pdKYbCKeaV27516704 = -465761600;    int pdKYbCKeaV83890886 = -757090875;    int pdKYbCKeaV30717503 = -926600799;    int pdKYbCKeaV90246540 = -159641420;    int pdKYbCKeaV42843536 = -184507391;    int pdKYbCKeaV42048544 = -180688111;    int pdKYbCKeaV99716702 = -108624429;    int pdKYbCKeaV70372509 = -847545353;    int pdKYbCKeaV68837863 = -590289958;    int pdKYbCKeaV48425046 = -816681873;    int pdKYbCKeaV40688659 = -129121458;    int pdKYbCKeaV28044837 = -468870433;    int pdKYbCKeaV49245564 = -678020180;    int pdKYbCKeaV39040603 = 13507669;    int pdKYbCKeaV14964786 = 38425353;    int pdKYbCKeaV16578614 = 33516011;    int pdKYbCKeaV52523510 = 78683018;    int pdKYbCKeaV90229805 = -665372934;    int pdKYbCKeaV33101312 = -103215543;    int pdKYbCKeaV58530506 = -78261932;    int pdKYbCKeaV38111555 = -237707897;    int pdKYbCKeaV76107540 = -880505782;    int pdKYbCKeaV19848401 = -324194617;    int pdKYbCKeaV70836405 = -814782018;     pdKYbCKeaV77495721 = pdKYbCKeaV93997710;     pdKYbCKeaV93997710 = pdKYbCKeaV17185197;     pdKYbCKeaV17185197 = pdKYbCKeaV24920329;     pdKYbCKeaV24920329 = pdKYbCKeaV1919560;     pdKYbCKeaV1919560 = pdKYbCKeaV68847676;     pdKYbCKeaV68847676 = pdKYbCKeaV2356625;     pdKYbCKeaV2356625 = pdKYbCKeaV23941336;     pdKYbCKeaV23941336 = pdKYbCKeaV32267162;     pdKYbCKeaV32267162 = pdKYbCKeaV84951637;     pdKYbCKeaV84951637 = pdKYbCKeaV90492565;     pdKYbCKeaV90492565 = pdKYbCKeaV56141311;     pdKYbCKeaV56141311 = pdKYbCKeaV46139034;     pdKYbCKeaV46139034 = pdKYbCKeaV51311167;     pdKYbCKeaV51311167 = pdKYbCKeaV5181477;     pdKYbCKeaV5181477 = pdKYbCKeaV54589034;     pdKYbCKeaV54589034 = pdKYbCKeaV22299969;     pdKYbCKeaV22299969 = pdKYbCKeaV94567096;     pdKYbCKeaV94567096 = pdKYbCKeaV55211994;     pdKYbCKeaV55211994 = pdKYbCKeaV12554587;     pdKYbCKeaV12554587 = pdKYbCKeaV1372460;     pdKYbCKeaV1372460 = pdKYbCKeaV76331262;     pdKYbCKeaV76331262 = pdKYbCKeaV56254753;     pdKYbCKeaV56254753 = pdKYbCKeaV82468768;     pdKYbCKeaV82468768 = pdKYbCKeaV70695893;     pdKYbCKeaV70695893 = pdKYbCKeaV28789395;     pdKYbCKeaV28789395 = pdKYbCKeaV13233671;     pdKYbCKeaV13233671 = pdKYbCKeaV71772216;     pdKYbCKeaV71772216 = pdKYbCKeaV37000126;     pdKYbCKeaV37000126 = pdKYbCKeaV59560144;     pdKYbCKeaV59560144 = pdKYbCKeaV32436171;     pdKYbCKeaV32436171 = pdKYbCKeaV9577706;     pdKYbCKeaV9577706 = pdKYbCKeaV92529956;     pdKYbCKeaV92529956 = pdKYbCKeaV88573683;     pdKYbCKeaV88573683 = pdKYbCKeaV40205063;     pdKYbCKeaV40205063 = pdKYbCKeaV52707742;     pdKYbCKeaV52707742 = pdKYbCKeaV51295041;     pdKYbCKeaV51295041 = pdKYbCKeaV6747946;     pdKYbCKeaV6747946 = pdKYbCKeaV63359970;     pdKYbCKeaV63359970 = pdKYbCKeaV88715317;     pdKYbCKeaV88715317 = pdKYbCKeaV89114913;     pdKYbCKeaV89114913 = pdKYbCKeaV25052765;     pdKYbCKeaV25052765 = pdKYbCKeaV48814558;     pdKYbCKeaV48814558 = pdKYbCKeaV72363867;     pdKYbCKeaV72363867 = pdKYbCKeaV51751266;     pdKYbCKeaV51751266 = pdKYbCKeaV80449352;     pdKYbCKeaV80449352 = pdKYbCKeaV85945859;     pdKYbCKeaV85945859 = pdKYbCKeaV71185127;     pdKYbCKeaV71185127 = pdKYbCKeaV72055513;     pdKYbCKeaV72055513 = pdKYbCKeaV66627616;     pdKYbCKeaV66627616 = pdKYbCKeaV90722281;     pdKYbCKeaV90722281 = pdKYbCKeaV84011124;     pdKYbCKeaV84011124 = pdKYbCKeaV68889047;     pdKYbCKeaV68889047 = pdKYbCKeaV64485120;     pdKYbCKeaV64485120 = pdKYbCKeaV39328119;     pdKYbCKeaV39328119 = pdKYbCKeaV1164460;     pdKYbCKeaV1164460 = pdKYbCKeaV37742957;     pdKYbCKeaV37742957 = pdKYbCKeaV34716428;     pdKYbCKeaV34716428 = pdKYbCKeaV54224436;     pdKYbCKeaV54224436 = pdKYbCKeaV73130164;     pdKYbCKeaV73130164 = pdKYbCKeaV55614005;     pdKYbCKeaV55614005 = pdKYbCKeaV30584408;     pdKYbCKeaV30584408 = pdKYbCKeaV86941210;     pdKYbCKeaV86941210 = pdKYbCKeaV72707017;     pdKYbCKeaV72707017 = pdKYbCKeaV52515467;     pdKYbCKeaV52515467 = pdKYbCKeaV80914860;     pdKYbCKeaV80914860 = pdKYbCKeaV63611354;     pdKYbCKeaV63611354 = pdKYbCKeaV57565350;     pdKYbCKeaV57565350 = pdKYbCKeaV11106105;     pdKYbCKeaV11106105 = pdKYbCKeaV52473734;     pdKYbCKeaV52473734 = pdKYbCKeaV3293993;     pdKYbCKeaV3293993 = pdKYbCKeaV15552023;     pdKYbCKeaV15552023 = pdKYbCKeaV31207126;     pdKYbCKeaV31207126 = pdKYbCKeaV66496676;     pdKYbCKeaV66496676 = pdKYbCKeaV23439673;     pdKYbCKeaV23439673 = pdKYbCKeaV76319694;     pdKYbCKeaV76319694 = pdKYbCKeaV27516704;     pdKYbCKeaV27516704 = pdKYbCKeaV83890886;     pdKYbCKeaV83890886 = pdKYbCKeaV30717503;     pdKYbCKeaV30717503 = pdKYbCKeaV90246540;     pdKYbCKeaV90246540 = pdKYbCKeaV42843536;     pdKYbCKeaV42843536 = pdKYbCKeaV42048544;     pdKYbCKeaV42048544 = pdKYbCKeaV99716702;     pdKYbCKeaV99716702 = pdKYbCKeaV70372509;     pdKYbCKeaV70372509 = pdKYbCKeaV68837863;     pdKYbCKeaV68837863 = pdKYbCKeaV48425046;     pdKYbCKeaV48425046 = pdKYbCKeaV40688659;     pdKYbCKeaV40688659 = pdKYbCKeaV28044837;     pdKYbCKeaV28044837 = pdKYbCKeaV49245564;     pdKYbCKeaV49245564 = pdKYbCKeaV39040603;     pdKYbCKeaV39040603 = pdKYbCKeaV14964786;     pdKYbCKeaV14964786 = pdKYbCKeaV16578614;     pdKYbCKeaV16578614 = pdKYbCKeaV52523510;     pdKYbCKeaV52523510 = pdKYbCKeaV90229805;     pdKYbCKeaV90229805 = pdKYbCKeaV33101312;     pdKYbCKeaV33101312 = pdKYbCKeaV58530506;     pdKYbCKeaV58530506 = pdKYbCKeaV38111555;     pdKYbCKeaV38111555 = pdKYbCKeaV76107540;     pdKYbCKeaV76107540 = pdKYbCKeaV19848401;     pdKYbCKeaV19848401 = pdKYbCKeaV70836405;     pdKYbCKeaV70836405 = pdKYbCKeaV77495721;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dVCrhetoxWDFruZhOFoCnf1003236() {     int RZZjqTPgqI67622030 = -873538219;    int RZZjqTPgqI77122775 = 37259426;    int RZZjqTPgqI12677896 = -475925215;    int RZZjqTPgqI98418903 = -970772249;    int RZZjqTPgqI14976295 = -244653586;    int RZZjqTPgqI49634081 = -65760266;    int RZZjqTPgqI97020062 = -56701492;    int RZZjqTPgqI76819898 = -610131664;    int RZZjqTPgqI56078849 = -556392723;    int RZZjqTPgqI89207307 = -976781851;    int RZZjqTPgqI66644385 = -698294844;    int RZZjqTPgqI90890818 = -987215356;    int RZZjqTPgqI84485166 = -168247678;    int RZZjqTPgqI89730021 = -294404032;    int RZZjqTPgqI3255849 = -51968030;    int RZZjqTPgqI78768776 = -551159796;    int RZZjqTPgqI66262149 = -921800479;    int RZZjqTPgqI15922809 = -160593589;    int RZZjqTPgqI16126385 = -323849747;    int RZZjqTPgqI79878835 = -502883685;    int RZZjqTPgqI89294861 = -261936877;    int RZZjqTPgqI74412844 = -941864945;    int RZZjqTPgqI89493171 = -214942269;    int RZZjqTPgqI90389865 = -655303857;    int RZZjqTPgqI17581081 = -130912506;    int RZZjqTPgqI47580360 = 77995438;    int RZZjqTPgqI35201006 = -66215351;    int RZZjqTPgqI94942591 = -609139537;    int RZZjqTPgqI98209123 = -294850042;    int RZZjqTPgqI7349225 = -160401549;    int RZZjqTPgqI35899574 = -906377014;    int RZZjqTPgqI8944620 = -935323621;    int RZZjqTPgqI1498998 = -595757815;    int RZZjqTPgqI12412328 = -332759093;    int RZZjqTPgqI75801597 = -942841701;    int RZZjqTPgqI5938749 = -43936113;    int RZZjqTPgqI51528610 = -714151167;    int RZZjqTPgqI31105229 = 15424909;    int RZZjqTPgqI73892987 = -630034297;    int RZZjqTPgqI33227459 = -974364117;    int RZZjqTPgqI2814588 = -754029748;    int RZZjqTPgqI79697228 = -393234041;    int RZZjqTPgqI8631399 = -518432305;    int RZZjqTPgqI3025808 = 84525338;    int RZZjqTPgqI43715683 = -393188639;    int RZZjqTPgqI888347 = -811384048;    int RZZjqTPgqI66369149 = -410105937;    int RZZjqTPgqI61571586 = -52654500;    int RZZjqTPgqI99974167 = -776564397;    int RZZjqTPgqI95908021 = -142101979;    int RZZjqTPgqI20087805 = 29908754;    int RZZjqTPgqI27784232 = -727455431;    int RZZjqTPgqI18341502 = 82769261;    int RZZjqTPgqI17392182 = -950217504;    int RZZjqTPgqI11708375 = -791888027;    int RZZjqTPgqI93209186 = -931673275;    int RZZjqTPgqI87629603 = -747798306;    int RZZjqTPgqI22288030 = -820621359;    int RZZjqTPgqI80837822 = -739859744;    int RZZjqTPgqI67395935 = -222649025;    int RZZjqTPgqI14433075 = -999544916;    int RZZjqTPgqI2077472 = -447561955;    int RZZjqTPgqI78610775 = -215281623;    int RZZjqTPgqI48729625 = -295991174;    int RZZjqTPgqI53307734 = 29595162;    int RZZjqTPgqI57699765 = -762971223;    int RZZjqTPgqI89391820 = -291457542;    int RZZjqTPgqI72072838 = -835488586;    int RZZjqTPgqI13928424 = -351562332;    int RZZjqTPgqI97317099 = 91968083;    int RZZjqTPgqI27240166 = -837008630;    int RZZjqTPgqI35156920 = -837225389;    int RZZjqTPgqI42029822 = -530559293;    int RZZjqTPgqI82898925 = -349485630;    int RZZjqTPgqI77064248 = -748853938;    int RZZjqTPgqI9597634 = -868702836;    int RZZjqTPgqI65781445 = -323432640;    int RZZjqTPgqI86467363 = -199467608;    int RZZjqTPgqI46674182 = -162115218;    int RZZjqTPgqI16692735 = -319528458;    int RZZjqTPgqI81211210 = -511898626;    int RZZjqTPgqI73629420 = 86439148;    int RZZjqTPgqI94968423 = -832575141;    int RZZjqTPgqI2301102 = -52748064;    int RZZjqTPgqI87261419 = -90310304;    int RZZjqTPgqI8115342 = -78921584;    int RZZjqTPgqI90603117 = -918092883;    int RZZjqTPgqI84106815 = -645540311;    int RZZjqTPgqI703954 = -540871067;    int RZZjqTPgqI82592410 = 88831574;    int RZZjqTPgqI18309145 = -296137808;    int RZZjqTPgqI29240581 = -893529808;    int RZZjqTPgqI50267406 = -244715348;    int RZZjqTPgqI6497053 = -307385273;    int RZZjqTPgqI18794384 = -974819202;    int RZZjqTPgqI737116 = -206467794;    int RZZjqTPgqI1086453 = -77952419;    int RZZjqTPgqI59901774 = -122441131;    int RZZjqTPgqI49718074 = -945069824;    int RZZjqTPgqI86015918 = -873538219;     RZZjqTPgqI67622030 = RZZjqTPgqI77122775;     RZZjqTPgqI77122775 = RZZjqTPgqI12677896;     RZZjqTPgqI12677896 = RZZjqTPgqI98418903;     RZZjqTPgqI98418903 = RZZjqTPgqI14976295;     RZZjqTPgqI14976295 = RZZjqTPgqI49634081;     RZZjqTPgqI49634081 = RZZjqTPgqI97020062;     RZZjqTPgqI97020062 = RZZjqTPgqI76819898;     RZZjqTPgqI76819898 = RZZjqTPgqI56078849;     RZZjqTPgqI56078849 = RZZjqTPgqI89207307;     RZZjqTPgqI89207307 = RZZjqTPgqI66644385;     RZZjqTPgqI66644385 = RZZjqTPgqI90890818;     RZZjqTPgqI90890818 = RZZjqTPgqI84485166;     RZZjqTPgqI84485166 = RZZjqTPgqI89730021;     RZZjqTPgqI89730021 = RZZjqTPgqI3255849;     RZZjqTPgqI3255849 = RZZjqTPgqI78768776;     RZZjqTPgqI78768776 = RZZjqTPgqI66262149;     RZZjqTPgqI66262149 = RZZjqTPgqI15922809;     RZZjqTPgqI15922809 = RZZjqTPgqI16126385;     RZZjqTPgqI16126385 = RZZjqTPgqI79878835;     RZZjqTPgqI79878835 = RZZjqTPgqI89294861;     RZZjqTPgqI89294861 = RZZjqTPgqI74412844;     RZZjqTPgqI74412844 = RZZjqTPgqI89493171;     RZZjqTPgqI89493171 = RZZjqTPgqI90389865;     RZZjqTPgqI90389865 = RZZjqTPgqI17581081;     RZZjqTPgqI17581081 = RZZjqTPgqI47580360;     RZZjqTPgqI47580360 = RZZjqTPgqI35201006;     RZZjqTPgqI35201006 = RZZjqTPgqI94942591;     RZZjqTPgqI94942591 = RZZjqTPgqI98209123;     RZZjqTPgqI98209123 = RZZjqTPgqI7349225;     RZZjqTPgqI7349225 = RZZjqTPgqI35899574;     RZZjqTPgqI35899574 = RZZjqTPgqI8944620;     RZZjqTPgqI8944620 = RZZjqTPgqI1498998;     RZZjqTPgqI1498998 = RZZjqTPgqI12412328;     RZZjqTPgqI12412328 = RZZjqTPgqI75801597;     RZZjqTPgqI75801597 = RZZjqTPgqI5938749;     RZZjqTPgqI5938749 = RZZjqTPgqI51528610;     RZZjqTPgqI51528610 = RZZjqTPgqI31105229;     RZZjqTPgqI31105229 = RZZjqTPgqI73892987;     RZZjqTPgqI73892987 = RZZjqTPgqI33227459;     RZZjqTPgqI33227459 = RZZjqTPgqI2814588;     RZZjqTPgqI2814588 = RZZjqTPgqI79697228;     RZZjqTPgqI79697228 = RZZjqTPgqI8631399;     RZZjqTPgqI8631399 = RZZjqTPgqI3025808;     RZZjqTPgqI3025808 = RZZjqTPgqI43715683;     RZZjqTPgqI43715683 = RZZjqTPgqI888347;     RZZjqTPgqI888347 = RZZjqTPgqI66369149;     RZZjqTPgqI66369149 = RZZjqTPgqI61571586;     RZZjqTPgqI61571586 = RZZjqTPgqI99974167;     RZZjqTPgqI99974167 = RZZjqTPgqI95908021;     RZZjqTPgqI95908021 = RZZjqTPgqI20087805;     RZZjqTPgqI20087805 = RZZjqTPgqI27784232;     RZZjqTPgqI27784232 = RZZjqTPgqI18341502;     RZZjqTPgqI18341502 = RZZjqTPgqI17392182;     RZZjqTPgqI17392182 = RZZjqTPgqI11708375;     RZZjqTPgqI11708375 = RZZjqTPgqI93209186;     RZZjqTPgqI93209186 = RZZjqTPgqI87629603;     RZZjqTPgqI87629603 = RZZjqTPgqI22288030;     RZZjqTPgqI22288030 = RZZjqTPgqI80837822;     RZZjqTPgqI80837822 = RZZjqTPgqI67395935;     RZZjqTPgqI67395935 = RZZjqTPgqI14433075;     RZZjqTPgqI14433075 = RZZjqTPgqI2077472;     RZZjqTPgqI2077472 = RZZjqTPgqI78610775;     RZZjqTPgqI78610775 = RZZjqTPgqI48729625;     RZZjqTPgqI48729625 = RZZjqTPgqI53307734;     RZZjqTPgqI53307734 = RZZjqTPgqI57699765;     RZZjqTPgqI57699765 = RZZjqTPgqI89391820;     RZZjqTPgqI89391820 = RZZjqTPgqI72072838;     RZZjqTPgqI72072838 = RZZjqTPgqI13928424;     RZZjqTPgqI13928424 = RZZjqTPgqI97317099;     RZZjqTPgqI97317099 = RZZjqTPgqI27240166;     RZZjqTPgqI27240166 = RZZjqTPgqI35156920;     RZZjqTPgqI35156920 = RZZjqTPgqI42029822;     RZZjqTPgqI42029822 = RZZjqTPgqI82898925;     RZZjqTPgqI82898925 = RZZjqTPgqI77064248;     RZZjqTPgqI77064248 = RZZjqTPgqI9597634;     RZZjqTPgqI9597634 = RZZjqTPgqI65781445;     RZZjqTPgqI65781445 = RZZjqTPgqI86467363;     RZZjqTPgqI86467363 = RZZjqTPgqI46674182;     RZZjqTPgqI46674182 = RZZjqTPgqI16692735;     RZZjqTPgqI16692735 = RZZjqTPgqI81211210;     RZZjqTPgqI81211210 = RZZjqTPgqI73629420;     RZZjqTPgqI73629420 = RZZjqTPgqI94968423;     RZZjqTPgqI94968423 = RZZjqTPgqI2301102;     RZZjqTPgqI2301102 = RZZjqTPgqI87261419;     RZZjqTPgqI87261419 = RZZjqTPgqI8115342;     RZZjqTPgqI8115342 = RZZjqTPgqI90603117;     RZZjqTPgqI90603117 = RZZjqTPgqI84106815;     RZZjqTPgqI84106815 = RZZjqTPgqI703954;     RZZjqTPgqI703954 = RZZjqTPgqI82592410;     RZZjqTPgqI82592410 = RZZjqTPgqI18309145;     RZZjqTPgqI18309145 = RZZjqTPgqI29240581;     RZZjqTPgqI29240581 = RZZjqTPgqI50267406;     RZZjqTPgqI50267406 = RZZjqTPgqI6497053;     RZZjqTPgqI6497053 = RZZjqTPgqI18794384;     RZZjqTPgqI18794384 = RZZjqTPgqI737116;     RZZjqTPgqI737116 = RZZjqTPgqI1086453;     RZZjqTPgqI1086453 = RZZjqTPgqI59901774;     RZZjqTPgqI59901774 = RZZjqTPgqI49718074;     RZZjqTPgqI49718074 = RZZjqTPgqI86015918;     RZZjqTPgqI86015918 = RZZjqTPgqI67622030;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jLpsOqessqYrRYbslPIxPz49428928() {     int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56559989 = -356669607;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR48527424 = 56152215;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71023576 = -64900292;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR39443236 = -373785568;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR13659302 = -830109588;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92116871 = 78128400;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR44546985 = -192179835;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR40016853 = -321703267;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6767403 = -709363964;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR45904876 = -253752225;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR70010761 = 75592574;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94307126 = -501951175;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7265256 = -186547613;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18101047 = -742687221;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR63015743 = -657457400;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17558938 = -19344751;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64223185 = -760446200;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR83298178 = -937835120;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35289076 = -373763701;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73082998 = -134950485;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94289649 = -996744935;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR59802943 = 87026600;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR16619585 = -970352045;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64920676 = -508161710;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR57877387 = -337839261;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR27971764 = -966543516;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10501873 = -421317286;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87675059 = -234364348;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR28529426 = -436154755;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82740465 = -424421095;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87154574 = 9744109;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR91922276 = -316066217;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR53088099 = -830687294;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29854633 = -147795072;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85072760 = 96581168;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67363576 = -356131893;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10310170 = -917989972;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR46590758 = -140177052;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR49691238 = -5693593;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82822708 = -240068389;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88814784 = -926616365;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6991080 = -822578472;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR60827041 = -824253336;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29988911 = -924378872;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32767993 = -4119715;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR99703608 = -8035723;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73424461 = -667172427;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18037351 = -542038790;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52580752 = -638501908;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR22693351 = -867370448;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR15644101 = -888182356;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7045138 = -11624712;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR14129708 = -121435159;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10689672 = 18575186;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR55139278 = -401780477;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR96757045 = -343696208;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31907840 = 26504260;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6102901 = -556738582;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81565849 = 64053693;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85687538 = -863566072;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81614998 = -500554314;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56871926 = -957815487;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR11487428 = -885548512;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR24026938 = -184942870;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58750301 = -163496335;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR78088484 = -608341209;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR41219027 = -671263882;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77410623 = 61247459;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33028287 = -739268390;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95652167 = -201325507;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7248768 = -101354780;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17632428 = -520269148;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33606941 = -832141527;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52466368 = -33695313;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR84268213 = -208334121;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87298570 = -74166463;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR98975902 = -88720064;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR86630673 = 54026827;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32152684 = -404041996;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58173778 = -229803539;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54547302 = -199371090;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92464521 = -879278497;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35094308 = -595862440;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR5836075 = -568784308;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67096365 = -536238739;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR80109436 = -978631179;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77792569 = -94631059;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR42398427 = -749262481;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR74715355 = -746014596;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88315714 = -559722624;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35455737 = -282636153;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR4207270 = -261251390;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR65024908 = -104230746;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64003699 = -142127522;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR1207710 = -739514075;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31942859 = -968800878;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95503651 = -937029961;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR36800104 = -539310467;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71238609 = -660882537;    int GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54679508 = -356669607;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56559989 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR48527424;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR48527424 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71023576;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71023576 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR39443236;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR39443236 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR13659302;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR13659302 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92116871;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92116871 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR44546985;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR44546985 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR40016853;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR40016853 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6767403;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6767403 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR45904876;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR45904876 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR70010761;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR70010761 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94307126;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94307126 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7265256;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7265256 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18101047;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18101047 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR63015743;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR63015743 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17558938;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17558938 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64223185;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64223185 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR83298178;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR83298178 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35289076;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35289076 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73082998;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73082998 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94289649;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR94289649 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR59802943;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR59802943 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR16619585;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR16619585 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64920676;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64920676 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR57877387;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR57877387 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR27971764;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR27971764 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10501873;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10501873 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87675059;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87675059 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR28529426;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR28529426 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82740465;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82740465 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87154574;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87154574 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR91922276;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR91922276 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR53088099;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR53088099 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29854633;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29854633 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85072760;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85072760 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67363576;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67363576 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10310170;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10310170 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR46590758;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR46590758 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR49691238;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR49691238 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82822708;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR82822708 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88814784;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88814784 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6991080;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6991080 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR60827041;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR60827041 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29988911;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR29988911 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32767993;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32767993 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR99703608;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR99703608 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73424461;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR73424461 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18037351;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR18037351 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52580752;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52580752 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR22693351;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR22693351 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR15644101;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR15644101 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7045138;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7045138 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR14129708;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR14129708 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10689672;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR10689672 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR55139278;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR55139278 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR96757045;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR96757045 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31907840;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31907840 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6102901;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR6102901 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81565849;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81565849 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85687538;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR85687538 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81614998;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR81614998 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56871926;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56871926 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR11487428;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR11487428 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR24026938;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR24026938 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58750301;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58750301 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR78088484;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR78088484 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR41219027;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR41219027 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77410623;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77410623 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33028287;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33028287 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95652167;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95652167 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7248768;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR7248768 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17632428;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR17632428 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33606941;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR33606941 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52466368;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR52466368 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR84268213;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR84268213 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87298570;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR87298570 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR98975902;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR98975902 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR86630673;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR86630673 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32152684;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR32152684 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58173778;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR58173778 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54547302;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54547302 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92464521;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR92464521 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35094308;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35094308 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR5836075;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR5836075 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67096365;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR67096365 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR80109436;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR80109436 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77792569;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR77792569 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR42398427;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR42398427 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR74715355;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR74715355 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88315714;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR88315714 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35455737;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR35455737 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR4207270;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR4207270 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR65024908;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR65024908 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64003699;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR64003699 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR1207710;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR1207710 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31942859;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR31942859 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95503651;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR95503651 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR36800104;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR36800104 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71238609;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR71238609 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54679508;     GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR54679508 = GyeNyNJwYOlaiMyRnhcDhmVHDobmVInFTkFrNAsR56559989;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZjbvBcxGkZyWiqZZPheRSN9731585() {     int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46686297 = -415425808;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31652489 = -318773955;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66516275 = -201694753;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp12941811 = -559957390;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26716038 = -771433029;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72903275 = -914504708;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39210424 = -929725307;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92895416 = 41848994;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30579090 = -717256602;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50160546 = -923626751;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46162580 = -432827583;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp29056634 = 18460689;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45611388 = -498783473;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp56519900 = -740848105;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61090115 = -42578343;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp41738680 = -819724621;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8185366 = 78208559;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4653892 = -280684412;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp96203467 = -840174137;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40407246 = -782828795;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp82212052 = -701170027;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp57884525 = -246070035;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49858003 = -276811966;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72841773 = -956186085;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4762575 = -981350205;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46762728 = -842417251;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp32469208 = -180846280;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10845435 = -294254406;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89738423 = -98353803;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30529545 = -298823486;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp90617976 = -316922434;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91289190 = -816890637;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62057140 = -30912454;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53693277 = -139246230;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20669295 = -653754492;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594583 = -659161303;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10543739 = -433805876;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp70948041 = -6236296;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60224255 = -813155639;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27334850 = -144776162;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp2514458 = -632477640;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61635542 = -637071685;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20643883 = -199678932;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60650852 = -788462061;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24732410 = -116629671;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20142603 = -491659628;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53847752 = -215654927;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8423810 = -568695043;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80499406 = 25558745;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp51973756 = -224366785;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45009624 = -162564401;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50818245 = 23948455;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63582162 = -933288153;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63596734 = -104980096;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27519533 = -530380749;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp88801772 = -69355773;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp81794486 = 58038010;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp93674502 = -245508668;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8179236 = -578607185;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp79953309 = -929015779;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40434068 = -633658428;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp28364989 = -535470902;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp3156993 = -859797203;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49545 = -318433116;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp59542569 = -506704317;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp54873389 = -615936947;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66999494 = -950626857;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91918111 = -259537244;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp35850606 = 12906387;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40495533 = -383417040;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31194941 = -285918746;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37237325 = -915555145;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp44429636 = -467528774;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp68868617 = -595397976;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37892789 = -50351155;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20576510 = 35901658;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37240643 = 53608896;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89207150 = -488349905;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp48109363 = -739556415;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp84619972 = -389690578;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92914976 = -526762325;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24045398 = -612151238;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30346029 = -219813152;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37764667 = -873987019;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp85519921 = -36259086;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39799732 = -240870890;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27707028 = -883602484;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp98460406 = -925932359;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26173745 = -608865482;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31867523 = -484398719;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp38800097 = -617199314;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp16869237 = -88297209;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62768805 = -427629112;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80270945 = -884139861;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp86900781 = -511117734;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp74149469 = 2993261;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp58478549 = -777274483;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594338 = -881245816;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp1108283 = -181757745;    int voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp69859020 = -415425808;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46686297 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31652489;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31652489 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66516275;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66516275 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp12941811;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp12941811 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26716038;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26716038 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72903275;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72903275 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39210424;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39210424 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92895416;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92895416 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30579090;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30579090 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50160546;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50160546 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46162580;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46162580 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp29056634;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp29056634 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45611388;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45611388 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp56519900;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp56519900 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61090115;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61090115 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp41738680;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp41738680 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8185366;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8185366 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4653892;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4653892 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp96203467;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp96203467 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40407246;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40407246 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp82212052;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp82212052 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp57884525;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp57884525 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49858003;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49858003 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72841773;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp72841773 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4762575;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp4762575 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46762728;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46762728 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp32469208;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp32469208 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10845435;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10845435 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89738423;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89738423 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30529545;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30529545 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp90617976;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp90617976 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91289190;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91289190 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62057140;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62057140 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53693277;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53693277 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20669295;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20669295 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594583;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594583 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10543739;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp10543739 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp70948041;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp70948041 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60224255;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60224255 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27334850;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27334850 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp2514458;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp2514458 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61635542;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp61635542 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20643883;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20643883 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60650852;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp60650852 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24732410;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24732410 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20142603;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20142603 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53847752;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp53847752 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8423810;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8423810 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80499406;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80499406 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp51973756;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp51973756 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45009624;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp45009624 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50818245;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp50818245 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63582162;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63582162 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63596734;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp63596734 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27519533;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27519533 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp88801772;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp88801772 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp81794486;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp81794486 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp93674502;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp93674502 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8179236;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp8179236 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp79953309;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp79953309 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40434068;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40434068 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp28364989;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp28364989 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp3156993;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp3156993 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49545;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp49545 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp59542569;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp59542569 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp54873389;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp54873389 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66999494;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp66999494 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91918111;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp91918111 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp35850606;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp35850606 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40495533;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp40495533 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31194941;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31194941 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37237325;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37237325 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp44429636;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp44429636 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp68868617;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp68868617 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37892789;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37892789 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20576510;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20576510 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37240643;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37240643 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89207150;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp89207150 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp48109363;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp48109363 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp84619972;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp84619972 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92914976;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp92914976 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24045398;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp24045398 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30346029;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp30346029 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37764667;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp37764667 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp85519921;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp85519921 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39799732;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp39799732 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27707028;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp27707028 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp98460406;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp98460406 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26173745;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp26173745 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31867523;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp31867523 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp38800097;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp38800097 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp16869237;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp16869237 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62768805;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp62768805 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80270945;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp80270945 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp86900781;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp86900781 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp74149469;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp74149469 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp58478549;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp58478549 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594338;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp20594338 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp1108283;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp1108283 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp69859020;     voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp69859020 = voptEHzgCTVKfZBGPcgRbbrGSRekGKZMWLomFIXp46686297;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void duNBxkxdgoOfDNWaQpSFaF5914746() {     int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA6282394 = -644182186;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33158338 = -128929340;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA3517663 = -275835676;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8817570 = -332568267;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38009264 = -671940057;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA70580396 = -772764381;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36568906 = -259442893;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43720700 = -312362381;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44392534 = -149929101;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33185061 = -864885604;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA71457511 = -834370023;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA63727835 = -76560560;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA16365952 = -404961992;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA14893739 = -645006452;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58397921 = -835104864;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38492934 = -625097513;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44146469 = -950007721;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69322222 = -650020517;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76645670 = -979293767;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA20324356 = -345237448;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA62673171 = -534190851;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA26374124 = -138471913;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA42049828 = -41107045;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37572012 = -520524322;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80740580 = -437487796;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41177635 = -977034722;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45809278 = -630326277;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75956603 = -915635996;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA39522766 = -987946419;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69003012 = -345806728;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA15532295 = -962141762;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34054451 = -134108634;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11139179 = -10859326;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36217720 = -741130162;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25606656 = -301964478;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA99184479 = -970817885;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA1175417 = -726584511;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69308378 = 49311314;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79242197 = -531862155;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA160505 = -418657110;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60732271 = -1139237;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA31714723 = -642013104;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA61523124 = 66876239;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34890357 = -112376800;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25720726 = -662947740;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA84935731 = -734603787;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59336474 = -107510594;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA55120204 = -901448271;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA19889054 = -258378875;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA67141149 = -545619246;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95495874 = 51327375;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA57403398 = 52705200;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38997677 = -73236607;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36871257 = -365149051;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43241574 = -494314836;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79908270 = -405710273;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA91108510 = 12177704;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA65945651 = -755311354;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA28076990 = -895080472;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA96831628 = -694905335;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA24771119 = -42438104;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60612302 = -343806897;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA4197934 = -324415963;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389522 = -804122373;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17652766 = -902743842;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37403061 = -600261389;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA52588657 = 34298766;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80148232 = -663831831;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA89287083 = -243041975;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59213442 = -864286979;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37317518 = -898513002;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74838091 = -899319036;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90080024 = -18158362;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76485166 = -460636658;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59592084 = -244098211;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA30958448 = -892177748;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA64850999 = -105348153;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA7159471 = -928730246;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11851287 = -857576583;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95804848 = -702884009;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA81841161 = -769524129;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90689074 = -728878007;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA56067550 = -557257122;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA72381617 = -342327173;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA73507137 = -297134104;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58128897 = -914846962;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95056774 = 39127973;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74267921 = -645710276;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA92976145 = -146815326;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45698385 = -896254205;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8075969 = -882995590;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA35229765 = -971273158;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41231389 = -55608214;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA82410569 = -836956821;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389385 = -276219006;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA119969 = -657332340;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA27516790 = -217597141;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA86133602 = -129001389;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17237591 = -209632958;    int qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA88317665 = -644182186;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA6282394 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33158338;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33158338 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA3517663;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA3517663 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8817570;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8817570 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38009264;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38009264 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA70580396;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA70580396 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36568906;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36568906 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43720700;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43720700 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44392534;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44392534 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33185061;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA33185061 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA71457511;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA71457511 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA63727835;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA63727835 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA16365952;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA16365952 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA14893739;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA14893739 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58397921;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58397921 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38492934;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38492934 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44146469;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA44146469 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69322222;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69322222 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76645670;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76645670 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA20324356;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA20324356 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA62673171;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA62673171 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA26374124;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA26374124 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA42049828;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA42049828 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37572012;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37572012 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80740580;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80740580 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41177635;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41177635 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45809278;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45809278 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75956603;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75956603 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA39522766;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA39522766 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69003012;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69003012 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA15532295;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA15532295 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34054451;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34054451 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11139179;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11139179 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36217720;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36217720 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25606656;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25606656 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA99184479;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA99184479 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA1175417;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA1175417 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69308378;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA69308378 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79242197;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79242197 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA160505;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA160505 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60732271;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60732271 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA31714723;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA31714723 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA61523124;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA61523124 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34890357;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA34890357 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25720726;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA25720726 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA84935731;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA84935731 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59336474;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59336474 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA55120204;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA55120204 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA19889054;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA19889054 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA67141149;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA67141149 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95495874;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95495874 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA57403398;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA57403398 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38997677;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA38997677 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36871257;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA36871257 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43241574;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA43241574 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79908270;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA79908270 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA91108510;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA91108510 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA65945651;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA65945651 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA28076990;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA28076990 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA96831628;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA96831628 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA24771119;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA24771119 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60612302;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA60612302 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA4197934;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA4197934 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389522;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389522 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17652766;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17652766 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37403061;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37403061 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA52588657;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA52588657 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80148232;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA80148232 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA89287083;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA89287083 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59213442;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59213442 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37317518;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA37317518 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74838091;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74838091 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90080024;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90080024 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76485166;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA76485166 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59592084;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA59592084 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA30958448;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA30958448 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA64850999;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA64850999 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA7159471;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA7159471 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11851287;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA11851287 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95804848;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95804848 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA81841161;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA81841161 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90689074;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA90689074 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA56067550;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA56067550 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA72381617;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA72381617 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA73507137;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA73507137 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58128897;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA58128897 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95056774;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA95056774 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74267921;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA74267921 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA92976145;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA92976145 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45698385;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA45698385 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8075969;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA8075969 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA35229765;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA35229765 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41231389;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA41231389 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA82410569;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA82410569 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389385;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA75389385 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA119969;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA119969 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA27516790;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA27516790 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA86133602;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA86133602 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17237591;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA17237591 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA88317665;     qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA88317665 = qLiZjxnGqnJDfupkhALdtlPXDcMHYPCqAXDCTYBA6282394;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void teayTeCgXBwrmtNZkxDdug18459934() {     int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25750565 = 42686602;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc86182202 = -674807336;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc20354655 = 72535710;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27464718 = -149142530;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc38455780 = -198212473;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc96172470 = -663249150;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81400784 = -702749123;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8970934 = -406170347;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5079332 = -878120480;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11113784 = -870471650;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25680775 = -167360323;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc67222449 = -75863265;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc6737611 = -829319268;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc23309779 = -87292178;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18924383 = -33188655;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4708583 = 11710553;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc50108583 = -21782403;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc93384973 = -400775235;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc76280549 = -256498528;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc935658 = 37226096;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75129243 = -40403177;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41356207 = -650275126;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10222834 = -338681663;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55293681 = -157068314;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91944069 = -731787905;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45945097 = -662829941;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc29737409 = -295477209;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc26748279 = 20630725;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81267723 = 98142435;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53709866 = -437245423;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45336380 = -827467855;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73633761 = -698457652;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc22615282 = -566067093;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc94974226 = 54266632;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65536991 = -364667284;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35250417 = -174386494;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69558867 = -153460586;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10790853 = -27897501;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46555523 = -996276981;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc21442240 = -415188206;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc2214329 = -510925532;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43573856 = -880909330;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc32656366 = -980925559;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18275896 = -561449461;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5749137 = -940070703;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39396858 = -171935208;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41326354 = -21203917;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55276034 = 15264414;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc61024645 = -272318113;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8039492 = -306631591;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69931443 = -355037556;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73852258 = -324647660;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8822823 = -849345568;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc9801286 = -359742687;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43330691 = -268873471;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc84394357 = -307038272;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75959368 = -236125673;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65060974 = -770395977;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35520649 = -417354626;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc92510683 = -535382533;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc66435062 = -267771941;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54652506 = -623379848;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27703211 = -404312783;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51369465 = -340875058;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65777404 = 56996204;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52047013 = -468902671;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc44607167 = -509796172;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11763385 = -783585901;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc57772787 = -722624895;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83673965 = -858802162;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35149716 = -834828861;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39317730 = -993884902;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46829451 = -404498255;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54838309 = -841310322;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc98721329 = -451848372;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc31555387 = -159493848;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8699842 = -669349568;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91946938 = -777232203;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc49544544 = -216997612;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52547211 = -459852697;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4618743 = -541626024;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc74461375 = -210741624;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65723633 = -707051163;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73228231 = -595225974;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83778422 = 17792133;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc71484122 = -402820196;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc64810938 = -849112085;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc12813997 = -106324406;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51643535 = -676859898;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81142634 = 42370987;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc59291048 = -938260821;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4497893 = -383064609;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75270203 = -610542876;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54044839 = -360894448;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55007178 = -47416266;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc47561822 = -887545685;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc15870646 = -376596547;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81286900 = -540050502;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52498492 = -518445665;    int qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53702123 = 42686602;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25750565 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc86182202;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc86182202 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc20354655;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc20354655 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27464718;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27464718 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc38455780;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc38455780 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc96172470;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc96172470 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81400784;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81400784 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8970934;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8970934 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5079332;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5079332 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11113784;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11113784 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25680775;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25680775 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc67222449;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc67222449 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc6737611;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc6737611 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc23309779;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc23309779 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18924383;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18924383 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4708583;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4708583 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc50108583;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc50108583 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc93384973;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc93384973 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc76280549;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc76280549 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc935658;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc935658 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75129243;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75129243 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41356207;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41356207 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10222834;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10222834 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55293681;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55293681 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91944069;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91944069 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45945097;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45945097 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc29737409;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc29737409 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc26748279;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc26748279 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81267723;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81267723 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53709866;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53709866 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45336380;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc45336380 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73633761;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73633761 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc22615282;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc22615282 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc94974226;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc94974226 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65536991;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65536991 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35250417;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35250417 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69558867;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69558867 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10790853;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc10790853 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46555523;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46555523 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc21442240;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc21442240 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc2214329;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc2214329 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43573856;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43573856 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc32656366;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc32656366 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18275896;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc18275896 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5749137;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc5749137 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39396858;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39396858 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41326354;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc41326354 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55276034;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55276034 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc61024645;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc61024645 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8039492;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8039492 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69931443;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc69931443 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73852258;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73852258 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8822823;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8822823 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc9801286;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc9801286 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43330691;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc43330691 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc84394357;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc84394357 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75959368;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75959368 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65060974;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65060974 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35520649;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35520649 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc92510683;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc92510683 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc66435062;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc66435062 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54652506;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54652506 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27703211;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc27703211 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51369465;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51369465 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65777404;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65777404 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52047013;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52047013 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc44607167;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc44607167 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11763385;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc11763385 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc57772787;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc57772787 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83673965;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83673965 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35149716;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc35149716 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39317730;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc39317730 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46829451;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc46829451 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54838309;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54838309 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc98721329;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc98721329 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc31555387;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc31555387 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8699842;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc8699842 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91946938;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc91946938 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc49544544;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc49544544 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52547211;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52547211 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4618743;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4618743 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc74461375;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc74461375 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65723633;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc65723633 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73228231;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc73228231 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83778422;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc83778422 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc71484122;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc71484122 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc64810938;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc64810938 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc12813997;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc12813997 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51643535;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc51643535 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81142634;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81142634 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc59291048;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc59291048 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4497893;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc4497893 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75270203;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc75270203 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54044839;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc54044839 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55007178;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc55007178 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc47561822;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc47561822 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc15870646;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc15870646 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81286900;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc81286900 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52498492;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc52498492 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53702123;     qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc53702123 = qnxlpZWczFycgSapNGyFzKCruFLXxHeOLNonAipc25750565;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jPwvMZxHYopskjvkZKzzvK14643094() {     int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85346661 = -186069775;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba87688051 = -484962721;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba57356043 = -1605213;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23340477 = 78246592;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba49749006 = -98719500;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93849591 = -521508823;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba78759267 = -32466709;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59796217 = -760381722;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18892775 = -310792979;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94138298 = -811730504;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50975706 = -568902762;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1893651 = -170884514;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77492174 = -735497787;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba81683617 = 8549475;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16232188 = -825715176;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1462837 = -893662338;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86069686 = 50001317;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba58053304 = -770111340;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56722752 = -395618157;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80852766 = -625182557;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55590361 = -973424001;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9845806 = -542677004;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2414659 = -102976742;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20023920 = -821406551;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba67922074 = -187925495;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba40360004 = -797447412;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43077479 = -744957206;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91859447 = -600750866;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba31052066 = -791450180;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92183332 = -484228665;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70250698 = -372687183;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16399022 = -15675649;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71697321 = -546013965;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77498669 = -547617299;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70474352 = -12877270;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13840313 = -486043075;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60190544 = -446239220;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9151191 = 27650109;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba65573465 = -714983497;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94267894 = -689069155;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60432142 = -979587129;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13653038 = -885850748;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73535608 = -714370388;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92515400 = -985364199;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba6737452 = -386388771;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba4189987 = -414879367;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46815076 = 86940416;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1972428 = -317488814;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba414293 = -556255733;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23206884 = -627884052;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20417694 = -141145780;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80437410 = -295890915;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84238337 = 10705978;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba83075808 = -619911642;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59052733 = -232807558;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba75500855 = -643392772;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85273393 = -281985979;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba37332123 = -180198663;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55418403 = -733827913;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9389003 = -301272089;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50772112 = -776551617;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86899820 = -431715844;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28744152 = -968931543;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba26709443 = -826564315;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23887601 = -339043321;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba34576685 = -453227113;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba30196330 = -624870549;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba99993505 = -87880488;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba11209266 = -978573256;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2391876 = -239672101;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41272293 = -347423118;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba76918496 = -977648793;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92479838 = 44872157;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba62454857 = -706549003;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20420625 = -645595428;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41937324 = 12426746;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba36310198 = -828306616;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9899258 = -117612544;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13286468 = -335017780;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba63732087 = -773046128;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93544927 = -784387828;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41105052 = -327468393;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91445154 = 55504867;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba7845183 = -63566128;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71765638 = -243082885;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba89813287 = 23203731;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba32160685 = 73618372;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba88621512 = -926102323;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18445936 = -214809742;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94973497 = -369484499;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28566920 = -104057097;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba22858421 = -166040558;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba53732787 = -238521978;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56184463 = -313711409;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43495783 = -912517538;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73532321 = -447871286;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84908886 = -916919206;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46826166 = -887806074;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba68627800 = -546320879;    int eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba72160767 = -186069775;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85346661 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba87688051;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba87688051 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba57356043;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba57356043 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23340477;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23340477 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba49749006;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba49749006 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93849591;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93849591 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba78759267;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba78759267 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59796217;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59796217 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18892775;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18892775 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94138298;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94138298 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50975706;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50975706 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1893651;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1893651 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77492174;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77492174 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba81683617;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba81683617 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16232188;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16232188 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1462837;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1462837 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86069686;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86069686 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba58053304;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba58053304 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56722752;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56722752 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80852766;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80852766 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55590361;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55590361 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9845806;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9845806 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2414659;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2414659 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20023920;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20023920 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba67922074;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba67922074 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba40360004;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba40360004 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43077479;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43077479 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91859447;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91859447 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba31052066;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba31052066 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92183332;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92183332 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70250698;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70250698 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16399022;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba16399022 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71697321;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71697321 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77498669;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba77498669 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70474352;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba70474352 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13840313;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13840313 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60190544;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60190544 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9151191;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9151191 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba65573465;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba65573465 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94267894;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94267894 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60432142;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba60432142 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13653038;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13653038 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73535608;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73535608 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92515400;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92515400 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba6737452;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba6737452 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba4189987;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba4189987 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46815076;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46815076 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1972428;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba1972428 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba414293;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba414293 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23206884;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23206884 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20417694;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20417694 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80437410;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba80437410 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84238337;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84238337 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba83075808;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba83075808 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59052733;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba59052733 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba75500855;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba75500855 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85273393;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85273393 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba37332123;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba37332123 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55418403;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba55418403 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9389003;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9389003 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50772112;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba50772112 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86899820;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba86899820 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28744152;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28744152 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba26709443;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba26709443 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23887601;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba23887601 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba34576685;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba34576685 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba30196330;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba30196330 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba99993505;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba99993505 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba11209266;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba11209266 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2391876;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba2391876 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41272293;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41272293 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba76918496;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba76918496 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92479838;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba92479838 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba62454857;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba62454857 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20420625;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba20420625 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41937324;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41937324 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba36310198;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba36310198 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9899258;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba9899258 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13286468;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba13286468 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba63732087;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba63732087 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93544927;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba93544927 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41105052;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba41105052 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91445154;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba91445154 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba7845183;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba7845183 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71765638;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba71765638 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba89813287;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba89813287 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba32160685;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba32160685 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba88621512;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba88621512 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18445936;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba18445936 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94973497;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba94973497 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28566920;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba28566920 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba22858421;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba22858421 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba53732787;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba53732787 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56184463;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba56184463 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43495783;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba43495783 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73532321;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba73532321 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84908886;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba84908886 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46826166;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba46826166 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba68627800;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba68627800 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba72160767;     eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba72160767 = eGakyWbGNSoxcyASAXOBjeYTZtSMOTksYYkqUcba85346661;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JhTzjPjKctVnhfpRiqzKJR74945751() {     int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75472969 = -244825976;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz70813116 = -859888891;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52848742 = -138399674;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96839051 = -107925230;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz62805742 = -40042942;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74635995 = -414141931;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73422705 = -770012182;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12674781 = -396829461;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz42704462 = -318685617;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98393969 = -381605029;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27127526 = 22677080;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz36643158 = -750472649;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15838307 = 52266353;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20102472 = 10388590;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14306560 = -210836119;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz25642579 = -594042208;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30031867 = -211343924;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz79409017 = -112960632;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz17637144 = -862028593;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz48177015 = -173060866;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz43512764 = -677849094;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz7927388 = -875773639;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35653077 = -509436663;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27945017 = -169430926;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14807262 = -831436439;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz59150968 = -673321146;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65044814 = -504486200;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15029823 = -660640924;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92261063 = -453649228;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39972413 = -358631056;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73714101 = -699353727;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15765936 = -516500069;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz80666361 = -846239125;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz1337314 = -539068457;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz6070887 = -763212930;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67071320 = -789072486;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz60424113 = 37944875;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33508474 = -938409135;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz76106482 = -422445543;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38780036 = -593776928;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74131815 = -685448404;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz68297500 = -700343961;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33352449 = -89795984;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz23177342 = -849447388;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98701869 = -498898727;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24628981 = -898503273;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27238367 = -561542084;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92358886 = -344145067;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz28332947 = -992195079;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52487289 = 15119611;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49783218 = -515527825;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24210518 = -260317748;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33690793 = -801147017;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35982871 = -743466924;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31432988 = -361407829;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67545582 = -369052337;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35160040 = -250452229;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24903725 = -968968748;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82031789 = -276488791;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3654774 = -366721796;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz9591182 = -909655731;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz58392883 = -9371258;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20413717 = -943180234;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz2732050 = -960054561;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24679868 = -682251303;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz11361590 = -460822851;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz55976796 = -904233525;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14500993 = -408665191;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14031585 = -226398480;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47235240 = -421763634;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65218466 = -531987084;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96523393 = -272934790;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3302535 = -690515090;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz78857107 = -168251666;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74045199 = -487612462;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75215263 = -977505133;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74574938 = -685977656;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12475735 = -659989276;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29243148 = -670532200;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90178281 = -932933167;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31912602 = -11779063;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72685927 = -60341133;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz86696876 = -668445845;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39773774 = -368768839;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90189194 = -843103232;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49503583 = -339035979;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82075143 = -715353053;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz44683491 = -2772201;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz69904326 = -77660628;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38525305 = -294160594;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31911280 = -438620258;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35520388 = 6913623;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz51476684 = -561920344;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72451709 = 44276253;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29188855 = -684121197;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15738932 = -576077147;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47883784 = -757163728;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30620399 = -129741423;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98497473 = -67196086;    int WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz87340279 = -244825976;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75472969 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz70813116;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz70813116 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52848742;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52848742 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96839051;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96839051 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz62805742;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz62805742 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74635995;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74635995 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73422705;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73422705 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12674781;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12674781 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz42704462;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz42704462 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98393969;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98393969 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27127526;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27127526 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz36643158;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz36643158 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15838307;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15838307 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20102472;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20102472 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14306560;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14306560 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz25642579;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz25642579 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30031867;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30031867 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz79409017;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz79409017 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz17637144;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz17637144 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz48177015;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz48177015 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz43512764;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz43512764 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz7927388;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz7927388 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35653077;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35653077 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27945017;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27945017 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14807262;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14807262 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz59150968;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz59150968 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65044814;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65044814 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15029823;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15029823 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92261063;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92261063 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39972413;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39972413 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73714101;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz73714101 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15765936;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15765936 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz80666361;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz80666361 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz1337314;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz1337314 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz6070887;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz6070887 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67071320;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67071320 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz60424113;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz60424113 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33508474;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33508474 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz76106482;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz76106482 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38780036;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38780036 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74131815;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74131815 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz68297500;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz68297500 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33352449;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33352449 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz23177342;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz23177342 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98701869;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98701869 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24628981;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24628981 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27238367;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz27238367 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92358886;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz92358886 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz28332947;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz28332947 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52487289;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz52487289 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49783218;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49783218 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24210518;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24210518 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33690793;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz33690793 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35982871;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35982871 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31432988;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31432988 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67545582;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz67545582 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35160040;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35160040 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24903725;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24903725 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82031789;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82031789 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3654774;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3654774 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz9591182;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz9591182 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz58392883;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz58392883 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20413717;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz20413717 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz2732050;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz2732050 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24679868;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz24679868 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz11361590;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz11361590 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz55976796;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz55976796 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14500993;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14500993 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14031585;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz14031585 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47235240;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47235240 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65218466;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz65218466 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96523393;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz96523393 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3302535;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz3302535 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz78857107;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz78857107 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74045199;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74045199 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75215263;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75215263 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74574938;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz74574938 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12475735;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz12475735 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29243148;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29243148 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90178281;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90178281 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31912602;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31912602 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72685927;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72685927 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz86696876;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz86696876 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39773774;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz39773774 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90189194;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz90189194 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49503583;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz49503583 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82075143;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz82075143 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz44683491;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz44683491 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz69904326;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz69904326 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38525305;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz38525305 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31911280;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz31911280 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35520388;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz35520388 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz51476684;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz51476684 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72451709;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz72451709 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29188855;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz29188855 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15738932;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz15738932 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47883784;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz47883784 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30620399;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz30620399 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98497473;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz98497473 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz87340279;     WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz87340279 = WSSnojakHBRANcIWkkKQflxjXfsxNbnymsLAhwaz75472969;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void SzddgerQMyBSrvuEmGsutC87490940() {     int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih94941140 = -657957188;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih23836981 = -305766888;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69685733 = -890028289;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15486201 = 75500507;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63252258 = -666315358;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih228070 = -304626699;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18254584 = -113318412;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih77925013 = -490637427;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3391260 = 53123004;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih76322692 = -387191075;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih81350789 = -410313220;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40137772 = -749775354;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6209966 = -372090924;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28518512 = -531897135;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74833021 = -508919911;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih91858228 = 42765858;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih35993980 = -383118606;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3471769 = -963715350;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih17272023 = -139233354;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28788317 = -890597323;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55968836 = -184061419;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih22909471 = -287576852;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3826083 = -807011282;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih45666685 = -905974918;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26010751 = -25736548;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63918430 = -359116365;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih48972945 = -169637132;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih65821497 = -824374203;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih34006021 = -467560374;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24679267 = -450069751;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3518187 = -564679820;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55345246 = 19150913;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92142465 = -301446892;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60093821 = -843671663;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46001223 = -825915736;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3137257 = 7358906;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28807564 = -488931200;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74990948 = 84382050;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43419808 = -886860368;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60061772 = -590308024;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15613872 = -95234700;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih80156633 = -939240187;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4485691 = -37597781;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6562881 = -198520049;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78730280 = -776021690;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih79090107 = -335834694;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih9228247 = -475235406;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92514716 = -527432382;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69468537 = 93865682;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih93385631 = -845892734;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24218787 = -921892756;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40659378 = -637670607;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3515939 = -477255978;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8912900 = -738060560;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih31522105 = -135966464;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72031669 = -270380336;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih20010898 = -498755606;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24019049 = -984053371;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih89475449 = -898762945;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih99333828 = -207198994;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51255125 = -34989568;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52433087 = -288944209;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43918993 = 76922946;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78711993 = -496807246;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72804506 = -822511256;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26005543 = -329464133;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih47995307 = -348328463;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46116145 = -528419261;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih82517288 = -705981400;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih71695764 = -416278817;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63050664 = -468302943;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih61003032 = -367500656;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60051961 = 23145017;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih57210250 = -548925330;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih13174445 = -695362623;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih75812202 = -244821233;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18423781 = -149979072;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih97263202 = -508491234;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih66936405 = -29953229;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46920643 = -689901855;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih54690184 = -883880959;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih56458228 = -642204751;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih96352959 = -818239886;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40620389 = -621667640;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih460480 = -528176995;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih62858808 = -927009213;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51829308 = -503593110;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83229565 = -563386332;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28571716 = -607705200;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih73969553 = -455535401;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83126359 = -493885488;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4788516 = -504877829;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih85515498 = -16855006;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih44085979 = -579661375;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8806648 = -455318457;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63180785 = -806290491;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih36237640 = -916163134;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih25773697 = -540790536;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih33758375 = -376008794;    int CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52724738 = -657957188;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih94941140 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih23836981;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih23836981 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69685733;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69685733 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15486201;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15486201 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63252258;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63252258 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih228070;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih228070 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18254584;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18254584 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih77925013;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih77925013 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3391260;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3391260 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih76322692;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih76322692 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih81350789;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih81350789 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40137772;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40137772 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6209966;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6209966 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28518512;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28518512 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74833021;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74833021 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih91858228;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih91858228 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih35993980;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih35993980 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3471769;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3471769 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih17272023;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih17272023 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28788317;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28788317 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55968836;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55968836 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih22909471;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih22909471 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3826083;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3826083 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih45666685;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih45666685 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26010751;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26010751 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63918430;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63918430 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih48972945;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih48972945 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih65821497;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih65821497 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih34006021;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih34006021 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24679267;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24679267 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3518187;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3518187 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55345246;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih55345246 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92142465;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92142465 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60093821;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60093821 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46001223;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46001223 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3137257;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3137257 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28807564;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28807564 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74990948;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih74990948 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43419808;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43419808 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60061772;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60061772 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15613872;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih15613872 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih80156633;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih80156633 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4485691;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4485691 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6562881;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih6562881 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78730280;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78730280 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih79090107;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih79090107 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih9228247;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih9228247 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92514716;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih92514716 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69468537;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih69468537 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih93385631;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih93385631 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24218787;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24218787 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40659378;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40659378 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3515939;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih3515939 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8912900;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8912900 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih31522105;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih31522105 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72031669;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72031669 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih20010898;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih20010898 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24019049;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih24019049 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih89475449;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih89475449 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih99333828;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih99333828 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51255125;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51255125 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52433087;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52433087 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43918993;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih43918993 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78711993;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih78711993 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72804506;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih72804506 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26005543;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih26005543 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih47995307;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih47995307 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46116145;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46116145 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih82517288;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih82517288 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih71695764;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih71695764 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63050664;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63050664 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih61003032;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih61003032 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60051961;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih60051961 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih57210250;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih57210250 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih13174445;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih13174445 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih75812202;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih75812202 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18423781;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih18423781 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih97263202;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih97263202 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih66936405;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih66936405 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46920643;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih46920643 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih54690184;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih54690184 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih56458228;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih56458228 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih96352959;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih96352959 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40620389;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih40620389 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih460480;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih460480 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih62858808;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih62858808 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51829308;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih51829308 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83229565;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83229565 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28571716;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih28571716 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih73969553;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih73969553 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83126359;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih83126359 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4788516;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih4788516 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih85515498;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih85515498 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih44085979;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih44085979 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8806648;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih8806648 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63180785;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih63180785 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih36237640;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih36237640 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih25773697;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih25773697 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih33758375;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih33758375 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52724738;     CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih52724738 = CDayvJYBnPwTGWtvCJTenbnSdQTiKZtPOQxaDiih94941140;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jsRupRoeqrqBhBOOdLnEmd83674100() {     int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54537237 = -886713565;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG25342830 = -115922273;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6687122 = -964169212;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG11361959 = -797110370;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74545484 = -566822385;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97905190 = -162886372;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15613067 = -543035998;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28750298 = -844848802;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG17204704 = -479549495;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59347207 = -328449929;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6645721 = -811855659;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74808973 = -844796603;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG76964529 = -278269442;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86892350 = -436055483;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG72140827 = -201446432;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88612482 = -862607033;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71955083 = -311334886;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG68140099 = -233051455;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97714225 = -278352984;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8705426 = -453005976;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG36429954 = -17082244;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91399069 = -179978730;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96017908 = -571306361;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG10396925 = -470313155;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG1988756 = -581874138;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58333337 = -493733836;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62313016 = -619117129;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30932666 = -345755793;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG83790363 = -257152989;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63152733 = -497052993;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28432505 = -109899148;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98110506 = -398067085;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG41224504 = -281393764;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG42618263 = -345555595;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50938584 = -474125722;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81727153 = -304297676;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19439242 = -781709834;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73351285 = -960070340;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62437750 = -605566885;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG32887427 = -864188973;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73831685 = -563896297;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50235815 = -944181606;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG45364933 = -871042611;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG80802385 = -622434788;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG79718596 = -222339759;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43883236 = -578778853;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG14716969 = -367091073;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG39211111 = -860185610;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8858186 = -190071937;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8553025 = -67145195;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74705037 = -708000980;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244531 = -608913863;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG78931453 = -717204431;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG82187422 = -998229516;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244146 = -99900551;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63138167 = -606734835;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG29324922 = -544615912;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96290197 = -393856057;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG9373203 = -115236232;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG16212148 = 26911450;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35592175 = -543769244;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG84680400 = -97280205;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG44959934 = -487695814;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54051970 = -982496503;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30914703 = -118550781;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8535214 = -313788575;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG33584470 = -463402840;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34346266 = -932713848;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35953766 = -961929761;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG90413673 = -897148756;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG69173241 = 19102801;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98603798 = -351264547;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5702349 = -627484571;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG64826798 = -414164012;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34873740 = -889109679;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86194139 = -72900639;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46034137 = -308936120;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15215523 = -948871574;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30678329 = -147973397;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58105519 = 96904714;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43616368 = -26642763;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23101905 = -758931520;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG22074481 = -55683856;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG75237339 = -90007794;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88447696 = -789052013;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81187973 = -500985286;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19179054 = -680862654;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59037081 = -283164249;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG95374116 = -145655044;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG87800416 = -867390887;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG52402231 = -759681764;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23149044 = -287853777;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63978082 = -744834108;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46225603 = -532478335;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97295252 = -220419729;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG89151285 = -366616092;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5275881 = -356485792;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91312962 = -888546108;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG49887683 = -403884007;    int kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71183382 = -886713565;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54537237 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG25342830;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG25342830 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6687122;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6687122 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG11361959;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG11361959 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74545484;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74545484 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97905190;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97905190 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15613067;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15613067 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28750298;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28750298 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG17204704;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG17204704 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59347207;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59347207 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6645721;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG6645721 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74808973;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74808973 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG76964529;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG76964529 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86892350;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86892350 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG72140827;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG72140827 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88612482;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88612482 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71955083;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71955083 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG68140099;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG68140099 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97714225;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97714225 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8705426;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8705426 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG36429954;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG36429954 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91399069;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91399069 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96017908;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96017908 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG10396925;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG10396925 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG1988756;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG1988756 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58333337;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58333337 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62313016;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62313016 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30932666;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30932666 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG83790363;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG83790363 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63152733;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63152733 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28432505;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG28432505 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98110506;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98110506 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG41224504;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG41224504 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG42618263;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG42618263 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50938584;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50938584 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81727153;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81727153 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19439242;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19439242 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73351285;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73351285 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62437750;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG62437750 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG32887427;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG32887427 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73831685;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG73831685 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50235815;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG50235815 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG45364933;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG45364933 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG80802385;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG80802385 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG79718596;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG79718596 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43883236;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43883236 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG14716969;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG14716969 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG39211111;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG39211111 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8858186;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8858186 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8553025;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8553025 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74705037;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG74705037 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244531;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244531 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG78931453;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG78931453 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG82187422;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG82187422 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244146;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG47244146 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63138167;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63138167 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG29324922;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG29324922 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96290197;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG96290197 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG9373203;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG9373203 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG16212148;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG16212148 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35592175;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35592175 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG84680400;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG84680400 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG44959934;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG44959934 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54051970;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54051970 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30914703;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30914703 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8535214;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG8535214 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG33584470;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG33584470 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34346266;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34346266 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35953766;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG35953766 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG90413673;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG90413673 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG69173241;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG69173241 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98603798;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG98603798 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5702349;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5702349 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG64826798;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG64826798 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34873740;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG34873740 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86194139;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG86194139 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46034137;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46034137 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15215523;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG15215523 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30678329;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG30678329 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58105519;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG58105519 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43616368;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG43616368 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23101905;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23101905 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG22074481;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG22074481 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG75237339;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG75237339 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88447696;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG88447696 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81187973;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG81187973 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19179054;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG19179054 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59037081;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG59037081 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG95374116;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG95374116 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG87800416;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG87800416 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG52402231;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG52402231 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23149044;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG23149044 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63978082;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG63978082 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46225603;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG46225603 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97295252;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG97295252 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG89151285;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG89151285 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5275881;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG5275881 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91312962;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG91312962 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG49887683;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG49887683 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71183382;     kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG71183382 = kRGzyiQPXOpNxFKtSDuZUaUVXyFlVQXUTGIAopTG54537237;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void itidIHdnurvoabhTzeLaye70153976() {     int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54254788 = -803619249;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13902982 = -332950172;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65166117 = -317951056;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo69546187 = -346298692;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5525523 = -209919345;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo2472790 = -788353762;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34045490 = -663701406;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34364683 = -63640904;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66884957 = -530349185;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44107028 = -942188461;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23332925 = -41422310;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54948440 = -771014760;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59954910 = -787927677;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49068208 = -47239503;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo51402086 = -351128535;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo90469889 = -342956532;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93767937 = -915607335;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo96414542 = -518040568;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo79392022 = -797369750;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo60002105 = -572311277;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64565543 = -987377941;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91692449 = 37028844;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49106949 = -261279742;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65785841 = -943366159;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71183966 = -726543062;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58969766 = -985379488;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75286607 = 46274095;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45766854 = -933752683;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54292539 = -468497388;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo31482682 = -175012157;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo81869734 = -822104945;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo28785574 = 40024177;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13364901 = -988023958;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49193478 = -21401983;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo3241009 = 32843188;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45669199 = -703807978;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44260514 = -940044407;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98507166 = -767028983;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo68473908 = -291246509;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo29129893 = 75148542;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36640923 = 20622907;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64232704 = -908960299;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16273536 = -949260726;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5127756 = -578156048;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo85684868 = -411112335;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59436335 = -339380420;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71402325 = -718389707;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo7831650 = -851166109;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65160279 = -307771799;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo18034890 = -535662658;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo14501339 = -552407504;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58513234 = -556193262;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35385684 = -313046386;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66056711 = -955893641;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5588434 = -10109368;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62562339 = -740648094;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64796033 = 28329570;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo99380275 = -374584897;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98362221 = -619755630;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46555756 = -224539858;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27186183 = -734627858;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo88278635 = -729948724;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80072143 = -595143517;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35402276 = -255337028;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62237293 = -20083516;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo94547350 = 18553512;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo41583540 = -782990802;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo10761432 = -666525694;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45827200 = 19917309;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5732888 = -647320557;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46209375 = -402912126;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo95260771 = -48578353;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27940635 = -126794060;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo50262129 = -772518292;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23361183 = -492934185;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo332839 = 21582358;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75418913 = -13710430;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43979193 = -683123695;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80100973 = -432253825;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo11747631 = -287162643;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo87567441 = -166989781;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo67454958 = -102559796;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80606575 = -525980884;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36257650 = -932834731;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16981344 = -622604653;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23356500 = -165911684;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93399890 = -646929437;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo47308190 = 67869682;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43605045 = 88707385;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo40678669 = -226508718;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80873165 = -632137548;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44880238 = -465459510;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo144945 = -47273353;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo21918152 = 33293348;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo1943711 = -190223601;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo48362287 = -249428369;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo84160561 = -213816783;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80871260 = -593923698;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo42890462 = -458072532;    int rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91137517 = -803619249;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54254788 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13902982;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13902982 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65166117;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65166117 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo69546187;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo69546187 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5525523;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5525523 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo2472790;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo2472790 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34045490;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34045490 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34364683;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo34364683 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66884957;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66884957 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44107028;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44107028 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23332925;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23332925 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54948440;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54948440 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59954910;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59954910 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49068208;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49068208 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo51402086;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo51402086 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo90469889;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo90469889 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93767937;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93767937 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo96414542;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo96414542 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo79392022;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo79392022 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo60002105;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo60002105 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64565543;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64565543 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91692449;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91692449 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49106949;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49106949 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65785841;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65785841 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71183966;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71183966 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58969766;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58969766 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75286607;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75286607 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45766854;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45766854 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54292539;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54292539 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo31482682;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo31482682 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo81869734;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo81869734 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo28785574;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo28785574 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13364901;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo13364901 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49193478;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo49193478 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo3241009;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo3241009 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45669199;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45669199 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44260514;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44260514 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98507166;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98507166 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo68473908;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo68473908 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo29129893;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo29129893 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36640923;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36640923 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64232704;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64232704 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16273536;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16273536 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5127756;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5127756 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo85684868;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo85684868 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59436335;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo59436335 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71402325;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo71402325 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo7831650;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo7831650 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65160279;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo65160279 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo18034890;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo18034890 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo14501339;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo14501339 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58513234;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo58513234 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35385684;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35385684 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66056711;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo66056711 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5588434;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5588434 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62562339;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62562339 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64796033;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo64796033 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo99380275;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo99380275 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98362221;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo98362221 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46555756;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46555756 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27186183;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27186183 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo88278635;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo88278635 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80072143;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80072143 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35402276;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo35402276 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62237293;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo62237293 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo94547350;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo94547350 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo41583540;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo41583540 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo10761432;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo10761432 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45827200;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo45827200 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5732888;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo5732888 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46209375;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo46209375 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo95260771;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo95260771 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27940635;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo27940635 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo50262129;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo50262129 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23361183;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23361183 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo332839;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo332839 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75418913;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo75418913 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43979193;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43979193 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80100973;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80100973 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo11747631;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo11747631 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo87567441;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo87567441 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo67454958;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo67454958 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80606575;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80606575 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36257650;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo36257650 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16981344;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo16981344 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23356500;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo23356500 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93399890;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo93399890 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo47308190;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo47308190 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43605045;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo43605045 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo40678669;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo40678669 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80873165;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80873165 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44880238;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo44880238 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo144945;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo144945 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo21918152;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo21918152 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo1943711;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo1943711 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo48362287;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo48362287 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo84160561;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo84160561 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80871260;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo80871260 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo42890462;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo42890462 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91137517;     rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo91137517 = rYoNspZflZAbyElYeIxvzdOctYyylBoDkDCKpvOo54254788;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void CUddNFroSHTeEOpPqJWJey43001823() {     int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63849267 = -175506662;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50051911 = -153754338;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi77495808 = -106374132;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi61691911 = -349044777;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19028775 = -777515203;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8851269 = -571471639;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi73540806 = -744553109;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi52493479 = -893896609;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi51383442 = -166433201;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26291422 = -517649032;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53708008 = -982832768;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi93192561 = -249905600;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88672701 = -424520814;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95903101 = -587686113;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi10002919 = -34333269;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi80865280 = -506528336;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi43692231 = -248727258;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41833007 = -711644579;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi39941292 = -540984946;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi7937656 = -837726043;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64944018 = -198015359;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi4756115 = -807871004;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50518373 = -965314282;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91428607 = 72065473;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi29272643 = -564354116;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82528192 = -547048441;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi81182073 = -478405830;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19728904 = -57376020;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57246494 = -144607582;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63978616 = -140853242;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi15137223 = 85902418;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67731799 = 74850740;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33810046 = -743456884;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31788630 = -317456347;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78767878 = -780195279;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34966143 = -210405996;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi12877533 = -982736386;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64346923 = -710297042;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi46320250 = -463123380;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94923770 = -926090328;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91822653 = -195024664;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi30736301 = -962349738;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi47223618 = -272488119;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19175235 = -891311897;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57677697 = -800745254;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34336456 = -260335747;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33815496 = -180565530;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi98373938 = 38890324;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34214524 = -757650384;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88213637 = -753671340;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18302432 = -233154480;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18735202 = -897972954;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi54663285 = -801008342;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91893801 = 25957441;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78057805 = 86731725;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59093153 = -367635658;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi99533537 = -188440057;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi86067200 = -78439606;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi32419268 = -784690662;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi36500582 = -130466763;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi27669195 = 6934191;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53811902 = -587177090;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95246985 = -649289027;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi87404826 = 74420041;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi11154199 = -503551451;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85976208 = -957683508;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59382516 = -506448716;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi56884072 = -7064467;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi17135223 = -807490835;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi75036776 = -823927273;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67987747 = -523791951;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi79345307 = -538430217;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95512757 = -148521199;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45017522 = -614894619;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi16115002 = -542701379;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34207717 = -235665621;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57532496 = -435382886;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31343138 = 25997615;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33750911 = -127189273;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94936187 = -204018370;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi48712697 = -266482912;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82808135 = -417296154;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85514380 = -299725636;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi69032856 = -390936242;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45676185 = -907698763;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi96402020 = -16124628;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi13068514 = -124140919;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41916244 = -669414326;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53730825 = -304188073;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19674726 = -312559621;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35432605 = 78034060;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26810333 = -804296781;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31927656 = -925606381;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi9819668 = -232656618;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67254575 = -833024520;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi38010751 = -607847575;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35489315 = -213060711;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59818792 = -246908160;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8021037 = -287760447;    int ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi71701488 = -175506662;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63849267 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50051911;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50051911 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi77495808;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi77495808 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi61691911;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi61691911 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19028775;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19028775 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8851269;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8851269 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi73540806;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi73540806 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi52493479;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi52493479 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi51383442;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi51383442 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26291422;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26291422 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53708008;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53708008 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi93192561;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi93192561 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88672701;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88672701 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95903101;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95903101 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi10002919;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi10002919 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi80865280;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi80865280 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi43692231;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi43692231 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41833007;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41833007 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi39941292;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi39941292 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi7937656;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi7937656 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64944018;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64944018 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi4756115;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi4756115 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50518373;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi50518373 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91428607;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91428607 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi29272643;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi29272643 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82528192;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82528192 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi81182073;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi81182073 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19728904;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19728904 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57246494;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57246494 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63978616;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63978616 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi15137223;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi15137223 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67731799;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67731799 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33810046;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33810046 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31788630;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31788630 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78767878;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78767878 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34966143;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34966143 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi12877533;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi12877533 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64346923;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi64346923 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi46320250;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi46320250 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94923770;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94923770 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91822653;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91822653 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi30736301;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi30736301 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi47223618;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi47223618 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19175235;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19175235 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57677697;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57677697 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34336456;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34336456 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33815496;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33815496 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi98373938;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi98373938 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34214524;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34214524 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88213637;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi88213637 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18302432;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18302432 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18735202;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi18735202 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi54663285;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi54663285 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91893801;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi91893801 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78057805;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi78057805 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59093153;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59093153 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi99533537;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi99533537 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi86067200;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi86067200 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi32419268;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi32419268 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi36500582;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi36500582 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi27669195;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi27669195 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53811902;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53811902 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95246985;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95246985 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi87404826;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi87404826 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi11154199;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi11154199 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85976208;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85976208 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59382516;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59382516 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi56884072;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi56884072 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi17135223;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi17135223 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi75036776;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi75036776 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67987747;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67987747 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi79345307;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi79345307 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95512757;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi95512757 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45017522;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45017522 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi16115002;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi16115002 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34207717;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi34207717 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57532496;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi57532496 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31343138;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31343138 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33750911;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi33750911 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94936187;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi94936187 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi48712697;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi48712697 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82808135;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi82808135 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85514380;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi85514380 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi69032856;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi69032856 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45676185;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi45676185 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi96402020;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi96402020 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi13068514;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi13068514 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41916244;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi41916244 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53730825;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi53730825 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19674726;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi19674726 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35432605;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35432605 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26810333;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi26810333 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31927656;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi31927656 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi9819668;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi9819668 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67254575;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi67254575 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi38010751;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi38010751 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35489315;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi35489315 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59818792;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi59818792 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8021037;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi8021037 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi71701488;     ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi71701488 = ZneJhJluLdlGEAdwjwOGPQDglsvoMFlsiDupyDYi63849267;}
// Junk Finished
